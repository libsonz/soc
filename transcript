# Loading project work
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 10:25:16 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
# WARNING: No extended dataflow license exists
add wave -position insertpoint sim:/datapath_tb/*
quit -sim
# End time: 10:25:37 on May 16,2025, Elapsed time: 0:00:21
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 10:27:25 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
# WARNING: No extended dataflow license exists
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/a_bram_gen[3]/a_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# 
# ===================================================
# Break key hit
# Break in NamedBeginStat matrix_partition at /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v line 370
# Load canceled
quit -sim
# End time: 10:29:40 on May 16,2025, Elapsed time: 0:02:15
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 10:29:57 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint sim:/datapath_tb/matrix_partition/matrix_partition/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# Break key hit
# Break in NamedBeginStat matrix_partition at /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v line 370
quit -sim
# End time: 10:33:11 on May 16,2025, Elapsed time: 0:03:14
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 10:33:22 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint sim:/datapath_tb/matrix_partition/*
# ** UI-Msg: (vish-4014) No objects found matching '/datapath_tb/matrix_partition/*'.
add wave -position insertpoint sim:/datapath_tb/matrix_partition/matrix_partition/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# Break key hit
# Break key hit
# Break in NamedBeginStat matrix_partition at /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v line 368
quit -sim
# End time: 10:35:48 on May 16,2025, Elapsed time: 0:02:26
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 10:36:01 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
# WARNING: No extended dataflow license exists
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint sim:/datapath_tb/matrix_partition/matrix_partition/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @               20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @              355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @375000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @              665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual x, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @              836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @             1175000 Simulating controller signals to execute multiplication...
# @1195000: Starting input feeding sequence...
# @1195000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             1485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual x, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual x, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual x, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual x, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual x, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual x, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual x, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual x, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual x, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual x, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual x, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual x, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual x, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual x, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual x, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             1656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @             1995000 Simulating controller signals to execute multiplication...
# @2015000: Starting input feeding sequence...
# @2015000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             2305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 1, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual x, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual x, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual x, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual x, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual x, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual x, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual x, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual x, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual x, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual x, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual x, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual x, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual x, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual x, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual x, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             2476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @             2815000 Simulating controller signals to execute multiplication...
# @2835000: Starting input feeding sequence...
# @2835000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2846000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3125000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual x, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual x, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual x, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual x, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual x, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual x, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual x, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual x, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual x, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual x, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual x, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual x, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual x, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual x, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual x, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             3296000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @             3635000 Simulating controller signals to execute multiplication...
# @3655000: Starting input feeding sequence...
# @3655000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3666000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 1, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual x, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual x, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual x, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual x, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual x, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual x, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual x, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual x, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual x, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual x, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual x, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual x, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual x, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual x, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual x, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @             4455000 Simulating controller signals to execute multiplication...
# @4475000: Starting input feeding sequence...
# @4475000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             4765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 1, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual x, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual x, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual x, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual x, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual x, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual x, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual x, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual x, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual x, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual x, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual x, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual x, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual x, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual x, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual x, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @             5275000 Simulating controller signals to execute multiplication...
# @5295000: Starting input feeding sequence...
# @5295000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual x, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual x, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual x, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual x, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual x, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual x, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual x, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual x, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual x, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual x, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual x, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual x, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual x, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual x, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual x, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             5756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @             6095000 Simulating controller signals to execute multiplication...
# @6115000: Starting input feeding sequence...
# @6115000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6126000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             6405000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual x, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual x, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual x, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual x, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual x, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual x, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual x, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual x, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual x, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual x, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual x, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual x, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual x, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual x, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual x, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6576000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @             6915000 Simulating controller signals to execute multiplication...
# @6935000: Starting input feeding sequence...
# @6935000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6946000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             7225000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual x, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual x, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual x, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual x, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual x, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual x, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual x, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual x, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual x, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual x, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual x, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual x, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual x, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual x, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual x, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             7396000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @             7735000 Simulating controller signals to execute multiplication...
# @7755000: Starting input feeding sequence...
# @7755000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 1, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual x, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual x, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual x, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual x, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual x, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual x, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual x, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual x, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual x, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual x, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual x, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual x, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual x, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual x, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual x, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             8216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @             8555000 Simulating controller signals to execute multiplication...
# @8575000: Starting input feeding sequence...
# @8575000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 1, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual x, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual x, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual x, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual x, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual x, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual x, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual x, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual x, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual x, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual x, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual x, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual x, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual x, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual x, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual x, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @             9375000 Simulating controller signals to execute multiplication...
# @9395000: Starting input feeding sequence...
# @9395000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             9685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual x, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual x, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual x, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual x, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual x, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual x, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual x, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual x, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual x, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual x, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual x, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual x, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual x, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual x, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual x, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9856000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @            10195000 Simulating controller signals to execute multiplication...
# @10215000: Starting input feeding sequence...
# @10215000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10226000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            10505000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual x, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual x, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual x, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual x, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual x, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual x, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual x, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual x, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual x, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual x, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual x, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual x, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual x, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual x, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual x, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            10676000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @            11015000 Simulating controller signals to execute multiplication...
# @11035000: Starting input feeding sequence...
# @11035000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual x, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual x, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual x, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual x, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual x, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual x, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual x, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual x, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual x, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual x, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual x, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual x, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual x, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual x, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual x, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            11496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @            11835000 Simulating controller signals to execute multiplication...
# @11855000: Starting input feeding sequence...
# @11855000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual x, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual x, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual x, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual x, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual x, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual x, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual x, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual x, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual x, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual x, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual x, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual x, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual x, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual x, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual x, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @            12655000 Simulating controller signals to execute multiplication...
# @12675000: Starting input feeding sequence...
# @12675000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual 1, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual x, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual x, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual x, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual x, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual x, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual x, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual x, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual x, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual x, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual x, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual x, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual x, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual x, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual x, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual x, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 1, Addr 0) with 0cc3
#   Loading A[0][2] (Bank 2, Addr 0) with 2d23
#   Loading A[0][3] (Bank 3, Addr 0) with c654
#   Loading A[1][0] (Bank 0, Addr 1) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 2, Addr 1) with e87e
#   Loading A[1][3] (Bank 3, Addr 1) with 6d0d
#   Loading A[2][0] (Bank 0, Addr 2) with a8cf
#   Loading A[2][1] (Bank 1, Addr 2) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 3, Addr 2) with f0ac
#   Loading A[3][0] (Bank 0, Addr 3) with a4d5
#   Loading A[3][1] (Bank 1, Addr 3) with 337b
#   Loading A[3][2] (Bank 2, Addr 3) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @            13475000 Simulating controller signals to execute multiplication...
# @13495000: Starting input feeding sequence...
# @13495000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13506000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            13785000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual 1, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual x, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual x, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual x, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual x, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual x, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual x, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual x, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual x, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual x, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual x, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual x, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual x, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual x, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual x, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual x, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13956000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 1, Addr 0) with 33ae
#   Loading A[0][2] (Bank 2, Addr 0) with 1949
#   Loading A[0][3] (Bank 3, Addr 0) with c2ac
#   Loading A[1][0] (Bank 0, Addr 1) with 74ca
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 2, Addr 1) with 5b33
#   Loading A[1][3] (Bank 3, Addr 1) with 086c
#   Loading A[2][0] (Bank 0, Addr 2) with 1549
#   Loading A[2][1] (Bank 1, Addr 2) with 602f
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 3, Addr 2) with bc83
#   Loading A[3][0] (Bank 0, Addr 3) with a3b9
#   Loading A[3][1] (Bank 1, Addr 3) with bfbe
#   Loading A[3][2] (Bank 2, Addr 3) with 0884
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[0][1] (Bank 1, Addr 0) with 4904
#   Loading B[0][2] (Bank 2, Addr 0) with 8a0c
#   Loading B[0][3] (Bank 3, Addr 0) with b0ba
#   Loading B[1][0] (Bank 0, Addr 1) with 4193
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[1][2] (Bank 2, Addr 1) with b102
#   Loading B[1][3] (Bank 3, Addr 1) with 0e75
#   Loading B[2][0] (Bank 0, Addr 2) with c8a1
#   Loading B[2][1] (Bank 1, Addr 2) with b09f
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[2][3] (Bank 3, Addr 2) with 4b2b
#   Loading B[3][0] (Bank 0, Addr 3) with b8e2
#   Loading B[3][1] (Bank 1, Addr 3) with a481
#   Loading B[3][2] (Bank 2, Addr 3) with 2498
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @            14295000 Simulating controller signals to execute multiplication...
# @14315000: Starting input feeding sequence...
# @14315000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            14605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual 0, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual x, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual x, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual x, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual x, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual x, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual x, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual x, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual x, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual x, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual x, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual x, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual x, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual x, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual x, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual x, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            14776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 1, Addr 0) with 4374
#   Loading A[0][2] (Bank 2, Addr 0) with d8de
#   Loading A[0][3] (Bank 3, Addr 0) with 0bcd
#   Loading A[1][0] (Bank 0, Addr 1) with ebff
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 2, Addr 1) with 5315
#   Loading A[1][3] (Bank 3, Addr 1) with 377a
#   Loading A[2][0] (Bank 0, Addr 2) with 881b
#   Loading A[2][1] (Bank 1, Addr 2) with 3ecf
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 3, Addr 2) with 5223
#   Loading A[3][0] (Bank 0, Addr 3) with 87cd
#   Loading A[3][1] (Bank 1, Addr 3) with 2a6f
#   Loading A[3][2] (Bank 2, Addr 3) with c889
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[0][1] (Bank 1, Addr 0) with 00f3
#   Loading B[0][2] (Bank 2, Addr 0) with a35c
#   Loading B[0][3] (Bank 3, Addr 0) with aa65
#   Loading B[1][0] (Bank 0, Addr 1) with 222b
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[1][2] (Bank 2, Addr 1) with da28
#   Loading B[1][3] (Bank 3, Addr 1) with eaa8
#   Loading B[2][0] (Bank 0, Addr 2) with ff56
#   Loading B[2][1] (Bank 1, Addr 2) with 6ba0
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[2][3] (Bank 3, Addr 2) with 90d1
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc4
#   Loading B[3][1] (Bank 1, Addr 3) with 671c
#   Loading B[3][2] (Bank 2, Addr 3) with ba64
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @            15115000 Simulating controller signals to execute multiplication...
# @15135000: Starting input feeding sequence...
# @15135000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            15425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual 1, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual x, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual x, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual x, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual x, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual x, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual x, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual x, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual x, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual x, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual x, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual x, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual x, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual x, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual x, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual x, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            15596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 1, Addr 0) with e7d1
#   Loading A[0][2] (Bank 2, Addr 0) with 03a8
#   Loading A[0][3] (Bank 3, Addr 0) with 97d0
#   Loading A[1][0] (Bank 0, Addr 1) with 9a37
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 2, Addr 1) with cb14
#   Loading A[1][3] (Bank 3, Addr 1) with 916b
#   Loading A[2][0] (Bank 0, Addr 2) with 3e85
#   Loading A[2][1] (Bank 1, Addr 2) with 83c8
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 3, Addr 2) with ead0
#   Loading A[3][0] (Bank 0, Addr 3) with ac60
#   Loading A[3][1] (Bank 1, Addr 3) with 5c5f
#   Loading A[3][2] (Bank 2, Addr 3) with 3852
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[0][1] (Bank 1, Addr 0) with ad8e
#   Loading B[0][2] (Bank 2, Addr 0) with 9a34
#   Loading B[0][3] (Bank 3, Addr 0) with 7f8e
#   Loading B[1][0] (Bank 0, Addr 1) with 5d1a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[1][2] (Bank 2, Addr 1) with 9ffd
#   Loading B[1][3] (Bank 3, Addr 1) with 6841
#   Loading B[2][0] (Bank 0, Addr 2) with 3375
#   Loading B[2][1] (Bank 1, Addr 2) with 6107
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[2][3] (Bank 3, Addr 2) with 6583
#   Loading B[3][0] (Bank 0, Addr 3) with db9d
#   Loading B[3][1] (Bank 1, Addr 3) with 492a
#   Loading B[3][2] (Bank 2, Addr 3) with 66cd
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @            15935000 Simulating controller signals to execute multiplication...
# @15955000: Starting input feeding sequence...
# @15955000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            16245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual 0, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual x, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual x, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual x, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual x, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual x, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual x, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual x, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual x, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual x, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual x, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual x, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual x, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual x, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual x, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual x, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            16416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 1, Addr 0) with 3fa9
#   Loading A[0][2] (Bank 2, Addr 0) with 6ddd
#   Loading A[0][3] (Bank 3, Addr 0) with d7cf
#   Loading A[1][0] (Bank 0, Addr 1) with 6b9d
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 2, Addr 1) with aafa
#   Loading A[1][3] (Bank 3, Addr 1) with d2a3
#   Loading A[2][0] (Bank 0, Addr 2) with 8dec
#   Loading A[2][1] (Bank 1, Addr 2) with e147
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 3, Addr 2) with 1b9c
#   Loading A[3][0] (Bank 0, Addr 3) with 3fce
#   Loading A[3][1] (Bank 1, Addr 3) with 23f2
#   Loading A[3][2] (Bank 2, Addr 3) with 7c98
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[0][1] (Bank 1, Addr 0) with 08ee
#   Loading B[0][2] (Bank 2, Addr 0) with 33d2
#   Loading B[0][3] (Bank 3, Addr 0) with 6b1f
#   Loading B[1][0] (Bank 0, Addr 1) with 1532
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[1][2] (Bank 2, Addr 1) with b4e2
#   Loading B[1][3] (Bank 3, Addr 1) with 4267
#   Loading B[2][0] (Bank 0, Addr 2) with 9a2e
#   Loading B[2][1] (Bank 1, Addr 2) with 67b5
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 197e
#   Loading B[3][0] (Bank 0, Addr 3) with 72d3
#   Loading B[3][1] (Bank 1, Addr 3) with 030b
#   Loading B[3][2] (Bank 2, Addr 3) with 9c52
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @            16755000 Simulating controller signals to execute multiplication...
# @16775000: Starting input feeding sequence...
# @16775000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual 1, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual x, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual x, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual x, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual x, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual x, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual x, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual x, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual x, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual x, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual x, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual x, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual x, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual x, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual x, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual x, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            17236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 1, Addr 0) with 7631
#   Loading A[0][2] (Bank 2, Addr 0) with 08e8
#   Loading A[0][3] (Bank 3, Addr 0) with d98c
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 2, Addr 1) with 0b94
#   Loading A[1][3] (Bank 3, Addr 1) with a1d8
#   Loading A[2][0] (Bank 0, Addr 2) with be24
#   Loading A[2][1] (Bank 1, Addr 2) with 3dab
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 3, Addr 2) with b4a5
#   Loading A[3][0] (Bank 0, Addr 3) with 766e
#   Loading A[3][1] (Bank 1, Addr 3) with 5e6d
#   Loading A[3][2] (Bank 2, Addr 3) with bd75
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[0][1] (Bank 1, Addr 0) with 536a
#   Loading B[0][2] (Bank 2, Addr 0) with 8a59
#   Loading B[0][3] (Bank 3, Addr 0) with 3372
#   Loading B[1][0] (Bank 0, Addr 1) with ccbb
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[1][2] (Bank 2, Addr 1) with 5dd6
#   Loading B[1][3] (Bank 3, Addr 1) with 9215
#   Loading B[2][0] (Bank 0, Addr 2) with 56b7
#   Loading B[2][1] (Bank 1, Addr 2) with f0d1
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 21d0
#   Loading B[3][0] (Bank 0, Addr 3) with 11fc
#   Loading B[3][1] (Bank 1, Addr 3) with 1be3
#   Loading B[3][2] (Bank 2, Addr 3) with 54d6
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @            17575000 Simulating controller signals to execute multiplication...
# @17595000: Starting input feeding sequence...
# @17595000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual 0, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual x, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual x, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual x, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual x, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual x, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual x, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual x, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual x, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual x, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual x, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual x, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual x, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual x, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual x, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual x, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 1, Addr 0) with 1713
#   Loading A[0][2] (Bank 2, Addr 0) with fc9d
#   Loading A[0][3] (Bank 3, Addr 0) with d833
#   Loading A[1][0] (Bank 0, Addr 1) with 893b
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 2, Addr 1) with a562
#   Loading A[1][3] (Bank 3, Addr 1) with 4ca0
#   Loading A[2][0] (Bank 0, Addr 2) with 192d
#   Loading A[2][1] (Bank 1, Addr 2) with 4bfa
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 3, Addr 2) with 295a
#   Loading A[3][0] (Bank 0, Addr 3) with 783f
#   Loading A[3][1] (Bank 1, Addr 3) with 025b
#   Loading A[3][2] (Bank 2, Addr 3) with 5e47
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[0][1] (Bank 1, Addr 0) with f807
#   Loading B[0][2] (Bank 2, Addr 0) with 18a0
#   Loading B[0][3] (Bank 3, Addr 0) with c97d
#   Loading B[1][0] (Bank 0, Addr 1) with d1a4
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[1][2] (Bank 2, Addr 1) with b713
#   Loading B[1][3] (Bank 3, Addr 1) with e42e
#   Loading B[2][0] (Bank 0, Addr 2) with cd53
#   Loading B[2][1] (Bank 1, Addr 2) with 0a61
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[2][3] (Bank 3, Addr 2) with cd4b
#   Loading B[3][0] (Bank 0, Addr 3) with 1489
#   Loading B[3][1] (Bank 1, Addr 3) with 7ec8
#   Loading B[3][2] (Bank 2, Addr 3) with d878
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @            18395000 Simulating controller signals to execute multiplication...
# @18415000: Starting input feeding sequence...
# @18415000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            18705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual 0, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual x, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual x, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual x, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual x, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual x, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual x, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual x, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual x, Expected 16bea50ee
# Test Case 22 FAIL: C[2][1] mismatch! Actual x, Expected 1b4a3f648
# Test Case 22 FAIL: C[2][2] mismatch! Actual x, Expected 17ed8a09a
# Test Case 22 FAIL: C[2][3] mismatch! Actual x, Expected 227590bcd
# Test Case 22 FAIL: C[3][0] mismatch! Actual x, Expected 0906811ac
# Test Case 22 FAIL: C[3][1] mismatch! Actual x, Expected 127c3c8ff
# Test Case 22 FAIL: C[3][2] mismatch! Actual x, Expected 08f952008
# Test Case 22 FAIL: C[3][3] mismatch! Actual x, Expected 1206c5ac1
# Test Case 22 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 23 of 100
# ===================================================
# Reading test case 23:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9208
#   Loading A[0][1] (Bank 1, Addr 0) with 8d91
#   Loading A[0][2] (Bank 2, Addr 0) with 0f91
#   Loading A[0][3] (Bank 3, Addr 0) with 4324
#   Loading A[1][0] (Bank 0, Addr 1) with 1893
#   Loading A[1][1] (Bank 1, Addr 1) with e01e
#   Loading A[1][2] (Bank 2, Addr 1) with 7421
#   Loading A[1][3] (Bank 3, Addr 1) with 0c24
#   Loading A[2][0] (Bank 0, Addr 2) with 68d0
#   Loading A[2][1] (Bank 1, Addr 2) with ec47
#   Loading A[2][2] (Bank 2, Addr 2) with 6ef2
#   Loading A[2][3] (Bank 3, Addr 2) with 26a8
#   Loading A[3][0] (Bank 0, Addr 3) with 5427
#   Loading A[3][1] (Bank 1, Addr 3) with b764
#   Loading A[3][2] (Bank 2, Addr 3) with bc95
#   Loading A[3][3] (Bank 3, Addr 3) with 5dea
#   Loading B[0][0] (Bank 0, Addr 0) with 128b
#   Loading B[0][1] (Bank 1, Addr 0) with eb07
#   Loading B[0][2] (Bank 2, Addr 0) with ba48
#   Loading B[0][3] (Bank 3, Addr 0) with 9e00
#   Loading B[1][0] (Bank 0, Addr 1) with efbc
#   Loading B[1][1] (Bank 1, Addr 1) with db1c
#   Loading B[1][2] (Bank 2, Addr 1) with 7aba
#   Loading B[1][3] (Bank 3, Addr 1) with 1968
#   Loading B[2][0] (Bank 0, Addr 2) with d9d0
#   Loading B[2][1] (Bank 1, Addr 2) with 7a26
#   Loading B[2][2] (Bank 2, Addr 2) with 39df
#   Loading B[2][3] (Bank 3, Addr 2) with 6ed6
#   Loading B[3][0] (Bank 0, Addr 3) with b124
#   Loading B[3][1] (Bank 1, Addr 3) with cd33
#   Loading B[3][2] (Bank 2, Addr 3) with 6a50
#   Loading B[3][3] (Bank 3, Addr 3) with 0583
# Matrix loading complete.
# @            19215000 Simulating controller signals to execute multiplication...
# @19235000: Starting input feeding sequence...
# @19235000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            19525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 23...
# Test Case 23 FAIL: C[0][0] mismatch! Actual 0, Expected 0b4ff68c8
# Test Case 23 FAIL: C[0][1] mismatch! Actual x, Expected 1109074f1
# Test Case 23 FAIL: C[0][2] mismatch! Actual x, Expected 0b0aeda6e
# Test Case 23 FAIL: C[0][3] mismatch! Actual x, Expected 08bc2178d
# Test Case 23 FAIL: C[1][0] mismatch! Actual x, Expected 2240fbe83
# Test Case 23 FAIL: C[1][1] mismatch! Actual x, Expected 24586acb5
# Test Case 23 FAIL: C[1][2] mismatch! Actual x, Expected 15406a4ad
# Test Case 23 FAIL: C[1][3] mismatch! Actual x, Expected 0d7dc49b6
# Test Case 23 FAIL: C[2][0] mismatch! Actual x, Expected 14ec38d8b
# Test Case 23 FAIL: C[2][1] mismatch! Actual x, Expected 13dc8252e
# Test Case 23 FAIL: C[2][2] mismatch! Actual x, Expected 0aa64fc20
# Test Case 23 FAIL: C[2][3] mismatch! Actual x, Expected 0493a07f3
# Test Case 23 FAIL: C[3][0] mismatch! Actual x, Expected 0721b5264
# Test Case 23 FAIL: C[3][1] mismatch! Actual x, Expected 0a5c0e67a
# Test Case 23 FAIL: C[3][2] mismatch! Actual x, Expected 0666a55c0
# Test Case 23 FAIL: C[3][3] mismatch! Actual x, Expected 03d66cbce
# Test Case 23 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 24 of 100
# ===================================================
# Reading test case 24:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            19696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0891
#   Loading A[0][1] (Bank 1, Addr 0) with 3d27
#   Loading A[0][2] (Bank 2, Addr 0) with d5c0
#   Loading A[0][3] (Bank 3, Addr 0) with 7093
#   Loading A[1][0] (Bank 0, Addr 1) with c03d
#   Loading A[1][1] (Bank 1, Addr 1) with bbba
#   Loading A[1][2] (Bank 2, Addr 1) with e629
#   Loading A[1][3] (Bank 3, Addr 1) with a341
#   Loading A[2][0] (Bank 0, Addr 2) with a224
#   Loading A[2][1] (Bank 1, Addr 2) with b475
#   Loading A[2][2] (Bank 2, Addr 2) with 71ee
#   Loading A[2][3] (Bank 3, Addr 2) with cd06
#   Loading A[3][0] (Bank 0, Addr 3) with c965
#   Loading A[3][1] (Bank 1, Addr 3) with 0efe
#   Loading A[3][2] (Bank 2, Addr 3) with e79e
#   Loading A[3][3] (Bank 3, Addr 3) with d9c1
#   Loading B[0][0] (Bank 0, Addr 0) with b3fa
#   Loading B[0][1] (Bank 1, Addr 0) with 3827
#   Loading B[0][2] (Bank 2, Addr 0) with 9810
#   Loading B[0][3] (Bank 3, Addr 0) with 97ce
#   Loading B[1][0] (Bank 0, Addr 1) with ffef
#   Loading B[1][1] (Bank 1, Addr 1) with dc10
#   Loading B[1][2] (Bank 2, Addr 1) with 923e
#   Loading B[1][3] (Bank 3, Addr 1) with 3828
#   Loading B[2][0] (Bank 0, Addr 2) with a1be
#   Loading B[2][1] (Bank 1, Addr 2) with 17d2
#   Loading B[2][2] (Bank 2, Addr 2) with 81fb
#   Loading B[2][3] (Bank 3, Addr 2) with 4261
#   Loading B[3][0] (Bank 0, Addr 3) with 41fd
#   Loading B[3][1] (Bank 1, Addr 3) with 200a
#   Loading B[3][2] (Bank 2, Addr 3) with bc64
#   Loading B[3][3] (Bank 3, Addr 3) with c89a
# Matrix loading complete.
# @            20035000 Simulating controller signals to execute multiplication...
# @20055000: Starting input feeding sequence...
# @20055000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            20345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 24...
# Test Case 24 FAIL: C[0][0] mismatch! Actual 1, Expected 16090a516
# Test Case 24 FAIL: C[0][1] mismatch! Actual x, Expected 0cf6c3161
# Test Case 24 FAIL: C[0][2] mismatch! Actual x, Expected 1596fee96
# Test Case 24 FAIL: C[0][3] mismatch! Actual x, Expected 0f71a939c
# Test Case 24 FAIL: C[1][0] mismatch! Actual x, Expected 15c8c5898
# Test Case 24 FAIL: C[1][1] mismatch! Actual x, Expected 0c1744d77
# Test Case 24 FAIL: C[1][2] mismatch! Actual x, Expected 0f638cc6b
# Test Case 24 FAIL: C[1][3] mismatch! Actual x, Expected 087fb3a93
# Test Case 24 FAIL: C[2][0] mismatch! Actual x, Expected 2000ef691
# Test Case 24 FAIL: C[2][1] mismatch! Actual x, Expected 11c52d238
# Test Case 24 FAIL: C[2][2] mismatch! Actual x, Expected 1e6bda000
# Test Case 24 FAIL: C[2][3] mismatch! Actual x, Expected 184467b22
# Test Case 24 FAIL: C[3][0] mismatch! Actual x, Expected 1ac05066e
# Test Case 24 FAIL: C[3][1] mismatch! Actual x, Expected 0d35bb8eb
# Test Case 24 FAIL: C[3][2] mismatch! Actual x, Expected 1a878c334
# Test Case 24 FAIL: C[3][3] mismatch! Actual x, Expected 1465c06d2
# Test Case 24 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 25 of 100
# ===================================================
# Reading test case 25:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            20516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d286
#   Loading A[0][1] (Bank 1, Addr 0) with 4abb
#   Loading A[0][2] (Bank 2, Addr 0) with 7dc0
#   Loading A[0][3] (Bank 3, Addr 0) with bdd5
#   Loading A[1][0] (Bank 0, Addr 1) with 6b83
#   Loading A[1][1] (Bank 1, Addr 1) with 0021
#   Loading A[1][2] (Bank 2, Addr 1) with 60e7
#   Loading A[1][3] (Bank 3, Addr 1) with 9c2b
#   Loading A[2][0] (Bank 0, Addr 2) with 50a4
#   Loading A[2][1] (Bank 1, Addr 2) with fed1
#   Loading A[2][2] (Bank 2, Addr 2) with c6a9
#   Loading A[2][3] (Bank 3, Addr 2) with 5739
#   Loading A[3][0] (Bank 0, Addr 3) with bef9
#   Loading A[3][1] (Bank 1, Addr 3) with b753
#   Loading A[3][2] (Bank 2, Addr 3) with a8ee
#   Loading A[3][3] (Bank 3, Addr 3) with a16b
#   Loading B[0][0] (Bank 0, Addr 0) with 704d
#   Loading B[0][1] (Bank 1, Addr 0) with 8ab4
#   Loading B[0][2] (Bank 2, Addr 0) with 1bfa
#   Loading B[0][3] (Bank 3, Addr 0) with 354a
#   Loading B[1][0] (Bank 0, Addr 1) with 78c2
#   Loading B[1][1] (Bank 1, Addr 1) with 376c
#   Loading B[1][2] (Bank 2, Addr 1) with ced8
#   Loading B[1][3] (Bank 3, Addr 1) with 78de
#   Loading B[2][0] (Bank 0, Addr 2) with d2b2
#   Loading B[2][1] (Bank 1, Addr 2) with c525
#   Loading B[2][2] (Bank 2, Addr 2) with 038b
#   Loading B[2][3] (Bank 3, Addr 2) with 6129
#   Loading B[3][0] (Bank 0, Addr 3) with 03d4
#   Loading B[3][1] (Bank 1, Addr 3) with 6cff
#   Loading B[3][2] (Bank 2, Addr 3) with 63f3
#   Loading B[3][3] (Bank 3, Addr 3) with 1a9d
# Matrix loading complete.
# @            20855000 Simulating controller signals to execute multiplication...
# @20875000: Starting input feeding sequence...
# @20875000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 25...
# Test Case 25 FAIL: C[0][0] mismatch! Actual 0, Expected 0d44a7ed0
# Test Case 25 FAIL: C[0][1] mismatch! Actual x, Expected 118bfe437
# Test Case 25 FAIL: C[0][2] mismatch! Actual x, Expected 0b98d1fcb
# Test Case 25 FAIL: C[0][3] mismatch! Actual x, Expected 0910ab34f
# Test Case 25 FAIL: C[1][0] mismatch! Actual x, Expected 0f54e444f
# Test Case 25 FAIL: C[1][1] mismatch! Actual x, Expected 13acdc74a
# Test Case 25 FAIL: C[1][2] mismatch! Actual x, Expected 0535f48ba
# Test Case 25 FAIL: C[1][3] mismatch! Actual x, Expected 08362c20c
# Test Case 25 FAIL: C[2][0] mismatch! Actual x, Expected 10ae6fc68
# Test Case 25 FAIL: C[2][1] mismatch! Actual x, Expected 13a05ddf3
# Test Case 25 FAIL: C[2][2] mismatch! Actual x, Expected 0a0bdef15
# Test Case 25 FAIL: C[2][3] mismatch! Actual x, Expected 0a4e309d9
# Test Case 25 FAIL: C[3][0] mismatch! Actual x, Expected 0e7241ee5
# Test Case 25 FAIL: C[3][1] mismatch! Actual x, Expected 1108ed0ba
# Test Case 25 FAIL: C[3][2] mismatch! Actual x, Expected 0d327d7ce
# Test Case 25 FAIL: C[3][3] mismatch! Actual x, Expected 0a321fb9c
# Test Case 25 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 26 of 100
# ===================================================
# Reading test case 26:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            21336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4b67
#   Loading A[0][1] (Bank 1, Addr 0) with fb4b
#   Loading A[0][2] (Bank 2, Addr 0) with 6f40
#   Loading A[0][3] (Bank 3, Addr 0) with ce69
#   Loading A[1][0] (Bank 0, Addr 1) with edf7
#   Loading A[1][1] (Bank 1, Addr 1) with c739
#   Loading A[1][2] (Bank 2, Addr 1) with 656e
#   Loading A[1][3] (Bank 3, Addr 1) with 5112
#   Loading A[2][0] (Bank 0, Addr 2) with c431
#   Loading A[2][1] (Bank 1, Addr 2) with e51a
#   Loading A[2][2] (Bank 2, Addr 2) with 6f39
#   Loading A[2][3] (Bank 3, Addr 2) with 8c92
#   Loading A[3][0] (Bank 0, Addr 3) with 0830
#   Loading A[3][1] (Bank 1, Addr 3) with a15d
#   Loading A[3][2] (Bank 2, Addr 3) with 6583
#   Loading A[3][3] (Bank 3, Addr 3) with a0c0
#   Loading B[0][0] (Bank 0, Addr 0) with 93d8
#   Loading B[0][1] (Bank 1, Addr 0) with a69c
#   Loading B[0][2] (Bank 2, Addr 0) with 0fef
#   Loading B[0][3] (Bank 3, Addr 0) with ab35
#   Loading B[1][0] (Bank 0, Addr 1) with ba68
#   Loading B[1][1] (Bank 1, Addr 1) with 5ccb
#   Loading B[1][2] (Bank 2, Addr 1) with 4394
#   Loading B[1][3] (Bank 3, Addr 1) with a636
#   Loading B[2][0] (Bank 0, Addr 2) with bffa
#   Loading B[2][1] (Bank 1, Addr 2) with ecfd
#   Loading B[2][2] (Bank 2, Addr 2) with c7b5
#   Loading B[2][3] (Bank 3, Addr 2) with 366f
#   Loading B[3][0] (Bank 0, Addr 3) with e942
#   Loading B[3][1] (Bank 1, Addr 3) with e35f
#   Loading B[3][2] (Bank 2, Addr 3) with dcd0
#   Loading B[3][3] (Bank 3, Addr 3) with 251d
# Matrix loading complete.
# @            21675000 Simulating controller signals to execute multiplication...
# @21695000: Starting input feeding sequence...
# @21695000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21706000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21985000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 26...
# Test Case 26 FAIL: C[0][0] mismatch! Actual 1, Expected 17367d97a
# Test Case 26 FAIL: C[0][1] mismatch! Actual x, Expected 14438ddde
# Test Case 26 FAIL: C[0][2] mismatch! Actual x, Expected 0e39f5a9a
# Test Case 26 FAIL: C[0][3] mismatch! Actual x, Expected 0f7d50a1c
# Test Case 26 FAIL: C[1][0] mismatch! Actual x, Expected 26105d1ce
# Test Case 26 FAIL: C[1][1] mismatch! Actual x, Expected 24f29f51c
# Test Case 26 FAIL: C[1][2] mismatch! Actual x, Expected 1822350eb
# Test Case 26 FAIL: C[1][3] mismatch! Actual x, Expected 17183a65c
# Test Case 26 FAIL: C[2][0] mismatch! Actual x, Expected 13a014a20
# Test Case 26 FAIL: C[2][1] mismatch! Actual x, Expected 12e4a8d2c
# Test Case 26 FAIL: C[2][2] mismatch! Actual x, Expected 0d0060b15
# Test Case 26 FAIL: C[2][3] mismatch! Actual x, Expected 0b29f3002
# Test Case 26 FAIL: C[3][0] mismatch! Actual x, Expected 1ae1edcfc
# Test Case 26 FAIL: C[3][1] mismatch! Actual x, Expected 1b4a00acc
# Test Case 26 FAIL: C[3][2] mismatch! Actual x, Expected 11a8feca9
# Test Case 26 FAIL: C[3][3] mismatch! Actual x, Expected 0f3df5997
# Test Case 26 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 27 of 100
# ===================================================
# Reading test case 27:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            22156000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ea13
#   Loading A[0][1] (Bank 1, Addr 0) with a7a7
#   Loading A[0][2] (Bank 2, Addr 0) with 6691
#   Loading A[0][3] (Bank 3, Addr 0) with ff78
#   Loading A[1][0] (Bank 0, Addr 1) with f2c9
#   Loading A[1][1] (Bank 1, Addr 1) with f549
#   Loading A[1][2] (Bank 2, Addr 1) with b522
#   Loading A[1][3] (Bank 3, Addr 1) with c682
#   Loading A[2][0] (Bank 0, Addr 2) with a606
#   Loading A[2][1] (Bank 1, Addr 2) with ec08
#   Loading A[2][2] (Bank 2, Addr 2) with de49
#   Loading A[2][3] (Bank 3, Addr 2) with 68b2
#   Loading A[3][0] (Bank 0, Addr 3) with fa15
#   Loading A[3][1] (Bank 1, Addr 3) with 89a7
#   Loading A[3][2] (Bank 2, Addr 3) with 0e94
#   Loading A[3][3] (Bank 3, Addr 3) with 13e4
#   Loading B[0][0] (Bank 0, Addr 0) with fb22
#   Loading B[0][1] (Bank 1, Addr 0) with 6717
#   Loading B[0][2] (Bank 2, Addr 0) with 8224
#   Loading B[0][3] (Bank 3, Addr 0) with 3ac7
#   Loading B[1][0] (Bank 0, Addr 1) with 5c4a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ea
#   Loading B[1][2] (Bank 2, Addr 1) with db47
#   Loading B[1][3] (Bank 3, Addr 1) with 9839
#   Loading B[2][0] (Bank 0, Addr 2) with 3353
#   Loading B[2][1] (Bank 1, Addr 2) with 7950
#   Loading B[2][2] (Bank 2, Addr 2) with f60f
#   Loading B[2][3] (Bank 3, Addr 2) with 5d81
#   Loading B[3][0] (Bank 0, Addr 3) with bee6
#   Loading B[3][1] (Bank 1, Addr 3) with ba4b
#   Loading B[3][2] (Bank 2, Addr 3) with 23da
#   Loading B[3][3] (Bank 3, Addr 3) with 3efe
# Matrix loading complete.
# @            22495000 Simulating controller signals to execute multiplication...
# @22515000: Starting input feeding sequence...
# @22515000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @22526000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            22805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 27...
# Test Case 27 FAIL: C[0][0] mismatch! Actual 0, Expected 218eb6c70
# Test Case 27 FAIL: C[0][1] mismatch! Actual x, Expected 1c2a05a76
# Test Case 27 FAIL: C[0][2] mismatch! Actual x, Expected 2098d2ca7
# Test Case 27 FAIL: C[0][3] mismatch! Actual x, Expected 14048b762
# Test Case 27 FAIL: C[1][0] mismatch! Actual x, Expected 192dbe0ea
# Test Case 27 FAIL: C[1][1] mismatch! Actual x, Expected 178392e28
# Test Case 27 FAIL: C[1][2] mismatch! Actual x, Expected 21d786d69
# Test Case 27 FAIL: C[1][3] mismatch! Actual x, Expected 1306cfbcc
# Test Case 27 FAIL: C[2][0] mismatch! Actual x, Expected 0dd59ebb9
# Test Case 27 FAIL: C[2][1] mismatch! Actual x, Expected 0e4a62c47
restart -f
# ** Note: (vsim-12125) Error and warning message counts have been reset to '0' because of 'restart'.
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint {sim:/datapath_tb/uut/pe_row_gen[3]/pe_col_gen[3]/pe_inst/*}
add wave -position insertpoint sim:/datapath_tb/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @               20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @              355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @375000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @              665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual x, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @              836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @             1175000 Simulating controller signals to execute multiplication...
# @1195000: Starting input feeding sequence...
# @1195000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             1485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual x, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual x, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual x, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual x, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual x, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual x, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual x, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual x, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual x, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual x, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual x, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual x, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual x, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual x, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual x, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             1656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @             1995000 Simulating controller signals to execute multiplication...
# @2015000: Starting input feeding sequence...
# @2015000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             2305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 1, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual x, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual x, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual x, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual x, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual x, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual x, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual x, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual x, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual x, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual x, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual x, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual x, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual x, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual x, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual x, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             2476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @             2815000 Simulating controller signals to execute multiplication...
# @2835000: Starting input feeding sequence...
# @2835000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2846000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3125000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual x, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual x, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual x, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual x, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual x, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual x, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual x, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual x, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual x, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual x, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual x, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual x, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual x, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual x, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual x, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             3296000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @             3635000 Simulating controller signals to execute multiplication...
# @3655000: Starting input feeding sequence...
# @3655000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3666000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 1, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual x, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual x, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual x, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual x, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual x, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual x, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual x, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual x, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual x, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual x, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual x, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual x, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual x, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual x, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual x, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @             4455000 Simulating controller signals to execute multiplication...
# @4475000: Starting input feeding sequence...
# @4475000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             4765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 1, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual x, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual x, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual x, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual x, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual x, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual x, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual x, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual x, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual x, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual x, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual x, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual x, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual x, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual x, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual x, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @             5275000 Simulating controller signals to execute multiplication...
# @5295000: Starting input feeding sequence...
# @5295000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual x, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual x, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual x, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual x, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual x, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual x, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual x, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual x, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual x, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual x, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual x, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual x, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual x, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual x, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual x, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             5756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @             6095000 Simulating controller signals to execute multiplication...
# @6115000: Starting input feeding sequence...
# @6115000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6126000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             6405000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual x, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual x, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual x, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual x, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual x, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual x, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual x, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual x, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual x, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual x, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual x, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual x, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual x, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual x, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual x, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6576000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @             6915000 Simulating controller signals to execute multiplication...
# @6935000: Starting input feeding sequence...
# @6935000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6946000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             7225000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual x, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual x, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual x, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual x, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual x, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual x, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual x, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual x, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual x, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual x, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual x, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual x, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual x, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual x, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual x, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             7396000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @             7735000 Simulating controller signals to execute multiplication...
# @7755000: Starting input feeding sequence...
# @7755000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 1, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual x, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual x, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual x, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual x, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual x, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual x, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual x, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual x, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual x, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual x, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual x, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual x, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual x, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual x, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual x, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             8216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @             8555000 Simulating controller signals to execute multiplication...
# @8575000: Starting input feeding sequence...
# @8575000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 1, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual x, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual x, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual x, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual x, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual x, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual x, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual x, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual x, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual x, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual x, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual x, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual x, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual x, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual x, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual x, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @             9375000 Simulating controller signals to execute multiplication...
# @9395000: Starting input feeding sequence...
# @9395000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             9685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual x, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual x, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual x, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual x, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual x, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual x, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual x, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual x, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual x, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual x, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual x, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual x, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual x, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual x, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual x, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9856000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @            10195000 Simulating controller signals to execute multiplication...
# @10215000: Starting input feeding sequence...
# @10215000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10226000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            10505000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual x, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual x, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual x, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual x, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual x, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual x, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual x, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual x, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual x, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual x, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual x, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual x, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual x, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual x, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual x, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            10676000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @            11015000 Simulating controller signals to execute multiplication...
# @11035000: Starting input feeding sequence...
# @11035000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual x, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual x, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual x, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual x, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual x, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual x, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual x, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual x, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual x, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual x, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual x, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual x, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual x, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual x, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual x, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            11496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @            11835000 Simulating controller signals to execute multiplication...
# @11855000: Starting input feeding sequence...
# @11855000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual x, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual x, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual x, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual x, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual x, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual x, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual x, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual x, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual x, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual x, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual x, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual x, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual x, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual x, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual x, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @            12655000 Simulating controller signals to execute multiplication...
# @12675000: Starting input feeding sequence...
# @12675000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual 1, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual x, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual x, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual x, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual x, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual x, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual x, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual x, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual x, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual x, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual x, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual x, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual x, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual x, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual x, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual x, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 1, Addr 0) with 0cc3
#   Loading A[0][2] (Bank 2, Addr 0) with 2d23
#   Loading A[0][3] (Bank 3, Addr 0) with c654
#   Loading A[1][0] (Bank 0, Addr 1) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 2, Addr 1) with e87e
#   Loading A[1][3] (Bank 3, Addr 1) with 6d0d
#   Loading A[2][0] (Bank 0, Addr 2) with a8cf
#   Loading A[2][1] (Bank 1, Addr 2) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 3, Addr 2) with f0ac
#   Loading A[3][0] (Bank 0, Addr 3) with a4d5
#   Loading A[3][1] (Bank 1, Addr 3) with 337b
#   Loading A[3][2] (Bank 2, Addr 3) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @            13475000 Simulating controller signals to execute multiplication...
# @13495000: Starting input feeding sequence...
# @13495000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13506000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            13785000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual 1, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual x, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual x, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual x, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual x, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual x, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual x, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual x, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual x, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual x, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual x, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual x, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual x, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual x, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual x, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual x, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13956000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 1, Addr 0) with 33ae
#   Loading A[0][2] (Bank 2, Addr 0) with 1949
#   Loading A[0][3] (Bank 3, Addr 0) with c2ac
#   Loading A[1][0] (Bank 0, Addr 1) with 74ca
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 2, Addr 1) with 5b33
#   Loading A[1][3] (Bank 3, Addr 1) with 086c
#   Loading A[2][0] (Bank 0, Addr 2) with 1549
#   Loading A[2][1] (Bank 1, Addr 2) with 602f
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 3, Addr 2) with bc83
#   Loading A[3][0] (Bank 0, Addr 3) with a3b9
#   Loading A[3][1] (Bank 1, Addr 3) with bfbe
#   Loading A[3][2] (Bank 2, Addr 3) with 0884
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[0][1] (Bank 1, Addr 0) with 4904
#   Loading B[0][2] (Bank 2, Addr 0) with 8a0c
#   Loading B[0][3] (Bank 3, Addr 0) with b0ba
#   Loading B[1][0] (Bank 0, Addr 1) with 4193
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[1][2] (Bank 2, Addr 1) with b102
#   Loading B[1][3] (Bank 3, Addr 1) with 0e75
#   Loading B[2][0] (Bank 0, Addr 2) with c8a1
#   Loading B[2][1] (Bank 1, Addr 2) with b09f
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[2][3] (Bank 3, Addr 2) with 4b2b
#   Loading B[3][0] (Bank 0, Addr 3) with b8e2
#   Loading B[3][1] (Bank 1, Addr 3) with a481
#   Loading B[3][2] (Bank 2, Addr 3) with 2498
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @            14295000 Simulating controller signals to execute multiplication...
# @14315000: Starting input feeding sequence...
# @14315000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            14605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual 0, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual x, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual x, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual x, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual x, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual x, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual x, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual x, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual x, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual x, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual x, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual x, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual x, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual x, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual x, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual x, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            14776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 1, Addr 0) with 4374
#   Loading A[0][2] (Bank 2, Addr 0) with d8de
#   Loading A[0][3] (Bank 3, Addr 0) with 0bcd
#   Loading A[1][0] (Bank 0, Addr 1) with ebff
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 2, Addr 1) with 5315
#   Loading A[1][3] (Bank 3, Addr 1) with 377a
#   Loading A[2][0] (Bank 0, Addr 2) with 881b
#   Loading A[2][1] (Bank 1, Addr 2) with 3ecf
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 3, Addr 2) with 5223
#   Loading A[3][0] (Bank 0, Addr 3) with 87cd
#   Loading A[3][1] (Bank 1, Addr 3) with 2a6f
#   Loading A[3][2] (Bank 2, Addr 3) with c889
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[0][1] (Bank 1, Addr 0) with 00f3
#   Loading B[0][2] (Bank 2, Addr 0) with a35c
#   Loading B[0][3] (Bank 3, Addr 0) with aa65
#   Loading B[1][0] (Bank 0, Addr 1) with 222b
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[1][2] (Bank 2, Addr 1) with da28
#   Loading B[1][3] (Bank 3, Addr 1) with eaa8
#   Loading B[2][0] (Bank 0, Addr 2) with ff56
#   Loading B[2][1] (Bank 1, Addr 2) with 6ba0
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[2][3] (Bank 3, Addr 2) with 90d1
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc4
#   Loading B[3][1] (Bank 1, Addr 3) with 671c
#   Loading B[3][2] (Bank 2, Addr 3) with ba64
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @            15115000 Simulating controller signals to execute multiplication...
# @15135000: Starting input feeding sequence...
# @15135000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            15425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual 1, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual x, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual x, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual x, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual x, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual x, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual x, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual x, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual x, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual x, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual x, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual x, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual x, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual x, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual x, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual x, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            15596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 1, Addr 0) with e7d1
#   Loading A[0][2] (Bank 2, Addr 0) with 03a8
#   Loading A[0][3] (Bank 3, Addr 0) with 97d0
#   Loading A[1][0] (Bank 0, Addr 1) with 9a37
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 2, Addr 1) with cb14
#   Loading A[1][3] (Bank 3, Addr 1) with 916b
#   Loading A[2][0] (Bank 0, Addr 2) with 3e85
#   Loading A[2][1] (Bank 1, Addr 2) with 83c8
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 3, Addr 2) with ead0
#   Loading A[3][0] (Bank 0, Addr 3) with ac60
#   Loading A[3][1] (Bank 1, Addr 3) with 5c5f
#   Loading A[3][2] (Bank 2, Addr 3) with 3852
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[0][1] (Bank 1, Addr 0) with ad8e
#   Loading B[0][2] (Bank 2, Addr 0) with 9a34
#   Loading B[0][3] (Bank 3, Addr 0) with 7f8e
#   Loading B[1][0] (Bank 0, Addr 1) with 5d1a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[1][2] (Bank 2, Addr 1) with 9ffd
#   Loading B[1][3] (Bank 3, Addr 1) with 6841
#   Loading B[2][0] (Bank 0, Addr 2) with 3375
#   Loading B[2][1] (Bank 1, Addr 2) with 6107
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[2][3] (Bank 3, Addr 2) with 6583
#   Loading B[3][0] (Bank 0, Addr 3) with db9d
#   Loading B[3][1] (Bank 1, Addr 3) with 492a
#   Loading B[3][2] (Bank 2, Addr 3) with 66cd
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @            15935000 Simulating controller signals to execute multiplication...
# @15955000: Starting input feeding sequence...
# @15955000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            16245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual 0, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual x, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual x, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual x, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual x, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual x, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual x, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual x, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual x, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual x, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual x, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual x, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual x, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual x, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual x, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual x, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            16416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 1, Addr 0) with 3fa9
#   Loading A[0][2] (Bank 2, Addr 0) with 6ddd
#   Loading A[0][3] (Bank 3, Addr 0) with d7cf
#   Loading A[1][0] (Bank 0, Addr 1) with 6b9d
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 2, Addr 1) with aafa
#   Loading A[1][3] (Bank 3, Addr 1) with d2a3
#   Loading A[2][0] (Bank 0, Addr 2) with 8dec
#   Loading A[2][1] (Bank 1, Addr 2) with e147
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 3, Addr 2) with 1b9c
#   Loading A[3][0] (Bank 0, Addr 3) with 3fce
#   Loading A[3][1] (Bank 1, Addr 3) with 23f2
#   Loading A[3][2] (Bank 2, Addr 3) with 7c98
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[0][1] (Bank 1, Addr 0) with 08ee
#   Loading B[0][2] (Bank 2, Addr 0) with 33d2
#   Loading B[0][3] (Bank 3, Addr 0) with 6b1f
#   Loading B[1][0] (Bank 0, Addr 1) with 1532
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[1][2] (Bank 2, Addr 1) with b4e2
#   Loading B[1][3] (Bank 3, Addr 1) with 4267
#   Loading B[2][0] (Bank 0, Addr 2) with 9a2e
#   Loading B[2][1] (Bank 1, Addr 2) with 67b5
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 197e
#   Loading B[3][0] (Bank 0, Addr 3) with 72d3
#   Loading B[3][1] (Bank 1, Addr 3) with 030b
#   Loading B[3][2] (Bank 2, Addr 3) with 9c52
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @            16755000 Simulating controller signals to execute multiplication...
# @16775000: Starting input feeding sequence...
# @16775000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual 1, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual x, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual x, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual x, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual x, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual x, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual x, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual x, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual x, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual x, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual x, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual x, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual x, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual x, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual x, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual x, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            17236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 1, Addr 0) with 7631
#   Loading A[0][2] (Bank 2, Addr 0) with 08e8
#   Loading A[0][3] (Bank 3, Addr 0) with d98c
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 2, Addr 1) with 0b94
#   Loading A[1][3] (Bank 3, Addr 1) with a1d8
#   Loading A[2][0] (Bank 0, Addr 2) with be24
#   Loading A[2][1] (Bank 1, Addr 2) with 3dab
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 3, Addr 2) with b4a5
#   Loading A[3][0] (Bank 0, Addr 3) with 766e
#   Loading A[3][1] (Bank 1, Addr 3) with 5e6d
#   Loading A[3][2] (Bank 2, Addr 3) with bd75
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[0][1] (Bank 1, Addr 0) with 536a
#   Loading B[0][2] (Bank 2, Addr 0) with 8a59
#   Loading B[0][3] (Bank 3, Addr 0) with 3372
#   Loading B[1][0] (Bank 0, Addr 1) with ccbb
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[1][2] (Bank 2, Addr 1) with 5dd6
#   Loading B[1][3] (Bank 3, Addr 1) with 9215
#   Loading B[2][0] (Bank 0, Addr 2) with 56b7
#   Loading B[2][1] (Bank 1, Addr 2) with f0d1
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 21d0
#   Loading B[3][0] (Bank 0, Addr 3) with 11fc
#   Loading B[3][1] (Bank 1, Addr 3) with 1be3
#   Loading B[3][2] (Bank 2, Addr 3) with 54d6
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @            17575000 Simulating controller signals to execute multiplication...
# @17595000: Starting input feeding sequence...
# @17595000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual 0, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual x, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual x, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual x, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual x, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual x, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual x, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual x, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual x, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual x, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual x, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual x, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual x, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual x, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual x, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual x, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 1, Addr 0) with 1713
#   Loading A[0][2] (Bank 2, Addr 0) with fc9d
#   Loading A[0][3] (Bank 3, Addr 0) with d833
#   Loading A[1][0] (Bank 0, Addr 1) with 893b
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 2, Addr 1) with a562
#   Loading A[1][3] (Bank 3, Addr 1) with 4ca0
#   Loading A[2][0] (Bank 0, Addr 2) with 192d
#   Loading A[2][1] (Bank 1, Addr 2) with 4bfa
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 3, Addr 2) with 295a
#   Loading A[3][0] (Bank 0, Addr 3) with 783f
#   Loading A[3][1] (Bank 1, Addr 3) with 025b
#   Loading A[3][2] (Bank 2, Addr 3) with 5e47
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[0][1] (Bank 1, Addr 0) with f807
#   Loading B[0][2] (Bank 2, Addr 0) with 18a0
#   Loading B[0][3] (Bank 3, Addr 0) with c97d
#   Loading B[1][0] (Bank 0, Addr 1) with d1a4
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[1][2] (Bank 2, Addr 1) with b713
#   Loading B[1][3] (Bank 3, Addr 1) with e42e
#   Loading B[2][0] (Bank 0, Addr 2) with cd53
#   Loading B[2][1] (Bank 1, Addr 2) with 0a61
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[2][3] (Bank 3, Addr 2) with cd4b
#   Loading B[3][0] (Bank 0, Addr 3) with 1489
#   Loading B[3][1] (Bank 1, Addr 3) with 7ec8
#   Loading B[3][2] (Bank 2, Addr 3) with d878
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @            18395000 Simulating controller signals to execute multiplication...
# @18415000: Starting input feeding sequence...
# @18415000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            18705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual 0, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual x, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual x, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual x, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual x, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual x, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual x, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual x, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual x, Expected 16bea50ee
# Test Case 22 FAIL: C[2][1] mismatch! Actual x, Expected 1b4a3f648
# Test Case 22 FAIL: C[2][2] mismatch! Actual x, Expected 17ed8a09a
# Test Case 22 FAIL: C[2][3] mismatch! Actual x, Expected 227590bcd
# Test Case 22 FAIL: C[3][0] mismatch! Actual x, Expected 0906811ac
# Test Case 22 FAIL: C[3][1] mismatch! Actual x, Expected 127c3c8ff
# Test Case 22 FAIL: C[3][2] mismatch! Actual x, Expected 08f952008
# Test Case 22 FAIL: C[3][3] mismatch! Actual x, Expected 1206c5ac1
# Test Case 22 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 23 of 100
# ===================================================
# Reading test case 23:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9208
#   Loading A[0][1] (Bank 1, Addr 0) with 8d91
#   Loading A[0][2] (Bank 2, Addr 0) with 0f91
#   Loading A[0][3] (Bank 3, Addr 0) with 4324
#   Loading A[1][0] (Bank 0, Addr 1) with 1893
#   Loading A[1][1] (Bank 1, Addr 1) with e01e
#   Loading A[1][2] (Bank 2, Addr 1) with 7421
#   Loading A[1][3] (Bank 3, Addr 1) with 0c24
#   Loading A[2][0] (Bank 0, Addr 2) with 68d0
#   Loading A[2][1] (Bank 1, Addr 2) with ec47
#   Loading A[2][2] (Bank 2, Addr 2) with 6ef2
#   Loading A[2][3] (Bank 3, Addr 2) with 26a8
#   Loading A[3][0] (Bank 0, Addr 3) with 5427
#   Loading A[3][1] (Bank 1, Addr 3) with b764
#   Loading A[3][2] (Bank 2, Addr 3) with bc95
#   Loading A[3][3] (Bank 3, Addr 3) with 5dea
#   Loading B[0][0] (Bank 0, Addr 0) with 128b
#   Loading B[0][1] (Bank 1, Addr 0) with eb07
#   Loading B[0][2] (Bank 2, Addr 0) with ba48
#   Loading B[0][3] (Bank 3, Addr 0) with 9e00
#   Loading B[1][0] (Bank 0, Addr 1) with efbc
#   Loading B[1][1] (Bank 1, Addr 1) with db1c
#   Loading B[1][2] (Bank 2, Addr 1) with 7aba
#   Loading B[1][3] (Bank 3, Addr 1) with 1968
#   Loading B[2][0] (Bank 0, Addr 2) with d9d0
#   Loading B[2][1] (Bank 1, Addr 2) with 7a26
#   Loading B[2][2] (Bank 2, Addr 2) with 39df
#   Loading B[2][3] (Bank 3, Addr 2) with 6ed6
#   Loading B[3][0] (Bank 0, Addr 3) with b124
#   Loading B[3][1] (Bank 1, Addr 3) with cd33
#   Loading B[3][2] (Bank 2, Addr 3) with 6a50
#   Loading B[3][3] (Bank 3, Addr 3) with 0583
# Matrix loading complete.
# @            19215000 Simulating controller signals to execute multiplication...
# @19235000: Starting input feeding sequence...
# @19235000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            19525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 23...
# Test Case 23 FAIL: C[0][0] mismatch! Actual 0, Expected 0b4ff68c8
# Test Case 23 FAIL: C[0][1] mismatch! Actual x, Expected 1109074f1
# Test Case 23 FAIL: C[0][2] mismatch! Actual x, Expected 0b0aeda6e
# Test Case 23 FAIL: C[0][3] mismatch! Actual x, Expected 08bc2178d
# Test Case 23 FAIL: C[1][0] mismatch! Actual x, Expected 2240fbe83
# Test Case 23 FAIL: C[1][1] mismatch! Actual x, Expected 24586acb5
# Test Case 23 FAIL: C[1][2] mismatch! Actual x, Expected 15406a4ad
# Test Case 23 FAIL: C[1][3] mismatch! Actual x, Expected 0d7dc49b6
# Test Case 23 FAIL: C[2][0] mismatch! Actual x, Expected 14ec38d8b
# Test Case 23 FAIL: C[2][1] mismatch! Actual x, Expected 13dc8252e
# Test Case 23 FAIL: C[2][2] mismatch! Actual x, Expected 0aa64fc20
# Test Case 23 FAIL: C[2][3] mismatch! Actual x, Expected 0493a07f3
# Test Case 23 FAIL: C[3][0] mismatch! Actual x, Expected 0721b5264
# Test Case 23 FAIL: C[3][1] mismatch! Actual x, Expected 0a5c0e67a
# Test Case 23 FAIL: C[3][2] mismatch! Actual x, Expected 0666a55c0
# Test Case 23 FAIL: C[3][3] mismatch! Actual x, Expected 03d66cbce
# Test Case 23 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 24 of 100
# ===================================================
# Reading test case 24:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            19696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0891
#   Loading A[0][1] (Bank 1, Addr 0) with 3d27
#   Loading A[0][2] (Bank 2, Addr 0) with d5c0
#   Loading A[0][3] (Bank 3, Addr 0) with 7093
#   Loading A[1][0] (Bank 0, Addr 1) with c03d
#   Loading A[1][1] (Bank 1, Addr 1) with bbba
#   Loading A[1][2] (Bank 2, Addr 1) with e629
#   Loading A[1][3] (Bank 3, Addr 1) with a341
#   Loading A[2][0] (Bank 0, Addr 2) with a224
#   Loading A[2][1] (Bank 1, Addr 2) with b475
#   Loading A[2][2] (Bank 2, Addr 2) with 71ee
#   Loading A[2][3] (Bank 3, Addr 2) with cd06
#   Loading A[3][0] (Bank 0, Addr 3) with c965
#   Loading A[3][1] (Bank 1, Addr 3) with 0efe
#   Loading A[3][2] (Bank 2, Addr 3) with e79e
#   Loading A[3][3] (Bank 3, Addr 3) with d9c1
#   Loading B[0][0] (Bank 0, Addr 0) with b3fa
#   Loading B[0][1] (Bank 1, Addr 0) with 3827
#   Loading B[0][2] (Bank 2, Addr 0) with 9810
#   Loading B[0][3] (Bank 3, Addr 0) with 97ce
#   Loading B[1][0] (Bank 0, Addr 1) with ffef
#   Loading B[1][1] (Bank 1, Addr 1) with dc10
#   Loading B[1][2] (Bank 2, Addr 1) with 923e
#   Loading B[1][3] (Bank 3, Addr 1) with 3828
#   Loading B[2][0] (Bank 0, Addr 2) with a1be
#   Loading B[2][1] (Bank 1, Addr 2) with 17d2
#   Loading B[2][2] (Bank 2, Addr 2) with 81fb
#   Loading B[2][3] (Bank 3, Addr 2) with 4261
#   Loading B[3][0] (Bank 0, Addr 3) with 41fd
#   Loading B[3][1] (Bank 1, Addr 3) with 200a
#   Loading B[3][2] (Bank 2, Addr 3) with bc64
#   Loading B[3][3] (Bank 3, Addr 3) with c89a
# Matrix loading complete.
# @            20035000 Simulating controller signals to execute multiplication...
# @20055000: Starting input feeding sequence...
# @20055000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            20345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 24...
# Test Case 24 FAIL: C[0][0] mismatch! Actual 1, Expected 16090a516
# Test Case 24 FAIL: C[0][1] mismatch! Actual x, Expected 0cf6c3161
# Test Case 24 FAIL: C[0][2] mismatch! Actual x, Expected 1596fee96
# Test Case 24 FAIL: C[0][3] mismatch! Actual x, Expected 0f71a939c
# Test Case 24 FAIL: C[1][0] mismatch! Actual x, Expected 15c8c5898
# Test Case 24 FAIL: C[1][1] mismatch! Actual x, Expected 0c1744d77
# Test Case 24 FAIL: C[1][2] mismatch! Actual x, Expected 0f638cc6b
# Test Case 24 FAIL: C[1][3] mismatch! Actual x, Expected 087fb3a93
# Test Case 24 FAIL: C[2][0] mismatch! Actual x, Expected 2000ef691
# Test Case 24 FAIL: C[2][1] mismatch! Actual x, Expected 11c52d238
# Test Case 24 FAIL: C[2][2] mismatch! Actual x, Expected 1e6bda000
# Test Case 24 FAIL: C[2][3] mismatch! Actual x, Expected 184467b22
# Test Case 24 FAIL: C[3][0] mismatch! Actual x, Expected 1ac05066e
# Test Case 24 FAIL: C[3][1] mismatch! Actual x, Expected 0d35bb8eb
# Test Case 24 FAIL: C[3][2] mismatch! Actual x, Expected 1a878c334
# Test Case 24 FAIL: C[3][3] mismatch! Actual x, Expected 1465c06d2
# Test Case 24 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 25 of 100
# ===================================================
# Reading test case 25:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            20516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d286
#   Loading A[0][1] (Bank 1, Addr 0) with 4abb
#   Loading A[0][2] (Bank 2, Addr 0) with 7dc0
#   Loading A[0][3] (Bank 3, Addr 0) with bdd5
#   Loading A[1][0] (Bank 0, Addr 1) with 6b83
#   Loading A[1][1] (Bank 1, Addr 1) with 0021
#   Loading A[1][2] (Bank 2, Addr 1) with 60e7
#   Loading A[1][3] (Bank 3, Addr 1) with 9c2b
#   Loading A[2][0] (Bank 0, Addr 2) with 50a4
#   Loading A[2][1] (Bank 1, Addr 2) with fed1
#   Loading A[2][2] (Bank 2, Addr 2) with c6a9
#   Loading A[2][3] (Bank 3, Addr 2) with 5739
#   Loading A[3][0] (Bank 0, Addr 3) with bef9
#   Loading A[3][1] (Bank 1, Addr 3) with b753
#   Loading A[3][2] (Bank 2, Addr 3) with a8ee
#   Loading A[3][3] (Bank 3, Addr 3) with a16b
#   Loading B[0][0] (Bank 0, Addr 0) with 704d
#   Loading B[0][1] (Bank 1, Addr 0) with 8ab4
#   Loading B[0][2] (Bank 2, Addr 0) with 1bfa
#   Loading B[0][3] (Bank 3, Addr 0) with 354a
#   Loading B[1][0] (Bank 0, Addr 1) with 78c2
#   Loading B[1][1] (Bank 1, Addr 1) with 376c
#   Loading B[1][2] (Bank 2, Addr 1) with ced8
#   Loading B[1][3] (Bank 3, Addr 1) with 78de
#   Loading B[2][0] (Bank 0, Addr 2) with d2b2
#   Loading B[2][1] (Bank 1, Addr 2) with c525
#   Loading B[2][2] (Bank 2, Addr 2) with 038b
#   Loading B[2][3] (Bank 3, Addr 2) with 6129
#   Loading B[3][0] (Bank 0, Addr 3) with 03d4
#   Loading B[3][1] (Bank 1, Addr 3) with 6cff
#   Loading B[3][2] (Bank 2, Addr 3) with 63f3
#   Loading B[3][3] (Bank 3, Addr 3) with 1a9d
# Matrix loading complete.
# @            20855000 Simulating controller signals to execute multiplication...
# @20875000: Starting input feeding sequence...
# @20875000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 25...
# Test Case 25 FAIL: C[0][0] mismatch! Actual 0, Expected 0d44a7ed0
# Test Case 25 FAIL: C[0][1] mismatch! Actual x, Expected 118bfe437
# Test Case 25 FAIL: C[0][2] mismatch! Actual x, Expected 0b98d1fcb
# Test Case 25 FAIL: C[0][3] mismatch! Actual x, Expected 0910ab34f
# Test Case 25 FAIL: C[1][0] mismatch! Actual x, Expected 0f54e444f
# Test Case 25 FAIL: C[1][1] mismatch! Actual x, Expected 13acdc74a
# Test Case 25 FAIL: C[1][2] mismatch! Actual x, Expected 0535f48ba
# Test Case 25 FAIL: C[1][3] mismatch! Actual x, Expected 08362c20c
# Test Case 25 FAIL: C[2][0] mismatch! Actual x, Expected 10ae6fc68
# Test Case 25 FAIL: C[2][1] mismatch! Actual x, Expected 13a05ddf3
# Test Case 25 FAIL: C[2][2] mismatch! Actual x, Expected 0a0bdef15
# Test Case 25 FAIL: C[2][3] mismatch! Actual x, Expected 0a4e309d9
# Test Case 25 FAIL: C[3][0] mismatch! Actual x, Expected 0e7241ee5
# Test Case 25 FAIL: C[3][1] mismatch! Actual x, Expected 1108ed0ba
# Test Case 25 FAIL: C[3][2] mismatch! Actual x, Expected 0d327d7ce
# Test Case 25 FAIL: C[3][3] mismatch! Actual x, Expected 0a321fb9c
# Test Case 25 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 26 of 100
# ===================================================
# Reading test case 26:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            21336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4b67
#   Loading A[0][1] (Bank 1, Addr 0) with fb4b
#   Loading A[0][2] (Bank 2, Addr 0) with 6f40
#   Loading A[0][3] (Bank 3, Addr 0) with ce69
#   Loading A[1][0] (Bank 0, Addr 1) with edf7
#   Loading A[1][1] (Bank 1, Addr 1) with c739
#   Loading A[1][2] (Bank 2, Addr 1) with 656e
#   Loading A[1][3] (Bank 3, Addr 1) with 5112
#   Loading A[2][0] (Bank 0, Addr 2) with c431
#   Loading A[2][1] (Bank 1, Addr 2) with e51a
#   Loading A[2][2] (Bank 2, Addr 2) with 6f39
#   Loading A[2][3] (Bank 3, Addr 2) with 8c92
#   Loading A[3][0] (Bank 0, Addr 3) with 0830
#   Loading A[3][1] (Bank 1, Addr 3) with a15d
#   Loading A[3][2] (Bank 2, Addr 3) with 6583
#   Loading A[3][3] (Bank 3, Addr 3) with a0c0
#   Loading B[0][0] (Bank 0, Addr 0) with 93d8
#   Loading B[0][1] (Bank 1, Addr 0) with a69c
#   Loading B[0][2] (Bank 2, Addr 0) with 0fef
#   Loading B[0][3] (Bank 3, Addr 0) with ab35
#   Loading B[1][0] (Bank 0, Addr 1) with ba68
#   Loading B[1][1] (Bank 1, Addr 1) with 5ccb
#   Loading B[1][2] (Bank 2, Addr 1) with 4394
#   Loading B[1][3] (Bank 3, Addr 1) with a636
#   Loading B[2][0] (Bank 0, Addr 2) with bffa
#   Loading B[2][1] (Bank 1, Addr 2) with ecfd
#   Loading B[2][2] (Bank 2, Addr 2) with c7b5
#   Loading B[2][3] (Bank 3, Addr 2) with 366f
#   Loading B[3][0] (Bank 0, Addr 3) with e942
#   Loading B[3][1] (Bank 1, Addr 3) with e35f
#   Loading B[3][2] (Bank 2, Addr 3) with dcd0
#   Loading B[3][3] (Bank 3, Addr 3) with 251d
# Matrix loading complete.
# @            21675000 Simulating controller signals to execute multiplication...
# @21695000: Starting input feeding sequence...
# @21695000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21706000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21985000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 26...
# Test Case 26 FAIL: C[0][0] mismatch! Actual 1, Expected 17367d97a
# Test Case 26 FAIL: C[0][1] mismatch! Actual x, Expected 14438ddde
# Test Case 26 FAIL: C[0][2] mismatch! Actual x, Expected 0e39f5a9a
# Test Case 26 FAIL: C[0][3] mismatch! Actual x, Expected 0f7d50a1c
# Test Case 26 FAIL: C[1][0] mismatch! Actual x, Expected 26105d1ce
# Test Case 26 FAIL: C[1][1] mismatch! Actual x, Expected 24f29f51c
# Test Case 26 FAIL: C[1][2] mismatch! Actual x, Expected 1822350eb
# Test Case 26 FAIL: C[1][3] mismatch! Actual x, Expected 17183a65c
# Test Case 26 FAIL: C[2][0] mismatch! Actual x, Expected 13a014a20
# Test Case 26 FAIL: C[2][1] mismatch! Actual x, Expected 12e4a8d2c
# Test Case 26 FAIL: C[2][2] mismatch! Actual x, Expected 0d0060b15
# Test Case 26 FAIL: C[2][3] mismatch! Actual x, Expected 0b29f3002
# Test Case 26 FAIL: C[3][0] mismatch! Actual x, Expected 1ae1edcfc
# Test Case 26 FAIL: C[3][1] mismatch! Actual x, Expected 1b4a00acc
# Test Case 26 FAIL: C[3][2] mismatch! Actual x, Expected 11a8feca9
# Test Case 26 FAIL: C[3][3] mismatch! Actual x, Expected 0f3df5997
# Test Case 26 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 27 of 100
# ===================================================
# Reading test case 27:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            22156000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ea13
#   Loading A[0][1] (Bank 1, Addr 0) with a7a7
#   Loading A[0][2] (Bank 2, Addr 0) with 6691
#   Loading A[0][3] (Bank 3, Addr 0) with ff78
#   Loading A[1][0] (Bank 0, Addr 1) with f2c9
#   Loading A[1][1] (Bank 1, Addr 1) with f549
#   Loading A[1][2] (Bank 2, Addr 1) with b522
#   Loading A[1][3] (Bank 3, Addr 1) with c682
#   Loading A[2][0] (Bank 0, Addr 2) with a606
#   Loading A[2][1] (Bank 1, Addr 2) with ec08
#   Loading A[2][2] (Bank 2, Addr 2) with de49
#   Loading A[2][3] (Bank 3, Addr 2) with 68b2
#   Loading A[3][0] (Bank 0, Addr 3) with fa15
#   Loading A[3][1] (Bank 1, Addr 3) with 89a7
#   Loading A[3][2] (Bank 2, Addr 3) with 0e94
#   Loading A[3][3] (Bank 3, Addr 3) with 13e4
#   Loading B[0][0] (Bank 0, Addr 0) with fb22
#   Loading B[0][1] (Bank 1, Addr 0) with 6717
#   Loading B[0][2] (Bank 2, Addr 0) with 8224
#   Loading B[0][3] (Bank 3, Addr 0) with 3ac7
#   Loading B[1][0] (Bank 0, Addr 1) with 5c4a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ea
#   Loading B[1][2] (Bank 2, Addr 1) with db47
#   Loading B[1][3] (Bank 3, Addr 1) with 9839
#   Loading B[2][0] (Bank 0, Addr 2) with 3353
#   Loading B[2][1] (Bank 1, Addr 2) with 7950
#   Loading B[2][2] (Bank 2, Addr 2) with f60f
#   Loading B[2][3] (Bank 3, Addr 2) with 5d81
#   Loading B[3][0] (Bank 0, Addr 3) with bee6
#   Loading B[3][1] (Bank 1, Addr 3) with ba4b
#   Loading B[3][2] (Bank 2, Addr 3) with 23da
#   Loading B[3][3] (Bank 3, Addr 3) with 3efe
# Matrix loading complete.
# @            22495000 Simulating controller signals to execute multiplication...
# @22515000: Starting input feeding sequence...
# @22515000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @22526000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            22805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 27...
# Test Case 27 FAIL: C[0][0] mismatch! Actual 0, Expected 218eb6c70
# Test Case 27 FAIL: C[0][1] mismatch! Actual x, Expected 1c2a05a76
# Test Case 27 FAIL: C[0][2] mismatch! Actual x, Expected 2098d2ca7
# Test Case 27 FAIL: C[0][3] mismatch! Actual x, Expected 14048b762
# Test Case 27 FAIL: C[1][0] mismatch! Actual x, Expected 192dbe0ea
# Test Case 27 FAIL: C[1][1] mismatch! Actual x, Expected 178392e28
# Test Case 27 FAIL: C[1][2] mismatch! Actual x, Expected 21d786d69
# Test Case 27 FAIL: C[1][3] mismatch! Actual x, Expected 1306cfbcc
# Test Case 27 FAIL: C[2][0] mismatch! Actual x, Expected 0dd59ebb9
# Test Case 27 FAIL: C[2][1] mismatch! Actual x, Expected 0e4a62c47
# Test Case 27 FAIL: C[2][2] mismatch! Actual x, Expected 1a6fc3321
# Test Case 27 FAIL: C[2][3] mismatch! Actual x, Expected 0d807efea
# Test Case 27 FAIL: C[3][0] mismatch! Actual x, Expected 165ff2e12
# Test Case 27 FAIL: C[3][1] mismatch! Actual x, Expected 0f536cc08
# Test Case 27 FAIL: C[3][2] mismatch! Actual x, Expected 193516b84
# Test Case 27 FAIL: C[3][3] mismatch! Actual x, Expected 0dbd38924
# Test Case 27 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 28 of 100
# ===================================================
# Reading test case 28:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            22976000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1e91
#   Loading A[0][1] (Bank 1, Addr 0) with 3f88
#   Loading A[0][2] (Bank 2, Addr 0) with f97b
#   Loading A[0][3] (Bank 3, Addr 0) with 3be4
#   Loading A[1][0] (Bank 0, Addr 1) with b7c1
#   Loading A[1][1] (Bank 1, Addr 1) with 15f0
#   Loading A[1][2] (Bank 2, Addr 1) with 154f
#   Loading A[1][3] (Bank 3, Addr 1) with 4e31
#   Loading A[2][0] (Bank 0, Addr 2) with e329
#   Loading A[2][1] (Bank 1, Addr 2) with bc5a
#   Loading A[2][2] (Bank 2, Addr 2) with 8564
#   Loading A[2][3] (Bank 3, Addr 2) with cdbf
#   Loading A[3][0] (Bank 0, Addr 3) with b375
#   Loading A[3][1] (Bank 1, Addr 3) with 90d7
#   Loading A[3][2] (Bank 2, Addr 3) with cca5
#   Loading A[3][3] (Bank 3, Addr 3) with 70bc
#   Loading B[0][0] (Bank 0, Addr 0) with 92ad
#   Loading B[0][1] (Bank 1, Addr 0) with 8315
#   Loading B[0][2] (Bank 2, Addr 0) with fe78
#   Loading B[0][3] (Bank 3, Addr 0) with 3853
#   Loading B[1][0] (Bank 0, Addr 1) with ebb9
#   Loading B[1][1] (Bank 1, Addr 1) with d2b1
#   Loading B[1][2] (Bank 2, Addr 1) with 1535
#   Loading B[1][3] (Bank 3, Addr 1) with ee92
#   Loading B[2][0] (Bank 0, Addr 2) with aeb9
#   Loading B[2][1] (Bank 1, Addr 2) with 2ab4
#   Loading B[2][2] (Bank 2, Addr 2) with c2ff
#   Loading B[2][3] (Bank 3, Addr 2) with bcbd
#   Loading B[3][0] (Bank 0, Addr 3) with 76dd
#   Loading B[3][1] (Bank 1, Addr 3) with d793
#   Loading B[3][2] (Bank 2, Addr 3) with c111
#   Loading B[3][3] (Bank 3, Addr 3) with b248
# Matrix loading complete.
# @            23315000 Simulating controller signals to execute multiplication...
# @23335000: Starting input feeding sequence...
# @23335000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @23346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            23625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 28...
# Test Case 28 FAIL: C[0][0] mismatch! Actual 1, Expected 1a9133018
# Test Case 28 FAIL: C[0][1] mismatch! Actual x, Expected 163e4d559
# Test Case 28 FAIL: C[0][2] mismatch! Actual x, Expected 161f98989
# Test Case 28 FAIL: C[0][3] mismatch! Actual x, Expected 1d66b7f42
# Test Case 28 FAIL: C[1][0] mismatch! Actual x, Expected 0fc6715fd
# Test Case 28 FAIL: C[1][1] mismatch! Actual x, Expected 0cbf8c8d5
# Test Case 28 FAIL: C[1][2] mismatch! Actual x, Expected 13dab795d
# Test Case 28 FAIL: C[1][3] mismatch! Actual x, Expected 112275ce2
# Test Case 28 FAIL: C[2][0] mismatch! Actual x, Expected 15c9ebeeb
# Test Case 28 FAIL: C[2][1] mismatch! Actual x, Expected 153dc39c5
# Test Case 28 FAIL: C[2][2] mismatch! Actual x, Expected 1f9b18294
# Test Case 28 FAIL: C[2][3] mismatch! Actual x, Expected 13b9b972b
# Test Case 28 FAIL: C[3][0] mismatch! Actual x, Expected 12b1478d0
# Test Case 28 FAIL: C[3][1] mismatch! Actual x, Expected 0e04577d5
# Test Case 28 FAIL: C[3][2] mismatch! Actual x, Expected 133bf67c2
# Test Case 28 FAIL: C[3][3] mismatch! Actual x, Expected 13c3e07c1
# Test Case 28 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 29 of 100
# ===================================================
# Reading test case 29:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            23796000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c9e5
#   Loading A[0][1] (Bank 1, Addr 0) with 4e3c
#   Loading A[0][2] (Bank 2, Addr 0) with 79a5
#   Loading A[0][3] (Bank 3, Addr 0) with 65aa
#   Loading A[1][0] (Bank 0, Addr 1) with d983
#   Loading A[1][1] (Bank 1, Addr 1) with 0341
#   Loading A[1][2] (Bank 2, Addr 1) with 60be
#   Loading A[1][3] (Bank 3, Addr 1) with 4d12
#   Loading A[2][0] (Bank 0, Addr 2) with f3d3
#   Loading A[2][1] (Bank 1, Addr 2) with f92f
#   Loading A[2][2] (Bank 2, Addr 2) with cbd0
#   Loading A[2][3] (Bank 3, Addr 2) with b614
#   Loading A[3][0] (Bank 0, Addr 3) with 65ce
#   Loading A[3][1] (Bank 1, Addr 3) with aadf
#   Loading A[3][2] (Bank 2, Addr 3) with 7d67
#   Loading A[3][3] (Bank 3, Addr 3) with 3c29
#   Loading B[0][0] (Bank 0, Addr 0) with 5655
#   Loading B[0][1] (Bank 1, Addr 0) with d7e2
#   Loading B[0][2] (Bank 2, Addr 0) with c5d3
#   Loading B[0][3] (Bank 3, Addr 0) with 44ae
#   Loading B[1][0] (Bank 0, Addr 1) with 210c
#   Loading B[1][1] (Bank 1, Addr 1) with 43da
#   Loading B[1][2] (Bank 2, Addr 1) with a4f3
#   Loading B[1][3] (Bank 3, Addr 1) with 5adf
#   Loading B[2][0] (Bank 0, Addr 2) with 879e
#   Loading B[2][1] (Bank 1, Addr 2) with 624f
#   Loading B[2][2] (Bank 2, Addr 2) with 6502
#   Loading B[2][3] (Bank 3, Addr 2) with 0085
#   Loading B[3][0] (Bank 0, Addr 3) with 4cc8
#   Loading B[3][1] (Bank 1, Addr 3) with fa98
#   Loading B[3][2] (Bank 2, Addr 3) with 8a45
#   Loading B[3][3] (Bank 3, Addr 3) with fac0
# Matrix loading complete.
# @            24135000 Simulating controller signals to execute multiplication...
# @24155000: Starting input feeding sequence...
# @24155000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @24166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            24445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 29...
# Test Case 29 FAIL: C[0][0] mismatch! Actual 1, Expected 0ffdd7e57
# Test Case 29 FAIL: C[0][1] mismatch! Actual x, Expected 1a531b425
# Test Case 29 FAIL: C[0][2] mismatch! Actual x, Expected 1bf5aa744
# Test Case 29 FAIL: C[0][3] mismatch! Actual x, Expected 0e795c7e2
# Test Case 29 FAIL: C[1][0] mismatch! Actual x, Expected 0d20ef032
# Test Case 29 FAIL: C[1][1] mismatch! Actual x, Expected 149ca5b3b
# Test Case 29 FAIL: C[1][2] mismatch! Actual x, Expected 0fd2923a0
# Test Case 29 FAIL: C[1][3] mismatch! Actual x, Expected 0be042f12
# Test Case 29 FAIL: C[2][0] mismatch! Actual x, Expected 0c717df89
# Test Case 29 FAIL: C[2][1] mismatch! Actual x, Expected 1493ea2ce
# Test Case 29 FAIL: C[2][2] mismatch! Actual x, Expected 1307bc2bc
# Test Case 29 FAIL: C[2][3] mismatch! Actual x, Expected 0be3819f8
# Test Case 29 FAIL: C[3][0] mismatch! Actual x, Expected 09ebbe4aa
# Test Case 29 FAIL: C[3][1] mismatch! Actual x, Expected 0eaf877ec
# Test Case 29 FAIL: C[3][2] mismatch! Actual x, Expected 0e88dee69
# Test Case 29 FAIL: C[3][3] mismatch! Actual x, Expected 071ed795e
# Test Case 29 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 30 of 100
# ===================================================
# Reading test case 30:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            24616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9e98
#   Loading A[0][1] (Bank 1, Addr 0) with 50b7
#   Loading A[0][2] (Bank 2, Addr 0) with 62e8
#   Loading A[0][3] (Bank 3, Addr 0) with 23d1
#   Loading A[1][0] (Bank 0, Addr 1) with fe26
#   Loading A[1][1] (Bank 1, Addr 1) with 5a22
#   Loading A[1][2] (Bank 2, Addr 1) with 6f92
#   Loading A[1][3] (Bank 3, Addr 1) with bfab
#   Loading A[2][0] (Bank 0, Addr 2) with 0d18
#   Loading A[2][1] (Bank 1, Addr 2) with a344
#   Loading A[2][2] (Bank 2, Addr 2) with b340
#   Loading A[2][3] (Bank 3, Addr 2) with e993
#   Loading A[3][0] (Bank 0, Addr 3) with c8ba
#   Loading A[3][1] (Bank 1, Addr 3) with 3efd
#   Loading A[3][2] (Bank 2, Addr 3) with 4a76
#   Loading A[3][3] (Bank 3, Addr 3) with bd50
#   Loading B[0][0] (Bank 0, Addr 0) with 3535
#   Loading B[0][1] (Bank 1, Addr 0) with 1a57
#   Loading B[0][2] (Bank 2, Addr 0) with a837
#   Loading B[0][3] (Bank 3, Addr 0) with ee65
#   Loading B[1][0] (Bank 0, Addr 1) with 52ce
#   Loading B[1][1] (Bank 1, Addr 1) with ce8d
#   Loading B[1][2] (Bank 2, Addr 1) with af32
#   Loading B[1][3] (Bank 3, Addr 1) with 9466
#   Loading B[2][0] (Bank 0, Addr 2) with 6839
#   Loading B[2][1] (Bank 1, Addr 2) with a2d4
#   Loading B[2][2] (Bank 2, Addr 2) with 9133
#   Loading B[2][3] (Bank 3, Addr 2) with 1305
#   Loading B[3][0] (Bank 0, Addr 3) with bac0
#   Loading B[3][1] (Bank 1, Addr 3) with 7c88
#   Loading B[3][2] (Bank 2, Addr 3) with a542
#   Loading B[3][3] (Bank 3, Addr 3) with 0ec3
# Matrix loading complete.
# @            24955000 Simulating controller signals to execute multiplication...
# @24975000: Starting input feeding sequence...
# @24975000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @24986000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            25265000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 30...
# Test Case 30 FAIL: C[0][0] mismatch! Actual 0, Expected 10aed55e4
# Test Case 30 FAIL: C[0][1] mismatch! Actual x, Expected 14758a746
# Test Case 30 FAIL: C[0][2] mismatch! Actual x, Expected 19f2445d0
# Test Case 30 FAIL: C[0][3] mismatch! Actual x, Expected 1338f3842
# Test Case 30 FAIL: C[1][0] mismatch! Actual x, Expected 09e590e23
# Test Case 30 FAIL: C[1][1] mismatch! Actual x, Expected 0d78343a3
# Test Case 30 FAIL: C[1][2] mismatch! Actual x, Expected 0f7fba0bb
# Test Case 30 FAIL: C[1][3] mismatch! Actual x, Expected 08f2c98ca
# Test Case 30 FAIL: C[2][0] mismatch! Actual x, Expected 0b7f08b44
# Test Case 30 FAIL: C[2][1] mismatch! Actual x, Expected 0fa6dc3f2
# Test Case 30 FAIL: C[2][2] mismatch! Actual x, Expected 123144e88
# Test Case 30 FAIL: C[2][3] mismatch! Actual x, Expected 0ae63fdd6
# Test Case 30 FAIL: C[3][0] mismatch! Actual x, Expected 12ea2869a
# Test Case 30 FAIL: C[3][1] mismatch! Actual x, Expected 18efc5772
# Test Case 30 FAIL: C[3][2] mismatch! Actual x, Expected 199645836
# Test Case 30 FAIL: C[3][3] mismatch! Actual x, Expected 0acbab666
# Test Case 30 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 31 of 100
# ===================================================
# Reading test case 31:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            25436000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with df93
#   Loading A[0][1] (Bank 1, Addr 0) with 3c60
#   Loading A[0][2] (Bank 2, Addr 0) with fb24
#   Loading A[0][3] (Bank 3, Addr 0) with 47f5
#   Loading A[1][0] (Bank 0, Addr 1) with 0421
#   Loading A[1][1] (Bank 1, Addr 1) with b00c
#   Loading A[1][2] (Bank 2, Addr 1) with 89ba
#   Loading A[1][3] (Bank 3, Addr 1) with 3dcd
#   Loading A[2][0] (Bank 0, Addr 2) with 3edf
#   Loading A[2][1] (Bank 1, Addr 2) with 0d06
#   Loading A[2][2] (Bank 2, Addr 2) with 95b0
#   Loading A[2][3] (Bank 3, Addr 2) with 6e5f
#   Loading A[3][0] (Bank 0, Addr 3) with 7a26
#   Loading A[3][1] (Bank 1, Addr 3) with 93e5
#   Loading A[3][2] (Bank 2, Addr 3) with dc24
#   Loading A[3][3] (Bank 3, Addr 3) with 065f
#   Loading B[0][0] (Bank 0, Addr 0) with ae9a
#   Loading B[0][1] (Bank 1, Addr 0) with db85
#   Loading B[0][2] (Bank 2, Addr 0) with 15e9
#   Loading B[0][3] (Bank 3, Addr 0) with 459d
#   Loading B[1][0] (Bank 0, Addr 1) with 5411
#   Loading B[1][1] (Bank 1, Addr 1) with 2a73
#   Loading B[1][2] (Bank 2, Addr 1) with 60cd
#   Loading B[1][3] (Bank 3, Addr 1) with f507
#   Loading B[2][0] (Bank 0, Addr 2) with 7bd3
#   Loading B[2][1] (Bank 1, Addr 2) with 005d
#   Loading B[2][2] (Bank 2, Addr 2) with 003a
#   Loading B[2][3] (Bank 3, Addr 2) with fbc2
#   Loading B[3][0] (Bank 0, Addr 3) with b060
#   Loading B[3][1] (Bank 1, Addr 3) with 07af
#   Loading B[3][2] (Bank 2, Addr 3) with b60f
#   Loading B[3][3] (Bank 3, Addr 3) with b133
# Matrix loading complete.
# @            25775000 Simulating controller signals to execute multiplication...
# @25795000: Starting input feeding sequence...
# @25795000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @25806000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            26085000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 31...
# Test Case 31 FAIL: C[0][0] mismatch! Actual 0, Expected 10c6867ac
# Test Case 31 FAIL: C[0][1] mismatch! Actual x, Expected 0c4278e2f
# Test Case 31 FAIL: C[0][2] mismatch! Actual x, Expected 06b9ea4f8
# Test Case 31 FAIL: C[0][3] mismatch! Actual x, Expected 0d320539e
# Test Case 31 FAIL: C[1][0] mismatch! Actual x, Expected 0cf2eb65e
# Test Case 31 FAIL: C[1][1] mismatch! Actual x, Expected 0556ba2fd
# Test Case 31 FAIL: C[1][2] mismatch! Actual x, Expected 0b0ecb8c3
# Test Case 31 FAIL: C[1][3] mismatch! Actual x, Expected 12c18bf5f
# Test Case 31 FAIL: C[2][0] mismatch! Actual x, Expected 1b895f692
# Test Case 31 FAIL: C[2][1] mismatch! Actual x, Expected 0f50281ce
# Test Case 31 FAIL: C[2][2] mismatch! Actual x, Expected 0e642f9b2
# Test Case 31 FAIL: C[2][3] mismatch! Actual x, Expected 1f3b33db6
# Test Case 31 FAIL: C[3][0] mismatch! Actual x, Expected 07f257eec
# Test Case 31 FAIL: C[3][1] mismatch! Actual x, Expected 0484c6ad4
# Test Case 31 FAIL: C[3][2] mismatch! Actual x, Expected 02227df3d
# Test Case 31 FAIL: C[3][3] mismatch! Actual x, Expected 0bfabc8c7
# Test Case 31 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 32 of 100
# ===================================================
# Reading test case 32:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            26256000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 178d
#   Loading A[0][1] (Bank 1, Addr 0) with dc28
#   Loading A[0][2] (Bank 2, Addr 0) with e7a3
#   Loading A[0][3] (Bank 3, Addr 0) with 94ed
#   Loading A[1][0] (Bank 0, Addr 1) with 8d6f
#   Loading A[1][1] (Bank 1, Addr 1) with 8ef1
#   Loading A[1][2] (Bank 2, Addr 1) with 7c0c
#   Loading A[1][3] (Bank 3, Addr 1) with e841
#   Loading A[2][0] (Bank 0, Addr 2) with 0a4b
#   Loading A[2][1] (Bank 1, Addr 2) with 86b7
#   Loading A[2][2] (Bank 2, Addr 2) with 74e0
#   Loading A[2][3] (Bank 3, Addr 2) with af23
#   Loading A[3][0] (Bank 0, Addr 3) with 625e
#   Loading A[3][1] (Bank 1, Addr 3) with 2508
#   Loading A[3][2] (Bank 2, Addr 3) with f6cc
#   Loading A[3][3] (Bank 3, Addr 3) with c632
#   Loading B[0][0] (Bank 0, Addr 0) with d285
#   Loading B[0][1] (Bank 1, Addr 0) with 0e98
#   Loading B[0][2] (Bank 2, Addr 0) with 9863
#   Loading B[0][3] (Bank 3, Addr 0) with b2f4
#   Loading B[1][0] (Bank 0, Addr 1) with 1ab6
#   Loading B[1][1] (Bank 1, Addr 1) with ffb2
#   Loading B[1][2] (Bank 2, Addr 1) with ddda
#   Loading B[1][3] (Bank 3, Addr 1) with b763
#   Loading B[2][0] (Bank 0, Addr 2) with 2601
#   Loading B[2][1] (Bank 1, Addr 2) with ca2d
#   Loading B[2][2] (Bank 2, Addr 2) with 2e88
#   Loading B[2][3] (Bank 3, Addr 2) with c4b6
#   Loading B[3][0] (Bank 0, Addr 3) with 4a9e
#   Loading B[3][1] (Bank 1, Addr 3) with d48c
#   Loading B[3][2] (Bank 2, Addr 3) with 5016
#   Loading B[3][3] (Bank 3, Addr 3) with ec61
# Matrix loading complete.
# @            26595000 Simulating controller signals to execute multiplication...
# @26615000: Starting input feeding sequence...
# @26615000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @26626000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            26905000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 32...
# Test Case 32 FAIL: C[0][0] mismatch! Actual 0, Expected 04052c77a
# Test Case 32 FAIL: C[0][1] mismatch! Actual x, Expected 0e8683a7d
# Test Case 32 FAIL: C[0][2] mismatch! Actual x, Expected 0a93adcf9
# Test Case 32 FAIL: C[0][3] mismatch! Actual x, Expected 0d8843241
# Test Case 32 FAIL: C[1][0] mismatch! Actual x, Expected 0e2c025c5
# Test Case 32 FAIL: C[1][1] mismatch! Actual x, Expected 124754edd
# Test Case 32 FAIL: C[1][2] mismatch! Actual x, Expected 122fecb9a
# Test Case 32 FAIL: C[1][3] mismatch! Actual x, Expected 18a007e75
# Test Case 32 FAIL: C[2][0] mismatch! Actual x, Expected 124b674ff
# Test Case 32 FAIL: C[2][1] mismatch! Actual x, Expected 1b24fda10
# Test Case 32 FAIL: C[2][2] mismatch! Actual x, Expected 157d5a6c9
# Test Case 32 FAIL: C[2][3] mismatch! Actual x, Expected 23878d48c
# Test Case 32 FAIL: C[3][0] mismatch! Actual x, Expected 0e6782956
# Test Case 32 FAIL: C[3][1] mismatch! Actual x, Expected 21f55d169
# Test Case 32 FAIL: C[3][2] mismatch! Actual x, Expected 17fc230e5
# Test Case 32 FAIL: C[3][3] mismatch! Actual x, Expected 24c0f83db
# Test Case 32 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 33 of 100
# ===================================================
# Reading test case 33:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            27076000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e0f0
#   Loading A[0][1] (Bank 1, Addr 0) with 413c
#   Loading A[0][2] (Bank 2, Addr 0) with dce4
#   Loading A[0][3] (Bank 3, Addr 0) with cad0
#   Loading A[1][0] (Bank 0, Addr 1) with d0d5
#   Loading A[1][1] (Bank 1, Addr 1) with 41ba
#   Loading A[1][2] (Bank 2, Addr 1) with 2be9
#   Loading A[1][3] (Bank 3, Addr 1) with b487
#   Loading A[2][0] (Bank 0, Addr 2) with a840
#   Loading A[2][1] (Bank 1, Addr 2) with e296
#   Loading A[2][2] (Bank 2, Addr 2) with 5824
#   Loading A[2][3] (Bank 3, Addr 2) with 2fb7
#   Loading A[3][0] (Bank 0, Addr 3) with 8330
#   Loading A[3][1] (Bank 1, Addr 3) with b007
#   Loading A[3][2] (Bank 2, Addr 3) with 55f1
#   Loading A[3][3] (Bank 3, Addr 3) with 4ec0
#   Loading B[0][0] (Bank 0, Addr 0) with 761d
#   Loading B[0][1] (Bank 1, Addr 0) with abed
#   Loading B[0][2] (Bank 2, Addr 0) with e640
#   Loading B[0][3] (Bank 3, Addr 0) with 475d
#   Loading B[1][0] (Bank 0, Addr 1) with 586e
#   Loading B[1][1] (Bank 1, Addr 1) with bfb2
#   Loading B[1][2] (Bank 2, Addr 1) with 50d6
#   Loading B[1][3] (Bank 3, Addr 1) with 54c5
#   Loading B[2][0] (Bank 0, Addr 2) with 9721
#   Loading B[2][1] (Bank 1, Addr 2) with 0209
#   Loading B[2][2] (Bank 2, Addr 2) with dae6
#   Loading B[2][3] (Bank 3, Addr 2) with 7407
#   Loading B[3][0] (Bank 0, Addr 3) with 1ced
#   Loading B[3][1] (Bank 1, Addr 3) with f0b7
#   Loading B[3][2] (Bank 2, Addr 3) with b82a
#   Loading B[3][3] (Bank 3, Addr 3) with deb0
# Matrix loading complete.
# @            27415000 Simulating controller signals to execute multiplication...
# @27435000: Starting input feeding sequence...
# @27435000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @27446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            27725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 33...
# Test Case 33 FAIL: C[0][0] mismatch! Actual 1, Expected 122113266
# Test Case 33 FAIL: C[0][1] mismatch! Actual x, Expected 1b021deda
# Test Case 33 FAIL: C[0][2] mismatch! Actual x, Expected 1fa7ead6e
# Test Case 33 FAIL: C[0][3] mismatch! Actual x, Expected 1423a49d9
# Test Case 33 FAIL: C[1][0] mismatch! Actual x, Expected 0ce74a389
# Test Case 33 FAIL: C[1][1] mismatch! Actual x, Expected 104587a27
# Test Case 33 FAIL: C[1][2] mismatch! Actual x, Expected 18fce8066
# Test Case 33 FAIL: C[1][3] mismatch! Actual x, Expected 127c433d8
# Test Case 33 FAIL: C[2][0] mismatch! Actual x, Expected 0b2d398b3
# Test Case 33 FAIL: C[2][1] mismatch! Actual x, Expected 106bceaa1
# Test Case 33 FAIL: C[2][2] mismatch! Actual x, Expected 15dbabfa8
# Test Case 33 FAIL: C[2][3] mismatch! Actual x, Expected 0bed285cd
# Test Case 33 FAIL: C[3][0] mismatch! Actual x, Expected 0c0ffd2e9
# Test Case 33 FAIL: C[3][1] mismatch! Actual x, Expected 159d0581d
# Test Case 33 FAIL: C[3][2] mismatch! Actual x, Expected 150de4cc4
# Test Case 33 FAIL: C[3][3] mismatch! Actual x, Expected 0ce717374
# Test Case 33 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 34 of 100
# ===================================================
# Reading test case 34:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            27896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b766
#   Loading A[0][1] (Bank 1, Addr 0) with f32d
#   Loading A[0][2] (Bank 2, Addr 0) with f082
#   Loading A[0][3] (Bank 3, Addr 0) with 4565
#   Loading A[1][0] (Bank 0, Addr 1) with 2e80
#   Loading A[1][1] (Bank 1, Addr 1) with 9b10
#   Loading A[1][2] (Bank 2, Addr 1) with 43bb
#   Loading A[1][3] (Bank 3, Addr 1) with 6030
#   Loading A[2][0] (Bank 0, Addr 2) with 973c
#   Loading A[2][1] (Bank 1, Addr 2) with 079e
#   Loading A[2][2] (Bank 2, Addr 2) with 3b93
#   Loading A[2][3] (Bank 3, Addr 2) with d371
#   Loading A[3][0] (Bank 0, Addr 3) with b7e5
#   Loading A[3][1] (Bank 1, Addr 3) with a40a
#   Loading A[3][2] (Bank 2, Addr 3) with 1ebd
#   Loading A[3][3] (Bank 3, Addr 3) with 2e5b
#   Loading B[0][0] (Bank 0, Addr 0) with 25e3
#   Loading B[0][1] (Bank 1, Addr 0) with 3c5f
#   Loading B[0][2] (Bank 2, Addr 0) with 6771
#   Loading B[0][3] (Bank 3, Addr 0) with 29ac
#   Loading B[1][0] (Bank 0, Addr 1) with 8f04
#   Loading B[1][1] (Bank 1, Addr 1) with e70c
#   Loading B[1][2] (Bank 2, Addr 1) with 9756
#   Loading B[1][3] (Bank 3, Addr 1) with 0633
#   Loading B[2][0] (Bank 0, Addr 2) with 82f5
#   Loading B[2][1] (Bank 1, Addr 2) with a36c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a91
#   Loading B[2][3] (Bank 3, Addr 2) with 6b26
#   Loading B[3][0] (Bank 0, Addr 3) with 66fc
#   Loading B[3][1] (Bank 1, Addr 3) with 2025
#   Loading B[3][2] (Bank 2, Addr 3) with 1042
#   Loading B[3][3] (Bank 3, Addr 3) with d08f
# Matrix loading complete.
# @            28235000 Simulating controller signals to execute multiplication...
# @28255000: Starting input feeding sequence...
# @28255000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @28266000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            28545000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 34...
# Test Case 34 FAIL: C[0][0] mismatch! Actual 1, Expected 0cc760f4a
# Test Case 34 FAIL: C[0][1] mismatch! Actual x, Expected 0ccd9da43
# Test Case 34 FAIL: C[0][2] mismatch! Actual x, Expected 0b03a570c
# Test Case 34 FAIL: C[0][3] mismatch! Actual x, Expected 0f41821db
# Test Case 34 FAIL: C[1][0] mismatch! Actual x, Expected 0c0807a35
# Test Case 34 FAIL: C[1][1] mismatch! Actual x, Expected 0dec1448d
# Test Case 34 FAIL: C[1][2] mismatch! Actual x, Expected 0cb83a04f
# Test Case 34 FAIL: C[1][3] mismatch! Actual x, Expected 0b42ac876
# Test Case 34 FAIL: C[2][0] mismatch! Actual x, Expected 07445caed
# Test Case 34 FAIL: C[2][1] mismatch! Actual x, Expected 09fbc6e57
# Test Case 34 FAIL: C[2][2] mismatch! Actual x, Expected 0a3f8de31
# Test Case 34 FAIL: C[2][3] mismatch! Actual x, Expected 05ac44dfe
# Test Case 34 FAIL: C[3][0] mismatch! Actual x, Expected 0bed11308
# Test Case 34 FAIL: C[3][1] mismatch! Actual x, Expected 0f3f9788e
# Test Case 34 FAIL: C[3][2] mismatch! Actual x, Expected 0afdd152c
# Test Case 34 FAIL: C[3][3] mismatch! Actual x, Expected 08be38907
# Test Case 34 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 35 of 100
# ===================================================
# Reading test case 35:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            28716000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9380
#   Loading A[0][1] (Bank 1, Addr 0) with 5b89
#   Loading A[0][2] (Bank 2, Addr 0) with e57e
#   Loading A[0][3] (Bank 3, Addr 0) with 5958
#   Loading A[1][0] (Bank 0, Addr 1) with 16ff
#   Loading A[1][1] (Bank 1, Addr 1) with 2861
#   Loading A[1][2] (Bank 2, Addr 1) with 7b2e
#   Loading A[1][3] (Bank 3, Addr 1) with 71e8
#   Loading A[2][0] (Bank 0, Addr 2) with 7809
#   Loading A[2][1] (Bank 1, Addr 2) with 00dc
#   Loading A[2][2] (Bank 2, Addr 2) with bc11
#   Loading A[2][3] (Bank 3, Addr 2) with 65c8
#   Loading A[3][0] (Bank 0, Addr 3) with c39d
#   Loading A[3][1] (Bank 1, Addr 3) with 185a
#   Loading A[3][2] (Bank 2, Addr 3) with 4357
#   Loading A[3][3] (Bank 3, Addr 3) with af4f
#   Loading B[0][0] (Bank 0, Addr 0) with cf3b
#   Loading B[0][1] (Bank 1, Addr 0) with 142c
#   Loading B[0][2] (Bank 2, Addr 0) with 567c
#   Loading B[0][3] (Bank 3, Addr 0) with 0d2e
#   Loading B[1][0] (Bank 0, Addr 1) with c3b0
#   Loading B[1][1] (Bank 1, Addr 1) with 9c18
#   Loading B[1][2] (Bank 2, Addr 1) with 3f27
#   Loading B[1][3] (Bank 3, Addr 1) with 259e
#   Loading B[2][0] (Bank 0, Addr 2) with 07fc
#   Loading B[2][1] (Bank 1, Addr 2) with 54a8
#   Loading B[2][2] (Bank 2, Addr 2) with 1f78
#   Loading B[2][3] (Bank 3, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with a6a3
#   Loading B[3][1] (Bank 1, Addr 3) with f4bd
#   Loading B[3][2] (Bank 2, Addr 3) with 2884
#   Loading B[3][3] (Bank 3, Addr 3) with 0109
# Matrix loading complete.
# @            29055000 Simulating controller signals to execute multiplication...
# @29075000: Starting input feeding sequence...
# @29075000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @29086000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            29365000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 35...
# Test Case 35 FAIL: C[0][0] mismatch! Actual 0, Expected 10c0d4da3
# Test Case 35 FAIL: C[0][1] mismatch! Actual x, Expected 0fc58aeb9
# Test Case 35 FAIL: C[0][2] mismatch! Actual x, Expected 065377405
# Test Case 35 FAIL: C[0][3] mismatch! Actual x, Expected 06ae514e2
# Test Case 35 FAIL: C[1][0] mismatch! Actual x, Expected 078d73f21
# Test Case 35 FAIL: C[1][1] mismatch! Actual x, Expected 03765d776
# Test Case 35 FAIL: C[1][2] mismatch! Actual x, Expected 02cd80bab
# Test Case 35 FAIL: C[1][3] mismatch! Actual x, Expected 00b6ce8ba
# Test Case 35 FAIL: C[2][0] mismatch! Actual x, Expected 149a161cb
# Test Case 35 FAIL: C[2][1] mismatch! Actual x, Expected 0dbc2805b
# Test Case 35 FAIL: C[2][2] mismatch! Actual x, Expected 08db11ade
# Test Case 35 FAIL: C[2][3] mismatch! Actual x, Expected 0b33c312a
# Test Case 35 FAIL: C[3][0] mismatch! Actual x, Expected 114ae48f5
# Test Case 35 FAIL: C[3][1] mismatch! Actual x, Expected 115bf6d73
# Test Case 35 FAIL: C[3][2] mismatch! Actual x, Expected 06289f374
# Test Case 35 FAIL: C[3][3] mismatch! Actual x, Expected 066b5e41f
# Test Case 35 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 36 of 100
# ===================================================
# Reading test case 36:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            29536000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with fc12
#   Loading A[0][1] (Bank 1, Addr 0) with 0026
#   Loading A[0][2] (Bank 2, Addr 0) with 55e6
#   Loading A[0][3] (Bank 3, Addr 0) with 99cb
#   Loading A[1][0] (Bank 0, Addr 1) with 9f38
#   Loading A[1][1] (Bank 1, Addr 1) with 8db9
#   Loading A[1][2] (Bank 2, Addr 1) with 81c6
#   Loading A[1][3] (Bank 3, Addr 1) with f8d3
#   Loading A[2][0] (Bank 0, Addr 2) with e82d
#   Loading A[2][1] (Bank 1, Addr 2) with 6bdc
#   Loading A[2][2] (Bank 2, Addr 2) with 7e46
#   Loading A[2][3] (Bank 3, Addr 2) with 88d0
#   Loading A[3][0] (Bank 0, Addr 3) with 6504
#   Loading A[3][1] (Bank 1, Addr 3) with e88d
#   Loading A[3][2] (Bank 2, Addr 3) with 455d
#   Loading A[3][3] (Bank 3, Addr 3) with 854a
#   Loading B[0][0] (Bank 0, Addr 0) with 5d5a
#   Loading B[0][1] (Bank 1, Addr 0) with d381
#   Loading B[0][2] (Bank 2, Addr 0) with ba4a
#   Loading B[0][3] (Bank 3, Addr 0) with dcd3
#   Loading B[1][0] (Bank 0, Addr 1) with 1edd
#   Loading B[1][1] (Bank 1, Addr 1) with 0b18
#   Loading B[1][2] (Bank 2, Addr 1) with cd4e
#   Loading B[1][3] (Bank 3, Addr 1) with e166
#   Loading B[2][0] (Bank 0, Addr 2) with 3800
#   Loading B[2][1] (Bank 1, Addr 2) with 6f0a
#   Loading B[2][2] (Bank 2, Addr 2) with 174a
#   Loading B[2][3] (Bank 3, Addr 2) with 826a
#   Loading B[3][0] (Bank 0, Addr 3) with a1c1
#   Loading B[3][1] (Bank 1, Addr 3) with 9474
#   Loading B[3][2] (Bank 2, Addr 3) with 1927
#   Loading B[3][3] (Bank 3, Addr 3) with 4401
# Matrix loading complete.
# @            29875000 Simulating controller signals to execute multiplication...
# @29895000: Starting input feeding sequence...
# @29895000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @29906000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            30185000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 36...
# Test Case 36 FAIL: C[0][0] mismatch! Actual 1, Expected 0e1baafb0
# Test Case 36 FAIL: C[0][1] mismatch! Actual x, Expected 17670dae4
# Test Case 36 FAIL: C[0][2] mismatch! Actual x, Expected 1562a3be2
# Test Case 36 FAIL: C[0][3] mismatch! Actual x, Expected 1f6bb54cc
# Test Case 36 FAIL: C[1][0] mismatch! Actual x, Expected 0bbac015e
# Test Case 36 FAIL: C[1][1] mismatch! Actual x, Expected 0bbe71ffa
# Test Case 36 FAIL: C[1][2] mismatch! Actual x, Expected 0926d1e6d
# Test Case 36 FAIL: C[1][3] mismatch! Actual x, Expected 0f1a195ad
# Test Case 36 FAIL: C[2][0] mismatch! Actual x, Expected 0766b14e7
# Test Case 36 FAIL: C[2][1] mismatch! Actual x, Expected 0ab960256
# Test Case 36 FAIL: C[2][2] mismatch! Actual x, Expected 0b8e27937
# Test Case 36 FAIL: C[2][3] mismatch! Actual x, Expected 10f1bfdcf
# Test Case 36 FAIL: C[3][0] mismatch! Actual x, Expected 0c839df4f
# Test Case 36 FAIL: C[3][1] mismatch! Actual x, Expected 1127aeabb
# Test Case 36 FAIL: C[3][2] mismatch! Actual x, Expected 151017e5e
# Test Case 36 FAIL: C[3][3] mismatch! Actual x, Expected 1c8d840cd
# Test Case 36 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 37 of 100
# ===================================================
# Reading test case 37:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            30356000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 46eb
#   Loading A[0][1] (Bank 1, Addr 0) with 5d28
#   Loading A[0][2] (Bank 2, Addr 0) with a251
#   Loading A[0][3] (Bank 3, Addr 0) with d060
#   Loading A[1][0] (Bank 0, Addr 1) with b455
#   Loading A[1][1] (Bank 1, Addr 1) with 376b
#   Loading A[1][2] (Bank 2, Addr 1) with 0c9a
#   Loading A[1][3] (Bank 3, Addr 1) with f04c
#   Loading A[2][0] (Bank 0, Addr 2) with dc29
#   Loading A[2][1] (Bank 1, Addr 2) with 5378
#   Loading A[2][2] (Bank 2, Addr 2) with bd77
#   Loading A[2][3] (Bank 3, Addr 2) with 2e86
#   Loading A[3][0] (Bank 0, Addr 3) with 674e
#   Loading A[3][1] (Bank 1, Addr 3) with 06b7
#   Loading A[3][2] (Bank 2, Addr 3) with 7572
#   Loading A[3][3] (Bank 3, Addr 3) with 64cf
#   Loading B[0][0] (Bank 0, Addr 0) with 6cba
#   Loading B[0][1] (Bank 1, Addr 0) with 2b96
#   Loading B[0][2] (Bank 2, Addr 0) with 061c
#   Loading B[0][3] (Bank 3, Addr 0) with 2251
#   Loading B[1][0] (Bank 0, Addr 1) with fe28
#   Loading B[1][1] (Bank 1, Addr 1) with a278
#   Loading B[1][2] (Bank 2, Addr 1) with f49d
#   Loading B[1][3] (Bank 3, Addr 1) with 9bc5
#   Loading B[2][0] (Bank 0, Addr 2) with 350a
#   Loading B[2][1] (Bank 1, Addr 2) with b2d3
#   Loading B[2][2] (Bank 2, Addr 2) with 18a3
#   Loading B[2][3] (Bank 3, Addr 2) with 0716
#   Loading B[3][0] (Bank 0, Addr 3) with e4d2
#   Loading B[3][1] (Bank 1, Addr 3) with f7eb
#   Loading B[3][2] (Bank 2, Addr 3) with f927
#   Loading B[3][3] (Bank 3, Addr 3) with 0d33
# Matrix loading complete.
# @            30695000 Simulating controller signals to execute multiplication...
# @30715000: Starting input feeding sequence...
# @30715000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @30726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            31005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 37...
# Test Case 37 FAIL: C[0][0] mismatch! Actual 0, Expected 15b1a7a9c
# Test Case 37 FAIL: C[0][1] mismatch! Actual x, Expected 17c5a66ef
# Test Case 37 FAIL: C[0][2] mismatch! Actual x, Expected 127bb80d2
# Test Case 37 FAIL: C[0][3] mismatch! Actual x, Expected 082a777d4
# Test Case 37 FAIL: C[1][0] mismatch! Actual x, Expected 075e0fa96
# Test Case 37 FAIL: C[1][1] mismatch! Actual x, Expected 073d6f47d
# Test Case 37 FAIL: C[1][2] mismatch! Actual x, Expected 045be8348
# Test Case 37 FAIL: C[1][3] mismatch! Actual x, Expected 030dd4dc4
# Test Case 37 FAIL: C[2][0] mismatch! Actual x, Expected 0e1adc814
# Test Case 37 FAIL: C[2][1] mismatch! Actual x, Expected 119b7c761
# Test Case 37 FAIL: C[2][2] mismatch! Actual x, Expected 09473ba71
# Test Case 37 FAIL: C[2][3] mismatch! Actual x, Expected 028b9c713
# Test Case 37 FAIL: C[3][0] mismatch! Actual x, Expected 1aacf76aa
# Test Case 37 FAIL: C[3][1] mismatch! Actual x, Expected 13e1abb57
# Test Case 37 FAIL: C[3][2] mismatch! Actual x, Expected 1512bbaf7
# Test Case 37 FAIL: C[3][3] mismatch! Actual x, Expected 0b4a1de9d
# Test Case 37 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 38 of 100
# ===================================================
# Reading test case 38:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            31176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 61f6
#   Loading A[0][1] (Bank 1, Addr 0) with 7fd6
#   Loading A[0][2] (Bank 2, Addr 0) with fe58
#   Loading A[0][3] (Bank 3, Addr 0) with 65f5
#   Loading A[1][0] (Bank 0, Addr 1) with 4d00
#   Loading A[1][1] (Bank 1, Addr 1) with 81ee
#   Loading A[1][2] (Bank 2, Addr 1) with 4672
#   Loading A[1][3] (Bank 3, Addr 1) with f806
#   Loading A[2][0] (Bank 0, Addr 2) with f696
#   Loading A[2][1] (Bank 1, Addr 2) with 2430
#   Loading A[2][2] (Bank 2, Addr 2) with 1d1d
#   Loading A[2][3] (Bank 3, Addr 2) with 6641
#   Loading A[3][0] (Bank 0, Addr 3) with 9d74
#   Loading A[3][1] (Bank 1, Addr 3) with e3ec
#   Loading A[3][2] (Bank 2, Addr 3) with 7099
#   Loading A[3][3] (Bank 3, Addr 3) with 9b90
#   Loading B[0][0] (Bank 0, Addr 0) with ad76
#   Loading B[0][1] (Bank 1, Addr 0) with 5356
#   Loading B[0][2] (Bank 2, Addr 0) with 4564
#   Loading B[0][3] (Bank 3, Addr 0) with 4aff
#   Loading B[1][0] (Bank 0, Addr 1) with b97f
#   Loading B[1][1] (Bank 1, Addr 1) with 1adb
#   Loading B[1][2] (Bank 2, Addr 1) with 8545
#   Loading B[1][3] (Bank 3, Addr 1) with 239a
#   Loading B[2][0] (Bank 0, Addr 2) with b22e
#   Loading B[2][1] (Bank 1, Addr 2) with 970b
#   Loading B[2][2] (Bank 2, Addr 2) with 527b
#   Loading B[2][3] (Bank 3, Addr 2) with 8f34
#   Loading B[3][0] (Bank 0, Addr 3) with 0a85
#   Loading B[3][1] (Bank 1, Addr 3) with e375
#   Loading B[3][2] (Bank 2, Addr 3) with ec05
#   Loading B[3][3] (Bank 3, Addr 3) with e27a
# Matrix loading complete.
# @            31515000 Simulating controller signals to execute multiplication...
# @31535000: Starting input feeding sequence...
# @31535000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @31546000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            31825000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 38...
# Test Case 38 FAIL: C[0][0] mismatch! Actual 0, Expected 12c44889c
# Test Case 38 FAIL: C[0][1] mismatch! Actual x, Expected 1455a6e1a
# Test Case 38 FAIL: C[0][2] mismatch! Actual x, Expected 1233fdc6e
# Test Case 38 FAIL: C[0][3] mismatch! Actual x, Expected 13ca353ca
# Test Case 38 FAIL: C[1][0] mismatch! Actual x, Expected 0d7517ff2
# Test Case 38 FAIL: C[1][1] mismatch! Actual x, Expected 1171af36a
# Test Case 38 FAIL: C[1][2] mismatch! Actual x, Expected 144150f6a
# Test Case 38 FAIL: C[1][3] mismatch! Actual x, Expected 11566058e
# Test Case 38 FAIL: C[2][0] mismatch! Actual x, Expected 0f845e7d1
# Test Case 38 FAIL: C[2][1] mismatch! Actual x, Expected 0cf684d42
# Test Case 38 FAIL: C[2][2] mismatch! Actual x, Expected 0dacdcf06
# Test Case 38 FAIL: C[2][3] mismatch! Actual x, Expected 0c834980a
# Test Case 38 FAIL: C[3][0] mismatch! Actual x, Expected 1465cf466
# Test Case 38 FAIL: C[3][1] mismatch! Actual x, Expected 101c1fd0b
# Test Case 38 FAIL: C[3][2] mismatch! Actual x, Expected 14d1e915d
# Test Case 38 FAIL: C[3][3] mismatch! Actual x, Expected 1032ebd7b
# Test Case 38 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 39 of 100
# ===================================================
# Reading test case 39:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            31996000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d8a6
#   Loading A[0][1] (Bank 1, Addr 0) with 090c
#   Loading A[0][2] (Bank 2, Addr 0) with b379
#   Loading A[0][3] (Bank 3, Addr 0) with 4b1a
#   Loading A[1][0] (Bank 0, Addr 1) with ea63
#   Loading A[1][1] (Bank 1, Addr 1) with ab5b
#   Loading A[1][2] (Bank 2, Addr 1) with 1bea
#   Loading A[1][3] (Bank 3, Addr 1) with 5107
#   Loading A[2][0] (Bank 0, Addr 2) with 958b
#   Loading A[2][1] (Bank 1, Addr 2) with fa87
#   Loading A[2][2] (Bank 2, Addr 2) with 1f4f
#   Loading A[2][3] (Bank 3, Addr 2) with a88e
#   Loading A[3][0] (Bank 0, Addr 3) with 383b
#   Loading A[3][1] (Bank 1, Addr 3) with 0a9e
#   Loading A[3][2] (Bank 2, Addr 3) with 09ac
#   Loading A[3][3] (Bank 3, Addr 3) with 1d85
#   Loading B[0][0] (Bank 0, Addr 0) with 922e
#   Loading B[0][1] (Bank 1, Addr 0) with 754c
#   Loading B[0][2] (Bank 2, Addr 0) with aefe
#   Loading B[0][3] (Bank 3, Addr 0) with 2d98
#   Loading B[1][0] (Bank 0, Addr 1) with d095
#   Loading B[1][1] (Bank 1, Addr 1) with 6a4d
#   Loading B[1][2] (Bank 2, Addr 1) with ba4c
#   Loading B[1][3] (Bank 3, Addr 1) with 9f77
#   Loading B[2][0] (Bank 0, Addr 2) with 6e95
#   Loading B[2][1] (Bank 1, Addr 2) with 4a94
#   Loading B[2][2] (Bank 2, Addr 2) with 2d67
#   Loading B[2][3] (Bank 3, Addr 2) with 15ea
#   Loading B[3][0] (Bank 0, Addr 3) with 00b9
#   Loading B[3][1] (Bank 1, Addr 3) with 0520
#   Loading B[3][2] (Bank 2, Addr 3) with e8e6
#   Loading B[3][3] (Bank 3, Addr 3) with 1838
# Matrix loading complete.
# @            32335000 Simulating controller signals to execute multiplication...
# @32355000: Starting input feeding sequence...
# @32355000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @32366000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            32645000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 39...
# Test Case 39 FAIL: C[0][0] mismatch! Actual 0, Expected 17b6fdbfd
# Test Case 39 FAIL: C[0][1] mismatch! Actual x, Expected 0f1487dcb
# Test Case 39 FAIL: C[0][2] mismatch! Actual x, Expected 18c56e307
# Test Case 39 FAIL: C[0][3] mismatch! Actual x, Expected 0cab52e8b
# Test Case 39 FAIL: C[1][0] mismatch! Actual x, Expected 0fd07a2e0
# Test Case 39 FAIL: C[1][1] mismatch! Actual x, Expected 0947ea9bb
# Test Case 39 FAIL: C[1][2] mismatch! Actual x, Expected 0b8f96031
# Test Case 39 FAIL: C[1][3] mismatch! Actual x, Expected 082ccdc63
# Test Case 39 FAIL: C[2][0] mismatch! Actual x, Expected 08ac6c937
# Test Case 39 FAIL: C[2][1] mismatch! Actual x, Expected 067235f7a
# Test Case 39 FAIL: C[2][2] mismatch! Actual x, Expected 09d58a9d7
# Test Case 39 FAIL: C[2][3] mismatch! Actual x, Expected 034f27b74
# Test Case 39 FAIL: C[3][0] mismatch! Actual x, Expected 0b5cb9f82
# Test Case 39 FAIL: C[3][1] mismatch! Actual x, Expected 075c03a8b
# Test Case 39 FAIL: C[3][2] mismatch! Actual x, Expected 0a70d2880
# Test Case 39 FAIL: C[3][3] mismatch! Actual x, Expected 05111d195
# Test Case 39 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 40 of 100
# ===================================================
# Reading test case 40:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            32816000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4282
#   Loading A[0][1] (Bank 1, Addr 0) with 151e
#   Loading A[0][2] (Bank 2, Addr 0) with cfcd
#   Loading A[0][3] (Bank 3, Addr 0) with ed34
#   Loading A[1][0] (Bank 0, Addr 1) with 38e5
#   Loading A[1][1] (Bank 1, Addr 1) with dc9a
#   Loading A[1][2] (Bank 2, Addr 1) with ea7c
#   Loading A[1][3] (Bank 3, Addr 1) with c0f2
#   Loading A[2][0] (Bank 0, Addr 2) with 81d1
#   Loading A[2][1] (Bank 1, Addr 2) with 2dd1
#   Loading A[2][2] (Bank 2, Addr 2) with ca09
#   Loading A[2][3] (Bank 3, Addr 2) with d529
#   Loading A[3][0] (Bank 0, Addr 3) with 4ce1
#   Loading A[3][1] (Bank 1, Addr 3) with 7822
#   Loading A[3][2] (Bank 2, Addr 3) with 9997
#   Loading A[3][3] (Bank 3, Addr 3) with 6200
#   Loading B[0][0] (Bank 0, Addr 0) with 4e89
#   Loading B[0][1] (Bank 1, Addr 0) with 02c3
#   Loading B[0][2] (Bank 2, Addr 0) with 491a
#   Loading B[0][3] (Bank 3, Addr 0) with d16c
#   Loading B[1][0] (Bank 0, Addr 1) with e690
#   Loading B[1][1] (Bank 1, Addr 1) with d186
#   Loading B[1][2] (Bank 2, Addr 1) with a4e0
#   Loading B[1][3] (Bank 3, Addr 1) with 6897
#   Loading B[2][0] (Bank 0, Addr 2) with 5096
#   Loading B[2][1] (Bank 1, Addr 2) with ae45
#   Loading B[2][2] (Bank 2, Addr 2) with c54e
#   Loading B[2][3] (Bank 3, Addr 2) with f4fa
#   Loading B[3][0] (Bank 0, Addr 3) with dec3
#   Loading B[3][1] (Bank 1, Addr 3) with 085c
#   Loading B[3][2] (Bank 2, Addr 3) with f98b
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @            33155000 Simulating controller signals to execute multiplication...
# @33175000: Starting input feeding sequence...
# @33175000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @33186000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            33465000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 40...
# Test Case 40 FAIL: C[0][0] mismatch! Actual 1, Expected 0b368003b
# Test Case 40 FAIL: C[0][1] mismatch! Actual x, Expected 08a2a1e15
# Test Case 40 FAIL: C[0][2] mismatch! Actual x, Expected 0e6a0496d
# Test Case 40 FAIL: C[0][3] mismatch! Actual x, Expected 0d8e333a0
# Test Case 40 FAIL: C[1][0] mismatch! Actual x, Expected 1441e0a0a
# Test Case 40 FAIL: C[1][1] mismatch! Actual x, Expected 0d7e42803
# Test Case 40 FAIL: C[1][2] mismatch! Actual x, Expected 12c8578f0
# Test Case 40 FAIL: C[1][3] mismatch! Actual x, Expected 0aeb352ee
# Test Case 40 FAIL: C[2][0] mismatch! Actual x, Expected 1d82e19c0
# Test Case 40 FAIL: C[2][1] mismatch! Actual x, Expected 150b458c0
# Test Case 40 FAIL: C[2][2] mismatch! Actual x, Expected 203c8ec0d
# Test Case 40 FAIL: C[2][3] mismatch! Actual x, Expected 1e91d1577
# Test Case 40 FAIL: C[3][0] mismatch! Actual x, Expected 18eeb18fa
# Test Case 40 FAIL: C[3][1] mismatch! Actual x, Expected 134c83155
# Test Case 40 FAIL: C[3][2] mismatch! Actual x, Expected 1c3d07c86
# Test Case 40 FAIL: C[3][3] mismatch! Actual x, Expected 1effcf8b8
# Test Case 40 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 41 of 100
# ===================================================
# Reading test case 41:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            33636000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 48ef
#   Loading A[0][1] (Bank 1, Addr 0) with 78f0
#   Loading A[0][2] (Bank 2, Addr 0) with d4a8
#   Loading A[0][3] (Bank 3, Addr 0) with d4d0
#   Loading A[1][0] (Bank 0, Addr 1) with 3d53
#   Loading A[1][1] (Bank 1, Addr 1) with 43fe
#   Loading A[1][2] (Bank 2, Addr 1) with df3b
#   Loading A[1][3] (Bank 3, Addr 1) with 587e
#   Loading A[2][0] (Bank 0, Addr 2) with 9daa
#   Loading A[2][1] (Bank 1, Addr 2) with 7b4e
#   Loading A[2][2] (Bank 2, Addr 2) with dd70
#   Loading A[2][3] (Bank 3, Addr 2) with f12c
#   Loading A[3][0] (Bank 0, Addr 3) with 9c3a
#   Loading A[3][1] (Bank 1, Addr 3) with 5b5a
#   Loading A[3][2] (Bank 2, Addr 3) with b76f
#   Loading A[3][3] (Bank 3, Addr 3) with 7d86
#   Loading B[0][0] (Bank 0, Addr 0) with 58cc
#   Loading B[0][1] (Bank 1, Addr 0) with 100b
#   Loading B[0][2] (Bank 2, Addr 0) with cb0b
#   Loading B[0][3] (Bank 3, Addr 0) with ecf2
#   Loading B[1][0] (Bank 0, Addr 1) with b973
#   Loading B[1][1] (Bank 1, Addr 1) with 2216
#   Loading B[1][2] (Bank 2, Addr 1) with 3272
#   Loading B[1][3] (Bank 3, Addr 1) with e7f2
#   Loading B[2][0] (Bank 0, Addr 2) with 810f
#   Loading B[2][1] (Bank 1, Addr 2) with 37cd
#   Loading B[2][2] (Bank 2, Addr 2) with a1a9
#   Loading B[2][3] (Bank 3, Addr 2) with e870
#   Loading B[3][0] (Bank 0, Addr 3) with 8b27
#   Loading B[3][1] (Bank 1, Addr 3) with b8ae
#   Loading B[3][2] (Bank 2, Addr 3) with ba8e
#   Loading B[3][3] (Bank 3, Addr 3) with d3ad
# Matrix loading complete.
# @            33975000 Simulating controller signals to execute multiplication...
# @33995000: Starting input feeding sequence...
# @33995000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @34006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            34285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 41...
# Test Case 41 FAIL: C[0][0] mismatch! Actual 1, Expected 0ea1fff89
# Test Case 41 FAIL: C[0][1] mismatch! Actual x, Expected 09fce03f5
# Test Case 41 FAIL: C[0][2] mismatch! Actual x, Expected 11b56f7a1
# Test Case 41 FAIL: C[0][3] mismatch! Actual x, Expected 18b658ef6
# Test Case 41 FAIL: C[1][0] mismatch! Actual x, Expected 0cb0548a2
# Test Case 41 FAIL: C[1][1] mismatch! Actual x, Expected 06d690cc6
# Test Case 41 FAIL: C[1][2] mismatch! Actual x, Expected 0fdc0e9d6
# Test Case 41 FAIL: C[1][3] mismatch! Actual x, Expected 1690796ee
# Test Case 41 FAIL: C[2][0] mismatch! Actual x, Expected 1bed0c0da
# Test Case 41 FAIL: C[2][1] mismatch! Actual x, Expected 0dfa5806c
# Test Case 41 FAIL: C[2][2] mismatch! Actual x, Expected 1e6294e00
# Test Case 41 FAIL: C[2][3] mismatch! Actual x, Expected 2efcffd99
# Test Case 41 FAIL: C[3][0] mismatch! Actual x, Expected 147bc1358
# Test Case 41 FAIL: C[3][1] mismatch! Actual x, Expected 0a83db114
# Test Case 41 FAIL: C[3][2] mismatch! Actual x, Expected 1adfef76c
# Test Case 41 FAIL: C[3][3] mismatch! Actual x, Expected 257e9ee8a
# Test Case 41 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 42 of 100
# ===================================================
# Reading test case 42:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            34456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dd7f
#   Loading A[0][1] (Bank 1, Addr 0) with 611f
#   Loading A[0][2] (Bank 2, Addr 0) with d8fb
#   Loading A[0][3] (Bank 3, Addr 0) with 13b4
#   Loading A[1][0] (Bank 0, Addr 1) with 993f
#   Loading A[1][1] (Bank 1, Addr 1) with 0f4e
#   Loading A[1][2] (Bank 2, Addr 1) with bc91
#   Loading A[1][3] (Bank 3, Addr 1) with a272
#   Loading A[2][0] (Bank 0, Addr 2) with 975f
#   Loading A[2][1] (Bank 1, Addr 2) with a713
#   Loading A[2][2] (Bank 2, Addr 2) with bec6
#   Loading A[2][3] (Bank 3, Addr 2) with dfc8
#   Loading A[3][0] (Bank 0, Addr 3) with 5212
#   Loading A[3][1] (Bank 1, Addr 3) with f07e
#   Loading A[3][2] (Bank 2, Addr 3) with 0aa9
#   Loading A[3][3] (Bank 3, Addr 3) with e1dc
#   Loading B[0][0] (Bank 0, Addr 0) with 4869
#   Loading B[0][1] (Bank 1, Addr 0) with cd56
#   Loading B[0][2] (Bank 2, Addr 0) with 3902
#   Loading B[0][3] (Bank 3, Addr 0) with 77d7
#   Loading B[1][0] (Bank 0, Addr 1) with 05e1
#   Loading B[1][1] (Bank 1, Addr 1) with a0a8
#   Loading B[1][2] (Bank 2, Addr 1) with a60d
#   Loading B[1][3] (Bank 3, Addr 1) with 12d3
#   Loading B[2][0] (Bank 0, Addr 2) with ef03
#   Loading B[2][1] (Bank 1, Addr 2) with 0c8a
#   Loading B[2][2] (Bank 2, Addr 2) with c7bd
#   Loading B[2][3] (Bank 3, Addr 2) with c6c1
#   Loading B[3][0] (Bank 0, Addr 3) with b8af
#   Loading B[3][1] (Bank 1, Addr 3) with 5047
#   Loading B[3][2] (Bank 2, Addr 3) with 7503
#   Loading B[3][3] (Bank 3, Addr 3) with 0821
# Matrix loading complete.
# @            34795000 Simulating controller signals to execute multiplication...
# @34815000: Starting input feeding sequence...
# @34815000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @34826000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            35105000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 42...
# Test Case 42 FAIL: C[0][0] mismatch! Actual 0, Expected 10ab3fde1
# Test Case 42 FAIL: C[0][1] mismatch! Actual x, Expected 132fb7d36
# Test Case 42 FAIL: C[0][2] mismatch! Actual x, Expected 130576e8a
# Test Case 42 FAIL: C[0][3] mismatch! Actual x, Expected 0eb158887
# Test Case 42 FAIL: C[1][0] mismatch! Actual x, Expected 1654e2fa0
# Test Case 42 FAIL: C[1][1] mismatch! Actual x, Expected 0ab1a45ca
# Test Case 42 FAIL: C[1][2] mismatch! Actual x, Expected 10fd589b5
# Test Case 42 FAIL: C[1][3] mismatch! Actual x, Expected 0b7f0aae4
# Test Case 42 FAIL: C[2][0] mismatch! Actual x, Expected 0fb81ff3d
# Test Case 42 FAIL: C[2][1] mismatch! Actual x, Expected 131102615
# Test Case 42 FAIL: C[2][2] mismatch! Actual x, Expected 144594d7c
# Test Case 42 FAIL: C[2][3] mismatch! Actual x, Expected 107e4245f
# Test Case 42 FAIL: C[3][0] mismatch! Actual x, Expected 17d2c91c2
# Test Case 42 FAIL: C[3][1] mismatch! Actual x, Expected 0c789031c
# Test Case 42 FAIL: C[3][2] mismatch! Actual x, Expected 18397476e
# Test Case 42 FAIL: C[3][3] mismatch! Actual x, Expected 0ca148346
# Test Case 42 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 43 of 100
# ===================================================
# Reading test case 43:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            35276000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bc9b
#   Loading A[0][1] (Bank 1, Addr 0) with 8357
#   Loading A[0][2] (Bank 2, Addr 0) with 4ead
#   Loading A[0][3] (Bank 3, Addr 0) with 3e83
#   Loading A[1][0] (Bank 0, Addr 1) with 1077
#   Loading A[1][1] (Bank 1, Addr 1) with 5b43
#   Loading A[1][2] (Bank 2, Addr 1) with fe94
#   Loading A[1][3] (Bank 3, Addr 1) with 9251
#   Loading A[2][0] (Bank 0, Addr 2) with e766
#   Loading A[2][1] (Bank 1, Addr 2) with a657
#   Loading A[2][2] (Bank 2, Addr 2) with eee6
#   Loading A[2][3] (Bank 3, Addr 2) with 5926
#   Loading A[3][0] (Bank 0, Addr 3) with a943
#   Loading A[3][1] (Bank 1, Addr 3) with d744
#   Loading A[3][2] (Bank 2, Addr 3) with a466
#   Loading A[3][3] (Bank 3, Addr 3) with b99f
#   Loading B[0][0] (Bank 0, Addr 0) with 20fd
#   Loading B[0][1] (Bank 1, Addr 0) with 526c
#   Loading B[0][2] (Bank 2, Addr 0) with 0e3f
#   Loading B[0][3] (Bank 3, Addr 0) with 18e7
#   Loading B[1][0] (Bank 0, Addr 1) with 3b5e
#   Loading B[1][1] (Bank 1, Addr 1) with fe4f
#   Loading B[1][2] (Bank 2, Addr 1) with 6048
#   Loading B[1][3] (Bank 3, Addr 1) with 92bb
#   Loading B[2][0] (Bank 0, Addr 2) with 34d3
#   Loading B[2][1] (Bank 1, Addr 2) with 7aa3
#   Loading B[2][2] (Bank 2, Addr 2) with 9cc1
#   Loading B[2][3] (Bank 3, Addr 2) with 3e84
#   Loading B[3][0] (Bank 0, Addr 3) with 4043
#   Loading B[3][1] (Bank 1, Addr 3) with b6da
#   Loading B[3][2] (Bank 2, Addr 3) with 8055
#   Loading B[3][3] (Bank 3, Addr 3) with a020
# Matrix loading complete.
# @            35615000 Simulating controller signals to execute multiplication...
# @35635000: Starting input feeding sequence...
# @35635000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @35646000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            35925000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 43...
# Test Case 43 FAIL: C[0][0] mismatch! Actual 0, Expected 0765bbb7c
# Test Case 43 FAIL: C[0][1] mismatch! Actual x, Expected 134d4151d
# Test Case 43 FAIL: C[0][2] mismatch! Actual x, Expected 0f33a74c2
# Test Case 43 FAIL: C[0][3] mismatch! Actual x, Expected 0be29a9c2
# Test Case 43 FAIL: C[1][0] mismatch! Actual x, Expected 07e72bd16
# Test Case 43 FAIL: C[1][1] mismatch! Actual x, Expected 16e62f1ae
# Test Case 43 FAIL: C[1][2] mismatch! Actual x, Expected 0fb65c46c
# Test Case 43 FAIL: C[1][3] mismatch! Actual x, Expected 0f059cace
# Test Case 43 FAIL: C[2][0] mismatch! Actual x, Expected 09fbd1d95
# Test Case 43 FAIL: C[2][1] mismatch! Actual x, Expected 1fe183df6
# Test Case 43 FAIL: C[2][2] mismatch! Actual x, Expected 148d1c577
# Test Case 43 FAIL: C[2][3] mismatch! Actual x, Expected 13abcc38f
# Test Case 43 FAIL: C[3][0] mismatch! Actual x, Expected 06afa1324
# Test Case 43 FAIL: C[3][1] mismatch! Actual x, Expected 154c3d4db
# Test Case 43 FAIL: C[3][2] mismatch! Actual x, Expected 0ce259276
# Test Case 43 FAIL: C[3][3] mismatch! Actual x, Expected 0e3d182d8
# Test Case 43 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 44 of 100
# ===================================================
# Reading test case 44:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            36096000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a228
#   Loading A[0][1] (Bank 1, Addr 0) with 1831
#   Loading A[0][2] (Bank 2, Addr 0) with 9573
#   Loading A[0][3] (Bank 3, Addr 0) with d2c6
#   Loading A[1][0] (Bank 0, Addr 1) with 70d0
#   Loading A[1][1] (Bank 1, Addr 1) with c865
#   Loading A[1][2] (Bank 2, Addr 1) with ba18
#   Loading A[1][3] (Bank 3, Addr 1) with 333d
#   Loading A[2][0] (Bank 0, Addr 2) with ddb4
#   Loading A[2][1] (Bank 1, Addr 2) with 7382
#   Loading A[2][2] (Bank 2, Addr 2) with f870
#   Loading A[2][3] (Bank 3, Addr 2) with ca77
#   Loading A[3][0] (Bank 0, Addr 3) with 14fb
#   Loading A[3][1] (Bank 1, Addr 3) with 91b9
#   Loading A[3][2] (Bank 2, Addr 3) with 38d8
#   Loading A[3][3] (Bank 3, Addr 3) with 4269
#   Loading B[0][0] (Bank 0, Addr 0) with b9ea
#   Loading B[0][1] (Bank 1, Addr 0) with e480
#   Loading B[0][2] (Bank 2, Addr 0) with caff
#   Loading B[0][3] (Bank 3, Addr 0) with 0093
#   Loading B[1][0] (Bank 0, Addr 1) with 1a37
#   Loading B[1][1] (Bank 1, Addr 1) with bc9a
#   Loading B[1][2] (Bank 2, Addr 1) with af78
#   Loading B[1][3] (Bank 3, Addr 1) with 3c58
#   Loading B[2][0] (Bank 0, Addr 2) with 60da
#   Loading B[2][1] (Bank 1, Addr 2) with 2c73
#   Loading B[2][2] (Bank 2, Addr 2) with 6744
#   Loading B[2][3] (Bank 3, Addr 2) with f610
#   Loading B[3][0] (Bank 0, Addr 3) with c509
#   Loading B[3][1] (Bank 1, Addr 3) with b00f
#   Loading B[3][2] (Bank 2, Addr 3) with 63b9
#   Loading B[3][3] (Bank 3, Addr 3) with 5187
# Matrix loading complete.
# @            36435000 Simulating controller signals to execute multiplication...
# @36455000: Starting input feeding sequence...
# @36455000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @36466000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            36745000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 44...
# Test Case 44 FAIL: C[0][0] mismatch! Actual 1, Expected 0e556ac5b
# Test Case 44 FAIL: C[0][1] mismatch! Actual x, Expected 118c5a3b1
# Test Case 44 FAIL: C[0][2] mismatch! Actual x, Expected 12f82b18b
# Test Case 44 FAIL: C[0][3] mismatch! Actual x, Expected 0f6bbf315
# Test Case 44 FAIL: C[1][0] mismatch! Actual x, Expected 0c1f26eb2
# Test Case 44 FAIL: C[1][1] mismatch! Actual x, Expected 121806a7f
# Test Case 44 FAIL: C[1][2] mismatch! Actual x, Expected 103e59360
# Test Case 44 FAIL: C[1][3] mismatch! Actual x, Expected 0ccb8f88a
# Test Case 44 FAIL: C[2][0] mismatch! Actual x, Expected 10954e83e
# Test Case 44 FAIL: C[2][1] mismatch! Actual x, Expected 160b966e8
# Test Case 44 FAIL: C[2][2] mismatch! Actual x, Expected 1706ae8a5
# Test Case 44 FAIL: C[2][3] mismatch! Actual x, Expected 12d18e231
# Test Case 44 FAIL: C[3][0] mismatch! Actual x, Expected 11e071f1e
# Test Case 44 FAIL: C[3][1] mismatch! Actual x, Expected 132b4d54e
# Test Case 44 FAIL: C[3][2] mismatch! Actual x, Expected 135cb284f
# Test Case 44 FAIL: C[3][3] mismatch! Actual x, Expected 0e44e3079
# Test Case 44 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 45 of 100
# ===================================================
# Reading test case 45:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            36916000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 18c5
#   Loading A[0][1] (Bank 1, Addr 0) with bb55
#   Loading A[0][2] (Bank 2, Addr 0) with a59a
#   Loading A[0][3] (Bank 3, Addr 0) with 0631
#   Loading A[1][0] (Bank 0, Addr 1) with 56e8
#   Loading A[1][1] (Bank 1, Addr 1) with 46c3
#   Loading A[1][2] (Bank 2, Addr 1) with 3ade
#   Loading A[1][3] (Bank 3, Addr 1) with f3e7
#   Loading A[2][0] (Bank 0, Addr 2) with 0fad
#   Loading A[2][1] (Bank 1, Addr 2) with 6723
#   Loading A[2][2] (Bank 2, Addr 2) with 62a8
#   Loading A[2][3] (Bank 3, Addr 2) with 84fd
#   Loading A[3][0] (Bank 0, Addr 3) with 710b
#   Loading A[3][1] (Bank 1, Addr 3) with cb20
#   Loading A[3][2] (Bank 2, Addr 3) with dba6
#   Loading A[3][3] (Bank 3, Addr 3) with 1ff2
#   Loading B[0][0] (Bank 0, Addr 0) with 85e1
#   Loading B[0][1] (Bank 1, Addr 0) with 93ee
#   Loading B[0][2] (Bank 2, Addr 0) with adb6
#   Loading B[0][3] (Bank 3, Addr 0) with 3601
#   Loading B[1][0] (Bank 0, Addr 1) with 8d10
#   Loading B[1][1] (Bank 1, Addr 1) with e6a3
#   Loading B[1][2] (Bank 2, Addr 1) with fbad
#   Loading B[1][3] (Bank 3, Addr 1) with ef37
#   Loading B[2][0] (Bank 0, Addr 2) with e6f4
#   Loading B[2][1] (Bank 1, Addr 2) with 3812
#   Loading B[2][2] (Bank 2, Addr 2) with 3a0e
#   Loading B[2][3] (Bank 3, Addr 2) with 1ca3
#   Loading B[3][0] (Bank 0, Addr 3) with d5a3
#   Loading B[3][1] (Bank 1, Addr 3) with 8599
#   Loading B[3][2] (Bank 2, Addr 3) with c6d6
#   Loading B[3][3] (Bank 3, Addr 3) with 1fa3
# Matrix loading complete.
# @            37255000 Simulating controller signals to execute multiplication...
# @37275000: Starting input feeding sequence...
# @37275000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @37286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            37565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 45...
# Test Case 45 FAIL: C[0][0] mismatch! Actual 0, Expected 0a951d48a
# Test Case 45 FAIL: C[0][1] mismatch! Actual x, Expected 09b09249b
# Test Case 45 FAIL: C[0][2] mismatch! Actual x, Expected 0c199fe7e
# Test Case 45 FAIL: C[0][3] mismatch! Actual x, Expected 0662820c5
# Test Case 45 FAIL: C[1][0] mismatch! Actual x, Expected 18f8456a1
# Test Case 45 FAIL: C[1][1] mismatch! Actual x, Expected 12c9826c5
# Test Case 45 FAIL: C[1][2] mismatch! Actual x, Expected 179d6c0df
# Test Case 45 FAIL: C[1][3] mismatch! Actual x, Expected 08e479ee3
# Test Case 45 FAIL: C[2][0] mismatch! Actual x, Expected 18758730c
# Test Case 45 FAIL: C[2][1] mismatch! Actual x, Expected 11cf6868c
# Test Case 45 FAIL: C[2][2] mismatch! Actual x, Expected 16b37b576
# Test Case 45 FAIL: C[2][3] mismatch! Actual x, Expected 0801f2ef6
# Test Case 45 FAIL: C[3][0] mismatch! Actual x, Expected 11c451fbb
# Test Case 45 FAIL: C[3][1] mismatch! Actual x, Expected 10d1d3e0f
# Test Case 45 FAIL: C[3][2] mismatch! Actual x, Expected 12af44c13
# Test Case 45 FAIL: C[3][3] mismatch! Actual x, Expected 0f80a69ff
# Test Case 45 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 46 of 100
# ===================================================
# Reading test case 46:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            37736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b04d
#   Loading A[0][1] (Bank 1, Addr 0) with a6b7
#   Loading A[0][2] (Bank 2, Addr 0) with 0ebb
#   Loading A[0][3] (Bank 3, Addr 0) with 75f5
#   Loading A[1][0] (Bank 0, Addr 1) with 3c77
#   Loading A[1][1] (Bank 1, Addr 1) with 7150
#   Loading A[1][2] (Bank 2, Addr 1) with 12f7
#   Loading A[1][3] (Bank 3, Addr 1) with 5703
#   Loading A[2][0] (Bank 0, Addr 2) with 8cf2
#   Loading A[2][1] (Bank 1, Addr 2) with 993b
#   Loading A[2][2] (Bank 2, Addr 2) with 49cb
#   Loading A[2][3] (Bank 3, Addr 2) with 2279
#   Loading A[3][0] (Bank 0, Addr 3) with da75
#   Loading A[3][1] (Bank 1, Addr 3) with 8cc0
#   Loading A[3][2] (Bank 2, Addr 3) with 2b37
#   Loading A[3][3] (Bank 3, Addr 3) with 6f22
#   Loading B[0][0] (Bank 0, Addr 0) with 2ad4
#   Loading B[0][1] (Bank 1, Addr 0) with 1fb4
#   Loading B[0][2] (Bank 2, Addr 0) with 43c7
#   Loading B[0][3] (Bank 3, Addr 0) with a03d
#   Loading B[1][0] (Bank 0, Addr 1) with 38d8
#   Loading B[1][1] (Bank 1, Addr 1) with 5a3b
#   Loading B[1][2] (Bank 2, Addr 1) with f9fa
#   Loading B[1][3] (Bank 3, Addr 1) with 0b80
#   Loading B[2][0] (Bank 0, Addr 2) with f6e6
#   Loading B[2][1] (Bank 1, Addr 2) with 7588
#   Loading B[2][2] (Bank 2, Addr 2) with c1b9
#   Loading B[2][3] (Bank 3, Addr 2) with 49d6
#   Loading B[3][0] (Bank 0, Addr 3) with 8330
#   Loading B[3][1] (Bank 1, Addr 3) with dfea
#   Loading B[3][2] (Bank 2, Addr 3) with dcb7
#   Loading B[3][3] (Bank 3, Addr 3) with 1ae4
# Matrix loading complete.
# @            38075000 Simulating controller signals to execute multiplication...
# @38095000: Starting input feeding sequence...
# @38095000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @38106000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            38385000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 46...
# Test Case 46 FAIL: C[0][0] mismatch! Actual 1, Expected 122cdb088
# Test Case 46 FAIL: C[0][1] mismatch! Actual x, Expected 12aee2313
# Test Case 46 FAIL: C[0][2] mismatch! Actual x, Expected 190b90096
# Test Case 46 FAIL: C[0][3] mismatch! Actual x, Expected 0b0aac159
# Test Case 46 FAIL: C[1][0] mismatch! Actual x, Expected 110f6320e
# Test Case 46 FAIL: C[1][1] mismatch! Actual x, Expected 0fe0ae4f4
# Test Case 46 FAIL: C[1][2] mismatch! Actual x, Expected 18816c944
# Test Case 46 FAIL: C[1][3] mismatch! Actual x, Expected 0a86bf6ed
# Test Case 46 FAIL: C[2][0] mismatch! Actual x, Expected 063fd86f6
# Test Case 46 FAIL: C[2][1] mismatch! Actual x, Expected 0502f9987
# Test Case 46 FAIL: C[2][2] mismatch! Actual x, Expected 07384af97
# Test Case 46 FAIL: C[2][3] mismatch! Actual x, Expected 023e520bd
# Test Case 46 FAIL: C[3][0] mismatch! Actual x, Expected 081406e82
# Test Case 46 FAIL: C[3][1] mismatch! Actual x, Expected 09e4e8751
# Test Case 46 FAIL: C[3][2] mismatch! Actual x, Expected 0ee188020
# Test Case 46 FAIL: C[3][3] mismatch! Actual x, Expected 0635b9e4f
# Test Case 46 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 47 of 100
# ===================================================
# Reading test case 47:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            38556000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 82ca
#   Loading A[0][1] (Bank 1, Addr 0) with 5957
#   Loading A[0][2] (Bank 2, Addr 0) with b9ae
#   Loading A[0][3] (Bank 3, Addr 0) with 5921
#   Loading A[1][0] (Bank 0, Addr 1) with f1d3
#   Loading A[1][1] (Bank 1, Addr 1) with 9025
#   Loading A[1][2] (Bank 2, Addr 1) with c062
#   Loading A[1][3] (Bank 3, Addr 1) with b0b9
#   Loading A[2][0] (Bank 0, Addr 2) with 60b5
#   Loading A[2][1] (Bank 1, Addr 2) with d689
#   Loading A[2][2] (Bank 2, Addr 2) with f593
#   Loading A[2][3] (Bank 3, Addr 2) with f32c
#   Loading A[3][0] (Bank 0, Addr 3) with 267f
#   Loading A[3][1] (Bank 1, Addr 3) with 9c34
#   Loading A[3][2] (Bank 2, Addr 3) with 89d7
#   Loading A[3][3] (Bank 3, Addr 3) with e2b1
#   Loading B[0][0] (Bank 0, Addr 0) with a894
#   Loading B[0][1] (Bank 1, Addr 0) with bffb
#   Loading B[0][2] (Bank 2, Addr 0) with cd28
#   Loading B[0][3] (Bank 3, Addr 0) with b14d
#   Loading B[1][0] (Bank 0, Addr 1) with 3931
#   Loading B[1][1] (Bank 1, Addr 1) with 919b
#   Loading B[1][2] (Bank 2, Addr 1) with 2d2f
#   Loading B[1][3] (Bank 3, Addr 1) with 6fd5
#   Loading B[2][0] (Bank 0, Addr 2) with 472b
#   Loading B[2][1] (Bank 1, Addr 2) with 41db
#   Loading B[2][2] (Bank 2, Addr 2) with 25ce
#   Loading B[2][3] (Bank 3, Addr 2) with 173c
#   Loading B[3][0] (Bank 0, Addr 3) with fb30
#   Loading B[3][1] (Bank 1, Addr 3) with 68ee
#   Loading B[3][2] (Bank 2, Addr 3) with b99d
#   Loading B[3][3] (Bank 3, Addr 3) with 28b7
# Matrix loading complete.
# @            38895000 Simulating controller signals to execute multiplication...
# @38915000: Starting input feeding sequence...
# @38915000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @38926000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            39205000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 47...
# Test Case 47 FAIL: C[0][0] mismatch! Actual 0, Expected 0ccce9f62
# Test Case 47 FAIL: C[0][1] mismatch! Actual x, Expected 11447f1b8
# Test Case 47 FAIL: C[0][2] mismatch! Actual x, Expected 0bdb00bd6
# Test Case 47 FAIL: C[0][3] mismatch! Actual x, Expected 0d31efc86
# Test Case 47 FAIL: C[1][0] mismatch! Actual x, Expected 12ff0e024
# Test Case 47 FAIL: C[1][1] mismatch! Actual x, Expected 10c32653f
# Test Case 47 FAIL: C[1][2] mismatch! Actual x, Expected 0f1f96785
# Test Case 47 FAIL: C[1][3] mismatch! Actual x, Expected 0a928603c
# Test Case 47 FAIL: C[2][0] mismatch! Actual x, Expected 170c4d75b
# Test Case 47 FAIL: C[2][1] mismatch! Actual x, Expected 17056c293
# Test Case 47 FAIL: C[2][2] mismatch! Actual x, Expected 13ef6a853
# Test Case 47 FAIL: C[2][3] mismatch! Actual x, Expected 100d99b05
# Test Case 47 FAIL: C[3][0] mismatch! Actual x, Expected 184344c11
# Test Case 47 FAIL: C[3][1] mismatch! Actual x, Expected 142d3a690
# Test Case 47 FAIL: C[3][2] mismatch! Actual x, Expected 12ee44a14
# Test Case 47 FAIL: C[3][3] mismatch! Actual x, Expected 0c50d87b1
# Test Case 47 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 48 of 100
# ===================================================
# Reading test case 48:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            39376000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f1df
#   Loading A[0][1] (Bank 1, Addr 0) with 90bd
#   Loading A[0][2] (Bank 2, Addr 0) with 4302
#   Loading A[0][3] (Bank 3, Addr 0) with ba76
#   Loading A[1][0] (Bank 0, Addr 1) with 11e7
#   Loading A[1][1] (Bank 1, Addr 1) with b223
#   Loading A[1][2] (Bank 2, Addr 1) with f8b1
#   Loading A[1][3] (Bank 3, Addr 1) with 2a4b
#   Loading A[2][0] (Bank 0, Addr 2) with cd43
#   Loading A[2][1] (Bank 1, Addr 2) with 6737
#   Loading A[2][2] (Bank 2, Addr 2) with 3a8c
#   Loading A[2][3] (Bank 3, Addr 2) with b39b
#   Loading A[3][0] (Bank 0, Addr 3) with 0ba5
#   Loading A[3][1] (Bank 1, Addr 3) with f096
#   Loading A[3][2] (Bank 2, Addr 3) with e494
#   Loading A[3][3] (Bank 3, Addr 3) with 717f
#   Loading B[0][0] (Bank 0, Addr 0) with 4392
#   Loading B[0][1] (Bank 1, Addr 0) with 89f2
#   Loading B[0][2] (Bank 2, Addr 0) with 0d70
#   Loading B[0][3] (Bank 3, Addr 0) with ed4c
#   Loading B[1][0] (Bank 0, Addr 1) with fbab
#   Loading B[1][1] (Bank 1, Addr 1) with fecf
#   Loading B[1][2] (Bank 2, Addr 1) with cc96
#   Loading B[1][3] (Bank 3, Addr 1) with 11eb
#   Loading B[2][0] (Bank 0, Addr 2) with b216
#   Loading B[2][1] (Bank 1, Addr 2) with 0c44
#   Loading B[2][2] (Bank 2, Addr 2) with 4685
#   Loading B[2][3] (Bank 3, Addr 2) with 6839
#   Loading B[3][0] (Bank 0, Addr 3) with a272
#   Loading B[3][1] (Bank 1, Addr 3) with 15ee
#   Loading B[3][2] (Bank 2, Addr 3) with 492d
#   Loading B[3][3] (Bank 3, Addr 3) with aa23
# Matrix loading complete.
# @            39715000 Simulating controller signals to execute multiplication...
# @39735000: Starting input feeding sequence...
# @39735000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @39746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            40025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 48...
# Test Case 48 FAIL: C[0][0] mismatch! Actual 0, Expected 0e79e93b7
# Test Case 48 FAIL: C[0][1] mismatch! Actual x, Expected 09efbadc9
# Test Case 48 FAIL: C[0][2] mismatch! Actual x, Expected 056dfc4ba
# Test Case 48 FAIL: C[0][3] mismatch! Actual x, Expected 13cc21cbb
# Test Case 48 FAIL: C[1][0] mismatch! Actual x, Expected 1b5ca7cb1
# Test Case 48 FAIL: C[1][1] mismatch! Actual x, Expected 118dab407
# Test Case 48 FAIL: C[1][2] mismatch! Actual x, Expected 0f728ea23
# Test Case 48 FAIL: C[1][3] mismatch! Actual x, Expected 15c8b9dfe
# Test Case 48 FAIL: C[2][0] mismatch! Actual x, Expected 1bff1384f
# Test Case 48 FAIL: C[2][1] mismatch! Actual x, Expected 13206e1cb
# Test Case 48 FAIL: C[2][2] mismatch! Actual x, Expected 11bba4356
# Test Case 48 FAIL: C[2][3] mismatch! Actual x, Expected 0ff443b7b
# Test Case 48 FAIL: C[3][0] mismatch! Actual x, Expected 11fc12045
# Test Case 48 FAIL: C[3][1] mismatch! Actual x, Expected 0a0e5ee6f
# Test Case 48 FAIL: C[3][2] mismatch! Actual x, Expected 07d80f96c
# Test Case 48 FAIL: C[3][3] mismatch! Actual x, Expected 1445936c1
# Test Case 48 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 49 of 100
# ===================================================
# Reading test case 49:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            40196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6446
#   Loading A[0][1] (Bank 1, Addr 0) with 2351
#   Loading A[0][2] (Bank 2, Addr 0) with bb07
#   Loading A[0][3] (Bank 3, Addr 0) with 20da
#   Loading A[1][0] (Bank 0, Addr 1) with ac39
#   Loading A[1][1] (Bank 1, Addr 1) with d8db
#   Loading A[1][2] (Bank 2, Addr 1) with 9e06
#   Loading A[1][3] (Bank 3, Addr 1) with af80
#   Loading A[2][0] (Bank 0, Addr 2) with fc34
#   Loading A[2][1] (Bank 1, Addr 2) with 40c3
#   Loading A[2][2] (Bank 2, Addr 2) with ccfa
#   Loading A[2][3] (Bank 3, Addr 2) with edf9
#   Loading A[3][0] (Bank 0, Addr 3) with c555
#   Loading A[3][1] (Bank 1, Addr 3) with 8ecf
#   Loading A[3][2] (Bank 2, Addr 3) with 997f
#   Loading A[3][3] (Bank 3, Addr 3) with 7a22
#   Loading B[0][0] (Bank 0, Addr 0) with 8669
#   Loading B[0][1] (Bank 1, Addr 0) with 71ea
#   Loading B[0][2] (Bank 2, Addr 0) with 0f15
#   Loading B[0][3] (Bank 3, Addr 0) with d489
#   Loading B[1][0] (Bank 0, Addr 1) with adae
#   Loading B[1][1] (Bank 1, Addr 1) with 1804
#   Loading B[1][2] (Bank 2, Addr 1) with b1db
#   Loading B[1][3] (Bank 3, Addr 1) with 1956
#   Loading B[2][0] (Bank 0, Addr 2) with 1ecf
#   Loading B[2][1] (Bank 1, Addr 2) with 68a1
#   Loading B[2][2] (Bank 2, Addr 2) with 0be5
#   Loading B[2][3] (Bank 3, Addr 2) with dc47
#   Loading B[3][0] (Bank 0, Addr 3) with 6db2
#   Loading B[3][1] (Bank 1, Addr 3) with 0263
#   Loading B[3][2] (Bank 2, Addr 3) with fa93
#   Loading B[3][3] (Bank 3, Addr 3) with d339
# Matrix loading complete.
# @            40535000 Simulating controller signals to execute multiplication...
# @40555000: Starting input feeding sequence...
# @40555000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @40566000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            40845000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 49...
# Test Case 49 FAIL: C[0][0] mismatch! Actual 0, Expected 11c65c49a
# Test Case 49 FAIL: C[0][1] mismatch! Actual x, Expected 0a5b14d73
# Test Case 49 FAIL: C[0][2] mismatch! Actual x, Expected 14a6d39d4
# Test Case 49 FAIL: C[0][3] mismatch! Actual x, Expected 1e01eaef5
# Test Case 49 FAIL: C[1][0] mismatch! Actual x, Expected 0eaa6ecae
# Test Case 49 FAIL: C[1][1] mismatch! Actual x, Expected 03fdbbf26
# Test Case 49 FAIL: C[1][2] mismatch! Actual x, Expected 12788094a
# Test Case 49 FAIL: C[1][3] mismatch! Actual x, Expected 0e0562a17
# Test Case 49 FAIL: C[2][0] mismatch! Actual x, Expected 127d8ad67
# Test Case 49 FAIL: C[2][1] mismatch! Actual x, Expected 0b740e6d5
# Test Case 49 FAIL: C[2][2] mismatch! Actual x, Expected 118925944
# Test Case 49 FAIL: C[2][3] mismatch! Actual x, Expected 1d9ef1a60
# Test Case 49 FAIL: C[3][0] mismatch! Actual x, Expected 0d9495e65
# Test Case 49 FAIL: C[3][1] mismatch! Actual x, Expected 0817b5003
# Test Case 49 FAIL: C[3][2] mismatch! Actual x, Expected 0fe7702a5
# Test Case 49 FAIL: C[3][3] mismatch! Actual x, Expected 15e2dc54b
# Test Case 49 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 50 of 100
# ===================================================
# Reading test case 50:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            41016000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with caeb
#   Loading A[0][1] (Bank 1, Addr 0) with d63d
#   Loading A[0][2] (Bank 2, Addr 0) with 7b56
#   Loading A[0][3] (Bank 3, Addr 0) with aaac
#   Loading A[1][0] (Bank 0, Addr 1) with 8ac3
#   Loading A[1][1] (Bank 1, Addr 1) with 2636
#   Loading A[1][2] (Bank 2, Addr 1) with bbe5
#   Loading A[1][3] (Bank 3, Addr 1) with 5543
#   Loading A[2][0] (Bank 0, Addr 2) with 7464
#   Loading A[2][1] (Bank 1, Addr 2) with fe33
#   Loading A[2][2] (Bank 2, Addr 2) with e5a7
#   Loading A[2][3] (Bank 3, Addr 2) with 28e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7a69
#   Loading A[3][1] (Bank 1, Addr 3) with 2a45
#   Loading A[3][2] (Bank 2, Addr 3) with b91d
#   Loading A[3][3] (Bank 3, Addr 3) with a838
#   Loading B[0][0] (Bank 0, Addr 0) with a718
#   Loading B[0][1] (Bank 1, Addr 0) with 2c15
#   Loading B[0][2] (Bank 2, Addr 0) with 9eaa
#   Loading B[0][3] (Bank 3, Addr 0) with 0f2e
#   Loading B[1][0] (Bank 0, Addr 1) with 94ae
#   Loading B[1][1] (Bank 1, Addr 1) with ffac
#   Loading B[1][2] (Bank 2, Addr 1) with 89a9
#   Loading B[1][3] (Bank 3, Addr 1) with 7d0e
#   Loading B[2][0] (Bank 0, Addr 2) with 3e3c
#   Loading B[2][1] (Bank 1, Addr 2) with cab9
#   Loading B[2][2] (Bank 2, Addr 2) with 76b1
#   Loading B[2][3] (Bank 3, Addr 2) with 8517
#   Loading B[3][0] (Bank 0, Addr 3) with 5f77
#   Loading B[3][1] (Bank 1, Addr 3) with 8fb6
#   Loading B[3][2] (Bank 2, Addr 3) with efad
#   Loading B[3][3] (Bank 3, Addr 3) with f6c1
# Matrix loading complete.
# @            41355000 Simulating controller signals to execute multiplication...
# @41375000: Starting input feeding sequence...
# @41375000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @41386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            41665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 50...
# Test Case 50 FAIL: C[0][0] mismatch! Actual 1, Expected 11efabcd1
# Test Case 50 FAIL: C[0][1] mismatch! Actual x, Expected 14e693335
# Test Case 50 FAIL: C[0][2] mismatch! Actual x, Expected 170f310e2
# Test Case 50 FAIL: C[0][3] mismatch! Actual x, Expected 10250a109
# Test Case 50 FAIL: C[1][0] mismatch! Actual x, Expected 0ef964073
# Test Case 50 FAIL: C[1][1] mismatch! Actual x, Expected 12c140e32
# Test Case 50 FAIL: C[1][2] mismatch! Actual x, Expected 136c2490c
# Test Case 50 FAIL: C[1][3] mismatch! Actual x, Expected 0cc440884
# Test Case 50 FAIL: C[2][0] mismatch! Actual x, Expected 13a7cd855
# Test Case 50 FAIL: C[2][1] mismatch! Actual x, Expected 1eeaac837
# Test Case 50 FAIL: C[2][2] mismatch! Actual x, Expected 1c9438059
# Test Case 50 FAIL: C[2][3] mismatch! Actual x, Expected 18ceb1cd8
# Test Case 50 FAIL: C[3][0] mismatch! Actual x, Expected 0e9962eaa
# Test Case 50 FAIL: C[3][1] mismatch! Actual x, Expected 0f1595542
# Test Case 50 FAIL: C[3][2] mismatch! Actual x, Expected 14813088d
# Test Case 50 FAIL: C[3][3] mismatch! Actual x, Expected 0eb2ad818
# Test Case 50 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 51 of 100
# ===================================================
# Reading test case 51:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            41836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b94a
#   Loading A[0][1] (Bank 1, Addr 0) with aaca
#   Loading A[0][2] (Bank 2, Addr 0) with 02d1
#   Loading A[0][3] (Bank 3, Addr 0) with 87a3
#   Loading A[1][0] (Bank 0, Addr 1) with 65c8
#   Loading A[1][1] (Bank 1, Addr 1) with e1d0
#   Loading A[1][2] (Bank 2, Addr 1) with 4a3e
#   Loading A[1][3] (Bank 3, Addr 1) with ca6d
#   Loading A[2][0] (Bank 0, Addr 2) with 2dec
#   Loading A[2][1] (Bank 1, Addr 2) with ff83
#   Loading A[2][2] (Bank 2, Addr 2) with 2067
#   Loading A[2][3] (Bank 3, Addr 2) with 0323
#   Loading A[3][0] (Bank 0, Addr 3) with 6b4e
#   Loading A[3][1] (Bank 1, Addr 3) with 6af9
#   Loading A[3][2] (Bank 2, Addr 3) with 244c
#   Loading A[3][3] (Bank 3, Addr 3) with 37a9
#   Loading B[0][0] (Bank 0, Addr 0) with a0dd
#   Loading B[0][1] (Bank 1, Addr 0) with 4c0f
#   Loading B[0][2] (Bank 2, Addr 0) with 9956
#   Loading B[0][3] (Bank 3, Addr 0) with 082c
#   Loading B[1][0] (Bank 0, Addr 1) with 48c5
#   Loading B[1][1] (Bank 1, Addr 1) with d24a
#   Loading B[1][2] (Bank 2, Addr 1) with 0690
#   Loading B[1][3] (Bank 3, Addr 1) with 8ba3
#   Loading B[2][0] (Bank 0, Addr 2) with f5c6
#   Loading B[2][1] (Bank 1, Addr 2) with b3e8
#   Loading B[2][2] (Bank 2, Addr 2) with 8108
#   Loading B[2][3] (Bank 3, Addr 2) with 0cf6
#   Loading B[3][0] (Bank 0, Addr 3) with 6c69
#   Loading B[3][1] (Bank 1, Addr 3) with d834
#   Loading B[3][2] (Bank 2, Addr 3) with 5131
#   Loading B[3][3] (Bank 3, Addr 3) with 21ac
# Matrix loading complete.
# @            42175000 Simulating controller signals to execute multiplication...
# @42195000: Starting input feeding sequence...
# @42195000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @42206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            42485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 51...
# Test Case 51 FAIL: C[0][0] mismatch! Actual 0, Expected 0eae41350
# Test Case 51 FAIL: C[0][1] mismatch! Actual x, Expected 1058d8cde
# Test Case 51 FAIL: C[0][2] mismatch! Actual x, Expected 0aac4fcaa
# Test Case 51 FAIL: C[0][3] mismatch! Actual x, Expected 04ddee640
# Test Case 51 FAIL: C[1][0] mismatch! Actual x, Expected 1ce1cdfe5
# Test Case 51 FAIL: C[1][1] mismatch! Actual x, Expected 1fa23da42
# Test Case 51 FAIL: C[1][2] mismatch! Actual x, Expected 10ecc409d
# Test Case 51 FAIL: C[1][3] mismatch! Actual x, Expected 09ba10656
# Test Case 51 FAIL: C[2][0] mismatch! Actual x, Expected 0455a35f9
# Test Case 51 FAIL: C[2][1] mismatch! Actual x, Expected 0733f69f3
# Test Case 51 FAIL: C[2][2] mismatch! Actual x, Expected 01f6efada
# Test Case 51 FAIL: C[2][3] mismatch! Actual x, Expected 02f001970
# Test Case 51 FAIL: C[3][0] mismatch! Actual x, Expected 0a95a71fb
# Test Case 51 FAIL: C[3][1] mismatch! Actual x, Expected 0ffca7b1b
# Test Case 51 FAIL: C[3][2] mismatch! Actual x, Expected 069aa4383
# Test Case 51 FAIL: C[3][3] mismatch! Actual x, Expected 07a395099
# Test Case 51 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 52 of 100
# ===================================================
# Reading test case 52:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            42656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 70f2
#   Loading A[0][1] (Bank 1, Addr 0) with 7b1e
#   Loading A[0][2] (Bank 2, Addr 0) with 9b94
#   Loading A[0][3] (Bank 3, Addr 0) with ed32
#   Loading A[1][0] (Bank 0, Addr 1) with 764d
#   Loading A[1][1] (Bank 1, Addr 1) with f3bf
#   Loading A[1][2] (Bank 2, Addr 1) with bf10
#   Loading A[1][3] (Bank 3, Addr 1) with 3c11
#   Loading A[2][0] (Bank 0, Addr 2) with ba25
#   Loading A[2][1] (Bank 1, Addr 2) with fbdc
#   Loading A[2][2] (Bank 2, Addr 2) with a986
#   Loading A[2][3] (Bank 3, Addr 2) with b2fe
#   Loading A[3][0] (Bank 0, Addr 3) with 055a
#   Loading A[3][1] (Bank 1, Addr 3) with 8483
#   Loading A[3][2] (Bank 2, Addr 3) with 8d57
#   Loading A[3][3] (Bank 3, Addr 3) with 34b4
#   Loading B[0][0] (Bank 0, Addr 0) with 6bf5
#   Loading B[0][1] (Bank 1, Addr 0) with cc1b
#   Loading B[0][2] (Bank 2, Addr 0) with a477
#   Loading B[0][3] (Bank 3, Addr 0) with ad22
#   Loading B[1][0] (Bank 0, Addr 1) with 3832
#   Loading B[1][1] (Bank 1, Addr 1) with bd08
#   Loading B[1][2] (Bank 2, Addr 1) with dce4
#   Loading B[1][3] (Bank 3, Addr 1) with 7128
#   Loading B[2][0] (Bank 0, Addr 2) with 243d
#   Loading B[2][1] (Bank 1, Addr 2) with 8a65
#   Loading B[2][2] (Bank 2, Addr 2) with 699d
#   Loading B[2][3] (Bank 3, Addr 2) with 3fde
#   Loading B[3][0] (Bank 0, Addr 3) with b1da
#   Loading B[3][1] (Bank 1, Addr 3) with 82a8
#   Loading B[3][2] (Bank 2, Addr 3) with 437e
#   Loading B[3][3] (Bank 3, Addr 3) with e961
# Matrix loading complete.
# @            42995000 Simulating controller signals to execute multiplication...
# @43015000: Starting input feeding sequence...
# @43015000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @43026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            43305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 52...
# Test Case 52 FAIL: C[0][0] mismatch! Actual 0, Expected 067aa8819
# Test Case 52 FAIL: C[0][1] mismatch! Actual x, Expected 118c3e697
# Test Case 52 FAIL: C[0][2] mismatch! Actual x, Expected 0fcd7970f
# Test Case 52 FAIL: C[0][3] mismatch! Actual x, Expected 0b3fe7b5c
# Test Case 52 FAIL: C[1][0] mismatch! Actual x, Expected 0e9231efe
# Test Case 52 FAIL: C[1][1] mismatch! Actual x, Expected 1e1edf6e6
# Test Case 52 FAIL: C[1][2] mismatch! Actual x, Expected 1ac40e074
# Test Case 52 FAIL: C[1][3] mismatch! Actual x, Expected 176a4023f
# Test Case 52 FAIL: C[2][0] mismatch! Actual x, Expected 0e5bd51c8
# Test Case 52 FAIL: C[2][1] mismatch! Actual x, Expected 1ace72e12
# Test Case 52 FAIL: C[2][2] mismatch! Actual x, Expected 174024f0c
# Test Case 52 FAIL: C[2][3] mismatch! Actual x, Expected 168d05153
# Test Case 52 FAIL: C[3][0] mismatch! Actual x, Expected 0af2a0dfa
# Test Case 52 FAIL: C[3][1] mismatch! Actual x, Expected 16520d224
# Test Case 52 FAIL: C[3][2] mismatch! Actual x, Expected 123f365c0
# Test Case 52 FAIL: C[3][3] mismatch! Actual x, Expected 117aab4c4
# Test Case 52 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 53 of 100
# ===================================================
# Reading test case 53:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            43476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8957
#   Loading A[0][1] (Bank 1, Addr 0) with b6d0
#   Loading A[0][2] (Bank 2, Addr 0) with 99f8
#   Loading A[0][3] (Bank 3, Addr 0) with f302
#   Loading A[1][0] (Bank 0, Addr 1) with ded0
#   Loading A[1][1] (Bank 1, Addr 1) with 78fc
#   Loading A[1][2] (Bank 2, Addr 1) with f6dd
#   Loading A[1][3] (Bank 3, Addr 1) with e583
#   Loading A[2][0] (Bank 0, Addr 2) with 8306
#   Loading A[2][1] (Bank 1, Addr 2) with 7d28
#   Loading A[2][2] (Bank 2, Addr 2) with c68e
#   Loading A[2][3] (Bank 3, Addr 2) with 9371
#   Loading A[3][0] (Bank 0, Addr 3) with a73d
#   Loading A[3][1] (Bank 1, Addr 3) with 5afc
#   Loading A[3][2] (Bank 2, Addr 3) with 8bd4
#   Loading A[3][3] (Bank 3, Addr 3) with d1f4
#   Loading B[0][0] (Bank 0, Addr 0) with 59f9
#   Loading B[0][1] (Bank 1, Addr 0) with 6d34
#   Loading B[0][2] (Bank 2, Addr 0) with c07f
#   Loading B[0][3] (Bank 3, Addr 0) with aef4
#   Loading B[1][0] (Bank 0, Addr 1) with 1848
#   Loading B[1][1] (Bank 1, Addr 1) with 0b16
#   Loading B[1][2] (Bank 2, Addr 1) with 9fd0
#   Loading B[1][3] (Bank 3, Addr 1) with e219
#   Loading B[2][0] (Bank 0, Addr 2) with 002e
#   Loading B[2][1] (Bank 1, Addr 2) with 0d23
#   Loading B[2][2] (Bank 2, Addr 2) with 35a8
#   Loading B[2][3] (Bank 3, Addr 2) with 0a28
#   Loading B[3][0] (Bank 0, Addr 3) with 8646
#   Loading B[3][1] (Bank 1, Addr 3) with dbe7
#   Loading B[3][2] (Bank 2, Addr 3) with ca02
#   Loading B[3][3] (Bank 3, Addr 3) with 8ae0
# Matrix loading complete.
# @            43815000 Simulating controller signals to execute multiplication...
# @43835000: Starting input feeding sequence...
# @43835000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @43846000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            44125000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 53...
# Test Case 53 FAIL: C[0][0] mismatch! Actual 1, Expected 09d3632e1
# Test Case 53 FAIL: C[0][1] mismatch! Actual x, Expected 0da9d5569
# Test Case 53 FAIL: C[0][2] mismatch! Actual x, Expected 191cb4593
# Test Case 53 FAIL: C[0][3] mismatch! Actual x, Expected 18291578c
# Test Case 53 FAIL: C[1][0] mismatch! Actual x, Expected 07b890d48
# Test Case 53 FAIL: C[1][1] mismatch! Actual x, Expected 0a7ccbdc4
# Test Case 53 FAIL: C[1][2] mismatch! Actual x, Expected 137047a28
# Test Case 53 FAIL: C[1][3] mismatch! Actual x, Expected 11e1c799c
# Test Case 53 FAIL: C[2][0] mismatch! Actual x, Expected 0970201dc
# Test Case 53 FAIL: C[2][1] mismatch! Actual x, Expected 0ceab7814
# Test Case 53 FAIL: C[2][2] mismatch! Actual x, Expected 1a5d64b70
# Test Case 53 FAIL: C[2][3] mismatch! Actual x, Expected 196fbb9a5
# Test Case 53 FAIL: C[3][0] mismatch! Actual x, Expected 0d96682d0
# Test Case 53 FAIL: C[3][1] mismatch! Actual x, Expected 12d83a549
# Test Case 53 FAIL: C[3][2] mismatch! Actual x, Expected 20a94387e
# Test Case 53 FAIL: C[3][3] mismatch! Actual x, Expected 1e885badb
# Test Case 53 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 54 of 100
# ===================================================
# Reading test case 54:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            44296000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d78c
#   Loading A[0][1] (Bank 1, Addr 0) with 966f
#   Loading A[0][2] (Bank 2, Addr 0) with 34be
#   Loading A[0][3] (Bank 3, Addr 0) with 9a2a
#   Loading A[1][0] (Bank 0, Addr 1) with d9a7
#   Loading A[1][1] (Bank 1, Addr 1) with 9831
#   Loading A[1][2] (Bank 2, Addr 1) with 0ad9
#   Loading A[1][3] (Bank 3, Addr 1) with f72e
#   Loading A[2][0] (Bank 0, Addr 2) with 5693
#   Loading A[2][1] (Bank 1, Addr 2) with 9ed2
#   Loading A[2][2] (Bank 2, Addr 2) with 7cb4
#   Loading A[2][3] (Bank 3, Addr 2) with f1e3
#   Loading A[3][0] (Bank 0, Addr 3) with 2365
#   Loading A[3][1] (Bank 1, Addr 3) with f00f
#   Loading A[3][2] (Bank 2, Addr 3) with 3235
#   Loading A[3][3] (Bank 3, Addr 3) with 07ac
#   Loading B[0][0] (Bank 0, Addr 0) with 66c4
#   Loading B[0][1] (Bank 1, Addr 0) with 218b
#   Loading B[0][2] (Bank 2, Addr 0) with 0130
#   Loading B[0][3] (Bank 3, Addr 0) with 4a74
#   Loading B[1][0] (Bank 0, Addr 1) with 699d
#   Loading B[1][1] (Bank 1, Addr 1) with 307d
#   Loading B[1][2] (Bank 2, Addr 1) with ea3d
#   Loading B[1][3] (Bank 3, Addr 1) with 40c6
#   Loading B[2][0] (Bank 0, Addr 2) with 2ed4
#   Loading B[2][1] (Bank 1, Addr 2) with 50db
#   Loading B[2][2] (Bank 2, Addr 2) with 321a
#   Loading B[2][3] (Bank 3, Addr 2) with 8fa7
#   Loading B[3][0] (Bank 0, Addr 3) with ab8b
#   Loading B[3][1] (Bank 1, Addr 3) with 8236
#   Loading B[3][2] (Bank 2, Addr 3) with 374b
#   Loading B[3][3] (Bank 3, Addr 3) with d81e
# Matrix loading complete.
# @            44635000 Simulating controller signals to execute multiplication...
# @44655000: Starting input feeding sequence...
# @44655000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @44666000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            44945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 54...
# Test Case 54 FAIL: C[0][0] mismatch! Actual 1, Expected 0d7df942e
# Test Case 54 FAIL: C[0][1] mismatch! Actual x, Expected 072d06c9e
# Test Case 54 FAIL: C[0][2] mismatch! Actual x, Expected 0e0bd0b90
# Test Case 54 FAIL: C[0][3] mismatch! Actual x, Expected 0c4382f55
# Test Case 54 FAIL: C[1][0] mismatch! Actual x, Expected 139167516
# Test Case 54 FAIL: C[1][1] mismatch! Actual x, Expected 0dccd3c02
# Test Case 54 FAIL: C[1][2] mismatch! Actual x, Expected 0dee26436
# Test Case 54 FAIL: C[1][3] mismatch! Actual x, Expected 17609e8f2
# Test Case 54 FAIL: C[2][0] mismatch! Actual x, Expected 0521a0464
# Test Case 54 FAIL: C[2][1] mismatch! Actual x, Expected 049e38c49
# Test Case 54 FAIL: C[2][2] mismatch! Actual x, Expected 02d6b7c24
# Test Case 54 FAIL: C[2][3] mismatch! Actual x, Expected 08271f590
# Test Case 54 FAIL: C[3][0] mismatch! Actual x, Expected 0d53f61be
# Test Case 54 FAIL: C[3][1] mismatch! Actual x, Expected 0935143bd
# Test Case 54 FAIL: C[3][2] mismatch! Actual x, Expected 113e11e48
# Test Case 54 FAIL: C[3][3] mismatch! Actual x, Expected 0f9964ad9
# Test Case 54 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 55 of 100
# ===================================================
# Reading test case 55:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            45116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with af76
#   Loading A[0][1] (Bank 1, Addr 0) with 4a33
#   Loading A[0][2] (Bank 2, Addr 0) with 62c6
#   Loading A[0][3] (Bank 3, Addr 0) with d55f
#   Loading A[1][0] (Bank 0, Addr 1) with fc16
#   Loading A[1][1] (Bank 1, Addr 1) with f8b1
#   Loading A[1][2] (Bank 2, Addr 1) with efdc
#   Loading A[1][3] (Bank 3, Addr 1) with 6ece
#   Loading A[2][0] (Bank 0, Addr 2) with 02a3
#   Loading A[2][1] (Bank 1, Addr 2) with 51ac
#   Loading A[2][2] (Bank 2, Addr 2) with d0ae
#   Loading A[2][3] (Bank 3, Addr 2) with 54bc
#   Loading A[3][0] (Bank 0, Addr 3) with 5b6d
#   Loading A[3][1] (Bank 1, Addr 3) with ec6a
#   Loading A[3][2] (Bank 2, Addr 3) with 6d7d
#   Loading A[3][3] (Bank 3, Addr 3) with 186d
#   Loading B[0][0] (Bank 0, Addr 0) with 7963
#   Loading B[0][1] (Bank 1, Addr 0) with 5e72
#   Loading B[0][2] (Bank 2, Addr 0) with 78f9
#   Loading B[0][3] (Bank 3, Addr 0) with e043
#   Loading B[1][0] (Bank 0, Addr 1) with 7415
#   Loading B[1][1] (Bank 1, Addr 1) with f36e
#   Loading B[1][2] (Bank 2, Addr 1) with 066c
#   Loading B[1][3] (Bank 3, Addr 1) with 09a4
#   Loading B[2][0] (Bank 0, Addr 2) with f774
#   Loading B[2][1] (Bank 1, Addr 2) with 4fc5
#   Loading B[2][2] (Bank 2, Addr 2) with 5e04
#   Loading B[2][3] (Bank 3, Addr 2) with 31b6
#   Loading B[3][0] (Bank 0, Addr 3) with 32c3
#   Loading B[3][1] (Bank 1, Addr 3) with 5197
#   Loading B[3][2] (Bank 2, Addr 3) with e384
#   Loading B[3][3] (Bank 3, Addr 3) with f20d
# Matrix loading complete.
# @            45455000 Simulating controller signals to execute multiplication...
# @45475000: Starting input feeding sequence...
# @45475000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @45486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            45765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 55...
# Test Case 55 FAIL: C[0][0] mismatch! Actual 0, Expected 0da2eab53
# Test Case 55 FAIL: C[0][1] mismatch! Actual x, Expected 14e6668ba
# Test Case 55 FAIL: C[0][2] mismatch! Actual x, Expected 0ab7586ce
# Test Case 55 FAIL: C[0][3] mismatch! Actual x, Expected 0fa283165
# Test Case 55 FAIL: C[1][0] mismatch! Actual x, Expected 111c625ec
# Test Case 55 FAIL: C[1][1] mismatch! Actual x, Expected 16ca68da6
# Test Case 55 FAIL: C[1][2] mismatch! Actual x, Expected 11967779f
# Test Case 55 FAIL: C[1][3] mismatch! Actual x, Expected 139c1c767
# Test Case 55 FAIL: C[2][0] mismatch! Actual x, Expected 17b0566ad
# Test Case 55 FAIL: C[2][1] mismatch! Actual x, Expected 16c70fe55
# Test Case 55 FAIL: C[2][2] mismatch! Actual x, Expected 0e2a2ad92
# Test Case 55 FAIL: C[2][3] mismatch! Actual x, Expected 0ef9ae1cf
# Test Case 55 FAIL: C[3][0] mismatch! Actual x, Expected 0ee2a87da
# Test Case 55 FAIL: C[3][1] mismatch! Actual x, Expected 0da452ac9
# Test Case 55 FAIL: C[3][2] mismatch! Actual x, Expected 09c6f3e73
# Test Case 55 FAIL: C[3][3] mismatch! Actual x, Expected 0e6a3b306
# Test Case 55 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 56 of 100
# ===================================================
# Reading test case 56:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            45936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 26b6
#   Loading A[0][1] (Bank 1, Addr 0) with 1485
#   Loading A[0][2] (Bank 2, Addr 0) with 3466
#   Loading A[0][3] (Bank 3, Addr 0) with 3474
#   Loading A[1][0] (Bank 0, Addr 1) with f6ae
#   Loading A[1][1] (Bank 1, Addr 1) with 3867
#   Loading A[1][2] (Bank 2, Addr 1) with ce86
#   Loading A[1][3] (Bank 3, Addr 1) with 2baf
#   Loading A[2][0] (Bank 0, Addr 2) with 77e0
#   Loading A[2][1] (Bank 1, Addr 2) with 597e
#   Loading A[2][2] (Bank 2, Addr 2) with a185
#   Loading A[2][3] (Bank 3, Addr 2) with fe3c
#   Loading A[3][0] (Bank 0, Addr 3) with a144
#   Loading A[3][1] (Bank 1, Addr 3) with 2b89
#   Loading A[3][2] (Bank 2, Addr 3) with 03b1
#   Loading A[3][3] (Bank 3, Addr 3) with 0ce8
#   Loading B[0][0] (Bank 0, Addr 0) with 9c53
#   Loading B[0][1] (Bank 1, Addr 0) with 75ae
#   Loading B[0][2] (Bank 2, Addr 0) with 9d35
#   Loading B[0][3] (Bank 3, Addr 0) with 5b8f
#   Loading B[1][0] (Bank 0, Addr 1) with 5977
#   Loading B[1][1] (Bank 1, Addr 1) with 4d84
#   Loading B[1][2] (Bank 2, Addr 1) with abf2
#   Loading B[1][3] (Bank 3, Addr 1) with b174
#   Loading B[2][0] (Bank 0, Addr 2) with 6f16
#   Loading B[2][1] (Bank 1, Addr 2) with 4e4c
#   Loading B[2][2] (Bank 2, Addr 2) with e697
#   Loading B[2][3] (Bank 3, Addr 2) with 0a13
#   Loading B[3][0] (Bank 0, Addr 3) with 168b
#   Loading B[3][1] (Bank 1, Addr 3) with b14b
#   Loading B[3][2] (Bank 2, Addr 3) with 6c9c
#   Loading B[3][3] (Bank 3, Addr 3) with 5e4a
# Matrix loading complete.
# @            46275000 Simulating controller signals to execute multiplication...
# @46295000: Starting input feeding sequence...
# @46295000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @46306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            46585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 56...
# Test Case 56 FAIL: C[0][0] mismatch! Actual 1, Expected 0b0107310
# Test Case 56 FAIL: C[0][1] mismatch! Actual x, Expected 0f0d61ed8
# Test Case 56 FAIL: C[0][2] mismatch! Actual x, Expected 16dd9f6ba
# Test Case 56 FAIL: C[0][3] mismatch! Actual x, Expected 0f8f3a1ca
# Test Case 56 FAIL: C[1][0] mismatch! Actual x, Expected 04ae87637
# Test Case 56 FAIL: C[1][1] mismatch! Actual x, Expected 054083b0d
# Test Case 56 FAIL: C[1][2] mismatch! Actual x, Expected 095903fb5
# Test Case 56 FAIL: C[1][3] mismatch! Actual x, Expected 041fdf6eb
# Test Case 56 FAIL: C[2][0] mismatch! Actual x, Expected 0ae957ee5
# Test Case 56 FAIL: C[2][1] mismatch! Actual x, Expected 08a93f5c3
# Test Case 56 FAIL: C[2][2] mismatch! Actual x, Expected 13df1d319
# Test Case 56 FAIL: C[2][3] mismatch! Actual x, Expected 0a99cffbb
# Test Case 56 FAIL: C[3][0] mismatch! Actual x, Expected 09ec0a615
# Test Case 56 FAIL: C[3][1] mismatch! Actual x, Expected 07c08c5dc
# Test Case 56 FAIL: C[3][2] mismatch! Actual x, Expected 12806cb36
# Test Case 56 FAIL: C[3][3] mismatch! Actual x, Expected 03fcc749c
# Test Case 56 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 57 of 100
# ===================================================
# Reading test case 57:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            46756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 004c
#   Loading A[0][1] (Bank 1, Addr 0) with 5741
#   Loading A[0][2] (Bank 2, Addr 0) with b626
#   Loading A[0][3] (Bank 3, Addr 0) with c6e1
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with 78a8
#   Loading A[1][2] (Bank 2, Addr 1) with 9528
#   Loading A[1][3] (Bank 3, Addr 1) with dcce
#   Loading A[2][0] (Bank 0, Addr 2) with 72a5
#   Loading A[2][1] (Bank 1, Addr 2) with e5e0
#   Loading A[2][2] (Bank 2, Addr 2) with 1511
#   Loading A[2][3] (Bank 3, Addr 2) with b2d2
#   Loading A[3][0] (Bank 0, Addr 3) with 6352
#   Loading A[3][1] (Bank 1, Addr 3) with 3fb9
#   Loading A[3][2] (Bank 2, Addr 3) with 6fd8
#   Loading A[3][3] (Bank 3, Addr 3) with 4a1a
#   Loading B[0][0] (Bank 0, Addr 0) with 783c
#   Loading B[0][1] (Bank 1, Addr 0) with e8fd
#   Loading B[0][2] (Bank 2, Addr 0) with 83a8
#   Loading B[0][3] (Bank 3, Addr 0) with ef22
#   Loading B[1][0] (Bank 0, Addr 1) with 0b2d
#   Loading B[1][1] (Bank 1, Addr 1) with 00be
#   Loading B[1][2] (Bank 2, Addr 1) with 90bd
#   Loading B[1][3] (Bank 3, Addr 1) with e62f
#   Loading B[2][0] (Bank 0, Addr 2) with a4ed
#   Loading B[2][1] (Bank 1, Addr 2) with de57
#   Loading B[2][2] (Bank 2, Addr 2) with 8036
#   Loading B[2][3] (Bank 3, Addr 2) with fd16
#   Loading B[3][0] (Bank 0, Addr 3) with 8e5c
#   Loading B[3][1] (Bank 1, Addr 3) with 2e90
#   Loading B[3][2] (Bank 2, Addr 3) with a6a4
#   Loading B[3][3] (Bank 3, Addr 3) with a430
# Matrix loading complete.
# @            47095000 Simulating controller signals to execute multiplication...
# @47115000: Starting input feeding sequence...
# @47115000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @47126000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            47405000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 57...
# Test Case 57 FAIL: C[0][0] mismatch! Actual 0, Expected 085079252
# Test Case 57 FAIL: C[0][1] mismatch! Actual x, Expected 076286cf5
# Test Case 57 FAIL: C[0][2] mismatch! Actual x, Expected 0ab7025cf
# Test Case 57 FAIL: C[0][3] mismatch! Actual x, Expected 0ff96ba09
# Test Case 57 FAIL: C[1][0] mismatch! Actual x, Expected 0e5c72da0
# Test Case 57 FAIL: C[1][1] mismatch! Actual x, Expected 12300251d
# Test Case 57 FAIL: C[1][2] mismatch! Actual x, Expected 10db25f74
# Test Case 57 FAIL: C[1][3] mismatch! Actual x, Expected 1ca1ef46a
# Test Case 57 FAIL: C[2][0] mismatch! Actual x, Expected 0a7d3d74d
# Test Case 57 FAIL: C[2][1] mismatch! Actual x, Expected 0ccd8c785
# Test Case 57 FAIL: C[2][2] mismatch! Actual x, Expected 1055c416e
# Test Case 57 FAIL: C[2][3] mismatch! Actual x, Expected 18cd1f25a
# Test Case 57 FAIL: C[3][0] mismatch! Actual x, Expected 10374e0b4
# Test Case 57 FAIL: C[3][1] mismatch! Actual x, Expected 15e6d913f
# Test Case 57 FAIL: C[3][2] mismatch! Actual x, Expected 16ce997b2
# Test Case 57 FAIL: C[3][3] mismatch! Actual x, Expected 2609f8ba0
# Test Case 57 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 58 of 100
# ===================================================
# Reading test case 58:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            47576000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00f1
#   Loading A[0][1] (Bank 1, Addr 0) with 44e6
#   Loading A[0][2] (Bank 2, Addr 0) with 1f50
#   Loading A[0][3] (Bank 3, Addr 0) with f9d8
#   Loading A[1][0] (Bank 0, Addr 1) with e300
#   Loading A[1][1] (Bank 1, Addr 1) with 8e7c
#   Loading A[1][2] (Bank 2, Addr 1) with 0b71
#   Loading A[1][3] (Bank 3, Addr 1) with 84e0
#   Loading A[2][0] (Bank 0, Addr 2) with 1ca8
#   Loading A[2][1] (Bank 1, Addr 2) with d4ee
#   Loading A[2][2] (Bank 2, Addr 2) with 810e
#   Loading A[2][3] (Bank 3, Addr 2) with 2c2e
#   Loading A[3][0] (Bank 0, Addr 3) with 4641
#   Loading A[3][1] (Bank 1, Addr 3) with c339
#   Loading A[3][2] (Bank 2, Addr 3) with c97d
#   Loading A[3][3] (Bank 3, Addr 3) with 7aeb
#   Loading B[0][0] (Bank 0, Addr 0) with 9e8b
#   Loading B[0][1] (Bank 1, Addr 0) with 85a2
#   Loading B[0][2] (Bank 2, Addr 0) with 931b
#   Loading B[0][3] (Bank 3, Addr 0) with 254e
#   Loading B[1][0] (Bank 0, Addr 1) with b9d2
#   Loading B[1][1] (Bank 1, Addr 1) with e7ee
#   Loading B[1][2] (Bank 2, Addr 1) with b486
#   Loading B[1][3] (Bank 3, Addr 1) with 6f70
#   Loading B[2][0] (Bank 0, Addr 2) with 68b3
#   Loading B[2][1] (Bank 1, Addr 2) with 1c90
#   Loading B[2][2] (Bank 2, Addr 2) with 7bb7
#   Loading B[2][3] (Bank 3, Addr 2) with 3018
#   Loading B[3][0] (Bank 0, Addr 3) with 0581
#   Loading B[3][1] (Bank 1, Addr 3) with 0b11
#   Loading B[3][2] (Bank 2, Addr 3) with b5fb
#   Loading B[3][3] (Bank 3, Addr 3) with 7ae2
# Matrix loading complete.
# @            47915000 Simulating controller signals to execute multiplication...
# @47935000: Starting input feeding sequence...
# @47935000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @47946000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            48225000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 58...
# Test Case 58 FAIL: C[0][0] mismatch! Actual 1, Expected 0b2956c14
# Test Case 58 FAIL: C[0][1] mismatch! Actual x, Expected 0d461cb53
# Test Case 58 FAIL: C[0][2] mismatch! Actual x, Expected 0e067593e
# Test Case 58 FAIL: C[0][3] mismatch! Actual x, Expected 08a0e9d90
# Test Case 58 FAIL: C[1][0] mismatch! Actual x, Expected 0ed5fe9bd
# Test Case 58 FAIL: C[1][1] mismatch! Actual x, Expected 0c53faa7d
# Test Case 58 FAIL: C[1][2] mismatch! Actual x, Expected 17dbe612f
# Test Case 58 FAIL: C[1][3] mismatch! Actual x, Expected 0cdc66ef6
# Test Case 58 FAIL: C[2][0] mismatch! Actual x, Expected 054cf51e9
# Test Case 58 FAIL: C[2][1] mismatch! Actual x, Expected 031d1dadb
# Test Case 58 FAIL: C[2][2] mismatch! Actual x, Expected 0e7a89827
# Test Case 58 FAIL: C[2][3] mismatch! Actual x, Expected 08281467a
# Test Case 58 FAIL: C[3][0] mismatch! Actual x, Expected 10fe3f39d
# Test Case 58 FAIL: C[3][1] mismatch! Actual x, Expected 1050b1f6b
# Test Case 58 FAIL: C[3][2] mismatch! Actual x, Expected 159fec953
# Test Case 58 FAIL: C[3][3] mismatch! Actual x, Expected 0a18cdf96
# Test Case 58 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 59 of 100
# ===================================================
# Reading test case 59:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            48396000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b8a6
#   Loading A[0][1] (Bank 1, Addr 0) with f372
#   Loading A[0][2] (Bank 2, Addr 0) with fb67
#   Loading A[0][3] (Bank 3, Addr 0) with 45fe
#   Loading A[1][0] (Bank 0, Addr 1) with 57af
#   Loading A[1][1] (Bank 1, Addr 1) with 7994
#   Loading A[1][2] (Bank 2, Addr 1) with dc16
#   Loading A[1][3] (Bank 3, Addr 1) with d9ec
#   Loading A[2][0] (Bank 0, Addr 2) with 2fe5
#   Loading A[2][1] (Bank 1, Addr 2) with 0596
#   Loading A[2][2] (Bank 2, Addr 2) with 938e
#   Loading A[2][3] (Bank 3, Addr 2) with 2bc9
#   Loading A[3][0] (Bank 0, Addr 3) with a548
#   Loading A[3][1] (Bank 1, Addr 3) with 6564
#   Loading A[3][2] (Bank 2, Addr 3) with 2b6c
#   Loading A[3][3] (Bank 3, Addr 3) with 9894
#   Loading B[0][0] (Bank 0, Addr 0) with 66ea
#   Loading B[0][1] (Bank 1, Addr 0) with 6340
#   Loading B[0][2] (Bank 2, Addr 0) with aaa0
#   Loading B[0][3] (Bank 3, Addr 0) with 8280
#   Loading B[1][0] (Bank 0, Addr 1) with 24d0
#   Loading B[1][1] (Bank 1, Addr 1) with 0b72
#   Loading B[1][2] (Bank 2, Addr 1) with c69b
#   Loading B[1][3] (Bank 3, Addr 1) with 5d67
#   Loading B[2][0] (Bank 0, Addr 2) with f6a0
#   Loading B[2][1] (Bank 1, Addr 2) with 6771
#   Loading B[2][2] (Bank 2, Addr 2) with 93db
#   Loading B[2][3] (Bank 3, Addr 2) with da0e
#   Loading B[3][0] (Bank 0, Addr 3) with 8578
#   Loading B[3][1] (Bank 1, Addr 3) with 0e4d
#   Loading B[3][2] (Bank 2, Addr 3) with f46f
#   Loading B[3][3] (Bank 3, Addr 3) with ffc1
# Matrix loading complete.
# @            48735000 Simulating controller signals to execute multiplication...
# @48755000: Starting input feeding sequence...
# @48755000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @48766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            49045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 59...
# Test Case 59 FAIL: C[0][0] mismatch! Actual 1, Expected 0db26a4cc
# Test Case 59 FAIL: C[0][1] mismatch! Actual x, Expected 06817da2b
# Test Case 59 FAIL: C[0][2] mismatch! Actual x, Expected 17891d6d4
# Test Case 59 FAIL: C[0][3] mismatch! Actual x, Expected 14c096d37
# Test Case 59 FAIL: C[1][0] mismatch! Actual x, Expected 0ad97a714
# Test Case 59 FAIL: C[1][1] mismatch! Actual x, Expected 06bbd3ab2
# Test Case 59 FAIL: C[1][2] mismatch! Actual x, Expected 1649d1f8a
# Test Case 59 FAIL: C[1][3] mismatch! Actual x, Expected 112826224
# Test Case 59 FAIL: C[2][0] mismatch! Actual x, Expected 12980e366
# Test Case 59 FAIL: C[2][1] mismatch! Actual x, Expected 0a95addb6
# Test Case 59 FAIL: C[2][2] mismatch! Actual x, Expected 1d0fc5400
# Test Case 59 FAIL: C[2][3] mismatch! Actual x, Expected 17984da8a
# Test Case 59 FAIL: C[3][0] mismatch! Actual x, Expected 0b5345aec
# Test Case 59 FAIL: C[3][1] mismatch! Actual x, Expected 03f1817d5
# Test Case 59 FAIL: C[3][2] mismatch! Actual x, Expected 182affcc3
# Test Case 59 FAIL: C[3][3] mismatch! Actual x, Expected 130ea6786
# Test Case 59 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 60 of 100
# ===================================================
# Reading test case 60:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            49216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2794
#   Loading A[0][1] (Bank 1, Addr 0) with 49e8
#   Loading A[0][2] (Bank 2, Addr 0) with befa
#   Loading A[0][3] (Bank 3, Addr 0) with 1159
#   Loading A[1][0] (Bank 0, Addr 1) with 8aee
#   Loading A[1][1] (Bank 1, Addr 1) with 436e
#   Loading A[1][2] (Bank 2, Addr 1) with 75f0
#   Loading A[1][3] (Bank 3, Addr 1) with f082
#   Loading A[2][0] (Bank 0, Addr 2) with 0d49
#   Loading A[2][1] (Bank 1, Addr 2) with e22c
#   Loading A[2][2] (Bank 2, Addr 2) with e210
#   Loading A[2][3] (Bank 3, Addr 2) with 564c
#   Loading A[3][0] (Bank 0, Addr 3) with 942a
#   Loading A[3][1] (Bank 1, Addr 3) with a2b4
#   Loading A[3][2] (Bank 2, Addr 3) with 8194
#   Loading A[3][3] (Bank 3, Addr 3) with b8be
#   Loading B[0][0] (Bank 0, Addr 0) with 1788
#   Loading B[0][1] (Bank 1, Addr 0) with 0c4d
#   Loading B[0][2] (Bank 2, Addr 0) with 3499
#   Loading B[0][3] (Bank 3, Addr 0) with 8353
#   Loading B[1][0] (Bank 0, Addr 1) with ea3e
#   Loading B[1][1] (Bank 1, Addr 1) with 420b
#   Loading B[1][2] (Bank 2, Addr 1) with 192b
#   Loading B[1][3] (Bank 3, Addr 1) with c596
#   Loading B[2][0] (Bank 0, Addr 2) with a0bd
#   Loading B[2][1] (Bank 1, Addr 2) with 77dc
#   Loading B[2][2] (Bank 2, Addr 2) with 9b4b
#   Loading B[2][3] (Bank 3, Addr 2) with 37f8
#   Loading B[3][0] (Bank 0, Addr 3) with ba7d
#   Loading B[3][1] (Bank 1, Addr 3) with dc4a
#   Loading B[3][2] (Bank 2, Addr 3) with 8152
#   Loading B[3][3] (Bank 3, Addr 3) with 7716
# Matrix loading complete.
# @            49555000 Simulating controller signals to execute multiplication...
# @49575000: Starting input feeding sequence...
# @49575000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @49586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            49865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 60...
# Test Case 60 FAIL: C[0][0] mismatch! Actual 0, Expected 0f708cfab
# Test Case 60 FAIL: C[0][1] mismatch! Actual x, Expected 0ab75719e
# Test Case 60 FAIL: C[0][2] mismatch! Actual x, Expected 068b20245
# Test Case 60 FAIL: C[0][3] mismatch! Actual x, Expected 0c75bedc4
# Test Case 60 FAIL: C[1][0] mismatch! Actual x, Expected 14906b044
# Test Case 60 FAIL: C[1][1] mismatch! Actual x, Expected 10ad8e65a
# Test Case 60 FAIL: C[1][2] mismatch! Actual x, Expected 0f13415ae
# Test Case 60 FAIL: C[1][3] mismatch! Actual x, Expected 0d7170cc4
# Test Case 60 FAIL: C[2][0] mismatch! Actual x, Expected 169cd8e04
# Test Case 60 FAIL: C[2][1] mismatch! Actual x, Expected 100f2750a
# Test Case 60 FAIL: C[2][2] mismatch! Actual x, Expected 0fd6c2ad2
# Test Case 60 FAIL: C[2][3] mismatch! Actual x, Expected 12ab201e6
# Test Case 60 FAIL: C[3][0] mismatch! Actual x, Expected 19a6cc0a6
# Test Case 60 FAIL: C[3][1] mismatch! Actual x, Expected 106416997
# Test Case 60 FAIL: C[3][2] mismatch! Actual x, Expected 0ace1c127
# Test Case 60 FAIL: C[3][3] mismatch! Actual x, Expected 12b5540fb
# Test Case 60 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 61 of 100
# ===================================================
# Reading test case 61:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            50036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 54f1
#   Loading A[0][1] (Bank 1, Addr 0) with a6ae
#   Loading A[0][2] (Bank 2, Addr 0) with 4b05
#   Loading A[0][3] (Bank 3, Addr 0) with 8099
#   Loading A[1][0] (Bank 0, Addr 1) with 7a1f
#   Loading A[1][1] (Bank 1, Addr 1) with fac6
#   Loading A[1][2] (Bank 2, Addr 1) with 00cf
#   Loading A[1][3] (Bank 3, Addr 1) with 7ac5
#   Loading A[2][0] (Bank 0, Addr 2) with c02b
#   Loading A[2][1] (Bank 1, Addr 2) with 3749
#   Loading A[2][2] (Bank 2, Addr 2) with fc04
#   Loading A[2][3] (Bank 3, Addr 2) with 2395
#   Loading A[3][0] (Bank 0, Addr 3) with f72f
#   Loading A[3][1] (Bank 1, Addr 3) with 89e8
#   Loading A[3][2] (Bank 2, Addr 3) with fc6d
#   Loading A[3][3] (Bank 3, Addr 3) with 8241
#   Loading B[0][0] (Bank 0, Addr 0) with 8521
#   Loading B[0][1] (Bank 1, Addr 0) with aaad
#   Loading B[0][2] (Bank 2, Addr 0) with aeed
#   Loading B[0][3] (Bank 3, Addr 0) with cec1
#   Loading B[1][0] (Bank 0, Addr 1) with 8afb
#   Loading B[1][1] (Bank 1, Addr 1) with 1bf1
#   Loading B[1][2] (Bank 2, Addr 1) with 0bd0
#   Loading B[1][3] (Bank 3, Addr 1) with 0e90
#   Loading B[2][0] (Bank 0, Addr 2) with d0c5
#   Loading B[2][1] (Bank 1, Addr 2) with 3ec4
#   Loading B[2][2] (Bank 2, Addr 2) with 4109
#   Loading B[2][3] (Bank 3, Addr 2) with 0bea
#   Loading B[3][0] (Bank 0, Addr 3) with 2cac
#   Loading B[3][1] (Bank 1, Addr 3) with e547
#   Loading B[3][2] (Bank 2, Addr 3) with 97b3
#   Loading B[3][3] (Bank 3, Addr 3) with 7be9
# Matrix loading complete.
# @            50375000 Simulating controller signals to execute multiplication...
# @50395000: Starting input feeding sequence...
# @50395000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @50406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            50685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 61...
# Test Case 61 FAIL: C[0][0] mismatch! Actual 1, Expected 136519321
# Test Case 61 FAIL: C[0][1] mismatch! Actual x, Expected 15274d101
# Test Case 61 FAIL: C[0][2] mismatch! Actual x, Expected 102f83aad
# Test Case 61 FAIL: C[0][3] mismatch! Actual x, Expected 0cc226a36
# Test Case 61 FAIL: C[1][0] mismatch! Actual x, Expected 123f8e19d
# Test Case 61 FAIL: C[1][1] mismatch! Actual x, Expected 1138fef38
# Test Case 61 FAIL: C[1][2] mismatch! Actual x, Expected 0dd3a95bf
# Test Case 61 FAIL: C[1][3] mismatch! Actual x, Expected 0da343870
# Test Case 61 FAIL: C[2][0] mismatch! Actual x, Expected 1210529ea
# Test Case 61 FAIL: C[2][1] mismatch! Actual x, Expected 151f80a8b
# Test Case 61 FAIL: C[2][2] mismatch! Actual x, Expected 108e7122c
# Test Case 61 FAIL: C[2][3] mismatch! Actual x, Expected 0c28b0112
# Test Case 61 FAIL: C[3][0] mismatch! Actual x, Expected 0b945c335
# Test Case 61 FAIL: C[3][1] mismatch! Actual x, Expected 0e08474f5
# Test Case 61 FAIL: C[3][2] mismatch! Actual x, Expected 0b3c2c265
# Test Case 61 FAIL: C[3][3] mismatch! Actual x, Expected 0af8b9b84
# Test Case 61 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 62 of 100
# ===================================================
# Reading test case 62:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            50856000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 455b
#   Loading A[0][1] (Bank 1, Addr 0) with 2ca8
#   Loading A[0][2] (Bank 2, Addr 0) with a907
#   Loading A[0][3] (Bank 3, Addr 0) with 9ff4
#   Loading A[1][0] (Bank 0, Addr 1) with 15f9
#   Loading A[1][1] (Bank 1, Addr 1) with defa
#   Loading A[1][2] (Bank 2, Addr 1) with 8dbd
#   Loading A[1][3] (Bank 3, Addr 1) with 728d
#   Loading A[2][0] (Bank 0, Addr 2) with f09f
#   Loading A[2][1] (Bank 1, Addr 2) with 0f24
#   Loading A[2][2] (Bank 2, Addr 2) with 7f9a
#   Loading A[2][3] (Bank 3, Addr 2) with e091
#   Loading A[3][0] (Bank 0, Addr 3) with 860e
#   Loading A[3][1] (Bank 1, Addr 3) with ad72
#   Loading A[3][2] (Bank 2, Addr 3) with bc40
#   Loading A[3][3] (Bank 3, Addr 3) with 7f97
#   Loading B[0][0] (Bank 0, Addr 0) with 8e56
#   Loading B[0][1] (Bank 1, Addr 0) with f539
#   Loading B[0][2] (Bank 2, Addr 0) with c0f3
#   Loading B[0][3] (Bank 3, Addr 0) with 4bfa
#   Loading B[1][0] (Bank 0, Addr 1) with 4db3
#   Loading B[1][1] (Bank 1, Addr 1) with 6272
#   Loading B[1][2] (Bank 2, Addr 1) with 76d7
#   Loading B[1][3] (Bank 3, Addr 1) with 187b
#   Loading B[2][0] (Bank 0, Addr 2) with 0a68
#   Loading B[2][1] (Bank 1, Addr 2) with 1c48
#   Loading B[2][2] (Bank 2, Addr 2) with 7b11
#   Loading B[2][3] (Bank 3, Addr 2) with 9b09
#   Loading B[3][0] (Bank 0, Addr 3) with ddb4
#   Loading B[3][1] (Bank 1, Addr 3) with 0320
#   Loading B[3][2] (Bank 2, Addr 3) with a1dc
#   Loading B[3][3] (Bank 3, Addr 3) with ab7f
# Matrix loading complete.
# @            51195000 Simulating controller signals to execute multiplication...
# @51215000: Starting input feeding sequence...
# @51215000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @51226000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            51505000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 62...
# Test Case 62 FAIL: C[0][0] mismatch! Actual 1, Expected 0ab1b571d
# Test Case 62 FAIL: C[0][1] mismatch! Actual x, Expected 0671a9f9d
# Test Case 62 FAIL: C[0][2] mismatch! Actual x, Expected 106e7b117
# Test Case 62 FAIL: C[0][3] mismatch! Actual x, Expected 10235e00a
# Test Case 62 FAIL: C[1][0] mismatch! Actual x, Expected 0f3543806
# Test Case 62 FAIL: C[1][1] mismatch! Actual x, Expected 0844fef1c
# Test Case 62 FAIL: C[1][2] mismatch! Actual x, Expected 0fe1bf0ca
# Test Case 62 FAIL: C[1][3] mismatch! Actual x, Expected 09fefec00
# Test Case 62 FAIL: C[2][0] mismatch! Actual x, Expected 131371611
# Test Case 62 FAIL: C[2][1] mismatch! Actual x, Expected 0e8cfd109
# Test Case 62 FAIL: C[2][2] mismatch! Actual x, Expected 1758f579a
# Test Case 62 FAIL: C[2][3] mismatch! Actual x, Expected 10b1acdcf
# Test Case 62 FAIL: C[3][0] mismatch! Actual x, Expected 0f3538ba3
# Test Case 62 FAIL: C[3][1] mismatch! Actual x, Expected 0dfa2dac6
# Test Case 62 FAIL: C[3][2] mismatch! Actual x, Expected 16a5c386c
# Test Case 62 FAIL: C[3][3] mismatch! Actual x, Expected 117e5cb09
# Test Case 62 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 63 of 100
# ===================================================
# Reading test case 63:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            51676000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 649b
#   Loading A[0][1] (Bank 1, Addr 0) with fd2e
#   Loading A[0][2] (Bank 2, Addr 0) with 6f15
#   Loading A[0][3] (Bank 3, Addr 0) with 6619
#   Loading A[1][0] (Bank 0, Addr 1) with 8952
#   Loading A[1][1] (Bank 1, Addr 1) with ae97
#   Loading A[1][2] (Bank 2, Addr 1) with d0b5
#   Loading A[1][3] (Bank 3, Addr 1) with ccc0
#   Loading A[2][0] (Bank 0, Addr 2) with c897
#   Loading A[2][1] (Bank 1, Addr 2) with befb
#   Loading A[2][2] (Bank 2, Addr 2) with cf95
#   Loading A[2][3] (Bank 3, Addr 2) with 7a10
#   Loading A[3][0] (Bank 0, Addr 3) with 28d9
#   Loading A[3][1] (Bank 1, Addr 3) with 477c
#   Loading A[3][2] (Bank 2, Addr 3) with 1931
#   Loading A[3][3] (Bank 3, Addr 3) with 0a4a
#   Loading B[0][0] (Bank 0, Addr 0) with ead2
#   Loading B[0][1] (Bank 1, Addr 0) with 22b6
#   Loading B[0][2] (Bank 2, Addr 0) with b96e
#   Loading B[0][3] (Bank 3, Addr 0) with 43b0
#   Loading B[1][0] (Bank 0, Addr 1) with d169
#   Loading B[1][1] (Bank 1, Addr 1) with 2e22
#   Loading B[1][2] (Bank 2, Addr 1) with c38d
#   Loading B[1][3] (Bank 3, Addr 1) with 969d
#   Loading B[2][0] (Bank 0, Addr 2) with 59c0
#   Loading B[2][1] (Bank 1, Addr 2) with 5871
#   Loading B[2][2] (Bank 2, Addr 2) with 5179
#   Loading B[2][3] (Bank 3, Addr 2) with 6722
#   Loading B[3][0] (Bank 0, Addr 3) with 0074
#   Loading B[3][1] (Bank 1, Addr 3) with 86df
#   Loading B[3][2] (Bank 2, Addr 3) with a568
#   Loading B[3][3] (Bank 3, Addr 3) with 98ce
# Matrix loading complete.
# @            52015000 Simulating controller signals to execute multiplication...
# @52035000: Starting input feeding sequence...
# @52035000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @52046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            52325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 63...
# Test Case 63 FAIL: C[0][0] mismatch! Actual 0, Expected 11301ec5c
# Test Case 63 FAIL: C[0][1] mismatch! Actual x, Expected 08134b2c4
# Test Case 63 FAIL: C[0][2] mismatch! Actual x, Expected 10bff614b
# Test Case 63 FAIL: C[0][3] mismatch! Actual x, Expected 0d4951a86
# Test Case 63 FAIL: C[1][0] mismatch! Actual x, Expected 1ba21821b
# Test Case 63 FAIL: C[1][1] mismatch! Actual x, Expected 0a96e2e91
# Test Case 63 FAIL: C[1][2] mismatch! Actual x, Expected 1a7b7dbf2
# Test Case 63 FAIL: C[1][3] mismatch! Actual x, Expected 121442659
# Test Case 63 FAIL: C[2][0] mismatch! Actual x, Expected 1596f976b
# Test Case 63 FAIL: C[2][1] mismatch! Actual x, Expected 089a8716c
# Test Case 63 FAIL: C[2][2] mismatch! Actual x, Expected 14239ce0c
# Test Case 63 FAIL: C[2][3] mismatch! Actual x, Expected 0fad2cca9
# Test Case 63 FAIL: C[3][0] mismatch! Actual x, Expected 12ff31aca
# Test Case 63 FAIL: C[3][1] mismatch! Actual x, Expected 06254accc
# Test Case 63 FAIL: C[3][2] mismatch! Actual x, Expected 113d9971e
# Test Case 63 FAIL: C[3][3] mismatch! Actual x, Expected 0cac5ab9c
# Test Case 63 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 64 of 100
# ===================================================
# Reading test case 64:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_64/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_64/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_64/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            52496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6532
#   Loading A[0][1] (Bank 1, Addr 0) with 8234
#   Loading A[0][2] (Bank 2, Addr 0) with e295
#   Loading A[0][3] (Bank 3, Addr 0) with 13ce
#   Loading A[1][0] (Bank 0, Addr 1) with 102e
#   Loading A[1][1] (Bank 1, Addr 1) with 6d28
#   Loading A[1][2] (Bank 2, Addr 1) with 27ea
#   Loading A[1][3] (Bank 3, Addr 1) with 3a12
#   Loading A[2][0] (Bank 0, Addr 2) with d1cf
#   Loading A[2][1] (Bank 1, Addr 2) with 3d8e
#   Loading A[2][2] (Bank 2, Addr 2) with cfc1
#   Loading A[2][3] (Bank 3, Addr 2) with f388
#   Loading A[3][0] (Bank 0, Addr 3) with 12bf
#   Loading A[3][1] (Bank 1, Addr 3) with 06a5
#   Loading A[3][2] (Bank 2, Addr 3) with f413
#   Loading A[3][3] (Bank 3, Addr 3) with 3786
#   Loading B[0][0] (Bank 0, Addr 0) with 5fe7
#   Loading B[0][1] (Bank 1, Addr 0) with d146
#   Loading B[0][2] (Bank 2, Addr 0) with 12cd
#   Loading B[0][3] (Bank 3, Addr 0) with 831a
#   Loading B[1][0] (Bank 0, Addr 1) with 1198
#   Loading B[1][1] (Bank 1, Addr 1) with 0770
#   Loading B[1][2] (Bank 2, Addr 1) with c26e
#   Loading B[1][3] (Bank 3, Addr 1) with 676a
#   Loading B[2][0] (Bank 0, Addr 2) with 6915
#   Loading B[2][1] (Bank 1, Addr 2) with dc9d
#   Loading B[2][2] (Bank 2, Addr 2) with 91a8
#   Loading B[2][3] (Bank 3, Addr 2) with 590a
#   Loading B[3][0] (Bank 0, Addr 3) with 38dc
#   Loading B[3][1] (Bank 1, Addr 3) with 8491
#   Loading B[3][2] (Bank 2, Addr 3) with ad06
#   Loading B[3][3] (Bank 3, Addr 3) with 4444
# Matrix loading complete.
# @            52835000 Simulating controller signals to execute multiplication...
# @52855000: Starting input feeding sequence...
# @52855000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @52866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            53145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 64...
# Test Case 64 FAIL: C[0][0] mismatch! Actual 0, Expected 0814e888d
# Test Case 64 FAIL: C[0][1] mismatch! Actual x, Expected 111b57dee
# Test Case 64 FAIL: C[0][2] mismatch! Actual x, Expected 097c3cf20
# Test Case 64 FAIL: C[0][3] mismatch! Actual x, Expected 08854f1f2
# Test Case 64 FAIL: C[1][0] mismatch! Actual x, Expected 05305591e
# Test Case 64 FAIL: C[1][1] mismatch! Actual x, Expected 0a6188743
# Test Case 64 FAIL: C[1][2] mismatch! Actual x, Expected 083fa9ee2
# Test Case 64 FAIL: C[1][3] mismatch! Actual x, Expected 085f47d38
# Test Case 64 FAIL: C[2][0] mismatch! Actual x, Expected 0e31d188c
# Test Case 64 FAIL: C[2][1] mismatch! Actual x, Expected 1ebcfc63e
# Test Case 64 FAIL: C[2][2] mismatch! Actual x, Expected 14a1f9cf7
# Test Case 64 FAIL: C[2][3] mismatch! Actual x, Expected 10d81069c
# Test Case 64 FAIL: C[3][0] mismatch! Actual x, Expected 07bb4c6e2
# Test Case 64 FAIL: C[3][1] mismatch! Actual x, Expected 1007f4382
# Test Case 64 FAIL: C[3][2] mismatch! Actual x, Expected 0dda5a416
# Test Case 64 FAIL: C[3][3] mismatch! Actual x, Expected 0851bd948
# Test Case 64 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 65 of 100
# ===================================================
# Reading test case 65:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_65/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_65/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_65/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            53316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d037
#   Loading A[0][1] (Bank 1, Addr 0) with c982
#   Loading A[0][2] (Bank 2, Addr 0) with 0516
#   Loading A[0][3] (Bank 3, Addr 0) with c967
#   Loading A[1][0] (Bank 0, Addr 1) with 2a86
#   Loading A[1][1] (Bank 1, Addr 1) with 3a78
#   Loading A[1][2] (Bank 2, Addr 1) with 24b6
#   Loading A[1][3] (Bank 3, Addr 1) with 2490
#   Loading A[2][0] (Bank 0, Addr 2) with 5428
#   Loading A[2][1] (Bank 1, Addr 2) with 35b8
#   Loading A[2][2] (Bank 2, Addr 2) with 2cc4
#   Loading A[2][3] (Bank 3, Addr 2) with 0b70
#   Loading A[3][0] (Bank 0, Addr 3) with 67ca
#   Loading A[3][1] (Bank 1, Addr 3) with 7cf2
#   Loading A[3][2] (Bank 2, Addr 3) with 87d2
#   Loading A[3][3] (Bank 3, Addr 3) with 23a6
#   Loading B[0][0] (Bank 0, Addr 0) with 9fd7
#   Loading B[0][1] (Bank 1, Addr 0) with daef
#   Loading B[0][2] (Bank 2, Addr 0) with 518e
#   Loading B[0][3] (Bank 3, Addr 0) with 955e
#   Loading B[1][0] (Bank 0, Addr 1) with 1aa2
#   Loading B[1][1] (Bank 1, Addr 1) with 31f4
#   Loading B[1][2] (Bank 2, Addr 1) with 6fa6
#   Loading B[1][3] (Bank 3, Addr 1) with abfa
#   Loading B[2][0] (Bank 0, Addr 2) with 2a49
#   Loading B[2][1] (Bank 1, Addr 2) with 7ca7
#   Loading B[2][2] (Bank 2, Addr 2) with 4f3c
#   Loading B[2][3] (Bank 3, Addr 2) with 38d1
#   Loading B[3][0] (Bank 0, Addr 3) with f608
#   Loading B[3][1] (Bank 1, Addr 3) with 7f4a
#   Loading B[3][2] (Bank 2, Addr 3) with 245a
#   Loading B[3][3] (Bank 3, Addr 3) with 0ea4
# Matrix loading complete.
# @            53655000 Simulating controller signals to execute multiplication...
# @53675000: Starting input feeding sequence...
# @53675000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @53686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            53965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 65...
# Test Case 65 FAIL: C[0][0] mismatch! Actual 1, Expected 0f81375b5
# Test Case 65 FAIL: C[0][1] mismatch! Actual x, Expected 116f2e38d
# Test Case 65 FAIL: C[0][2] mismatch! Actual x, Expected 07da988ca
# Test Case 65 FAIL: C[0][3] mismatch! Actual x, Expected 0aeaa7e1e
# Test Case 65 FAIL: C[1][0] mismatch! Actual x, Expected 104da1f26
# Test Case 65 FAIL: C[1][1] mismatch! Actual x, Expected 11005ddba
# Test Case 65 FAIL: C[1][2] mismatch! Actual x, Expected 07c102e20
# Test Case 65 FAIL: C[1][3] mismatch! Actual x, Expected 0afeb4b2c
# Test Case 65 FAIL: C[2][0] mismatch! Actual x, Expected 090eb9d1a
# Test Case 65 FAIL: C[2][1] mismatch! Actual x, Expected 064d7e392
# Test Case 65 FAIL: C[2][2] mismatch! Actual x, Expected 032c5c1fc
# Test Case 65 FAIL: C[2][3] mismatch! Actual x, Expected 02d55025c
# Test Case 65 FAIL: C[3][0] mismatch! Actual x, Expected 0a5b425c1
# Test Case 65 FAIL: C[3][1] mismatch! Actual x, Expected 0caab8475
# Test Case 65 FAIL: C[3][2] mismatch! Actual x, Expected 058b5921e
# Test Case 65 FAIL: C[3][3] mismatch! Actual x, Expected 092a68c3a
# Test Case 65 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 66 of 100
# ===================================================
# Reading test case 66:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_66/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_66/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_66/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            54136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 557e
#   Loading A[0][1] (Bank 1, Addr 0) with 91e4
#   Loading A[0][2] (Bank 2, Addr 0) with ab6d
#   Loading A[0][3] (Bank 3, Addr 0) with 294b
#   Loading A[1][0] (Bank 0, Addr 1) with 27a7
#   Loading A[1][1] (Bank 1, Addr 1) with 38d0
#   Loading A[1][2] (Bank 2, Addr 1) with 5b33
#   Loading A[1][3] (Bank 3, Addr 1) with 2ef2
#   Loading A[2][0] (Bank 0, Addr 2) with c40d
#   Loading A[2][1] (Bank 1, Addr 2) with b6ea
#   Loading A[2][2] (Bank 2, Addr 2) with 3318
#   Loading A[2][3] (Bank 3, Addr 2) with 9fe4
#   Loading A[3][0] (Bank 0, Addr 3) with 7989
#   Loading A[3][1] (Bank 1, Addr 3) with a4ca
#   Loading A[3][2] (Bank 2, Addr 3) with 5e80
#   Loading A[3][3] (Bank 3, Addr 3) with 95dc
#   Loading B[0][0] (Bank 0, Addr 0) with 076e
#   Loading B[0][1] (Bank 1, Addr 0) with cff8
#   Loading B[0][2] (Bank 2, Addr 0) with 542a
#   Loading B[0][3] (Bank 3, Addr 0) with 29e3
#   Loading B[1][0] (Bank 0, Addr 1) with 02d0
#   Loading B[1][1] (Bank 1, Addr 1) with d1e2
#   Loading B[1][2] (Bank 2, Addr 1) with 9656
#   Loading B[1][3] (Bank 3, Addr 1) with e126
#   Loading B[2][0] (Bank 0, Addr 2) with 9058
#   Loading B[2][1] (Bank 1, Addr 2) with 0e6a
#   Loading B[2][2] (Bank 2, Addr 2) with d132
#   Loading B[2][3] (Bank 3, Addr 2) with dda9
#   Loading B[3][0] (Bank 0, Addr 3) with ccc1
#   Loading B[3][1] (Bank 1, Addr 3) with 6235
#   Loading B[3][2] (Bank 2, Addr 3) with 9304
#   Loading B[3][3] (Bank 3, Addr 3) with 8d65
# Matrix loading complete.
# @            54475000 Simulating controller signals to execute multiplication...
# @54495000: Starting input feeding sequence...
# @54495000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @54506000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            54785000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 66...
# Test Case 66 FAIL: C[0][0] mismatch! Actual 0, Expected 0d2aa3495
# Test Case 66 FAIL: C[0][1] mismatch! Actual x, Expected 09f9f8b3d
# Test Case 66 FAIL: C[0][2] mismatch! Actual x, Expected 119650374
# Test Case 66 FAIL: C[0][3] mismatch! Actual x, Expected 11dbdb426
# Test Case 66 FAIL: C[1][0] mismatch! Actual x, Expected 0efcb69b2
# Test Case 66 FAIL: C[1][1] mismatch! Actual x, Expected 0ee9ca336
# Test Case 66 FAIL: C[1][2] mismatch! Actual x, Expected 1456f0a24
# Test Case 66 FAIL: C[1][3] mismatch! Actual x, Expected 1433b2838
# Test Case 66 FAIL: C[2][0] mismatch! Actual x, Expected 06e5e7206
# Test Case 66 FAIL: C[2][1] mismatch! Actual x, Expected 0fd29630e
# Test Case 66 FAIL: C[2][2] mismatch! Actual x, Expected 0cdeff5b4
# Test Case 66 FAIL: C[2][3] mismatch! Actual x, Expected 0ccb10e91
# Test Case 66 FAIL: C[3][0] mismatch! Actual x, Expected 0d3ba5516
# Test Case 66 FAIL: C[3][1] mismatch! Actual x, Expected 08a869440
# Test Case 66 FAIL: C[3][2] mismatch! Actual x, Expected 101dcfd92
# Test Case 66 FAIL: C[3][3] mismatch! Actual x, Expected 10d41f7bd
# Test Case 66 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 67 of 100
# ===================================================
# Reading test case 67:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_67/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_67/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_67/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            54956000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6266
#   Loading A[0][1] (Bank 1, Addr 0) with 3ecc
#   Loading A[0][2] (Bank 2, Addr 0) with f6ff
#   Loading A[0][3] (Bank 3, Addr 0) with 3af4
#   Loading A[1][0] (Bank 0, Addr 1) with 59f1
#   Loading A[1][1] (Bank 1, Addr 1) with d766
#   Loading A[1][2] (Bank 2, Addr 1) with c94b
#   Loading A[1][3] (Bank 3, Addr 1) with 2d18
#   Loading A[2][0] (Bank 0, Addr 2) with e115
#   Loading A[2][1] (Bank 1, Addr 2) with d533
#   Loading A[2][2] (Bank 2, Addr 2) with b79c
#   Loading A[2][3] (Bank 3, Addr 2) with 3237
#   Loading A[3][0] (Bank 0, Addr 3) with 04cb
#   Loading A[3][1] (Bank 1, Addr 3) with a1ac
#   Loading A[3][2] (Bank 2, Addr 3) with 98b2
#   Loading A[3][3] (Bank 3, Addr 3) with f8d4
#   Loading B[0][0] (Bank 0, Addr 0) with 21f9
#   Loading B[0][1] (Bank 1, Addr 0) with f03c
#   Loading B[0][2] (Bank 2, Addr 0) with c437
#   Loading B[0][3] (Bank 3, Addr 0) with b07e
#   Loading B[1][0] (Bank 0, Addr 1) with 3816
#   Loading B[1][1] (Bank 1, Addr 1) with 63c7
#   Loading B[1][2] (Bank 2, Addr 1) with bf16
#   Loading B[1][3] (Bank 3, Addr 1) with c146
#   Loading B[2][0] (Bank 0, Addr 2) with b273
#   Loading B[2][1] (Bank 1, Addr 2) with b6ba
#   Loading B[2][2] (Bank 2, Addr 2) with a591
#   Loading B[2][3] (Bank 3, Addr 2) with 3cd5
#   Loading B[3][0] (Bank 0, Addr 3) with 553c
#   Loading B[3][1] (Bank 1, Addr 3) with b7ae
#   Loading B[3][2] (Bank 2, Addr 3) with 8412
#   Loading B[3][3] (Bank 3, Addr 3) with 8b5e
# Matrix loading complete.
# @            55295000 Simulating controller signals to execute multiplication...
# @55315000: Starting input feeding sequence...
# @55315000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @55326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            55605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 67...
# Test Case 67 FAIL: C[0][0] mismatch! Actual 1, Expected 0bf418aef
# Test Case 67 FAIL: C[0][1] mismatch! Actual x, Expected 1237da37b
# Test Case 67 FAIL: C[0][2] mismatch! Actual x, Expected 12298cdcb
# Test Case 67 FAIL: C[0][3] mismatch! Actual x, Expected 0bfd6051d
# Test Case 67 FAIL: C[1][0] mismatch! Actual x, Expected 101f76f69
# Test Case 67 FAIL: C[1][1] mismatch! Actual x, Expected 19b0eda10
# Test Case 67 FAIL: C[1][2] mismatch! Actual x, Expected 1ae33f993
# Test Case 67 FAIL: C[1][3] mismatch! Actual x, Expected 158970ce3
# Test Case 67 FAIL: C[2][0] mismatch! Actual x, Expected 0ffb4a845
# Test Case 67 FAIL: C[2][1] mismatch! Actual x, Expected 226dac465
# Test Case 67 FAIL: C[2][2] mismatch! Actual x, Expected 219169e1b
# Test Case 67 FAIL: C[2][3] mismatch! Actual x, Expected 1c103832c
# Test Case 67 FAIL: C[3][0] mismatch! Actual x, Expected 0878d6dc9
# Test Case 67 FAIL: C[3][1] mismatch! Actual x, Expected 11f4628e6
# Test Case 67 FAIL: C[3][2] mismatch! Actual x, Expected 0efb0f58b
# Test Case 67 FAIL: C[3][3] mismatch! Actual x, Expected 0de155643
# Test Case 67 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 68 of 100
# ===================================================
# Reading test case 68:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_68/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_68/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_68/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            55776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ba8d
#   Loading A[0][1] (Bank 1, Addr 0) with a806
#   Loading A[0][2] (Bank 2, Addr 0) with bb23
#   Loading A[0][3] (Bank 3, Addr 0) with bc82
#   Loading A[1][0] (Bank 0, Addr 1) with d4ca
#   Loading A[1][1] (Bank 1, Addr 1) with cf8d
#   Loading A[1][2] (Bank 2, Addr 1) with 25a4
#   Loading A[1][3] (Bank 3, Addr 1) with 4f96
#   Loading A[2][0] (Bank 0, Addr 2) with 5441
#   Loading A[2][1] (Bank 1, Addr 2) with 07c9
#   Loading A[2][2] (Bank 2, Addr 2) with 91f6
#   Loading A[2][3] (Bank 3, Addr 2) with ad78
#   Loading A[3][0] (Bank 0, Addr 3) with 55ea
#   Loading A[3][1] (Bank 1, Addr 3) with 2aef
#   Loading A[3][2] (Bank 2, Addr 3) with 19b2
#   Loading A[3][3] (Bank 3, Addr 3) with 780c
#   Loading B[0][0] (Bank 0, Addr 0) with 2504
#   Loading B[0][1] (Bank 1, Addr 0) with 503e
#   Loading B[0][2] (Bank 2, Addr 0) with 1c9e
#   Loading B[0][3] (Bank 3, Addr 0) with a2b7
#   Loading B[1][0] (Bank 0, Addr 1) with 8981
#   Loading B[1][1] (Bank 1, Addr 1) with bdac
#   Loading B[1][2] (Bank 2, Addr 1) with 6fa7
#   Loading B[1][3] (Bank 3, Addr 1) with ecb0
#   Loading B[2][0] (Bank 0, Addr 2) with c339
#   Loading B[2][1] (Bank 1, Addr 2) with bcde
#   Loading B[2][2] (Bank 2, Addr 2) with fc7a
#   Loading B[2][3] (Bank 3, Addr 2) with 30fc
#   Loading B[3][0] (Bank 0, Addr 3) with add5
#   Loading B[3][1] (Bank 1, Addr 3) with 428b
#   Loading B[3][2] (Bank 2, Addr 3) with 5751
#   Loading B[3][3] (Bank 3, Addr 3) with 2633
# Matrix loading complete.
# @            56115000 Simulating controller signals to execute multiplication...
# @56135000: Starting input feeding sequence...
# @56135000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @56146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            56425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 68...
# Test Case 68 FAIL: C[0][0] mismatch! Actual 1, Expected 107db8229
# Test Case 68 FAIL: C[0][1] mismatch! Actual x, Expected 12c9f1e4a
# Test Case 68 FAIL: C[0][2] mismatch! Actual x, Expected 0e20eccd0
# Test Case 68 FAIL: C[0][3] mismatch! Actual x, Expected 158401145
# Test Case 68 FAIL: C[1][0] mismatch! Actual x, Expected 0aadd9bc1
# Test Case 68 FAIL: C[1][1] mismatch! Actual x, Expected 0df586743
# Test Case 68 FAIL: C[1][2] mismatch! Actual x, Expected 083a04418
# Test Case 68 FAIL: C[1][3] mismatch! Actual x, Expected 13295f6b3
# Test Case 68 FAIL: C[2][0] mismatch! Actual x, Expected 0b0084410
# Test Case 68 FAIL: C[2][1] mismatch! Actual x, Expected 0c8e8b3a4
# Test Case 68 FAIL: C[2][2] mismatch! Actual x, Expected 0be0d5424
# Test Case 68 FAIL: C[2][3] mismatch! Actual x, Expected 0b9825563
# Test Case 68 FAIL: C[3][0] mismatch! Actual x, Expected 11bce2252
# Test Case 68 FAIL: C[3][1] mismatch! Actual x, Expected 1153c52d8
# Test Case 68 FAIL: C[3][2] mismatch! Actual x, Expected 10bcf6012
# Test Case 68 FAIL: C[3][3] mismatch! Actual x, Expected 0f480f892
# Test Case 68 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 69 of 100
# ===================================================
# Reading test case 69:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_69/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_69/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_69/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            56596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d4fe
#   Loading A[0][1] (Bank 1, Addr 0) with 17d6
#   Loading A[0][2] (Bank 2, Addr 0) with 2fea
#   Loading A[0][3] (Bank 3, Addr 0) with e720
#   Loading A[1][0] (Bank 0, Addr 1) with 9507
#   Loading A[1][1] (Bank 1, Addr 1) with 7f32
#   Loading A[1][2] (Bank 2, Addr 1) with d6d6
#   Loading A[1][3] (Bank 3, Addr 1) with f15e
#   Loading A[2][0] (Bank 0, Addr 2) with b257
#   Loading A[2][1] (Bank 1, Addr 2) with c835
#   Loading A[2][2] (Bank 2, Addr 2) with 45af
#   Loading A[2][3] (Bank 3, Addr 2) with f888
#   Loading A[3][0] (Bank 0, Addr 3) with 3c7d
#   Loading A[3][1] (Bank 1, Addr 3) with dc79
#   Loading A[3][2] (Bank 2, Addr 3) with 43a9
#   Loading A[3][3] (Bank 3, Addr 3) with 1dba
#   Loading B[0][0] (Bank 0, Addr 0) with 240c
#   Loading B[0][1] (Bank 1, Addr 0) with 5e36
#   Loading B[0][2] (Bank 2, Addr 0) with c36d
#   Loading B[0][3] (Bank 3, Addr 0) with 31e3
#   Loading B[1][0] (Bank 0, Addr 1) with 1e28
#   Loading B[1][1] (Bank 1, Addr 1) with fba6
#   Loading B[1][2] (Bank 2, Addr 1) with 70d4
#   Loading B[1][3] (Bank 3, Addr 1) with 2f62
#   Loading B[2][0] (Bank 0, Addr 2) with 64c0
#   Loading B[2][1] (Bank 1, Addr 2) with 9cef
#   Loading B[2][2] (Bank 2, Addr 2) with 8724
#   Loading B[2][3] (Bank 3, Addr 2) with 9234
#   Loading B[3][0] (Bank 0, Addr 3) with 0e44
#   Loading B[3][1] (Bank 1, Addr 3) with a57b
#   Loading B[3][2] (Bank 2, Addr 3) with 2409
#   Loading B[3][3] (Bank 3, Addr 3) with 2c31
# Matrix loading complete.
# @            56935000 Simulating controller signals to execute multiplication...
# @56955000: Starting input feeding sequence...
# @56955000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @56966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            57245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 69...
# Test Case 69 FAIL: C[0][0] mismatch! Actual 0, Expected 0791a7374
# Test Case 69 FAIL: C[0][1] mismatch! Actual x, Expected 1754dd566
# Test Case 69 FAIL: C[0][2] mismatch! Actual x, Expected 14aef4d93
# Test Case 69 FAIL: C[0][3] mismatch! Actual x, Expected 0b561b881
# Test Case 69 FAIL: C[1][0] mismatch! Actual x, Expected 06d6afbbc
# Test Case 69 FAIL: C[1][1] mismatch! Actual x, Expected 18f0d3c2e
# Test Case 69 FAIL: C[1][2] mismatch! Actual x, Expected 0d2fa3c3b
# Test Case 69 FAIL: C[1][3] mismatch! Actual x, Expected 0b495dbd3
# Test Case 69 FAIL: C[2][0] mismatch! Actual x, Expected 03f3fa28c
# Test Case 69 FAIL: C[2][1] mismatch! Actual x, Expected 13b4549b4
# Test Case 69 FAIL: C[2][2] mismatch! Actual x, Expected 0b1926867
# Test Case 69 FAIL: C[2][3] mismatch! Actual x, Expected 06493c34f
# Test Case 69 FAIL: C[3][0] mismatch! Actual x, Expected 0a071a798
# Test Case 69 FAIL: C[3][1] mismatch! Actual x, Expected 1ede43f0a
# Test Case 69 FAIL: C[3][2] mismatch! Actual x, Expected 1a232a922
# Test Case 69 FAIL: C[3][3] mismatch! Actual x, Expected 0ecc86d96
# Test Case 69 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 70 of 100
# ===================================================
# Reading test case 70:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_70/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_70/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_70/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            57416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0558
#   Loading A[0][1] (Bank 1, Addr 0) with c3c5
#   Loading A[0][2] (Bank 2, Addr 0) with 13d6
#   Loading A[0][3] (Bank 3, Addr 0) with ee83
#   Loading A[1][0] (Bank 0, Addr 1) with ae3c
#   Loading A[1][1] (Bank 1, Addr 1) with e07a
#   Loading A[1][2] (Bank 2, Addr 1) with 3734
#   Loading A[1][3] (Bank 3, Addr 1) with fd68
#   Loading A[2][0] (Bank 0, Addr 2) with 6ef5
#   Loading A[2][1] (Bank 1, Addr 2) with 97a8
#   Loading A[2][2] (Bank 2, Addr 2) with 659e
#   Loading A[2][3] (Bank 3, Addr 2) with 6d2e
#   Loading A[3][0] (Bank 0, Addr 3) with 4ed4
#   Loading A[3][1] (Bank 1, Addr 3) with 9cc5
#   Loading A[3][2] (Bank 2, Addr 3) with 8aeb
#   Loading A[3][3] (Bank 3, Addr 3) with 1c60
#   Loading B[0][0] (Bank 0, Addr 0) with 6a19
#   Loading B[0][1] (Bank 1, Addr 0) with 311f
#   Loading B[0][2] (Bank 2, Addr 0) with 8c39
#   Loading B[0][3] (Bank 3, Addr 0) with 80a2
#   Loading B[1][0] (Bank 0, Addr 1) with 8419
#   Loading B[1][1] (Bank 1, Addr 1) with 2fef
#   Loading B[1][2] (Bank 2, Addr 1) with c17b
#   Loading B[1][3] (Bank 3, Addr 1) with aea6
#   Loading B[2][0] (Bank 0, Addr 2) with 0901
#   Loading B[2][1] (Bank 1, Addr 2) with ba59
#   Loading B[2][2] (Bank 2, Addr 2) with 1ae2
#   Loading B[2][3] (Bank 3, Addr 2) with 7cd3
#   Loading B[3][0] (Bank 0, Addr 3) with 443e
#   Loading B[3][1] (Bank 1, Addr 3) with 6ee3
#   Loading B[3][2] (Bank 2, Addr 3) with 4764
#   Loading B[3][3] (Bank 3, Addr 3) with 2590
# Matrix loading complete.
# @            57755000 Simulating controller signals to execute multiplication...
# @57775000: Starting input feeding sequence...
# @57775000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @57786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            58065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 70...
# Test Case 70 FAIL: C[0][0] mismatch! Actual 1, Expected 075095cc1
# Test Case 70 FAIL: C[0][1] mismatch! Actual x, Expected 0948fbed5
# Test Case 70 FAIL: C[0][2] mismatch! Actual x, Expected 0a83eb086
# Test Case 70 FAIL: C[0][3] mismatch! Actual x, Expected 0bb383fc7
# Test Case 70 FAIL: C[1][0] mismatch! Actual x, Expected 0f4174f85
# Test Case 70 FAIL: C[1][1] mismatch! Actual x, Expected 101e4d3d8
# Test Case 70 FAIL: C[1][2] mismatch! Actual x, Expected 15087f9bf
# Test Case 70 FAIL: C[1][3] mismatch! Actual x, Expected 15c75e50e
# Test Case 70 FAIL: C[2][0] mismatch! Actual x, Expected 04d4fc482
# Test Case 70 FAIL: C[2][1] mismatch! Actual x, Expected 09448bac5
# Test Case 70 FAIL: C[2][2] mismatch! Actual x, Expected 065ff5eea
# Test Case 70 FAIL: C[2][3] mismatch! Actual x, Expected 0758f158e
# Test Case 70 FAIL: C[3][0] mismatch! Actual x, Expected 0f1035261
# Test Case 70 FAIL: C[3][1] mismatch! Actual x, Expected 0b8fa6b13
# Test Case 70 FAIL: C[3][2] mismatch! Actual x, Expected 1558aac3f
# Test Case 70 FAIL: C[3][3] mismatch! Actual x, Expected 15e1f8b40
# Test Case 70 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 71 of 100
# ===================================================
# Reading test case 71:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_71/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_71/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_71/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            58236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a117
#   Loading A[0][1] (Bank 1, Addr 0) with 008a
#   Loading A[0][2] (Bank 2, Addr 0) with fced
#   Loading A[0][3] (Bank 3, Addr 0) with 6d47
#   Loading A[1][0] (Bank 0, Addr 1) with 4373
#   Loading A[1][1] (Bank 1, Addr 1) with 2161
#   Loading A[1][2] (Bank 2, Addr 1) with 477e
#   Loading A[1][3] (Bank 3, Addr 1) with 4d3d
#   Loading A[2][0] (Bank 0, Addr 2) with ae46
#   Loading A[2][1] (Bank 1, Addr 2) with b66d
#   Loading A[2][2] (Bank 2, Addr 2) with b9f3
#   Loading A[2][3] (Bank 3, Addr 2) with c834
#   Loading A[3][0] (Bank 0, Addr 3) with 6da9
#   Loading A[3][1] (Bank 1, Addr 3) with 1ec8
#   Loading A[3][2] (Bank 2, Addr 3) with b2b6
#   Loading A[3][3] (Bank 3, Addr 3) with 4c55
#   Loading B[0][0] (Bank 0, Addr 0) with d8ff
#   Loading B[0][1] (Bank 1, Addr 0) with 6811
#   Loading B[0][2] (Bank 2, Addr 0) with 3181
#   Loading B[0][3] (Bank 3, Addr 0) with 5d17
#   Loading B[1][0] (Bank 0, Addr 1) with 476e
#   Loading B[1][1] (Bank 1, Addr 1) with 6ea7
#   Loading B[1][2] (Bank 2, Addr 1) with 9e3f
#   Loading B[1][3] (Bank 3, Addr 1) with cec1
#   Loading B[2][0] (Bank 0, Addr 2) with 57d4
#   Loading B[2][1] (Bank 1, Addr 2) with 5adc
#   Loading B[2][2] (Bank 2, Addr 2) with d83e
#   Loading B[2][3] (Bank 3, Addr 2) with 3f27
#   Loading B[3][0] (Bank 0, Addr 3) with 8346
#   Loading B[3][1] (Bank 1, Addr 3) with 8b4f
#   Loading B[3][2] (Bank 2, Addr 3) with cad2
#   Loading B[3][3] (Bank 3, Addr 3) with 6850
# Matrix loading complete.
# @            58575000 Simulating controller signals to execute multiplication...
# @58595000: Starting input feeding sequence...
# @58595000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @58606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            58885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 71...
# Test Case 71 FAIL: C[0][0] mismatch! Actual 0, Expected 10f635181
# Test Case 71 FAIL: C[0][1] mismatch! Actual x, Expected 0d82a6edb
# Test Case 71 FAIL: C[0][2] mismatch! Actual x, Expected 132eeba7a
# Test Case 71 FAIL: C[0][3] mismatch! Actual x, Expected 0c8b9eb3e
# Test Case 71 FAIL: C[1][0] mismatch! Actual x, Expected 058241818
# Test Case 71 FAIL: C[1][1] mismatch! Actual x, Expected 06024bcd5
# Test Case 71 FAIL: C[1][2] mismatch! Actual x, Expected 0c737fadf
# Test Case 71 FAIL: C[1][3] mismatch! Actual x, Expected 054b2e2a2
# Test Case 71 FAIL: C[2][0] mismatch! Actual x, Expected 185c62437
# Test Case 71 FAIL: C[2][1] mismatch! Actual x, Expected 128f70ded
# Test Case 71 FAIL: C[2][2] mismatch! Actual x, Expected 187c27295
# Test Case 71 FAIL: C[2][3] mismatch! Actual x, Expected 10c67062e
# Test Case 71 FAIL: C[3][0] mismatch! Actual x, Expected 0de01b23d
# Test Case 71 FAIL: C[3][1] mismatch! Actual x, Expected 0be66bc6d
# Test Case 71 FAIL: C[3][2] mismatch! Actual x, Expected 12a765c1c
# Test Case 71 FAIL: C[3][3] mismatch! Actual x, Expected 0b69b9bda
# Test Case 71 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 72 of 100
# ===================================================
# Reading test case 72:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_72/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_72/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_72/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            59056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9449
#   Loading A[0][1] (Bank 1, Addr 0) with 89a0
#   Loading A[0][2] (Bank 2, Addr 0) with caaf
#   Loading A[0][3] (Bank 3, Addr 0) with e24a
#   Loading A[1][0] (Bank 0, Addr 1) with 889c
#   Loading A[1][1] (Bank 1, Addr 1) with 7902
#   Loading A[1][2] (Bank 2, Addr 1) with 51c4
#   Loading A[1][3] (Bank 3, Addr 1) with 0a34
#   Loading A[2][0] (Bank 0, Addr 2) with 158a
#   Loading A[2][1] (Bank 1, Addr 2) with 6641
#   Loading A[2][2] (Bank 2, Addr 2) with 86ca
#   Loading A[2][3] (Bank 3, Addr 2) with 0412
#   Loading A[3][0] (Bank 0, Addr 3) with e959
#   Loading A[3][1] (Bank 1, Addr 3) with 88c2
#   Loading A[3][2] (Bank 2, Addr 3) with c2df
#   Loading A[3][3] (Bank 3, Addr 3) with e1ca
#   Loading B[0][0] (Bank 0, Addr 0) with 9102
#   Loading B[0][1] (Bank 1, Addr 0) with 8459
#   Loading B[0][2] (Bank 2, Addr 0) with bf34
#   Loading B[0][3] (Bank 3, Addr 0) with f94d
#   Loading B[1][0] (Bank 0, Addr 1) with 60af
#   Loading B[1][1] (Bank 1, Addr 1) with 3870
#   Loading B[1][2] (Bank 2, Addr 1) with de25
#   Loading B[1][3] (Bank 3, Addr 1) with 0caf
#   Loading B[2][0] (Bank 0, Addr 2) with be2b
#   Loading B[2][1] (Bank 1, Addr 2) with a433
#   Loading B[2][2] (Bank 2, Addr 2) with ae0b
#   Loading B[2][3] (Bank 3, Addr 2) with 528c
#   Loading B[3][0] (Bank 0, Addr 3) with 906e
#   Loading B[3][1] (Bank 1, Addr 3) with cb64
#   Loading B[3][2] (Bank 2, Addr 3) with 95e2
#   Loading B[3][3] (Bank 3, Addr 3) with d99c
# Matrix loading complete.
# @            59395000 Simulating controller signals to execute multiplication...
# @59415000: Starting input feeding sequence...
# @59415000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @59426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            59705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 72...
# Test Case 72 FAIL: C[0][0] mismatch! Actual 1, Expected 11b3cc2a2
# Test Case 72 FAIL: C[0][1] mismatch! Actual x, Expected 131fc81e3
# Test Case 72 FAIL: C[0][2] mismatch! Actual x, Expected 17c8f22e0
# Test Case 72 FAIL: C[0][3] mismatch! Actual x, Expected 16478ec4d
# Test Case 72 FAIL: C[1][0] mismatch! Actual x, Expected 114c579e5
# Test Case 72 FAIL: C[1][1] mismatch! Actual x, Expected 11010fe3b
# Test Case 72 FAIL: C[1][2] mismatch! Actual x, Expected 16561c5d9
# Test Case 72 FAIL: C[1][3] mismatch! Actual x, Expected 1213d5b42
# Test Case 72 FAIL: C[2][0] mismatch! Actual x, Expected 163c1d51a
# Test Case 72 FAIL: C[2][1] mismatch! Actual x, Expected 16c168ef1
# Test Case 72 FAIL: C[2][2] mismatch! Actual x, Expected 1ac10706c
# Test Case 72 FAIL: C[2][3] mismatch! Actual x, Expected 19a8a73fb
# Test Case 72 FAIL: C[3][0] mismatch! Actual x, Expected 10670d7f2
# Test Case 72 FAIL: C[3][1] mismatch! Actual x, Expected 12d3c62f8
# Test Case 72 FAIL: C[3][2] mismatch! Actual x, Expected 138d40da6
# Test Case 72 FAIL: C[3][3] mismatch! Actual x, Expected 19e1d42be
# Test Case 72 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 73 of 100
# ===================================================
# Reading test case 73:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_73/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_73/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_73/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            59876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4a56
#   Loading A[0][1] (Bank 1, Addr 0) with 51da
#   Loading A[0][2] (Bank 2, Addr 0) with b01b
#   Loading A[0][3] (Bank 3, Addr 0) with 41f0
#   Loading A[1][0] (Bank 0, Addr 1) with 24eb
#   Loading A[1][1] (Bank 1, Addr 1) with c4c0
#   Loading A[1][2] (Bank 2, Addr 1) with 64ef
#   Loading A[1][3] (Bank 3, Addr 1) with cef6
#   Loading A[2][0] (Bank 0, Addr 2) with 64b7
#   Loading A[2][1] (Bank 1, Addr 2) with 88e4
#   Loading A[2][2] (Bank 2, Addr 2) with 9e03
#   Loading A[2][3] (Bank 3, Addr 2) with c5fb
#   Loading A[3][0] (Bank 0, Addr 3) with e785
#   Loading A[3][1] (Bank 1, Addr 3) with 78f0
#   Loading A[3][2] (Bank 2, Addr 3) with 7b1a
#   Loading A[3][3] (Bank 3, Addr 3) with 8f69
#   Loading B[0][0] (Bank 0, Addr 0) with cead
#   Loading B[0][1] (Bank 1, Addr 0) with 814a
#   Loading B[0][2] (Bank 2, Addr 0) with c8e9
#   Loading B[0][3] (Bank 3, Addr 0) with acd6
#   Loading B[1][0] (Bank 0, Addr 1) with 2b5d
#   Loading B[1][1] (Bank 1, Addr 1) with fafa
#   Loading B[1][2] (Bank 2, Addr 1) with 0bbb
#   Loading B[1][3] (Bank 3, Addr 1) with 75ac
#   Loading B[2][0] (Bank 0, Addr 2) with 2143
#   Loading B[2][1] (Bank 1, Addr 2) with 764e
#   Loading B[2][2] (Bank 2, Addr 2) with 3a71
#   Loading B[2][3] (Bank 3, Addr 2) with dd55
#   Loading B[3][0] (Bank 0, Addr 3) with 2840
#   Loading B[3][1] (Bank 1, Addr 3) with 635d
#   Loading B[3][2] (Bank 2, Addr 3) with 8fb5
#   Loading B[3][3] (Bank 3, Addr 3) with aac1
# Matrix loading complete.
# @            60215000 Simulating controller signals to execute multiplication...
# @60235000: Starting input feeding sequence...
# @60235000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @60246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            60525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 73...
# Test Case 73 FAIL: C[0][0] mismatch! Actual 1, Expected 073c0eea2
# Test Case 73 FAIL: C[0][1] mismatch! Actual x, Expected 0d223f26d
# Test Case 73 FAIL: C[0][2] mismatch! Actual x, Expected 0d4fccfbf
# Test Case 73 FAIL: C[0][3] mismatch! Actual x, Expected 134a869d0
# Test Case 73 FAIL: C[1][0] mismatch! Actual x, Expected 0883569be
# Test Case 73 FAIL: C[1][1] mismatch! Actual x, Expected 1586db32c
# Test Case 73 FAIL: C[1][2] mismatch! Actual x, Expected 0ac646dfe
# Test Case 73 FAIL: C[1][3] mismatch! Actual x, Expected 158b7a9e0
# Test Case 73 FAIL: C[2][0] mismatch! Actual x, Expected 0c728205b
# Test Case 73 FAIL: C[2][1] mismatch! Actual x, Expected 134b1c790
# Test Case 73 FAIL: C[2][2] mismatch! Actual x, Expected 0f8025cdd
# Test Case 73 FAIL: C[2][3] mismatch! Actual x, Expected 1800386bf
# Test Case 73 FAIL: C[3][0] mismatch! Actual x, Expected 0888f9e7f
# Test Case 73 FAIL: C[3][1] mismatch! Actual x, Expected 17f5b103b
# Test Case 73 FAIL: C[3][2] mismatch! Actual x, Expected 0baee912a
# Test Case 73 FAIL: C[3][3] mismatch! Actual x, Expected 196791d68
# Test Case 73 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 74 of 100
# ===================================================
# Reading test case 74:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_74/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_74/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_74/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            60696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 52aa
#   Loading A[0][1] (Bank 1, Addr 0) with 8f44
#   Loading A[0][2] (Bank 2, Addr 0) with f80f
#   Loading A[0][3] (Bank 3, Addr 0) with 95cd
#   Loading A[1][0] (Bank 0, Addr 1) with a624
#   Loading A[1][1] (Bank 1, Addr 1) with be12
#   Loading A[1][2] (Bank 2, Addr 1) with 51f9
#   Loading A[1][3] (Bank 3, Addr 1) with 0412
#   Loading A[2][0] (Bank 0, Addr 2) with 393e
#   Loading A[2][1] (Bank 1, Addr 2) with c7ff
#   Loading A[2][2] (Bank 2, Addr 2) with ac3b
#   Loading A[2][3] (Bank 3, Addr 2) with 243d
#   Loading A[3][0] (Bank 0, Addr 3) with d4b2
#   Loading A[3][1] (Bank 1, Addr 3) with 57ba
#   Loading A[3][2] (Bank 2, Addr 3) with 1fad
#   Loading A[3][3] (Bank 3, Addr 3) with 8395
#   Loading B[0][0] (Bank 0, Addr 0) with c21b
#   Loading B[0][1] (Bank 1, Addr 0) with 6e5f
#   Loading B[0][2] (Bank 2, Addr 0) with 471e
#   Loading B[0][3] (Bank 3, Addr 0) with 06d5
#   Loading B[1][0] (Bank 0, Addr 1) with 94d4
#   Loading B[1][1] (Bank 1, Addr 1) with d2ad
#   Loading B[1][2] (Bank 2, Addr 1) with b4f4
#   Loading B[1][3] (Bank 3, Addr 1) with cbfb
#   Loading B[2][0] (Bank 0, Addr 2) with 92e6
#   Loading B[2][1] (Bank 1, Addr 2) with 5b7b
#   Loading B[2][2] (Bank 2, Addr 2) with 3004
#   Loading B[2][3] (Bank 3, Addr 2) with efe3
#   Loading B[3][0] (Bank 0, Addr 3) with 4481
#   Loading B[3][1] (Bank 1, Addr 3) with 687d
#   Loading B[3][2] (Bank 2, Addr 3) with 0754
#   Loading B[3][3] (Bank 3, Addr 3) with 12b6
# Matrix loading complete.
# @            61035000 Simulating controller signals to execute multiplication...
# @61055000: Starting input feeding sequence...
# @61055000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @61066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            61345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 74...
# Test Case 74 FAIL: C[0][0] mismatch! Actual 1, Expected 0f9073124
# Test Case 74 FAIL: C[0][1] mismatch! Actual x, Expected 117a23d1e
# Test Case 74 FAIL: C[0][2] mismatch! Actual x, Expected 09d39ad9c
# Test Case 74 FAIL: C[0][3] mismatch! Actual x, Expected 0cbc59344
# Test Case 74 FAIL: C[1][0] mismatch! Actual x, Expected 1655d2ce8
# Test Case 74 FAIL: C[1][1] mismatch! Actual x, Expected 14575babd
# Test Case 74 FAIL: C[1][2] mismatch! Actual x, Expected 0d62c4624
# Test Case 74 FAIL: C[1][3] mismatch! Actual x, Expected 15d174793
# Test Case 74 FAIL: C[2][0] mismatch! Actual x, Expected 1570baaf8
# Test Case 74 FAIL: C[2][1] mismatch! Actual x, Expected 0f8e19fa8
# Test Case 74 FAIL: C[2][2] mismatch! Actual x, Expected 0a01050c6
# Test Case 74 FAIL: C[2][3] mismatch! Actual x, Expected 0eba40ced
# Test Case 74 FAIL: C[3][0] mismatch! Actual x, Expected 0abf4286a
# Test Case 74 FAIL: C[3][1] mismatch! Actual x, Expected 08697114d
# Test Case 74 FAIL: C[3][2] mismatch! Actual x, Expected 0370e3306
# Test Case 74 FAIL: C[3][3] mismatch! Actual x, Expected 032d0d03c
# Test Case 74 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 75 of 100
# ===================================================
# Reading test case 75:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_75/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_75/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_75/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            61516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b0f9
#   Loading A[0][1] (Bank 1, Addr 0) with 4ba8
#   Loading A[0][2] (Bank 2, Addr 0) with 949d
#   Loading A[0][3] (Bank 3, Addr 0) with de90
#   Loading A[1][0] (Bank 0, Addr 1) with 097c
#   Loading A[1][1] (Bank 1, Addr 1) with b04e
#   Loading A[1][2] (Bank 2, Addr 1) with e73a
#   Loading A[1][3] (Bank 3, Addr 1) with fd4c
#   Loading A[2][0] (Bank 0, Addr 2) with 7251
#   Loading A[2][1] (Bank 1, Addr 2) with a485
#   Loading A[2][2] (Bank 2, Addr 2) with 5871
#   Loading A[2][3] (Bank 3, Addr 2) with cfea
#   Loading A[3][0] (Bank 0, Addr 3) with 9ec6
#   Loading A[3][1] (Bank 1, Addr 3) with d3f2
#   Loading A[3][2] (Bank 2, Addr 3) with 09b2
#   Loading A[3][3] (Bank 3, Addr 3) with d71e
#   Loading B[0][0] (Bank 0, Addr 0) with 6c09
#   Loading B[0][1] (Bank 1, Addr 0) with a4aa
#   Loading B[0][2] (Bank 2, Addr 0) with 27e9
#   Loading B[0][3] (Bank 3, Addr 0) with 9dca
#   Loading B[1][0] (Bank 0, Addr 1) with f52d
#   Loading B[1][1] (Bank 1, Addr 1) with cd7a
#   Loading B[1][2] (Bank 2, Addr 1) with 81fd
#   Loading B[1][3] (Bank 3, Addr 1) with 4aea
#   Loading B[2][0] (Bank 0, Addr 2) with a094
#   Loading B[2][1] (Bank 1, Addr 2) with 6e21
#   Loading B[2][2] (Bank 2, Addr 2) with 7546
#   Loading B[2][3] (Bank 3, Addr 2) with da43
#   Loading B[3][0] (Bank 0, Addr 3) with 5f2a
#   Loading B[3][1] (Bank 1, Addr 3) with 9d77
#   Loading B[3][2] (Bank 2, Addr 3) with a998
#   Loading B[3][3] (Bank 3, Addr 3) with 494c
# Matrix loading complete.
# @            61855000 Simulating controller signals to execute multiplication...
# @61875000: Starting input feeding sequence...
# @61875000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @61886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            62165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 75...
# Test Case 75 FAIL: C[0][0] mismatch! Actual 1, Expected 0d67ed8dd
# Test Case 75 FAIL: C[0][1] mismatch! Actual x, Expected 10c48a0ed
# Test Case 75 FAIL: C[0][2] mismatch! Actual x, Expected 0bdf51fe3
# Test Case 75 FAIL: C[0][3] mismatch! Actual x, Expected 0fec75acd
# Test Case 75 FAIL: C[1][0] mismatch! Actual x, Expected 17ec2fd36
# Test Case 75 FAIL: C[1][1] mismatch! Actual x, Expected 18750a35f
# Test Case 75 FAIL: C[1][2] mismatch! Actual x, Expected 13d175e0c
# Test Case 75 FAIL: C[1][3] mismatch! Actual x, Expected 12b2cac83
# Test Case 75 FAIL: C[2][0] mismatch! Actual x, Expected 1573f033f
# Test Case 75 FAIL: C[2][1] mismatch! Actual x, Expected 145318835
# Test Case 75 FAIL: C[2][2] mismatch! Actual x, Expected 0bb8403cd
# Test Case 75 FAIL: C[2][3] mismatch! Actual x, Expected 0ed71ae51
# Test Case 75 FAIL: C[3][0] mismatch! Actual x, Expected 222e4b5a0
# Test Case 75 FAIL: C[3][1] mismatch! Actual x, Expected 238395bf4
# Test Case 75 FAIL: C[3][2] mismatch! Actual x, Expected 1911174f8
# Test Case 75 FAIL: C[3][3] mismatch! Actual x, Expected 1c228863e
# Test Case 75 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 76 of 100
# ===================================================
# Reading test case 76:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_76/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_76/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_76/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            62336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9293
#   Loading A[0][1] (Bank 1, Addr 0) with 3fa0
#   Loading A[0][2] (Bank 2, Addr 0) with bb53
#   Loading A[0][3] (Bank 3, Addr 0) with 9497
#   Loading A[1][0] (Bank 0, Addr 1) with 88ab
#   Loading A[1][1] (Bank 1, Addr 1) with 428e
#   Loading A[1][2] (Bank 2, Addr 1) with 974a
#   Loading A[1][3] (Bank 3, Addr 1) with d787
#   Loading A[2][0] (Bank 0, Addr 2) with 7805
#   Loading A[2][1] (Bank 1, Addr 2) with 02b5
#   Loading A[2][2] (Bank 2, Addr 2) with a845
#   Loading A[2][3] (Bank 3, Addr 2) with 6ea9
#   Loading A[3][0] (Bank 0, Addr 3) with abc7
#   Loading A[3][1] (Bank 1, Addr 3) with 821b
#   Loading A[3][2] (Bank 2, Addr 3) with 40e6
#   Loading A[3][3] (Bank 3, Addr 3) with f8d6
#   Loading B[0][0] (Bank 0, Addr 0) with 1696
#   Loading B[0][1] (Bank 1, Addr 0) with fe83
#   Loading B[0][2] (Bank 2, Addr 0) with 0195
#   Loading B[0][3] (Bank 3, Addr 0) with 5024
#   Loading B[1][0] (Bank 0, Addr 1) with 9200
#   Loading B[1][1] (Bank 1, Addr 1) with 09ca
#   Loading B[1][2] (Bank 2, Addr 1) with 63b2
#   Loading B[1][3] (Bank 3, Addr 1) with b7c4
#   Loading B[2][0] (Bank 0, Addr 2) with 9d5c
#   Loading B[2][1] (Bank 1, Addr 2) with 4aec
#   Loading B[2][2] (Bank 2, Addr 2) with 5c36
#   Loading B[2][3] (Bank 3, Addr 2) with 29e9
#   Loading B[3][0] (Bank 0, Addr 3) with 2a7e
#   Loading B[3][1] (Bank 1, Addr 3) with d2dc
#   Loading B[3][2] (Bank 2, Addr 3) with b8cb
#   Loading B[3][3] (Bank 3, Addr 3) with eb50
# Matrix loading complete.
# @            62675000 Simulating controller signals to execute multiplication...
# @62695000: Starting input feeding sequence...
# @62695000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @62706000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            62985000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 76...
# Test Case 76 FAIL: C[0][0] mismatch! Actual 0, Expected 0c1296ee0
# Test Case 76 FAIL: C[0][1] mismatch! Actual x, Expected 1478fa8c7
# Test Case 76 FAIL: C[0][2] mismatch! Actual x, Expected 0dd5b6650
# Test Case 76 FAIL: C[0][3] mismatch! Actual x, Expected 14188d155
# Test Case 76 FAIL: C[1][0] mismatch! Actual x, Expected 042d47516
# Test Case 76 FAIL: C[1][1] mismatch! Actual x, Expected 0adc196fc
# Test Case 76 FAIL: C[1][2] mismatch! Actual x, Expected 079340a73
# Test Case 76 FAIL: C[1][3] mismatch! Actual x, Expected 0bbba4e65
# Test Case 76 FAIL: C[2][0] mismatch! Actual x, Expected 0d9038fa2
# Test Case 76 FAIL: C[2][1] mismatch! Actual x, Expected 126b8b321
# Test Case 76 FAIL: C[2][2] mismatch! Actual x, Expected 0a7883ab3
# Test Case 76 FAIL: C[2][3] mismatch! Actual x, Expected 0fe71a001
# Test Case 76 FAIL: C[3][0] mismatch! Actual x, Expected 0f55a078a
# Test Case 76 FAIL: C[3][1] mismatch! Actual x, Expected 1894fec7f
# Test Case 76 FAIL: C[3][2] mismatch! Actual x, Expected 130555919
# Test Case 76 FAIL: C[3][3] mismatch! Actual x, Expected 1c0129749
# Test Case 76 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 77 of 100
# ===================================================
# Reading test case 77:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_77/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_77/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_77/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            63156000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4829
#   Loading A[0][1] (Bank 1, Addr 0) with dfe2
#   Loading A[0][2] (Bank 2, Addr 0) with 150b
#   Loading A[0][3] (Bank 3, Addr 0) with 71fb
#   Loading A[1][0] (Bank 0, Addr 1) with f09a
#   Loading A[1][1] (Bank 1, Addr 1) with 811c
#   Loading A[1][2] (Bank 2, Addr 1) with 092a
#   Loading A[1][3] (Bank 3, Addr 1) with 7c38
#   Loading A[2][0] (Bank 0, Addr 2) with 05f5
#   Loading A[2][1] (Bank 1, Addr 2) with 649a
#   Loading A[2][2] (Bank 2, Addr 2) with e9ff
#   Loading A[2][3] (Bank 3, Addr 2) with ac4c
#   Loading A[3][0] (Bank 0, Addr 3) with fefb
#   Loading A[3][1] (Bank 1, Addr 3) with 527f
#   Loading A[3][2] (Bank 2, Addr 3) with 0ee1
#   Loading A[3][3] (Bank 3, Addr 3) with ec51
#   Loading B[0][0] (Bank 0, Addr 0) with b9fb
#   Loading B[0][1] (Bank 1, Addr 0) with 7cb1
#   Loading B[0][2] (Bank 2, Addr 0) with b42f
#   Loading B[0][3] (Bank 3, Addr 0) with dd0d
#   Loading B[1][0] (Bank 0, Addr 1) with c9fa
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb4
#   Loading B[1][2] (Bank 2, Addr 1) with 9f35
#   Loading B[1][3] (Bank 3, Addr 1) with 5094
#   Loading B[2][0] (Bank 0, Addr 2) with efb4
#   Loading B[2][1] (Bank 1, Addr 2) with 4b82
#   Loading B[2][2] (Bank 2, Addr 2) with df03
#   Loading B[2][3] (Bank 3, Addr 2) with eac2
#   Loading B[3][0] (Bank 0, Addr 3) with 29bf
#   Loading B[3][1] (Bank 1, Addr 3) with bd3f
#   Loading B[3][2] (Bank 2, Addr 3) with 6174
#   Loading B[3][3] (Bank 3, Addr 3) with 546a
# Matrix loading complete.
# @            63495000 Simulating controller signals to execute multiplication...
# @63515000: Starting input feeding sequence...
# @63515000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @63526000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            63805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 77...
# Test Case 77 FAIL: C[0][0] mismatch! Actual 0, Expected 121689d20
# Test Case 77 FAIL: C[0][1] mismatch! Actual x, Expected 164b266d0
# Test Case 77 FAIL: C[0][2] mismatch! Actual x, Expected 12eacab04
# Test Case 77 FAIL: C[0][3] mismatch! Actual x, Expected 0e394adb5
# Test Case 77 FAIL: C[1][0] mismatch! Actual x, Expected 174294bf7
# Test Case 77 FAIL: C[1][1] mismatch! Actual x, Expected 10e298367
# Test Case 77 FAIL: C[1][2] mismatch! Actual x, Expected 164e9f5a4
# Test Case 77 FAIL: C[1][3] mismatch! Actual x, Expected 16169b1f4
# Test Case 77 FAIL: C[2][0] mismatch! Actual x, Expected 0f40b3cf8
# Test Case 77 FAIL: C[2][1] mismatch! Actual x, Expected 05f446f00
# Test Case 77 FAIL: C[2][2] mismatch! Actual x, Expected 0e60472a8
# Test Case 77 FAIL: C[2][3] mismatch! Actual x, Expected 0f08a633f
# Test Case 77 FAIL: C[3][0] mismatch! Actual x, Expected 17caccda8
# Test Case 77 FAIL: C[3][1] mismatch! Actual x, Expected 15cd1d972
# Test Case 77 FAIL: C[3][2] mismatch! Actual x, Expected 18d87e745
# Test Case 77 FAIL: C[3][3] mismatch! Actual x, Expected 175714041
# Test Case 77 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 78 of 100
# ===================================================
# Reading test case 78:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_78/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_78/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_78/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            63976000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 65ed
#   Loading A[0][1] (Bank 1, Addr 0) with 9117
#   Loading A[0][2] (Bank 2, Addr 0) with f77c
#   Loading A[0][3] (Bank 3, Addr 0) with d1e8
#   Loading A[1][0] (Bank 0, Addr 1) with bb83
#   Loading A[1][1] (Bank 1, Addr 1) with 8df2
#   Loading A[1][2] (Bank 2, Addr 1) with 9dc2
#   Loading A[1][3] (Bank 3, Addr 1) with bc9e
#   Loading A[2][0] (Bank 0, Addr 2) with fcb8
#   Loading A[2][1] (Bank 1, Addr 2) with 11da
#   Loading A[2][2] (Bank 2, Addr 2) with e3a1
#   Loading A[2][3] (Bank 3, Addr 2) with 1c85
#   Loading A[3][0] (Bank 0, Addr 3) with 39bf
#   Loading A[3][1] (Bank 1, Addr 3) with 61e3
#   Loading A[3][2] (Bank 2, Addr 3) with 9378
#   Loading A[3][3] (Bank 3, Addr 3) with 9f66
#   Loading B[0][0] (Bank 0, Addr 0) with aa47
#   Loading B[0][1] (Bank 1, Addr 0) with 5134
#   Loading B[0][2] (Bank 2, Addr 0) with efa0
#   Loading B[0][3] (Bank 3, Addr 0) with de53
#   Loading B[1][0] (Bank 0, Addr 1) with 23ee
#   Loading B[1][1] (Bank 1, Addr 1) with af04
#   Loading B[1][2] (Bank 2, Addr 1) with 2783
#   Loading B[1][3] (Bank 3, Addr 1) with 3f2f
#   Loading B[2][0] (Bank 0, Addr 2) with d7be
#   Loading B[2][1] (Bank 1, Addr 2) with abf7
#   Loading B[2][2] (Bank 2, Addr 2) with 890b
#   Loading B[2][3] (Bank 3, Addr 2) with 87d2
#   Loading B[3][0] (Bank 0, Addr 3) with 6314
#   Loading B[3][1] (Bank 1, Addr 3) with 21af
#   Loading B[3][2] (Bank 2, Addr 3) with 8c03
#   Loading B[3][3] (Bank 3, Addr 3) with bd62
# Matrix loading complete.
# @            64315000 Simulating controller signals to execute multiplication...
# @64335000: Starting input feeding sequence...
# @64335000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @64346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            64625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 78...
# Test Case 78 FAIL: C[0][0] mismatch! Actual 1, Expected 149705c01
# Test Case 78 FAIL: C[0][1] mismatch! Actual x, Expected 151e20249
# Test Case 78 FAIL: C[0][2] mismatch! Actual x, Expected 12337554e
# Test Case 78 FAIL: C[0][3] mismatch! Actual x, Expected 13798b0f2
# Test Case 78 FAIL: C[1][0] mismatch! Actual x, Expected 0a95b54e5
# Test Case 78 FAIL: C[1][1] mismatch! Actual x, Expected 0a7ef69f7
# Test Case 78 FAIL: C[1][2] mismatch! Actual x, Expected 0dccf603d
# Test Case 78 FAIL: C[1][3] mismatch! Actual x, Expected 0f2ec449d
# Test Case 78 FAIL: C[2][0] mismatch! Actual x, Expected 1b3a9419e
# Test Case 78 FAIL: C[2][1] mismatch! Actual x, Expected 166aa0897
# Test Case 78 FAIL: C[2][2] mismatch! Actual x, Expected 1ca830519
# Test Case 78 FAIL: C[2][3] mismatch! Actual x, Expected 1e3ba26d4
# Test Case 78 FAIL: C[3][0] mismatch! Actual x, Expected 0fbd0ffea
# Test Case 78 FAIL: C[3][1] mismatch! Actual x, Expected 0eba977a5
# Test Case 78 FAIL: C[3][2] mismatch! Actual x, Expected 148096cc3
# Test Case 78 FAIL: C[3][3] mismatch! Actual x, Expected 169e59c60
# Test Case 78 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 79 of 100
# ===================================================
# Reading test case 79:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_79/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_79/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_79/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            64796000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6ce1
#   Loading A[0][1] (Bank 1, Addr 0) with acd9
#   Loading A[0][2] (Bank 2, Addr 0) with 816b
#   Loading A[0][3] (Bank 3, Addr 0) with 4a96
#   Loading A[1][0] (Bank 0, Addr 1) with 510a
#   Loading A[1][1] (Bank 1, Addr 1) with 5300
#   Loading A[1][2] (Bank 2, Addr 1) with 7584
#   Loading A[1][3] (Bank 3, Addr 1) with d061
#   Loading A[2][0] (Bank 0, Addr 2) with 1a3d
#   Loading A[2][1] (Bank 1, Addr 2) with 828b
#   Loading A[2][2] (Bank 2, Addr 2) with b31f
#   Loading A[2][3] (Bank 3, Addr 2) with 404b
#   Loading A[3][0] (Bank 0, Addr 3) with 7013
#   Loading A[3][1] (Bank 1, Addr 3) with 01b8
#   Loading A[3][2] (Bank 2, Addr 3) with af8b
#   Loading A[3][3] (Bank 3, Addr 3) with 01f8
#   Loading B[0][0] (Bank 0, Addr 0) with 027d
#   Loading B[0][1] (Bank 1, Addr 0) with 1231
#   Loading B[0][2] (Bank 2, Addr 0) with f5fd
#   Loading B[0][3] (Bank 3, Addr 0) with 1360
#   Loading B[1][0] (Bank 0, Addr 1) with ef2e
#   Loading B[1][1] (Bank 1, Addr 1) with 9316
#   Loading B[1][2] (Bank 2, Addr 1) with 2d89
#   Loading B[1][3] (Bank 3, Addr 1) with 1ff9
#   Loading B[2][0] (Bank 0, Addr 2) with 1a12
#   Loading B[2][1] (Bank 1, Addr 2) with f72c
#   Loading B[2][2] (Bank 2, Addr 2) with c150
#   Loading B[2][3] (Bank 3, Addr 2) with 981c
#   Loading B[3][0] (Bank 0, Addr 3) with ecc7
#   Loading B[3][1] (Bank 1, Addr 3) with f276
#   Loading B[3][2] (Bank 2, Addr 3) with a67f
#   Loading B[3][3] (Bank 3, Addr 3) with 377c
# Matrix loading complete.
# @            65135000 Simulating controller signals to execute multiplication...
# @65155000: Starting input feeding sequence...
# @65155000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @65166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            65445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 79...
# Test Case 79 FAIL: C[0][0] mismatch! Actual 1, Expected 0b71a7eb8
# Test Case 79 FAIL: C[0][1] mismatch! Actual x, Expected 0b9c75a2b
# Test Case 79 FAIL: C[0][2] mismatch! Actual x, Expected 0d3bd2b34
# Test Case 79 FAIL: C[0][3] mismatch! Actual x, Expected 03a3e04fa
# Test Case 79 FAIL: C[1][0] mismatch! Actual x, Expected 05e1c43c3
# Test Case 79 FAIL: C[1][1] mismatch! Actual x, Expected 0bba3c13d
# Test Case 79 FAIL: C[1][2] mismatch! Actual x, Expected 1188bab2d
# Test Case 79 FAIL: C[1][3] mismatch! Actual x, Expected 06562d3b4
# Test Case 79 FAIL: C[2][0] mismatch! Actual x, Expected 123a7b832
# Test Case 79 FAIL: C[2][1] mismatch! Actual x, Expected 19feb3339
# Test Case 79 FAIL: C[2][2] mismatch! Actual x, Expected 18aaff608
# Test Case 79 FAIL: C[2][3] mismatch! Actual x, Expected 0a8f2a63c
# Test Case 79 FAIL: C[3][0] mismatch! Actual x, Expected 0cbc7e2ba
# Test Case 79 FAIL: C[3][1] mismatch! Actual x, Expected 0bcf73040
# Test Case 79 FAIL: C[3][2] mismatch! Actual x, Expected 09e90419f
# Test Case 79 FAIL: C[3][3] mismatch! Actual x, Expected 0464c53ed
# Test Case 79 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 80 of 100
# ===================================================
# Reading test case 80:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_80/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_80/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_80/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            65616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 34e7
#   Loading A[0][1] (Bank 1, Addr 0) with 359c
#   Loading A[0][2] (Bank 2, Addr 0) with c0b6
#   Loading A[0][3] (Bank 3, Addr 0) with 2d1d
#   Loading A[1][0] (Bank 0, Addr 1) with 9d1c
#   Loading A[1][1] (Bank 1, Addr 1) with fc7b
#   Loading A[1][2] (Bank 2, Addr 1) with c31a
#   Loading A[1][3] (Bank 3, Addr 1) with 3400
#   Loading A[2][0] (Bank 0, Addr 2) with b077
#   Loading A[2][1] (Bank 1, Addr 2) with 396e
#   Loading A[2][2] (Bank 2, Addr 2) with a775
#   Loading A[2][3] (Bank 3, Addr 2) with 43e8
#   Loading A[3][0] (Bank 0, Addr 3) with c6ba
#   Loading A[3][1] (Bank 1, Addr 3) with b422
#   Loading A[3][2] (Bank 2, Addr 3) with 8cf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7652
#   Loading B[0][0] (Bank 0, Addr 0) with af0d
#   Loading B[0][1] (Bank 1, Addr 0) with ff27
#   Loading B[0][2] (Bank 2, Addr 0) with 7d41
#   Loading B[0][3] (Bank 3, Addr 0) with c94f
#   Loading B[1][0] (Bank 0, Addr 1) with 351f
#   Loading B[1][1] (Bank 1, Addr 1) with b8b4
#   Loading B[1][2] (Bank 2, Addr 1) with c9df
#   Loading B[1][3] (Bank 3, Addr 1) with d43a
#   Loading B[2][0] (Bank 0, Addr 2) with bd86
#   Loading B[2][1] (Bank 1, Addr 2) with ec9c
#   Loading B[2][2] (Bank 2, Addr 2) with 3c08
#   Loading B[2][3] (Bank 3, Addr 2) with 0347
#   Loading B[3][0] (Bank 0, Addr 3) with edac
#   Loading B[3][1] (Bank 1, Addr 3) with ea78
#   Loading B[3][2] (Bank 2, Addr 3) with 3e74
#   Loading B[3][3] (Bank 3, Addr 3) with b8a5
# Matrix loading complete.
# @            65955000 Simulating controller signals to execute multiplication...
# @65975000: Starting input feeding sequence...
# @65975000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @65986000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            66265000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 80...
# Test Case 80 FAIL: C[0][0] mismatch! Actual 0, Expected 17fea5b61
# Test Case 80 FAIL: C[0][1] mismatch! Actual x, Expected 1ff312795
# Test Case 80 FAIL: C[0][2] mismatch! Actual x, Expected 0efa2910b
# Test Case 80 FAIL: C[0][3] mismatch! Actual x, Expected 13d709684
# Test Case 80 FAIL: C[1][0] mismatch! Actual x, Expected 12acd2d3d
# Test Case 80 FAIL: C[1][1] mismatch! Actual x, Expected 1c5a86838
# Test Case 80 FAIL: C[1][2] mismatch! Actual x, Expected 11abcb999
# Test Case 80 FAIL: C[1][3] mismatch! Actual x, Expected 17e1fd86e
# Test Case 80 FAIL: C[2][0] mismatch! Actual x, Expected 1ab19b0ea
# Test Case 80 FAIL: C[2][1] mismatch! Actual x, Expected 268b75a9e
# Test Case 80 FAIL: C[2][2] mismatch! Actual x, Expected 141cb44fc
# Test Case 80 FAIL: C[2][3] mismatch! Actual x, Expected 1a118950f
# Test Case 80 FAIL: C[3][0] mismatch! Actual x, Expected 0c9c2a601
# Test Case 80 FAIL: C[3][1] mismatch! Actual x, Expected 0fd9cfe3b
# Test Case 80 FAIL: C[3][2] mismatch! Actual x, Expected 06bdde1c5
# Test Case 80 FAIL: C[3][3] mismatch! Actual x, Expected 0a4cb3925
# Test Case 80 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 81 of 100
# ===================================================
# Reading test case 81:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_81/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_81/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_81/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            66436000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3719
#   Loading A[0][1] (Bank 1, Addr 0) with ef84
#   Loading A[0][2] (Bank 2, Addr 0) with 5848
#   Loading A[0][3] (Bank 3, Addr 0) with baf0
#   Loading A[1][0] (Bank 0, Addr 1) with 62aa
#   Loading A[1][1] (Bank 1, Addr 1) with 6393
#   Loading A[1][2] (Bank 2, Addr 1) with ca52
#   Loading A[1][3] (Bank 3, Addr 1) with b2e7
#   Loading A[2][0] (Bank 0, Addr 2) with 255c
#   Loading A[2][1] (Bank 1, Addr 2) with b97b
#   Loading A[2][2] (Bank 2, Addr 2) with f431
#   Loading A[2][3] (Bank 3, Addr 2) with a469
#   Loading A[3][0] (Bank 0, Addr 3) with cf5f
#   Loading A[3][1] (Bank 1, Addr 3) with 6520
#   Loading A[3][2] (Bank 2, Addr 3) with 1be9
#   Loading A[3][3] (Bank 3, Addr 3) with dc85
#   Loading B[0][0] (Bank 0, Addr 0) with e5f1
#   Loading B[0][1] (Bank 1, Addr 0) with 03fa
#   Loading B[0][2] (Bank 2, Addr 0) with 4925
#   Loading B[0][3] (Bank 3, Addr 0) with d546
#   Loading B[1][0] (Bank 0, Addr 1) with a4c5
#   Loading B[1][1] (Bank 1, Addr 1) with 2b09
#   Loading B[1][2] (Bank 2, Addr 1) with 6914
#   Loading B[1][3] (Bank 3, Addr 1) with e926
#   Loading B[2][0] (Bank 0, Addr 2) with 53bf
#   Loading B[2][1] (Bank 1, Addr 2) with 63df
#   Loading B[2][2] (Bank 2, Addr 2) with 1327
#   Loading B[2][3] (Bank 3, Addr 2) with b827
#   Loading B[3][0] (Bank 0, Addr 3) with 4a2a
#   Loading B[3][1] (Bank 1, Addr 3) with 777e
#   Loading B[3][2] (Bank 2, Addr 3) with ec2d
#   Loading B[3][3] (Bank 3, Addr 3) with d474
# Matrix loading complete.
# @            66775000 Simulating controller signals to execute multiplication...
# @66795000: Starting input feeding sequence...
# @66795000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @66806000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            67085000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 81...
# Test Case 81 FAIL: C[0][0] mismatch! Actual 1, Expected 0b94a3f95
# Test Case 81 FAIL: C[0][1] mismatch! Actual x, Expected 080cf784a
# Test Case 81 FAIL: C[0][2] mismatch! Actual x, Expected 0fa59139c
# Test Case 81 FAIL: C[0][3] mismatch! Actual x, Expected 14ebab122
# Test Case 81 FAIL: C[1][0] mismatch! Actual x, Expected 171327668
# Test Case 81 FAIL: C[1][1] mismatch! Actual x, Expected 08c056cf8
# Test Case 81 FAIL: C[1][2] mismatch! Actual x, Expected 0d879fded
# Test Case 81 FAIL: C[1][3] mismatch! Actual x, Expected 1fb92e127
# Test Case 81 FAIL: C[2][0] mismatch! Actual x, Expected 1297bbeab
# Test Case 81 FAIL: C[2][1] mismatch! Actual x, Expected 08faca68f
# Test Case 81 FAIL: C[2][2] mismatch! Actual x, Expected 09849453c
# Test Case 81 FAIL: C[2][3] mismatch! Actual x, Expected 1c8a0bae7
# Test Case 81 FAIL: C[3][0] mismatch! Actual x, Expected 190b9a8dc
# Test Case 81 FAIL: C[3][1] mismatch! Actual x, Expected 0c80ca46c
# Test Case 81 FAIL: C[3][2] mismatch! Actual x, Expected 15696641c
# Test Case 81 FAIL: C[3][3] mismatch! Actual x, Expected 26bf22f2d
# Test Case 81 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 82 of 100
# ===================================================
# Reading test case 82:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_82/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_82/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_82/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            67256000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 28f3
#   Loading A[0][1] (Bank 1, Addr 0) with f318
#   Loading A[0][2] (Bank 2, Addr 0) with 6ac6
#   Loading A[0][3] (Bank 3, Addr 0) with 0207
#   Loading A[1][0] (Bank 0, Addr 1) with 97be
#   Loading A[1][1] (Bank 1, Addr 1) with 3a60
#   Loading A[1][2] (Bank 2, Addr 1) with 2916
#   Loading A[1][3] (Bank 3, Addr 1) with f3df
#   Loading A[2][0] (Bank 0, Addr 2) with 2eb3
#   Loading A[2][1] (Bank 1, Addr 2) with cdb4
#   Loading A[2][2] (Bank 2, Addr 2) with 2e1f
#   Loading A[2][3] (Bank 3, Addr 2) with 90da
#   Loading A[3][0] (Bank 0, Addr 3) with 1acb
#   Loading A[3][1] (Bank 1, Addr 3) with 8bcf
#   Loading A[3][2] (Bank 2, Addr 3) with fed9
#   Loading A[3][3] (Bank 3, Addr 3) with b43e
#   Loading B[0][0] (Bank 0, Addr 0) with 0ac9
#   Loading B[0][1] (Bank 1, Addr 0) with 6725
#   Loading B[0][2] (Bank 2, Addr 0) with db09
#   Loading B[0][3] (Bank 3, Addr 0) with 92fb
#   Loading B[1][0] (Bank 0, Addr 1) with 908d
#   Loading B[1][1] (Bank 1, Addr 1) with f910
#   Loading B[1][2] (Bank 2, Addr 1) with 7228
#   Loading B[1][3] (Bank 3, Addr 1) with 4f5f
#   Loading B[2][0] (Bank 0, Addr 2) with 6386
#   Loading B[2][1] (Bank 1, Addr 2) with 402c
#   Loading B[2][2] (Bank 2, Addr 2) with 687f
#   Loading B[2][3] (Bank 3, Addr 2) with 7354
#   Loading B[3][0] (Bank 0, Addr 3) with 8c34
#   Loading B[3][1] (Bank 1, Addr 3) with f7ef
#   Loading B[3][2] (Bank 2, Addr 3) with 5e0e
#   Loading B[3][3] (Bank 3, Addr 3) with 8844
# Matrix loading complete.
# @            67595000 Simulating controller signals to execute multiplication...
# @67615000: Starting input feeding sequence...
# @67615000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @67626000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            67905000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 82...
# Test Case 82 FAIL: C[0][0] mismatch! Actual 1, Expected 0783c385f
# Test Case 82 FAIL: C[0][1] mismatch! Actual x, Expected 0c9c8a148
# Test Case 82 FAIL: C[0][2] mismatch! Actual x, Expected 0839b8722
# Test Case 82 FAIL: C[0][3] mismatch! Actual x, Expected 069db5f6b
# Test Case 82 FAIL: C[1][0] mismatch! Actual x, Expected 0c7bdd6fc
# Test Case 82 FAIL: C[1][1] mismatch! Actual x, Expected 155b46aa9
# Test Case 82 FAIL: C[1][2] mismatch! Actual x, Expected 1715ac676
# Test Case 82 FAIL: C[1][3] mismatch! Actual x, Expected 144c1c834
# Test Case 82 FAIL: C[2][0] mismatch! Actual x, Expected 0b93323e2
# Test Case 82 FAIL: C[2][1] mismatch! Actual x, Expected 1555f08e9
# Test Case 82 FAIL: C[2][2] mismatch! Actual x, Expected 0de2271a5
# Test Case 82 FAIL: C[2][3] mismatch! Actual x, Expected 0e678ae1c
# Test Case 82 FAIL: C[3][0] mismatch! Actual x, Expected 124d04406
# Test Case 82 FAIL: C[3][1] mismatch! Actual x, Expected 1c0f3be4d
# Test Case 82 FAIL: C[3][2] mismatch! Actual x, Expected 0ebd483a1
# Test Case 82 FAIL: C[3][3] mismatch! Actual x, Expected 0edf8919e
# Test Case 82 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 83 of 100
# ===================================================
# Reading test case 83:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_83/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_83/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_83/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            68076000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c68a
#   Loading A[0][1] (Bank 1, Addr 0) with a5c2
#   Loading A[0][2] (Bank 2, Addr 0) with e484
#   Loading A[0][3] (Bank 3, Addr 0) with 3a6f
#   Loading A[1][0] (Bank 0, Addr 1) with 85a7
#   Loading A[1][1] (Bank 1, Addr 1) with 6eaf
#   Loading A[1][2] (Bank 2, Addr 1) with 5133
#   Loading A[1][3] (Bank 3, Addr 1) with bce6
#   Loading A[2][0] (Bank 0, Addr 2) with 4bad
#   Loading A[2][1] (Bank 1, Addr 2) with 7fed
#   Loading A[2][2] (Bank 2, Addr 2) with 5361
#   Loading A[2][3] (Bank 3, Addr 2) with 7e06
#   Loading A[3][0] (Bank 0, Addr 3) with cb3f
#   Loading A[3][1] (Bank 1, Addr 3) with 5b17
#   Loading A[3][2] (Bank 2, Addr 3) with e5d9
#   Loading A[3][3] (Bank 3, Addr 3) with be98
#   Loading B[0][0] (Bank 0, Addr 0) with cc74
#   Loading B[0][1] (Bank 1, Addr 0) with 2902
#   Loading B[0][2] (Bank 2, Addr 0) with b23a
#   Loading B[0][3] (Bank 3, Addr 0) with 1781
#   Loading B[1][0] (Bank 0, Addr 1) with 5ae0
#   Loading B[1][1] (Bank 1, Addr 1) with b529
#   Loading B[1][2] (Bank 2, Addr 1) with 5247
#   Loading B[1][3] (Bank 3, Addr 1) with b9ee
#   Loading B[2][0] (Bank 0, Addr 2) with e42b
#   Loading B[2][1] (Bank 1, Addr 2) with d203
#   Loading B[2][2] (Bank 2, Addr 2) with f2e7
#   Loading B[2][3] (Bank 3, Addr 2) with eae7
#   Loading B[3][0] (Bank 0, Addr 3) with 77ec
#   Loading B[3][1] (Bank 1, Addr 3) with d252
#   Loading B[3][2] (Bank 2, Addr 3) with e097
#   Loading B[3][3] (Bank 3, Addr 3) with e58b
# Matrix loading complete.
# @            68415000 Simulating controller signals to execute multiplication...
# @68435000: Starting input feeding sequence...
# @68435000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @68446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            68725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 83...
# Test Case 83 FAIL: C[0][0] mismatch! Actual 1, Expected 170aa07cb
# Test Case 83 FAIL: C[0][1] mismatch! Actual x, Expected 16371b708
# Test Case 83 FAIL: C[0][2] mismatch! Actual x, Expected 1af4a53d9
# Test Case 83 FAIL: C[0][3] mismatch! Actual x, Expected 16efa831c
# Test Case 83 FAIL: C[1][0] mismatch! Actual x, Expected 1485c4e0b
# Test Case 83 FAIL: C[1][1] mismatch! Actual x, Expected 11ca8c7b0
# Test Case 83 FAIL: C[1][2] mismatch! Actual x, Expected 1604485e9
# Test Case 83 FAIL: C[1][3] mismatch! Actual x, Expected 126aa6bcc
# Test Case 83 FAIL: C[2][0] mismatch! Actual x, Expected 1894fdec7
# Test Case 83 FAIL: C[2][1] mismatch! Actual x, Expected 15f4d2ad8
# Test Case 83 FAIL: C[2][2] mismatch! Actual x, Expected 1d1f2ca93
# Test Case 83 FAIL: C[2][3] mismatch! Actual x, Expected 16a8e2b48
# Test Case 83 FAIL: C[3][0] mismatch! Actual x, Expected 13b53f2ae
# Test Case 83 FAIL: C[3][1] mismatch! Actual x, Expected 193013d76
# Test Case 83 FAIL: C[3][2] mismatch! Actual x, Expected 1842d4a02
# Test Case 83 FAIL: C[3][3] mismatch! Actual x, Expected 1ad17e6b5
# Test Case 83 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 84 of 100
# ===================================================
# Reading test case 84:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_84/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_84/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_84/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            68896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with aa29
#   Loading A[0][1] (Bank 1, Addr 0) with c8b9
#   Loading A[0][2] (Bank 2, Addr 0) with b967
#   Loading A[0][3] (Bank 3, Addr 0) with 4c19
#   Loading A[1][0] (Bank 0, Addr 1) with cafa
#   Loading A[1][1] (Bank 1, Addr 1) with d27a
#   Loading A[1][2] (Bank 2, Addr 1) with fc7d
#   Loading A[1][3] (Bank 3, Addr 1) with 096b
#   Loading A[2][0] (Bank 0, Addr 2) with feaa
#   Loading A[2][1] (Bank 1, Addr 2) with 5c62
#   Loading A[2][2] (Bank 2, Addr 2) with 407c
#   Loading A[2][3] (Bank 3, Addr 2) with 6e33
#   Loading A[3][0] (Bank 0, Addr 3) with 3522
#   Loading A[3][1] (Bank 1, Addr 3) with 26a3
#   Loading A[3][2] (Bank 2, Addr 3) with c6fc
#   Loading A[3][3] (Bank 3, Addr 3) with b956
#   Loading B[0][0] (Bank 0, Addr 0) with 0873
#   Loading B[0][1] (Bank 1, Addr 0) with 0ae0
#   Loading B[0][2] (Bank 2, Addr 0) with b802
#   Loading B[0][3] (Bank 3, Addr 0) with ab8f
#   Loading B[1][0] (Bank 0, Addr 1) with 573b
#   Loading B[1][1] (Bank 1, Addr 1) with 806c
#   Loading B[1][2] (Bank 2, Addr 1) with 5b97
#   Loading B[1][3] (Bank 3, Addr 1) with bae7
#   Loading B[2][0] (Bank 0, Addr 2) with 2f17
#   Loading B[2][1] (Bank 1, Addr 2) with caa5
#   Loading B[2][2] (Bank 2, Addr 2) with 231e
#   Loading B[2][3] (Bank 3, Addr 2) with 7e0f
#   Loading B[3][0] (Bank 0, Addr 3) with ffc0
#   Loading B[3][1] (Bank 1, Addr 3) with b888
#   Loading B[3][2] (Bank 2, Addr 3) with efab
#   Loading B[3][3] (Bank 3, Addr 3) with daf6
# Matrix loading complete.
# @            69235000 Simulating controller signals to execute multiplication...
# @69255000: Starting input feeding sequence...
# @69255000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @69266000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            69545000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 84...
# Test Case 84 FAIL: C[0][0] mismatch! Actual 0, Expected 0aeb444cf
# Test Case 84 FAIL: C[0][1] mismatch! Actual x, Expected 15cf010fa
# Test Case 84 FAIL: C[0][2] mismatch! Actual x, Expected 1179ab56a
# Test Case 84 FAIL: C[0][3] mismatch! Actual x, Expected 1b111d61f
# Test Case 84 FAIL: C[1][0] mismatch! Actual x, Expected 085ef8d47
# Test Case 84 FAIL: C[1][1] mismatch! Actual x, Expected 0d717351a
# Test Case 84 FAIL: C[1][2] mismatch! Actual x, Expected 10c6c42c5
# Test Case 84 FAIL: C[1][3] mismatch! Actual x, Expected 16eb7d6cd
# Test Case 84 FAIL: C[2][0] mismatch! Actual x, Expected 12ecdfd38
# Test Case 84 FAIL: C[2][1] mismatch! Actual x, Expected 1490382a8
# Test Case 84 FAIL: C[2][2] mismatch! Actual x, Expected 1a2bb8865
# Test Case 84 FAIL: C[2][3] mismatch! Actual x, Expected 1fe88a1c0
# Test Case 84 FAIL: C[3][0] mismatch! Actual x, Expected 0d3256df9
# Test Case 84 FAIL: C[3][1] mismatch! Actual x, Expected 0e4c89393
# Test Case 84 FAIL: C[3][2] mismatch! Actual x, Expected 0f6b220bb
# Test Case 84 FAIL: C[3][3] mismatch! Actual x, Expected 10ea85625
# Test Case 84 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 85 of 100
# ===================================================
# Reading test case 85:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_85/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_85/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_85/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            69716000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5a6b
#   Loading A[0][1] (Bank 1, Addr 0) with 630e
#   Loading A[0][2] (Bank 2, Addr 0) with dcd6
#   Loading A[0][3] (Bank 3, Addr 0) with 6b39
#   Loading A[1][0] (Bank 0, Addr 1) with 566c
#   Loading A[1][1] (Bank 1, Addr 1) with 8386
#   Loading A[1][2] (Bank 2, Addr 1) with 13b0
#   Loading A[1][3] (Bank 3, Addr 1) with 8d7a
#   Loading A[2][0] (Bank 0, Addr 2) with 7213
#   Loading A[2][1] (Bank 1, Addr 2) with b561
#   Loading A[2][2] (Bank 2, Addr 2) with 13ff
#   Loading A[2][3] (Bank 3, Addr 2) with 4a28
#   Loading A[3][0] (Bank 0, Addr 3) with a5f9
#   Loading A[3][1] (Bank 1, Addr 3) with 5bf3
#   Loading A[3][2] (Bank 2, Addr 3) with f6d8
#   Loading A[3][3] (Bank 3, Addr 3) with 3779
#   Loading B[0][0] (Bank 0, Addr 0) with 726b
#   Loading B[0][1] (Bank 1, Addr 0) with e6dc
#   Loading B[0][2] (Bank 2, Addr 0) with f9f2
#   Loading B[0][3] (Bank 3, Addr 0) with 3378
#   Loading B[1][0] (Bank 0, Addr 1) with cea3
#   Loading B[1][1] (Bank 1, Addr 1) with 9882
#   Loading B[1][2] (Bank 2, Addr 1) with d5e2
#   Loading B[1][3] (Bank 3, Addr 1) with 2d72
#   Loading B[2][0] (Bank 0, Addr 2) with 95ba
#   Loading B[2][1] (Bank 1, Addr 2) with 528f
#   Loading B[2][2] (Bank 2, Addr 2) with 6f29
#   Loading B[2][3] (Bank 3, Addr 2) with 2768
#   Loading B[3][0] (Bank 0, Addr 3) with 258a
#   Loading B[3][1] (Bank 1, Addr 3) with eb0c
#   Loading B[3][2] (Bank 2, Addr 3) with c6cc
#   Loading B[3][3] (Bank 3, Addr 3) with 4bec
# Matrix loading complete.
# @            70055000 Simulating controller signals to execute multiplication...
# @70075000: Starting input feeding sequence...
# @70075000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @70086000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            70365000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 85...
# Test Case 85 FAIL: C[0][0] mismatch! Actual 0, Expected 0c939c585
# Test Case 85 FAIL: C[0][1] mismatch! Actual x, Expected 142330215
# Test Case 85 FAIL: C[0][2] mismatch! Actual x, Expected 152e70df5
# Test Case 85 FAIL: C[0][3] mismatch! Actual x, Expected 0644d5c84
# Test Case 85 FAIL: C[1][0] mismatch! Actual x, Expected 10e0022a4
# Test Case 85 FAIL: C[1][1] mismatch! Actual x, Expected 13698d1a7
# Test Case 85 FAIL: C[1][2] mismatch! Actual x, Expected 164c22eb5
# Test Case 85 FAIL: C[1][3] mismatch! Actual x, Expected 06273c3a8
# Test Case 85 FAIL: C[2][0] mismatch! Actual x, Expected 0a27bfd38
# Test Case 85 FAIL: C[2][1] mismatch! Actual x, Expected 1bbf73ed9
# Test Case 85 FAIL: C[2][2] mismatch! Actual x, Expected 1b06e42a3
# Test Case 85 FAIL: C[2][3] mismatch! Actual x, Expected 07c2daa68
# Test Case 85 FAIL: C[3][0] mismatch! Actual x, Expected 0d5a000cb
# Test Case 85 FAIL: C[3][1] mismatch! Actual x, Expected 0ffd28bf4
# Test Case 85 FAIL: C[3][2] mismatch! Actual x, Expected 12a2a376a
# Test Case 85 FAIL: C[3][3] mismatch! Actual x, Expected 04a89ded8
# Test Case 85 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 86 of 100
# ===================================================
# Reading test case 86:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_86/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_86/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_86/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            70536000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a5cf
#   Loading A[0][1] (Bank 1, Addr 0) with e1e9
#   Loading A[0][2] (Bank 2, Addr 0) with b15b
#   Loading A[0][3] (Bank 3, Addr 0) with c802
#   Loading A[1][0] (Bank 0, Addr 1) with ec01
#   Loading A[1][1] (Bank 1, Addr 1) with bfe0
#   Loading A[1][2] (Bank 2, Addr 1) with b374
#   Loading A[1][3] (Bank 3, Addr 1) with 8cdc
#   Loading A[2][0] (Bank 0, Addr 2) with 962d
#   Loading A[2][1] (Bank 1, Addr 2) with 569a
#   Loading A[2][2] (Bank 2, Addr 2) with 33aa
#   Loading A[2][3] (Bank 3, Addr 2) with cef5
#   Loading A[3][0] (Bank 0, Addr 3) with 9848
#   Loading A[3][1] (Bank 1, Addr 3) with 5222
#   Loading A[3][2] (Bank 2, Addr 3) with f672
#   Loading A[3][3] (Bank 3, Addr 3) with 7188
#   Loading B[0][0] (Bank 0, Addr 0) with 3d4b
#   Loading B[0][1] (Bank 1, Addr 0) with 1caf
#   Loading B[0][2] (Bank 2, Addr 0) with e5f2
#   Loading B[0][3] (Bank 3, Addr 0) with f94c
#   Loading B[1][0] (Bank 0, Addr 1) with df43
#   Loading B[1][1] (Bank 1, Addr 1) with 589a
#   Loading B[1][2] (Bank 2, Addr 1) with 8259
#   Loading B[1][3] (Bank 3, Addr 1) with dabf
#   Loading B[2][0] (Bank 0, Addr 2) with 5454
#   Loading B[2][1] (Bank 1, Addr 2) with 8aa6
#   Loading B[2][2] (Bank 2, Addr 2) with 8181
#   Loading B[2][3] (Bank 3, Addr 2) with 4f7a
#   Loading B[3][0] (Bank 0, Addr 3) with 05c1
#   Loading B[3][1] (Bank 1, Addr 3) with dce5
#   Loading B[3][2] (Bank 2, Addr 3) with 886b
#   Loading B[3][3] (Bank 3, Addr 3) with 2171
# Matrix loading complete.
# @            70875000 Simulating controller signals to execute multiplication...
# @70895000: Starting input feeding sequence...
# @70895000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @70906000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            71185000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 86...
# Test Case 86 FAIL: C[0][0] mismatch! Actual 1, Expected 12a69caf4
# Test Case 86 FAIL: C[0][1] mismatch! Actual x, Expected 138fe08b1
# Test Case 86 FAIL: C[0][2] mismatch! Actual x, Expected 1aa37b6cc
# Test Case 86 FAIL: C[0][3] mismatch! Actual x, Expected 1ada4736d
# Test Case 86 FAIL: C[1][0] mismatch! Actual x, Expected 0fbcc940d
# Test Case 86 FAIL: C[1][1] mismatch! Actual x, Expected 0d17e334d
# Test Case 86 FAIL: C[1][2] mismatch! Actual x, Expected 1843111f2
# Test Case 86 FAIL: C[1][3] mismatch! Actual x, Expected 1a59008b2
# Test Case 86 FAIL: C[2][0] mismatch! Actual x, Expected 0dd8669bf
# Test Case 86 FAIL: C[2][1] mismatch! Actual x, Expected 1429c9533
# Test Case 86 FAIL: C[2][2] mismatch! Actual x, Expected 198239eaa
# Test Case 86 FAIL: C[2][3] mismatch! Actual x, Expected 1764864e6
# Test Case 86 FAIL: C[3][0] mismatch! Actual x, Expected 0f1752016
# Test Case 86 FAIL: C[3][1] mismatch! Actual x, Expected 11936013c
# Test Case 86 FAIL: C[3][2] mismatch! Actual x, Expected 1a090fead
# Test Case 86 FAIL: C[3][3] mismatch! Actual x, Expected 18a36a386
# Test Case 86 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 87 of 100
# ===================================================
# Reading test case 87:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_87/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_87/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_87/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            71356000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4a6a
#   Loading A[0][1] (Bank 1, Addr 0) with 0110
#   Loading A[0][2] (Bank 2, Addr 0) with 5759
#   Loading A[0][3] (Bank 3, Addr 0) with d91a
#   Loading A[1][0] (Bank 0, Addr 1) with d329
#   Loading A[1][1] (Bank 1, Addr 1) with 2472
#   Loading A[1][2] (Bank 2, Addr 1) with 6972
#   Loading A[1][3] (Bank 3, Addr 1) with 73c4
#   Loading A[2][0] (Bank 0, Addr 2) with 2036
#   Loading A[2][1] (Bank 1, Addr 2) with 1dff
#   Loading A[2][2] (Bank 2, Addr 2) with f324
#   Loading A[2][3] (Bank 3, Addr 2) with f042
#   Loading A[3][0] (Bank 0, Addr 3) with 3976
#   Loading A[3][1] (Bank 1, Addr 3) with d0e0
#   Loading A[3][2] (Bank 2, Addr 3) with 71ff
#   Loading A[3][3] (Bank 3, Addr 3) with 4b0d
#   Loading B[0][0] (Bank 0, Addr 0) with d24c
#   Loading B[0][1] (Bank 1, Addr 0) with d136
#   Loading B[0][2] (Bank 2, Addr 0) with 6f2a
#   Loading B[0][3] (Bank 3, Addr 0) with be52
#   Loading B[1][0] (Bank 0, Addr 1) with d556
#   Loading B[1][1] (Bank 1, Addr 1) with 903a
#   Loading B[1][2] (Bank 2, Addr 1) with 17eb
#   Loading B[1][3] (Bank 3, Addr 1) with 9ec3
#   Loading B[2][0] (Bank 0, Addr 2) with 8c68
#   Loading B[2][1] (Bank 1, Addr 2) with b392
#   Loading B[2][2] (Bank 2, Addr 2) with 5407
#   Loading B[2][3] (Bank 3, Addr 2) with ac92
#   Loading B[3][0] (Bank 0, Addr 3) with d008
#   Loading B[3][1] (Bank 1, Addr 3) with df6a
#   Loading B[3][2] (Bank 2, Addr 3) with 2da3
#   Loading B[3][3] (Bank 3, Addr 3) with ed72
# Matrix loading complete.
# @            71695000 Simulating controller signals to execute multiplication...
# @71715000: Starting input feeding sequence...
# @71715000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @71726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            72005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 87...
# Test Case 87 FAIL: C[0][0] mismatch! Actual 0, Expected 12d7561de
# Test Case 87 FAIL: C[0][1] mismatch! Actual x, Expected 0fc84d94e
# Test Case 87 FAIL: C[0][2] mismatch! Actual x, Expected 048db9ea3
# Test Case 87 FAIL: C[0][3] mismatch! Actual x, Expected 105492387
# Test Case 87 FAIL: C[1][0] mismatch! Actual x, Expected 0d96eb3a4
# Test Case 87 FAIL: C[1][1] mismatch! Actual x, Expected 0e0bab062
# Test Case 87 FAIL: C[1][2] mismatch! Actual x, Expected 032f2abdf
# Test Case 87 FAIL: C[1][3] mismatch! Actual x, Expected 0ed592924
# Test Case 87 FAIL: C[2][0] mismatch! Actual x, Expected 1819d6d50
# Test Case 87 FAIL: C[2][1] mismatch! Actual x, Expected 190d344b8
# Test Case 87 FAIL: C[2][2] mismatch! Actual x, Expected 093e8d399
# Test Case 87 FAIL: C[2][3] mismatch! Actual x, Expected 18ff7676e
# Test Case 87 FAIL: C[3][0] mismatch! Actual x, Expected 1d3935ac8
# Test Case 87 FAIL: C[3][1] mismatch! Actual x, Expected 1dcab11ea
# Test Case 87 FAIL: C[3][2] mismatch! Actual x, Expected 0c5541145
# Test Case 87 FAIL: C[3][3] mismatch! Actual x, Expected 1d0c3cf0e
# Test Case 87 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 88 of 100
# ===================================================
# Reading test case 88:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_88/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_88/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_88/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            72176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 76c9
#   Loading A[0][1] (Bank 1, Addr 0) with 4754
#   Loading A[0][2] (Bank 2, Addr 0) with b06a
#   Loading A[0][3] (Bank 3, Addr 0) with 1860
#   Loading A[1][0] (Bank 0, Addr 1) with 7186
#   Loading A[1][1] (Bank 1, Addr 1) with 3264
#   Loading A[1][2] (Bank 2, Addr 1) with f20c
#   Loading A[1][3] (Bank 3, Addr 1) with 354e
#   Loading A[2][0] (Bank 0, Addr 2) with bc94
#   Loading A[2][1] (Bank 1, Addr 2) with f838
#   Loading A[2][2] (Bank 2, Addr 2) with d568
#   Loading A[2][3] (Bank 3, Addr 2) with 96e1
#   Loading A[3][0] (Bank 0, Addr 3) with 0b93
#   Loading A[3][1] (Bank 1, Addr 3) with 4b16
#   Loading A[3][2] (Bank 2, Addr 3) with a595
#   Loading A[3][3] (Bank 3, Addr 3) with 84ec
#   Loading B[0][0] (Bank 0, Addr 0) with bb05
#   Loading B[0][1] (Bank 1, Addr 0) with 5dd1
#   Loading B[0][2] (Bank 2, Addr 0) with 7edb
#   Loading B[0][3] (Bank 3, Addr 0) with 92a7
#   Loading B[1][0] (Bank 0, Addr 1) with 01f4
#   Loading B[1][1] (Bank 1, Addr 1) with 1274
#   Loading B[1][2] (Bank 2, Addr 1) with 51af
#   Loading B[1][3] (Bank 3, Addr 1) with 87e4
#   Loading B[2][0] (Bank 0, Addr 2) with d59c
#   Loading B[2][1] (Bank 1, Addr 2) with 438d
#   Loading B[2][2] (Bank 2, Addr 2) with ef4c
#   Loading B[2][3] (Bank 3, Addr 2) with a105
#   Loading B[3][0] (Bank 0, Addr 3) with 79ce
#   Loading B[3][1] (Bank 1, Addr 3) with 0745
#   Loading B[3][2] (Bank 2, Addr 3) with 5dd9
#   Loading B[3][3] (Bank 3, Addr 3) with e400
# Matrix loading complete.
# @            72515000 Simulating controller signals to execute multiplication...
# @72535000: Starting input feeding sequence...
# @72535000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @72546000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            72825000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 88...
# Test Case 88 FAIL: C[0][0] mismatch! Actual 1, Expected 0fa80b81f
# Test Case 88 FAIL: C[0][1] mismatch! Actual x, Expected 065cd98f4
# Test Case 88 FAIL: C[0][2] mismatch! Actual x, Expected 11399eb18
# Test Case 88 FAIL: C[0][3] mismatch! Actual x, Expected 1013a935b
# Test Case 88 FAIL: C[1][0] mismatch! Actual x, Expected 12755d7c8
# Test Case 88 FAIL: C[1][1] mismatch! Actual x, Expected 06166d2aa
# Test Case 88 FAIL: C[1][2] mismatch! Actual x, Expected 136f90f7e
# Test Case 88 FAIL: C[1][3] mismatch! Actual x, Expected 1229bb5f4
# Test Case 88 FAIL: C[2][0] mismatch! Actual x, Expected 18393ddc8
# Test Case 88 FAIL: C[2][1] mismatch! Actual x, Expected 08f1c846b
# Test Case 88 FAIL: C[2][2] mismatch! Actual x, Expected 1a8d5480f
# Test Case 88 FAIL: C[2][3] mismatch! Actual x, Expected 1ff3eb6de
# Test Case 88 FAIL: C[3][0] mismatch! Actual x, Expected 0cf5a5e3c
# Test Case 88 FAIL: C[3][1] mismatch! Actual x, Expected 0385cae41
# Test Case 88 FAIL: C[3][2] mismatch! Actual x, Expected 0dad97a4a
# Test Case 88 FAIL: C[3][3] mismatch! Actual x, Expected 0ff8ae57d
# Test Case 88 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 89 of 100
# ===================================================
# Reading test case 89:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_89/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_89/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_89/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            72996000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1f04
#   Loading A[0][1] (Bank 1, Addr 0) with c135
#   Loading A[0][2] (Bank 2, Addr 0) with 1b9f
#   Loading A[0][3] (Bank 3, Addr 0) with 6ec0
#   Loading A[1][0] (Bank 0, Addr 1) with a843
#   Loading A[1][1] (Bank 1, Addr 1) with d77e
#   Loading A[1][2] (Bank 2, Addr 1) with f258
#   Loading A[1][3] (Bank 3, Addr 1) with 643e
#   Loading A[2][0] (Bank 0, Addr 2) with 736d
#   Loading A[2][1] (Bank 1, Addr 2) with 3462
#   Loading A[2][2] (Bank 2, Addr 2) with 56ae
#   Loading A[2][3] (Bank 3, Addr 2) with a357
#   Loading A[3][0] (Bank 0, Addr 3) with d018
#   Loading A[3][1] (Bank 1, Addr 3) with 26dd
#   Loading A[3][2] (Bank 2, Addr 3) with d384
#   Loading A[3][3] (Bank 3, Addr 3) with 036b
#   Loading B[0][0] (Bank 0, Addr 0) with c80e
#   Loading B[0][1] (Bank 1, Addr 0) with e643
#   Loading B[0][2] (Bank 2, Addr 0) with 91e5
#   Loading B[0][3] (Bank 3, Addr 0) with fbbe
#   Loading B[1][0] (Bank 0, Addr 1) with 86b9
#   Loading B[1][1] (Bank 1, Addr 1) with 9ba9
#   Loading B[1][2] (Bank 2, Addr 1) with ee31
#   Loading B[1][3] (Bank 3, Addr 1) with e53a
#   Loading B[2][0] (Bank 0, Addr 2) with 5685
#   Loading B[2][1] (Bank 1, Addr 2) with 6b96
#   Loading B[2][2] (Bank 2, Addr 2) with 2158
#   Loading B[2][3] (Bank 3, Addr 2) with b983
#   Loading B[3][0] (Bank 0, Addr 3) with 01d6
#   Loading B[3][1] (Bank 1, Addr 3) with 751a
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 3632
# Matrix loading complete.
# @            73335000 Simulating controller signals to execute multiplication...
# @73355000: Starting input feeding sequence...
# @73355000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @73366000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            73645000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 89...
# Test Case 89 FAIL: C[0][0] mismatch! Actual 1, Expected 0994a1e54
# Test Case 89 FAIL: C[0][1] mismatch! Actual x, Expected 111e7a695
# Test Case 89 FAIL: C[0][2] mismatch! Actual x, Expected 186743ff7
# Test Case 89 FAIL: C[0][3] mismatch! Actual x, Expected 134dc899d
# Test Case 89 FAIL: C[1][0] mismatch! Actual x, Expected 11a5f239c
# Test Case 89 FAIL: C[1][1] mismatch! Actual x, Expected 1589a55eb
# Test Case 89 FAIL: C[1][2] mismatch! Actual x, Expected 16301b094
# Test Case 89 FAIL: C[1][3] mismatch! Actual x, Expected 1ad22ba32
# Test Case 89 FAIL: C[2][0] mismatch! Actual x, Expected 0b3eebd08
# Test Case 89 FAIL: C[2][1] mismatch! Actual x, Expected 13161ac11
# Test Case 89 FAIL: C[2][2] mismatch! Actual x, Expected 1c9032267
# Test Case 89 FAIL: C[2][3] mismatch! Actual x, Expected 15fc045c4
# Test Case 89 FAIL: C[3][0] mismatch! Actual x, Expected 0c2874ff3
# Test Case 89 FAIL: C[3][1] mismatch! Actual x, Expected 0e6c68506
# Test Case 89 FAIL: C[3][2] mismatch! Actual x, Expected 0b4f6f871
# Test Case 89 FAIL: C[3][3] mismatch! Actual x, Expected 13dc14ff7
# Test Case 89 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 90 of 100
# ===================================================
# Reading test case 90:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_90/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_90/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_90/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            73816000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 539c
#   Loading A[0][1] (Bank 1, Addr 0) with 3fe9
#   Loading A[0][2] (Bank 2, Addr 0) with 2c11
#   Loading A[0][3] (Bank 3, Addr 0) with 6eaf
#   Loading A[1][0] (Bank 0, Addr 1) with f20d
#   Loading A[1][1] (Bank 1, Addr 1) with 51f3
#   Loading A[1][2] (Bank 2, Addr 1) with b050
#   Loading A[1][3] (Bank 3, Addr 1) with f2d8
#   Loading A[2][0] (Bank 0, Addr 2) with 320b
#   Loading A[2][1] (Bank 1, Addr 2) with 66dc
#   Loading A[2][2] (Bank 2, Addr 2) with 24de
#   Loading A[2][3] (Bank 3, Addr 2) with 0ad4
#   Loading A[3][0] (Bank 0, Addr 3) with bbc6
#   Loading A[3][1] (Bank 1, Addr 3) with d0f2
#   Loading A[3][2] (Bank 2, Addr 3) with fa75
#   Loading A[3][3] (Bank 3, Addr 3) with fe55
#   Loading B[0][0] (Bank 0, Addr 0) with fc7d
#   Loading B[0][1] (Bank 1, Addr 0) with 7d7c
#   Loading B[0][2] (Bank 2, Addr 0) with 7c3a
#   Loading B[0][3] (Bank 3, Addr 0) with 0b49
#   Loading B[1][0] (Bank 0, Addr 1) with 5924
#   Loading B[1][1] (Bank 1, Addr 1) with dcf8
#   Loading B[1][2] (Bank 2, Addr 1) with a34f
#   Loading B[1][3] (Bank 3, Addr 1) with 4ade
#   Loading B[2][0] (Bank 0, Addr 2) with cfe2
#   Loading B[2][1] (Bank 1, Addr 2) with 5098
#   Loading B[2][2] (Bank 2, Addr 2) with ee7a
#   Loading B[2][3] (Bank 3, Addr 2) with acd4
#   Loading B[3][0] (Bank 0, Addr 3) with 6852
#   Loading B[3][1] (Bank 1, Addr 3) with 43a7
#   Loading B[3][2] (Bank 2, Addr 3) with 3df4
#   Loading B[3][3] (Bank 3, Addr 3) with f9d6
# Matrix loading complete.
# @            74155000 Simulating controller signals to execute multiplication...
# @74175000: Starting input feeding sequence...
# @74175000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @74186000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            74465000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 90...
# Test Case 90 FAIL: C[0][0] mismatch! Actual 0, Expected 11be69a22
# Test Case 90 FAIL: C[0][1] mismatch! Actual x, Expected 13b49cada
# Test Case 90 FAIL: C[0][2] mismatch! Actual x, Expected 11f0ab451
# Test Case 90 FAIL: C[0][3] mismatch! Actual x, Expected 123829762
# Test Case 90 FAIL: C[1][0] mismatch! Actual x, Expected 1043d81ad
# Test Case 90 FAIL: C[1][1] mismatch! Actual x, Expected 0bda967c2
# Test Case 90 FAIL: C[1][2] mismatch! Actual x, Expected 0e5acb747
# Test Case 90 FAIL: C[1][3] mismatch! Actual x, Expected 12c2395a7
# Test Case 90 FAIL: C[2][0] mismatch! Actual x, Expected 0ecdaab03
# Test Case 90 FAIL: C[2][1] mismatch! Actual x, Expected 0fb9477df
# Test Case 90 FAIL: C[2][2] mismatch! Actual x, Expected 0e4d01eda
# Test Case 90 FAIL: C[2][3] mismatch! Actual x, Expected 142d22bdf
# Test Case 90 FAIL: C[3][0] mismatch! Actual x, Expected 132288835
# Test Case 90 FAIL: C[3][1] mismatch! Actual x, Expected 14e7cc757
# Test Case 90 FAIL: C[3][2] mismatch! Actual x, Expected 118433b5a
# Test Case 90 FAIL: C[3][3] mismatch! Actual x, Expected 14b6acbd5
# Test Case 90 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 91 of 100
# ===================================================
# Reading test case 91:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_91/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_91/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_91/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            74636000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 753a
#   Loading A[0][1] (Bank 1, Addr 0) with c3d3
#   Loading A[0][2] (Bank 2, Addr 0) with 74fa
#   Loading A[0][3] (Bank 3, Addr 0) with c7e2
#   Loading A[1][0] (Bank 0, Addr 1) with 0f31
#   Loading A[1][1] (Bank 1, Addr 1) with 15b2
#   Loading A[1][2] (Bank 2, Addr 1) with d015
#   Loading A[1][3] (Bank 3, Addr 1) with 76c2
#   Loading A[2][0] (Bank 0, Addr 2) with a574
#   Loading A[2][1] (Bank 1, Addr 2) with bc64
#   Loading A[2][2] (Bank 2, Addr 2) with 4cb5
#   Loading A[2][3] (Bank 3, Addr 2) with a944
#   Loading A[3][0] (Bank 0, Addr 3) with f25d
#   Loading A[3][1] (Bank 1, Addr 3) with bc7e
#   Loading A[3][2] (Bank 2, Addr 3) with d5ae
#   Loading A[3][3] (Bank 3, Addr 3) with 8f21
#   Loading B[0][0] (Bank 0, Addr 0) with 14d2
#   Loading B[0][1] (Bank 1, Addr 0) with c791
#   Loading B[0][2] (Bank 2, Addr 0) with 96b2
#   Loading B[0][3] (Bank 3, Addr 0) with 5262
#   Loading B[1][0] (Bank 0, Addr 1) with 21a9
#   Loading B[1][1] (Bank 1, Addr 1) with 46bd
#   Loading B[1][2] (Bank 2, Addr 1) with c568
#   Loading B[1][3] (Bank 3, Addr 1) with 2339
#   Loading B[2][0] (Bank 0, Addr 2) with 0626
#   Loading B[2][1] (Bank 1, Addr 2) with a5b8
#   Loading B[2][2] (Bank 2, Addr 2) with 049e
#   Loading B[2][3] (Bank 3, Addr 2) with f2aa
#   Loading B[3][0] (Bank 0, Addr 3) with c883
#   Loading B[3][1] (Bank 1, Addr 3) with e9ee
#   Loading B[3][2] (Bank 2, Addr 3) with 853c
#   Loading B[3][3] (Bank 3, Addr 3) with fdb6
# Matrix loading complete.
# @            74975000 Simulating controller signals to execute multiplication...
# @74995000: Starting input feeding sequence...
# @74995000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @75006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            75285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 91...
# Test Case 91 FAIL: C[0][0] mismatch! Actual 0, Expected 0cd55febc
# Test Case 91 FAIL: C[0][1] mismatch! Actual x, Expected 1a827bfdd
# Test Case 91 FAIL: C[0][2] mismatch! Actual x, Expected 0d1d76ba0
# Test Case 91 FAIL: C[0][3] mismatch! Actual x, Expected 1b4d84743
# Test Case 91 FAIL: C[1][0] mismatch! Actual x, Expected 0aaf096ea
# Test Case 91 FAIL: C[1][1] mismatch! Actual x, Expected 1c4d866f1
# Test Case 91 FAIL: C[1][2] mismatch! Actual x, Expected 0e9800e46
# Test Case 91 FAIL: C[1][3] mismatch! Actual x, Expected 1af62e164
# Test Case 91 FAIL: C[2][0] mismatch! Actual x, Expected 0ce1478d9
# Test Case 91 FAIL: C[2][1] mismatch! Actual x, Expected 18999c5f7
# Test Case 91 FAIL: C[2][2] mismatch! Actual x, Expected 155e829da
# Test Case 91 FAIL: C[2][3] mismatch! Actual x, Expected 15ec0f947
# Test Case 91 FAIL: C[3][0] mismatch! Actual x, Expected 0940ac571
# Test Case 91 FAIL: C[3][1] mismatch! Actual x, Expected 1acff34ca
# Test Case 91 FAIL: C[3][2] mismatch! Actual x, Expected 11ec828a8
# Test Case 91 FAIL: C[3][3] mismatch! Actual x, Expected 17ef5ed54
# Test Case 91 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 92 of 100
# ===================================================
# Reading test case 92:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_92/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_92/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_92/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            75456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9dd5
#   Loading A[0][1] (Bank 1, Addr 0) with c68b
#   Loading A[0][2] (Bank 2, Addr 0) with 20a9
#   Loading A[0][3] (Bank 3, Addr 0) with f04f
#   Loading A[1][0] (Bank 0, Addr 1) with 48e9
#   Loading A[1][1] (Bank 1, Addr 1) with 55cc
#   Loading A[1][2] (Bank 2, Addr 1) with dd7d
#   Loading A[1][3] (Bank 3, Addr 1) with cb96
#   Loading A[2][0] (Bank 0, Addr 2) with 48f1
#   Loading A[2][1] (Bank 1, Addr 2) with 6496
#   Loading A[2][2] (Bank 2, Addr 2) with 33d4
#   Loading A[2][3] (Bank 3, Addr 2) with c0ed
#   Loading A[3][0] (Bank 0, Addr 3) with 1f26
#   Loading A[3][1] (Bank 1, Addr 3) with 361f
#   Loading A[3][2] (Bank 2, Addr 3) with 9847
#   Loading A[3][3] (Bank 3, Addr 3) with 9560
#   Loading B[0][0] (Bank 0, Addr 0) with 12f1
#   Loading B[0][1] (Bank 1, Addr 0) with 098a
#   Loading B[0][2] (Bank 2, Addr 0) with 431e
#   Loading B[0][3] (Bank 3, Addr 0) with 5e1f
#   Loading B[1][0] (Bank 0, Addr 1) with 7664
#   Loading B[1][1] (Bank 1, Addr 1) with 50ce
#   Loading B[1][2] (Bank 2, Addr 1) with 0dbb
#   Loading B[1][3] (Bank 3, Addr 1) with efab
#   Loading B[2][0] (Bank 0, Addr 2) with 43e4
#   Loading B[2][1] (Bank 1, Addr 2) with f4ab
#   Loading B[2][2] (Bank 2, Addr 2) with 9802
#   Loading B[2][3] (Bank 3, Addr 2) with 2892
#   Loading B[3][0] (Bank 0, Addr 3) with 878b
#   Loading B[3][1] (Bank 1, Addr 3) with 4d21
#   Loading B[3][2] (Bank 2, Addr 3) with 2676
#   Loading B[3][3] (Bank 3, Addr 3) with 7fb8
# Matrix loading complete.
# @            75795000 Simulating controller signals to execute multiplication...
# @75815000: Starting input feeding sequence...
# @75815000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @75826000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            76105000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 92...
# Test Case 92 FAIL: C[0][0] mismatch! Actual 0, Expected 0513b6dcf
# Test Case 92 FAIL: C[0][1] mismatch! Actual x, Expected 06bfdec31
# Test Case 92 FAIL: C[0][2] mismatch! Actual x, Expected 05d47fe8f
# Test Case 92 FAIL: C[0][3] mismatch! Actual x, Expected 099630c30
# Test Case 92 FAIL: C[1][0] mismatch! Actual x, Expected 06db2cdf8
# Test Case 92 FAIL: C[1][1] mismatch! Actual x, Expected 092eb2947
# Test Case 92 FAIL: C[1][2] mismatch! Actual x, Expected 07c8312c4
# Test Case 92 FAIL: C[1][3] mismatch! Actual x, Expected 0c442eced
# Test Case 92 FAIL: C[2][0] mismatch! Actual x, Expected 0c737884a
# Test Case 92 FAIL: C[2][1] mismatch! Actual x, Expected 0a68a8173
# Test Case 92 FAIL: C[2][2] mismatch! Actual x, Expected 04a18347f
# Test Case 92 FAIL: C[2][3] mismatch! Actual x, Expected 12f8d02e6
# Test Case 92 FAIL: C[3][0] mismatch! Actual x, Expected 0f22f082b
# Test Case 92 FAIL: C[3][1] mismatch! Actual x, Expected 12e9ae7f9
# Test Case 92 FAIL: C[3][2] mismatch! Actual x, Expected 0d2eb7eee
# Test Case 92 FAIL: C[3][3] mismatch! Actual x, Expected 1800c2eed
# Test Case 92 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 93 of 100
# ===================================================
# Reading test case 93:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_93/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_93/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_93/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            76276000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with af21
#   Loading A[0][1] (Bank 1, Addr 0) with 3b0b
#   Loading A[0][2] (Bank 2, Addr 0) with 006f
#   Loading A[0][3] (Bank 3, Addr 0) with f91e
#   Loading A[1][0] (Bank 0, Addr 1) with af4f
#   Loading A[1][1] (Bank 1, Addr 1) with c852
#   Loading A[1][2] (Bank 2, Addr 1) with ba0c
#   Loading A[1][3] (Bank 3, Addr 1) with ae45
#   Loading A[2][0] (Bank 0, Addr 2) with f2b4
#   Loading A[2][1] (Bank 1, Addr 2) with 117d
#   Loading A[2][2] (Bank 2, Addr 2) with 6d70
#   Loading A[2][3] (Bank 3, Addr 2) with 3667
#   Loading A[3][0] (Bank 0, Addr 3) with f8b0
#   Loading A[3][1] (Bank 1, Addr 3) with 9b3f
#   Loading A[3][2] (Bank 2, Addr 3) with 687f
#   Loading A[3][3] (Bank 3, Addr 3) with 8e4a
#   Loading B[0][0] (Bank 0, Addr 0) with 6147
#   Loading B[0][1] (Bank 1, Addr 0) with a483
#   Loading B[0][2] (Bank 2, Addr 0) with eb96
#   Loading B[0][3] (Bank 3, Addr 0) with 6fdd
#   Loading B[1][0] (Bank 0, Addr 1) with f346
#   Loading B[1][1] (Bank 1, Addr 1) with cf9a
#   Loading B[1][2] (Bank 2, Addr 1) with 2e8d
#   Loading B[1][3] (Bank 3, Addr 1) with 6be1
#   Loading B[2][0] (Bank 0, Addr 2) with d2b2
#   Loading B[2][1] (Bank 1, Addr 2) with 8b8f
#   Loading B[2][2] (Bank 2, Addr 2) with b76b
#   Loading B[2][3] (Bank 3, Addr 2) with 953d
#   Loading B[3][0] (Bank 0, Addr 3) with 154a
#   Loading B[3][1] (Bank 1, Addr 3) with 08ef
#   Loading B[3][2] (Bank 2, Addr 3) with 6790
#   Loading B[3][3] (Bank 3, Addr 3) with 7217
# Matrix loading complete.
# @            76615000 Simulating controller signals to execute multiplication...
# @76635000: Starting input feeding sequence...
# @76635000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @76646000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            76925000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 93...
# Test Case 93 FAIL: C[0][0] mismatch! Actual 1, Expected 1c592bbc9
# Test Case 93 FAIL: C[0][1] mismatch! Actual x, Expected 18bb21345
# Test Case 93 FAIL: C[0][2] mismatch! Actual x, Expected 1d3897915
# Test Case 93 FAIL: C[0][3] mismatch! Actual x, Expected 192b7e8a0
# Test Case 93 FAIL: C[1][0] mismatch! Actual x, Expected 0f019e599
# Test Case 93 FAIL: C[1][1] mismatch! Actual x, Expected 0d7579d99
# Test Case 93 FAIL: C[1][2] mismatch! Actual x, Expected 0a618194b
# Test Case 93 FAIL: C[1][3] mismatch! Actual x, Expected 0bd990003
# Test Case 93 FAIL: C[2][0] mismatch! Actual x, Expected 113b908a7
# Test Case 93 FAIL: C[2][1] mismatch! Actual x, Expected 0d6756c26
# Test Case 93 FAIL: C[2][2] mismatch! Actual x, Expected 09ae974e6
# Test Case 93 FAIL: C[2][3] mismatch! Actual x, Expected 0bcf53e78
# Test Case 93 FAIL: C[3][0] mismatch! Actual x, Expected 13ce02032
# Test Case 93 FAIL: C[3][1] mismatch! Actual x, Expected 15008ca7b
# Test Case 93 FAIL: C[3][2] mismatch! Actual x, Expected 1657b1142
# Test Case 93 FAIL: C[3][3] mismatch! Actual x, Expected 1156bb8bc
# Test Case 93 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 94 of 100
# ===================================================
# Reading test case 94:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_94/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_94/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_94/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            77096000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c1dc
#   Loading A[0][1] (Bank 1, Addr 0) with bb88
#   Loading A[0][2] (Bank 2, Addr 0) with 3e12
#   Loading A[0][3] (Bank 3, Addr 0) with 4943
#   Loading A[1][0] (Bank 0, Addr 1) with 8778
#   Loading A[1][1] (Bank 1, Addr 1) with c64d
#   Loading A[1][2] (Bank 2, Addr 1) with c9bd
#   Loading A[1][3] (Bank 3, Addr 1) with 2b98
#   Loading A[2][0] (Bank 0, Addr 2) with 5540
#   Loading A[2][1] (Bank 1, Addr 2) with 5135
#   Loading A[2][2] (Bank 2, Addr 2) with b120
#   Loading A[2][3] (Bank 3, Addr 2) with 7ca3
#   Loading A[3][0] (Bank 0, Addr 3) with 3fa0
#   Loading A[3][1] (Bank 1, Addr 3) with 7db5
#   Loading A[3][2] (Bank 2, Addr 3) with 19ec
#   Loading A[3][3] (Bank 3, Addr 3) with 6bee
#   Loading B[0][0] (Bank 0, Addr 0) with f764
#   Loading B[0][1] (Bank 1, Addr 0) with f7b2
#   Loading B[0][2] (Bank 2, Addr 0) with 9bee
#   Loading B[0][3] (Bank 3, Addr 0) with 48e4
#   Loading B[1][0] (Bank 0, Addr 1) with d199
#   Loading B[1][1] (Bank 1, Addr 1) with 7522
#   Loading B[1][2] (Bank 2, Addr 1) with 4eb0
#   Loading B[1][3] (Bank 3, Addr 1) with 4096
#   Loading B[2][0] (Bank 0, Addr 2) with daeb
#   Loading B[2][1] (Bank 1, Addr 2) with f3ea
#   Loading B[2][2] (Bank 2, Addr 2) with 8a50
#   Loading B[2][3] (Bank 3, Addr 2) with a903
#   Loading B[3][0] (Bank 0, Addr 3) with 4452
#   Loading B[3][1] (Bank 1, Addr 3) with 7911
#   Loading B[3][2] (Bank 2, Addr 3) with 34e5
#   Loading B[3][3] (Bank 3, Addr 3) with bd3c
# Matrix loading complete.
# @            77435000 Simulating controller signals to execute multiplication...
# @77455000: Starting input feeding sequence...
# @77455000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @77466000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            77745000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 94...
# Test Case 94 FAIL: C[0][0] mismatch! Actual 0, Expected 184228fa8
# Test Case 94 FAIL: C[0][1] mismatch! Actual x, Expected 168de6b08
# Test Case 94 FAIL: C[0][2] mismatch! Actual x, Expected 0daecaf28
# Test Case 94 FAIL: C[0][3] mismatch! Actual x, Expected 0c0b03180
# Test Case 94 FAIL: C[1][0] mismatch! Actual x, Expected 1be92dfc6
# Test Case 94 FAIL: C[1][1] mismatch! Actual x, Expected 199009341
# Test Case 94 FAIL: C[1][2] mismatch! Actual x, Expected 0f506a4d9
# Test Case 94 FAIL: C[1][3] mismatch! Actual x, Expected 0f9f5be49
# Test Case 94 FAIL: C[2][0] mismatch! Actual x, Expected 17f8a51f5
# Test Case 94 FAIL: C[2][1] mismatch! Actual x, Expected 14d623e8a
# Test Case 94 FAIL: C[2][2] mismatch! Actual x, Expected 0c8de9cc8
# Test Case 94 FAIL: C[2][3] mismatch! Actual x, Expected 0ccab4f76
# Test Case 94 FAIL: C[3][0] mismatch! Actual x, Expected 0f1e06ae1
# Test Case 94 FAIL: C[3][1] mismatch! Actual x, Expected 104a02692
# Test Case 94 FAIL: C[3][2] mismatch! Actual x, Expected 093a9aaa0
# Test Case 94 FAIL: C[3][3] mismatch! Actual x, Expected 0c1ecb56d
# Test Case 94 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 95 of 100
# ===================================================
# Reading test case 95:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_95/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_95/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_95/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            77916000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8578
#   Loading A[0][1] (Bank 1, Addr 0) with 4d65
#   Loading A[0][2] (Bank 2, Addr 0) with 2649
#   Loading A[0][3] (Bank 3, Addr 0) with 404b
#   Loading A[1][0] (Bank 0, Addr 1) with 53e1
#   Loading A[1][1] (Bank 1, Addr 1) with 268a
#   Loading A[1][2] (Bank 2, Addr 1) with df7f
#   Loading A[1][3] (Bank 3, Addr 1) with 0532
#   Loading A[2][0] (Bank 0, Addr 2) with f9d6
#   Loading A[2][1] (Bank 1, Addr 2) with 8c37
#   Loading A[2][2] (Bank 2, Addr 2) with 3f05
#   Loading A[2][3] (Bank 3, Addr 2) with ca5b
#   Loading A[3][0] (Bank 0, Addr 3) with 23bf
#   Loading A[3][1] (Bank 1, Addr 3) with f6df
#   Loading A[3][2] (Bank 2, Addr 3) with 9ec0
#   Loading A[3][3] (Bank 3, Addr 3) with 46f6
#   Loading B[0][0] (Bank 0, Addr 0) with 871b
#   Loading B[0][1] (Bank 1, Addr 0) with b013
#   Loading B[0][2] (Bank 2, Addr 0) with 1040
#   Loading B[0][3] (Bank 3, Addr 0) with 5d74
#   Loading B[1][0] (Bank 0, Addr 1) with 5ccb
#   Loading B[1][1] (Bank 1, Addr 1) with 5489
#   Loading B[1][2] (Bank 2, Addr 1) with d7c3
#   Loading B[1][3] (Bank 3, Addr 1) with db07
#   Loading B[2][0] (Bank 0, Addr 2) with a353
#   Loading B[2][1] (Bank 1, Addr 2) with 4b34
#   Loading B[2][2] (Bank 2, Addr 2) with 8b06
#   Loading B[2][3] (Bank 3, Addr 2) with 6eae
#   Loading B[3][0] (Bank 0, Addr 3) with ed8d
#   Loading B[3][1] (Bank 1, Addr 3) with 0d30
#   Loading B[3][2] (Bank 2, Addr 3) with 0113
#   Loading B[3][3] (Bank 3, Addr 3) with 8eed
# Matrix loading complete.
# @            78255000 Simulating controller signals to execute multiplication...
# @78275000: Starting input feeding sequence...
# @78275000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @78286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            78565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 95...
# Test Case 95 FAIL: C[0][0] mismatch! Actual 0, Expected 1256780a8
# Test Case 95 FAIL: C[0][1] mismatch! Actual x, Expected 0c2baf799
# Test Case 95 FAIL: C[0][2] mismatch! Actual x, Expected 0d6fe2c94
# Test Case 95 FAIL: C[0][3] mismatch! Actual x, Expected 0f875a5ce
# Test Case 95 FAIL: C[1][0] mismatch! Actual x, Expected 175597abd
# Test Case 95 FAIL: C[1][1] mismatch! Actual x, Expected 077dd4b55
# Test Case 95 FAIL: C[1][2] mismatch! Actual x, Expected 072934235
# Test Case 95 FAIL: C[1][3] mismatch! Actual x, Expected 103ad0c5f
# Test Case 95 FAIL: C[2][0] mismatch! Actual x, Expected 120bb33c7
# Test Case 95 FAIL: C[2][1] mismatch! Actual x, Expected 07ed31666
# Test Case 95 FAIL: C[2][2] mismatch! Actual x, Expected 0e1afc25b
# Test Case 95 FAIL: C[2][3] mismatch! Actual x, Expected 1411212b3
# Test Case 95 FAIL: C[3][0] mismatch! Actual x, Expected 0e6c2cb8e
# Test Case 95 FAIL: C[3][1] mismatch! Actual x, Expected 06d0914ef
# Test Case 95 FAIL: C[3][2] mismatch! Actual x, Expected 076a6173a
# Test Case 95 FAIL: C[3][3] mismatch! Actual x, Expected 09b0514f2
# Test Case 95 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 96 of 100
# ===================================================
# Reading test case 96:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_96/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_96/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_96/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            78736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with eca0
#   Loading A[0][1] (Bank 1, Addr 0) with fb26
#   Loading A[0][2] (Bank 2, Addr 0) with 1575
#   Loading A[0][3] (Bank 3, Addr 0) with 4508
#   Loading A[1][0] (Bank 0, Addr 1) with 8b1d
#   Loading A[1][1] (Bank 1, Addr 1) with e8ea
#   Loading A[1][2] (Bank 2, Addr 1) with 5754
#   Loading A[1][3] (Bank 3, Addr 1) with e24d
#   Loading A[2][0] (Bank 0, Addr 2) with 3269
#   Loading A[2][1] (Bank 1, Addr 2) with 381e
#   Loading A[2][2] (Bank 2, Addr 2) with ef68
#   Loading A[2][3] (Bank 3, Addr 2) with 0757
#   Loading A[3][0] (Bank 0, Addr 3) with 5be0
#   Loading A[3][1] (Bank 1, Addr 3) with 5011
#   Loading A[3][2] (Bank 2, Addr 3) with aafb
#   Loading A[3][3] (Bank 3, Addr 3) with 1466
#   Loading B[0][0] (Bank 0, Addr 0) with c878
#   Loading B[0][1] (Bank 1, Addr 0) with 191f
#   Loading B[0][2] (Bank 2, Addr 0) with 0632
#   Loading B[0][3] (Bank 3, Addr 0) with 2c23
#   Loading B[1][0] (Bank 0, Addr 1) with 06dd
#   Loading B[1][1] (Bank 1, Addr 1) with 47c5
#   Loading B[1][2] (Bank 2, Addr 1) with c834
#   Loading B[1][3] (Bank 3, Addr 1) with 2d84
#   Loading B[2][0] (Bank 0, Addr 2) with 325d
#   Loading B[2][1] (Bank 1, Addr 2) with 1bef
#   Loading B[2][2] (Bank 2, Addr 2) with 9821
#   Loading B[2][3] (Bank 3, Addr 2) with c5f6
#   Loading B[3][0] (Bank 0, Addr 3) with 23f0
#   Loading B[3][1] (Bank 1, Addr 3) with c3a4
#   Loading B[3][2] (Bank 2, Addr 3) with 80cc
#   Loading B[3][3] (Bank 3, Addr 3) with 5025
# Matrix loading complete.
# @            79075000 Simulating controller signals to execute multiplication...
# @79095000: Starting input feeding sequence...
# @79095000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @79106000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            79385000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 96...
# Test Case 96 FAIL: C[0][0] mismatch! Actual 1, Expected 0d3d7452e
# Test Case 96 FAIL: C[0][1] mismatch! Actual x, Expected 089eefe38
# Test Case 96 FAIL: C[0][2] mismatch! Actual x, Expected 0beb2ef2d
# Test Case 96 FAIL: C[0][3] mismatch! Actual x, Expected 08546331a
# Test Case 96 FAIL: C[1][0] mismatch! Actual x, Expected 0e13199a8
# Test Case 96 FAIL: C[1][1] mismatch! Actual x, Expected 09d410d92
# Test Case 96 FAIL: C[1][2] mismatch! Actual x, Expected 105db6a5e
# Test Case 96 FAIL: C[1][3] mismatch! Actual x, Expected 0992bfe23
# Test Case 96 FAIL: C[2][0] mismatch! Actual x, Expected 05a3eb774
# Test Case 96 FAIL: C[2][1] mismatch! Actual x, Expected 0b760b9b3
# Test Case 96 FAIL: C[2][2] mismatch! Actual x, Expected 1291aa856
# Test Case 96 FAIL: C[2][3] mismatch! Actual x, Expected 101e21286
# Test Case 96 FAIL: C[3][0] mismatch! Actual x, Expected 0406e8074
# Test Case 96 FAIL: C[3][1] mismatch! Actual x, Expected 0569b6eca
# Test Case 96 FAIL: C[3][2] mismatch! Actual x, Expected 0c145a6b3
# Test Case 96 FAIL: C[3][3] mismatch! Actual x, Expected 04032dc24
# Test Case 96 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 97 of 100
# ===================================================
# Reading test case 97:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_97/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_97/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_97/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            79556000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1220
#   Loading A[0][1] (Bank 1, Addr 0) with 5704
#   Loading A[0][2] (Bank 2, Addr 0) with 8f7a
#   Loading A[0][3] (Bank 3, Addr 0) with 921b
#   Loading A[1][0] (Bank 0, Addr 1) with 6be6
#   Loading A[1][1] (Bank 1, Addr 1) with 2081
#   Loading A[1][2] (Bank 2, Addr 1) with d779
#   Loading A[1][3] (Bank 3, Addr 1) with eaed
#   Loading A[2][0] (Bank 0, Addr 2) with cf5e
#   Loading A[2][1] (Bank 1, Addr 2) with 5556
#   Loading A[2][2] (Bank 2, Addr 2) with be18
#   Loading A[2][3] (Bank 3, Addr 2) with 9743
#   Loading A[3][0] (Bank 0, Addr 3) with cab5
#   Loading A[3][1] (Bank 1, Addr 3) with 4ffe
#   Loading A[3][2] (Bank 2, Addr 3) with a688
#   Loading A[3][3] (Bank 3, Addr 3) with 2024
#   Loading B[0][0] (Bank 0, Addr 0) with ee6a
#   Loading B[0][1] (Bank 1, Addr 0) with 6470
#   Loading B[0][2] (Bank 2, Addr 0) with 66dd
#   Loading B[0][3] (Bank 3, Addr 0) with 7322
#   Loading B[1][0] (Bank 0, Addr 1) with c637
#   Loading B[1][1] (Bank 1, Addr 1) with a945
#   Loading B[1][2] (Bank 2, Addr 1) with 3e1b
#   Loading B[1][3] (Bank 3, Addr 1) with 51cf
#   Loading B[2][0] (Bank 0, Addr 2) with 29b0
#   Loading B[2][1] (Bank 1, Addr 2) with 1381
#   Loading B[2][2] (Bank 2, Addr 2) with 35d1
#   Loading B[2][3] (Bank 3, Addr 2) with 50fb
#   Loading B[3][0] (Bank 0, Addr 3) with 6a14
#   Loading B[3][1] (Bank 1, Addr 3) with e02b
#   Loading B[3][2] (Bank 2, Addr 3) with 825d
#   Loading B[3][3] (Bank 3, Addr 3) with 3d61
# Matrix loading complete.
# @            79895000 Simulating controller signals to execute multiplication...
# @79915000: Starting input feeding sequence...
# @79915000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @79926000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            80205000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 97...
# Test Case 97 FAIL: C[0][0] mismatch! Actual 0, Expected 0da2fba6e
# Test Case 97 FAIL: C[0][1] mismatch! Actual x, Expected 10fc13dc3
# Test Case 97 FAIL: C[0][2] mismatch! Actual x, Expected 0b446ca61
# Test Case 97 FAIL: C[0][3] mismatch! Actual x, Expected 09cd46df9
# Test Case 97 FAIL: C[1][0] mismatch! Actual x, Expected 0993f5e57
# Test Case 97 FAIL: C[1][1] mismatch! Actual x, Expected 0842d9f85
# Test Case 97 FAIL: C[1][2] mismatch! Actual x, Expected 06585e68b
# Test Case 97 FAIL: C[1][3] mismatch! Actual x, Expected 05fb1d467
# Test Case 97 FAIL: C[2][0] mismatch! Actual x, Expected 1906a90a3
# Test Case 97 FAIL: C[2][1] mismatch! Actual x, Expected 16711eced
# Test Case 97 FAIL: C[2][2] mismatch! Actual x, Expected 0eab03915
# Test Case 97 FAIL: C[2][3] mismatch! Actual x, Expected 0e971c31b
# Test Case 97 FAIL: C[3][0] mismatch! Actual x, Expected 163ea83f9
# Test Case 97 FAIL: C[3][1] mismatch! Actual x, Expected 0fc535680
# Test Case 97 FAIL: C[3][2] mismatch! Actual x, Expected 0a3dd6215
# Test Case 97 FAIL: C[3][3] mismatch! Actual x, Expected 0c4567b8e
# Test Case 97 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 98 of 100
# ===================================================
# Reading test case 98:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_98/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_98/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_98/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            80376000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bc58
#   Loading A[0][1] (Bank 1, Addr 0) with c8ed
#   Loading A[0][2] (Bank 2, Addr 0) with 6247
#   Loading A[0][3] (Bank 3, Addr 0) with 28c8
#   Loading A[1][0] (Bank 0, Addr 1) with 3acb
#   Loading A[1][1] (Bank 1, Addr 1) with 91b0
#   Loading A[1][2] (Bank 2, Addr 1) with 5fd7
#   Loading A[1][3] (Bank 3, Addr 1) with abc7
#   Loading A[2][0] (Bank 0, Addr 2) with b5ba
#   Loading A[2][1] (Bank 1, Addr 2) with 2c0e
#   Loading A[2][2] (Bank 2, Addr 2) with 824d
#   Loading A[2][3] (Bank 3, Addr 2) with 36e6
#   Loading A[3][0] (Bank 0, Addr 3) with 9877
#   Loading A[3][1] (Bank 1, Addr 3) with 0592
#   Loading A[3][2] (Bank 2, Addr 3) with db31
#   Loading A[3][3] (Bank 3, Addr 3) with 21f4
#   Loading B[0][0] (Bank 0, Addr 0) with e537
#   Loading B[0][1] (Bank 1, Addr 0) with 00ae
#   Loading B[0][2] (Bank 2, Addr 0) with 8d83
#   Loading B[0][3] (Bank 3, Addr 0) with f739
#   Loading B[1][0] (Bank 0, Addr 1) with 4122
#   Loading B[1][1] (Bank 1, Addr 1) with 1811
#   Loading B[1][2] (Bank 2, Addr 1) with a5d6
#   Loading B[1][3] (Bank 3, Addr 1) with f6e1
#   Loading B[2][0] (Bank 0, Addr 2) with 41d2
#   Loading B[2][1] (Bank 1, Addr 2) with 8dba
#   Loading B[2][2] (Bank 2, Addr 2) with 3952
#   Loading B[2][3] (Bank 3, Addr 2) with 37e6
#   Loading B[3][0] (Bank 0, Addr 3) with caec
#   Loading B[3][1] (Bank 1, Addr 3) with 61ac
#   Loading B[3][2] (Bank 2, Addr 3) with 705f
#   Loading B[3][3] (Bank 3, Addr 3) with cefb
# Matrix loading complete.
# @            80715000 Simulating controller signals to execute multiplication...
# @80735000: Starting input feeding sequence...
# @80735000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @80746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            81025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 98...
# Test Case 98 FAIL: C[0][0] mismatch! Actual 0, Expected 15f2c4926
# Test Case 98 FAIL: C[0][1] mismatch! Actual x, Expected 0a4cdf563
# Test Case 98 FAIL: C[0][2] mismatch! Actual x, Expected 0f9d01977
# Test Case 98 FAIL: C[0][3] mismatch! Actual x, Expected 191890fcc
# Test Case 98 FAIL: C[1][0] mismatch! Actual x, Expected 0e8b63d5f
# Test Case 98 FAIL: C[1][1] mismatch! Actual x, Expected 028be860a
# Test Case 98 FAIL: C[1][2] mismatch! Actual x, Expected 0d9c0bf11
# Test Case 98 FAIL: C[1][3] mismatch! Actual x, Expected 15ca81c2f
# Test Case 98 FAIL: C[2][0] mismatch! Actual x, Expected 13fa01d25
# Test Case 98 FAIL: C[2][1] mismatch! Actual x, Expected 0a5093c67
# Test Case 98 FAIL: C[2][2] mismatch! Actual x, Expected 0f1ccbee8
# Test Case 98 FAIL: C[2][3] mismatch! Actual x, Expected 189012bff
# Test Case 98 FAIL: C[3][0] mismatch! Actual x, Expected 0793f4602
# Test Case 98 FAIL: C[3][1] mismatch! Actual x, Expected 03b9a9d33
# Test Case 98 FAIL: C[3][2] mismatch! Actual x, Expected 0a10406ea
# Test Case 98 FAIL: C[3][3] mismatch! Actual x, Expected 0f47a9f4f
# Test Case 98 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 99 of 100
# ===================================================
# Reading test case 99:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_99/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_99/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_99/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            81196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a7f5
#   Loading A[0][1] (Bank 1, Addr 0) with 6ee8
#   Loading A[0][2] (Bank 2, Addr 0) with b473
#   Loading A[0][3] (Bank 3, Addr 0) with 8805
#   Loading A[1][0] (Bank 0, Addr 1) with 2e23
#   Loading A[1][1] (Bank 1, Addr 1) with 385d
#   Loading A[1][2] (Bank 2, Addr 1) with 0716
#   Loading A[1][3] (Bank 3, Addr 1) with fcf8
#   Loading A[2][0] (Bank 0, Addr 2) with 3459
#   Loading A[2][1] (Bank 1, Addr 2) with 751e
#   Loading A[2][2] (Bank 2, Addr 2) with 1d6c
#   Loading A[2][3] (Bank 3, Addr 2) with 711a
#   Loading A[3][0] (Bank 0, Addr 3) with 49b9
#   Loading A[3][1] (Bank 1, Addr 3) with 0ab1
#   Loading A[3][2] (Bank 2, Addr 3) with 03e4
#   Loading A[3][3] (Bank 3, Addr 3) with f55b
#   Loading B[0][0] (Bank 0, Addr 0) with d361
#   Loading B[0][1] (Bank 1, Addr 0) with f158
#   Loading B[0][2] (Bank 2, Addr 0) with 0f16
#   Loading B[0][3] (Bank 3, Addr 0) with f547
#   Loading B[1][0] (Bank 0, Addr 1) with c6a6
#   Loading B[1][1] (Bank 1, Addr 1) with f123
#   Loading B[1][2] (Bank 2, Addr 1) with 2050
#   Loading B[1][3] (Bank 3, Addr 1) with 7c77
#   Loading B[2][0] (Bank 0, Addr 2) with d32c
#   Loading B[2][1] (Bank 1, Addr 2) with f6aa
#   Loading B[2][2] (Bank 2, Addr 2) with 1f81
#   Loading B[2][3] (Bank 3, Addr 2) with 7e77
#   Loading B[3][0] (Bank 0, Addr 3) with a0e2
#   Loading B[3][1] (Bank 1, Addr 3) with 6104
#   Loading B[3][2] (Bank 2, Addr 3) with 8b3d
#   Loading B[3][3] (Bank 3, Addr 3) with e451
# Matrix loading complete.
# @            81535000 Simulating controller signals to execute multiplication...
# @81555000: Starting input feeding sequence...
# @81555000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @81566000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 3: pe_start_in=0, pe_valid_in_in=1, pe_last_in=1
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            81845000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 99...
# Test Case 99 FAIL: C[0][0] mismatch! Actual 0, Expected 107fe9f25
# Test Case 99 FAIL: C[0][1] mismatch! Actual x, Expected 1182d2bff
# Test Case 99 FAIL: C[0][2] mismatch! Actual x, Expected 03e42c0ec
# Test Case 99 FAIL: C[0][3] mismatch! Actual x, Expected 112f6af20
# Test Case 99 FAIL: C[1][0] mismatch! Actual x, Expected 0eea3a3a0
# Test Case 99 FAIL: C[1][1] mismatch! Actual x, Expected 1128b9f27
# Test Case 99 FAIL: C[1][2] mismatch! Actual x, Expected 021e0aa4b
# Test Case 99 FAIL: C[1][3] mismatch! Actual x, Expected 0c90e4486
# Test Case 99 FAIL: C[2][0] mismatch! Actual x, Expected 0b535c6af
# Test Case 99 FAIL: C[2][1] mismatch! Actual x, Expected 0ce9dbdd2
# Test Case 99 FAIL: C[2][2] mismatch! Actual x, Expected 01143d682
# Test Case 99 FAIL: C[2][3] mismatch! Actual x, Expected 0c2572e77
# Test Case 99 FAIL: C[3][0] mismatch! Actual x, Expected 22c18da83
# Test Case 99 FAIL: C[3][1] mismatch! Actual x, Expected 23878ec50
# Test Case 99 FAIL: C[3][2] mismatch! Actual x, Expected 0bb500cb7
# Test Case 99 FAIL: C[3][3] mismatch! Actual x, Expected 21002468c
# Test Case 99 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# --------------------------------------------------
#  Testbench FAILED with x errors!
# --------------------------------------------------
# ** Note: $finish    : /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v(241)
#    Time: 82016 ns  Iteration: 0  Instance: /datapath_tb
# 1
# Break in Module datapath_tb at /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v line 241
quit -sim
# End time: 11:12:54 on May 16,2025, Elapsed time: 0:36:53
# Errors: 0, Warnings: 23
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 11:13:07 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/pe_row_gen[3]/pe_col_gen[3]/pe_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @               20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @              355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @375000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @              655000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual x, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @              826000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @             1165000 Simulating controller signals to execute multiplication...
# @1185000: Starting input feeding sequence...
# @1185000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1196000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             1465000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual x, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual x, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual x, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual x, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual x, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual x, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual x, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual x, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual x, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual x, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual x, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual x, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual x, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual x, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual x, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual x, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             1636000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @             1975000 Simulating controller signals to execute multiplication...
# @1995000: Starting input feeding sequence...
# @1995000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             2275000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual x, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual x, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual x, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual x, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual x, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual x, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual x, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual x, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual x, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual x, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual x, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual x, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual x, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual x, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual x, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual x, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             2446000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @             2785000 Simulating controller signals to execute multiplication...
# @2805000: Starting input feeding sequence...
# @2805000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2816000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3085000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual x, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual x, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual x, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual x, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual x, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual x, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual x, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual x, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual x, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual x, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual x, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual x, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual x, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual x, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual x, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual x, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             3256000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @             3595000 Simulating controller signals to execute multiplication...
# @3615000: Starting input feeding sequence...
# @3615000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3626000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3895000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual x, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual x, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual x, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual x, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual x, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual x, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual x, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual x, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual x, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual x, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual x, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual x, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual x, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual x, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual x, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual x, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4066000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @             4405000 Simulating controller signals to execute multiplication...
# @4425000: Starting input feeding sequence...
# @4425000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4436000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             4705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual x, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual x, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual x, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual x, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual x, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual x, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual x, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual x, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual x, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual x, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual x, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual x, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual x, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual x, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual x, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual x, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @             5215000 Simulating controller signals to execute multiplication...
# @5235000: Starting input feeding sequence...
# @5235000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5515000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual x, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual x, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual x, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual x, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual x, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual x, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual x, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual x, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual x, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual x, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual x, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual x, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual x, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual x, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual x, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual x, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             5686000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @             6025000 Simulating controller signals to execute multiplication...
# @6045000: Starting input feeding sequence...
# @6045000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6056000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             6325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual x, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual x, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual x, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual x, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual x, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual x, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual x, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual x, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual x, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual x, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual x, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual x, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual x, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual x, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual x, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual x, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @             6835000 Simulating controller signals to execute multiplication...
# @6855000: Starting input feeding sequence...
# @6855000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             7135000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual x, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual x, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual x, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual x, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual x, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual x, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual x, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual x, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual x, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual x, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual x, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual x, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual x, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual x, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual x, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual x, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             7306000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @             7645000 Simulating controller signals to execute multiplication...
# @7665000: Starting input feeding sequence...
# @7665000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7676000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             7945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual x, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual x, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual x, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual x, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual x, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual x, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual x, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual x, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual x, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual x, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual x, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual x, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual x, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual x, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual x, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual x, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             8116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @             8455000 Simulating controller signals to execute multiplication...
# @8475000: Starting input feeding sequence...
# @8475000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8755000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual x, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual x, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual x, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual x, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual x, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual x, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual x, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual x, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual x, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual x, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual x, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual x, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual x, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual x, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual x, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual x, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             8926000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @             9265000 Simulating controller signals to execute multiplication...
# @9285000: Starting input feeding sequence...
# @9285000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9296000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             9565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual x, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual x, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual x, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual x, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual x, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual x, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual x, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual x, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual x, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual x, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual x, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual x, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual x, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual x, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual x, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual x, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @            10075000 Simulating controller signals to execute multiplication...
# @10095000: Starting input feeding sequence...
# @10095000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10106000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            10375000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual x, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual x, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual x, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual x, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual x, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual x, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual x, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual x, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual x, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual x, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual x, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual x, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual x, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual x, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual x, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual x, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            10546000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @            10885000 Simulating controller signals to execute multiplication...
# @10905000: Starting input feeding sequence...
# @10905000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10916000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11185000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual x, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual x, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual x, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual x, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual x, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual x, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual x, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual x, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual x, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual x, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual x, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual x, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual x, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual x, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual x, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual x, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            11356000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @            11695000 Simulating controller signals to execute multiplication...
# @11715000: Starting input feeding sequence...
# @11715000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11995000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual x, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual x, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual x, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual x, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual x, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual x, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual x, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual x, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual x, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual x, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual x, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual x, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual x, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual x, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual x, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual x, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12166000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @            12505000 Simulating controller signals to execute multiplication...
# @12525000: Starting input feeding sequence...
# @12525000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12536000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual x, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual x, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual x, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual x, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual x, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual x, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual x, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual x, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual x, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual x, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual x, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual x, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual x, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual x, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual x, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual x, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12976000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 1, Addr 0) with 0cc3
#   Loading A[0][2] (Bank 2, Addr 0) with 2d23
#   Loading A[0][3] (Bank 3, Addr 0) with c654
#   Loading A[1][0] (Bank 0, Addr 1) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 2, Addr 1) with e87e
#   Loading A[1][3] (Bank 3, Addr 1) with 6d0d
#   Loading A[2][0] (Bank 0, Addr 2) with a8cf
#   Loading A[2][1] (Bank 1, Addr 2) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 3, Addr 2) with f0ac
#   Loading A[3][0] (Bank 0, Addr 3) with a4d5
#   Loading A[3][1] (Bank 1, Addr 3) with 337b
#   Loading A[3][2] (Bank 2, Addr 3) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @            13315000 Simulating controller signals to execute multiplication...
# @13335000: Starting input feeding sequence...
# @13335000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            13615000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual x, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual x, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual x, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual x, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual x, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual x, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual x, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual x, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual x, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual x, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual x, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual x, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual x, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual x, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual x, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual x, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13786000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 1, Addr 0) with 33ae
#   Loading A[0][2] (Bank 2, Addr 0) with 1949
#   Loading A[0][3] (Bank 3, Addr 0) with c2ac
#   Loading A[1][0] (Bank 0, Addr 1) with 74ca
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 2, Addr 1) with 5b33
#   Loading A[1][3] (Bank 3, Addr 1) with 086c
#   Loading A[2][0] (Bank 0, Addr 2) with 1549
#   Loading A[2][1] (Bank 1, Addr 2) with 602f
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 3, Addr 2) with bc83
#   Loading A[3][0] (Bank 0, Addr 3) with a3b9
#   Loading A[3][1] (Bank 1, Addr 3) with bfbe
#   Loading A[3][2] (Bank 2, Addr 3) with 0884
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[0][1] (Bank 1, Addr 0) with 4904
#   Loading B[0][2] (Bank 2, Addr 0) with 8a0c
#   Loading B[0][3] (Bank 3, Addr 0) with b0ba
#   Loading B[1][0] (Bank 0, Addr 1) with 4193
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[1][2] (Bank 2, Addr 1) with b102
#   Loading B[1][3] (Bank 3, Addr 1) with 0e75
#   Loading B[2][0] (Bank 0, Addr 2) with c8a1
#   Loading B[2][1] (Bank 1, Addr 2) with b09f
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[2][3] (Bank 3, Addr 2) with 4b2b
#   Loading B[3][0] (Bank 0, Addr 3) with b8e2
#   Loading B[3][1] (Bank 1, Addr 3) with a481
#   Loading B[3][2] (Bank 2, Addr 3) with 2498
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @            14125000 Simulating controller signals to execute multiplication...
# @14145000: Starting input feeding sequence...
# @14145000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14156000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            14425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual x, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual x, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual x, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual x, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual x, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual x, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual x, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual x, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual x, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual x, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual x, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual x, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual x, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual x, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual x, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual x, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            14596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 1, Addr 0) with 4374
#   Loading A[0][2] (Bank 2, Addr 0) with d8de
#   Loading A[0][3] (Bank 3, Addr 0) with 0bcd
#   Loading A[1][0] (Bank 0, Addr 1) with ebff
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 2, Addr 1) with 5315
#   Loading A[1][3] (Bank 3, Addr 1) with 377a
#   Loading A[2][0] (Bank 0, Addr 2) with 881b
#   Loading A[2][1] (Bank 1, Addr 2) with 3ecf
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 3, Addr 2) with 5223
#   Loading A[3][0] (Bank 0, Addr 3) with 87cd
#   Loading A[3][1] (Bank 1, Addr 3) with 2a6f
#   Loading A[3][2] (Bank 2, Addr 3) with c889
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[0][1] (Bank 1, Addr 0) with 00f3
#   Loading B[0][2] (Bank 2, Addr 0) with a35c
#   Loading B[0][3] (Bank 3, Addr 0) with aa65
#   Loading B[1][0] (Bank 0, Addr 1) with 222b
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[1][2] (Bank 2, Addr 1) with da28
#   Loading B[1][3] (Bank 3, Addr 1) with eaa8
#   Loading B[2][0] (Bank 0, Addr 2) with ff56
#   Loading B[2][1] (Bank 1, Addr 2) with 6ba0
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[2][3] (Bank 3, Addr 2) with 90d1
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc4
#   Loading B[3][1] (Bank 1, Addr 3) with 671c
#   Loading B[3][2] (Bank 2, Addr 3) with ba64
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @            14935000 Simulating controller signals to execute multiplication...
# @14955000: Starting input feeding sequence...
# @14955000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            15235000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual x, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual x, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual x, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual x, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual x, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual x, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual x, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual x, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual x, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual x, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual x, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual x, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual x, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual x, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual x, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual x, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            15406000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 1, Addr 0) with e7d1
#   Loading A[0][2] (Bank 2, Addr 0) with 03a8
#   Loading A[0][3] (Bank 3, Addr 0) with 97d0
#   Loading A[1][0] (Bank 0, Addr 1) with 9a37
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 2, Addr 1) with cb14
#   Loading A[1][3] (Bank 3, Addr 1) with 916b
#   Loading A[2][0] (Bank 0, Addr 2) with 3e85
#   Loading A[2][1] (Bank 1, Addr 2) with 83c8
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 3, Addr 2) with ead0
#   Loading A[3][0] (Bank 0, Addr 3) with ac60
#   Loading A[3][1] (Bank 1, Addr 3) with 5c5f
#   Loading A[3][2] (Bank 2, Addr 3) with 3852
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[0][1] (Bank 1, Addr 0) with ad8e
#   Loading B[0][2] (Bank 2, Addr 0) with 9a34
#   Loading B[0][3] (Bank 3, Addr 0) with 7f8e
#   Loading B[1][0] (Bank 0, Addr 1) with 5d1a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[1][2] (Bank 2, Addr 1) with 9ffd
#   Loading B[1][3] (Bank 3, Addr 1) with 6841
#   Loading B[2][0] (Bank 0, Addr 2) with 3375
#   Loading B[2][1] (Bank 1, Addr 2) with 6107
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[2][3] (Bank 3, Addr 2) with 6583
#   Loading B[3][0] (Bank 0, Addr 3) with db9d
#   Loading B[3][1] (Bank 1, Addr 3) with 492a
#   Loading B[3][2] (Bank 2, Addr 3) with 66cd
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @            15745000 Simulating controller signals to execute multiplication...
# @15765000: Starting input feeding sequence...
# @15765000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15776000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            16045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual x, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual x, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual x, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual x, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual x, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual x, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual x, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual x, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual x, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual x, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual x, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual x, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual x, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual x, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual x, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual x, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            16216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 1, Addr 0) with 3fa9
#   Loading A[0][2] (Bank 2, Addr 0) with 6ddd
#   Loading A[0][3] (Bank 3, Addr 0) with d7cf
#   Loading A[1][0] (Bank 0, Addr 1) with 6b9d
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 2, Addr 1) with aafa
#   Loading A[1][3] (Bank 3, Addr 1) with d2a3
#   Loading A[2][0] (Bank 0, Addr 2) with 8dec
#   Loading A[2][1] (Bank 1, Addr 2) with e147
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 3, Addr 2) with 1b9c
#   Loading A[3][0] (Bank 0, Addr 3) with 3fce
#   Loading A[3][1] (Bank 1, Addr 3) with 23f2
#   Loading A[3][2] (Bank 2, Addr 3) with 7c98
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[0][1] (Bank 1, Addr 0) with 08ee
#   Loading B[0][2] (Bank 2, Addr 0) with 33d2
#   Loading B[0][3] (Bank 3, Addr 0) with 6b1f
#   Loading B[1][0] (Bank 0, Addr 1) with 1532
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[1][2] (Bank 2, Addr 1) with b4e2
#   Loading B[1][3] (Bank 3, Addr 1) with 4267
#   Loading B[2][0] (Bank 0, Addr 2) with 9a2e
#   Loading B[2][1] (Bank 1, Addr 2) with 67b5
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 197e
#   Loading B[3][0] (Bank 0, Addr 3) with 72d3
#   Loading B[3][1] (Bank 1, Addr 3) with 030b
#   Loading B[3][2] (Bank 2, Addr 3) with 9c52
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @            16555000 Simulating controller signals to execute multiplication...
# @16575000: Starting input feeding sequence...
# @16575000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            16855000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual x, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual x, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual x, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual x, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual x, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual x, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual x, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual x, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual x, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual x, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual x, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual x, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual x, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual x, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual x, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual x, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            17026000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 1, Addr 0) with 7631
#   Loading A[0][2] (Bank 2, Addr 0) with 08e8
#   Loading A[0][3] (Bank 3, Addr 0) with d98c
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 2, Addr 1) with 0b94
#   Loading A[1][3] (Bank 3, Addr 1) with a1d8
#   Loading A[2][0] (Bank 0, Addr 2) with be24
#   Loading A[2][1] (Bank 1, Addr 2) with 3dab
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 3, Addr 2) with b4a5
#   Loading A[3][0] (Bank 0, Addr 3) with 766e
#   Loading A[3][1] (Bank 1, Addr 3) with 5e6d
#   Loading A[3][2] (Bank 2, Addr 3) with bd75
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[0][1] (Bank 1, Addr 0) with 536a
#   Loading B[0][2] (Bank 2, Addr 0) with 8a59
#   Loading B[0][3] (Bank 3, Addr 0) with 3372
#   Loading B[1][0] (Bank 0, Addr 1) with ccbb
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[1][2] (Bank 2, Addr 1) with 5dd6
#   Loading B[1][3] (Bank 3, Addr 1) with 9215
#   Loading B[2][0] (Bank 0, Addr 2) with 56b7
#   Loading B[2][1] (Bank 1, Addr 2) with f0d1
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 21d0
#   Loading B[3][0] (Bank 0, Addr 3) with 11fc
#   Loading B[3][1] (Bank 1, Addr 3) with 1be3
#   Loading B[3][2] (Bank 2, Addr 3) with 54d6
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @            17365000 Simulating controller signals to execute multiplication...
# @17385000: Starting input feeding sequence...
# @17385000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17396000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual x, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual x, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual x, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual x, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual x, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual x, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual x, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual x, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual x, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual x, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual x, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual x, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual x, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual x, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual x, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual x, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            17836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 1, Addr 0) with 1713
#   Loading A[0][2] (Bank 2, Addr 0) with fc9d
#   Loading A[0][3] (Bank 3, Addr 0) with d833
#   Loading A[1][0] (Bank 0, Addr 1) with 893b
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 2, Addr 1) with a562
#   Loading A[1][3] (Bank 3, Addr 1) with 4ca0
#   Loading A[2][0] (Bank 0, Addr 2) with 192d
#   Loading A[2][1] (Bank 1, Addr 2) with 4bfa
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 3, Addr 2) with 295a
#   Loading A[3][0] (Bank 0, Addr 3) with 783f
#   Loading A[3][1] (Bank 1, Addr 3) with 025b
#   Loading A[3][2] (Bank 2, Addr 3) with 5e47
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[0][1] (Bank 1, Addr 0) with f807
#   Loading B[0][2] (Bank 2, Addr 0) with 18a0
#   Loading B[0][3] (Bank 3, Addr 0) with c97d
#   Loading B[1][0] (Bank 0, Addr 1) with d1a4
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[1][2] (Bank 2, Addr 1) with b713
#   Loading B[1][3] (Bank 3, Addr 1) with e42e
#   Loading B[2][0] (Bank 0, Addr 2) with cd53
#   Loading B[2][1] (Bank 1, Addr 2) with 0a61
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[2][3] (Bank 3, Addr 2) with cd4b
#   Loading B[3][0] (Bank 0, Addr 3) with 1489
#   Loading B[3][1] (Bank 1, Addr 3) with 7ec8
#   Loading B[3][2] (Bank 2, Addr 3) with d878
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @            18175000 Simulating controller signals to execute multiplication...
# @18195000: Starting input feeding sequence...
# @18195000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            18475000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual x, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual x, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual x, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual x, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual x, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual x, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual x, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual x, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual x, Expected 16bea50ee
# Test Case 22 FAIL: C[2][1] mismatch! Actual x, Expected 1b4a3f648
# Test Case 22 FAIL: C[2][2] mismatch! Actual x, Expected 17ed8a09a
# Test Case 22 FAIL: C[2][3] mismatch! Actual x, Expected 227590bcd
# Test Case 22 FAIL: C[3][0] mismatch! Actual x, Expected 0906811ac
# Test Case 22 FAIL: C[3][1] mismatch! Actual x, Expected 127c3c8ff
# Test Case 22 FAIL: C[3][2] mismatch! Actual x, Expected 08f952008
# Test Case 22 FAIL: C[3][3] mismatch! Actual x, Expected 1206c5ac1
# Test Case 22 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 23 of 100
# ===================================================
# Reading test case 23:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18646000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9208
#   Loading A[0][1] (Bank 1, Addr 0) with 8d91
#   Loading A[0][2] (Bank 2, Addr 0) with 0f91
#   Loading A[0][3] (Bank 3, Addr 0) with 4324
#   Loading A[1][0] (Bank 0, Addr 1) with 1893
#   Loading A[1][1] (Bank 1, Addr 1) with e01e
#   Loading A[1][2] (Bank 2, Addr 1) with 7421
#   Loading A[1][3] (Bank 3, Addr 1) with 0c24
#   Loading A[2][0] (Bank 0, Addr 2) with 68d0
#   Loading A[2][1] (Bank 1, Addr 2) with ec47
#   Loading A[2][2] (Bank 2, Addr 2) with 6ef2
#   Loading A[2][3] (Bank 3, Addr 2) with 26a8
#   Loading A[3][0] (Bank 0, Addr 3) with 5427
#   Loading A[3][1] (Bank 1, Addr 3) with b764
#   Loading A[3][2] (Bank 2, Addr 3) with bc95
#   Loading A[3][3] (Bank 3, Addr 3) with 5dea
#   Loading B[0][0] (Bank 0, Addr 0) with 128b
#   Loading B[0][1] (Bank 1, Addr 0) with eb07
#   Loading B[0][2] (Bank 2, Addr 0) with ba48
#   Loading B[0][3] (Bank 3, Addr 0) with 9e00
#   Loading B[1][0] (Bank 0, Addr 1) with efbc
#   Loading B[1][1] (Bank 1, Addr 1) with db1c
#   Loading B[1][2] (Bank 2, Addr 1) with 7aba
#   Loading B[1][3] (Bank 3, Addr 1) with 1968
#   Loading B[2][0] (Bank 0, Addr 2) with d9d0
#   Loading B[2][1] (Bank 1, Addr 2) with 7a26
#   Loading B[2][2] (Bank 2, Addr 2) with 39df
#   Loading B[2][3] (Bank 3, Addr 2) with 6ed6
#   Loading B[3][0] (Bank 0, Addr 3) with b124
#   Loading B[3][1] (Bank 1, Addr 3) with cd33
#   Loading B[3][2] (Bank 2, Addr 3) with 6a50
#   Loading B[3][3] (Bank 3, Addr 3) with 0583
# Matrix loading complete.
# @            18985000 Simulating controller signals to execute multiplication...
# @19005000: Starting input feeding sequence...
# @19005000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19016000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            19285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 23...
# Test Case 23 FAIL: C[0][0] mismatch! Actual x, Expected 0b4ff68c8
# Test Case 23 FAIL: C[0][1] mismatch! Actual x, Expected 1109074f1
# Test Case 23 FAIL: C[0][2] mismatch! Actual x, Expected 0b0aeda6e
# Test Case 23 FAIL: C[0][3] mismatch! Actual x, Expected 08bc2178d
# Test Case 23 FAIL: C[1][0] mismatch! Actual x, Expected 2240fbe83
# Test Case 23 FAIL: C[1][1] mismatch! Actual x, Expected 24586acb5
# Test Case 23 FAIL: C[1][2] mismatch! Actual x, Expected 15406a4ad
# Test Case 23 FAIL: C[1][3] mismatch! Actual x, Expected 0d7dc49b6
# Test Case 23 FAIL: C[2][0] mismatch! Actual x, Expected 14ec38d8b
# Test Case 23 FAIL: C[2][1] mismatch! Actual x, Expected 13dc8252e
# Test Case 23 FAIL: C[2][2] mismatch! Actual x, Expected 0aa64fc20
# Test Case 23 FAIL: C[2][3] mismatch! Actual x, Expected 0493a07f3
# Test Case 23 FAIL: C[3][0] mismatch! Actual x, Expected 0721b5264
# Test Case 23 FAIL: C[3][1] mismatch! Actual x, Expected 0a5c0e67a
# Test Case 23 FAIL: C[3][2] mismatch! Actual x, Expected 0666a55c0
# Test Case 23 FAIL: C[3][3] mismatch! Actual x, Expected 03d66cbce
# Test Case 23 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 24 of 100
# ===================================================
# Reading test case 24:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            19456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0891
#   Loading A[0][1] (Bank 1, Addr 0) with 3d27
#   Loading A[0][2] (Bank 2, Addr 0) with d5c0
#   Loading A[0][3] (Bank 3, Addr 0) with 7093
#   Loading A[1][0] (Bank 0, Addr 1) with c03d
#   Loading A[1][1] (Bank 1, Addr 1) with bbba
#   Loading A[1][2] (Bank 2, Addr 1) with e629
#   Loading A[1][3] (Bank 3, Addr 1) with a341
#   Loading A[2][0] (Bank 0, Addr 2) with a224
#   Loading A[2][1] (Bank 1, Addr 2) with b475
#   Loading A[2][2] (Bank 2, Addr 2) with 71ee
#   Loading A[2][3] (Bank 3, Addr 2) with cd06
#   Loading A[3][0] (Bank 0, Addr 3) with c965
#   Loading A[3][1] (Bank 1, Addr 3) with 0efe
#   Loading A[3][2] (Bank 2, Addr 3) with e79e
#   Loading A[3][3] (Bank 3, Addr 3) with d9c1
#   Loading B[0][0] (Bank 0, Addr 0) with b3fa
#   Loading B[0][1] (Bank 1, Addr 0) with 3827
#   Loading B[0][2] (Bank 2, Addr 0) with 9810
#   Loading B[0][3] (Bank 3, Addr 0) with 97ce
#   Loading B[1][0] (Bank 0, Addr 1) with ffef
#   Loading B[1][1] (Bank 1, Addr 1) with dc10
#   Loading B[1][2] (Bank 2, Addr 1) with 923e
#   Loading B[1][3] (Bank 3, Addr 1) with 3828
#   Loading B[2][0] (Bank 0, Addr 2) with a1be
#   Loading B[2][1] (Bank 1, Addr 2) with 17d2
#   Loading B[2][2] (Bank 2, Addr 2) with 81fb
#   Loading B[2][3] (Bank 3, Addr 2) with 4261
#   Loading B[3][0] (Bank 0, Addr 3) with 41fd
#   Loading B[3][1] (Bank 1, Addr 3) with 200a
#   Loading B[3][2] (Bank 2, Addr 3) with bc64
#   Loading B[3][3] (Bank 3, Addr 3) with c89a
# Matrix loading complete.
# @            19795000 Simulating controller signals to execute multiplication...
# @19815000: Starting input feeding sequence...
# @19815000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19826000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            20095000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 24...
# Test Case 24 FAIL: C[0][0] mismatch! Actual x, Expected 16090a516
# Test Case 24 FAIL: C[0][1] mismatch! Actual x, Expected 0cf6c3161
# Test Case 24 FAIL: C[0][2] mismatch! Actual x, Expected 1596fee96
# Test Case 24 FAIL: C[0][3] mismatch! Actual x, Expected 0f71a939c
# Test Case 24 FAIL: C[1][0] mismatch! Actual x, Expected 15c8c5898
# Test Case 24 FAIL: C[1][1] mismatch! Actual x, Expected 0c1744d77
# Test Case 24 FAIL: C[1][2] mismatch! Actual x, Expected 0f638cc6b
# Test Case 24 FAIL: C[1][3] mismatch! Actual x, Expected 087fb3a93
# Test Case 24 FAIL: C[2][0] mismatch! Actual x, Expected 2000ef691
# Test Case 24 FAIL: C[2][1] mismatch! Actual x, Expected 11c52d238
# Test Case 24 FAIL: C[2][2] mismatch! Actual x, Expected 1e6bda000
# Test Case 24 FAIL: C[2][3] mismatch! Actual x, Expected 184467b22
# Test Case 24 FAIL: C[3][0] mismatch! Actual x, Expected 1ac05066e
# Test Case 24 FAIL: C[3][1] mismatch! Actual x, Expected 0d35bb8eb
# Test Case 24 FAIL: C[3][2] mismatch! Actual x, Expected 1a878c334
# Test Case 24 FAIL: C[3][3] mismatch! Actual x, Expected 1465c06d2
# Test Case 24 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 25 of 100
# ===================================================
# Reading test case 25:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            20266000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d286
#   Loading A[0][1] (Bank 1, Addr 0) with 4abb
#   Loading A[0][2] (Bank 2, Addr 0) with 7dc0
#   Loading A[0][3] (Bank 3, Addr 0) with bdd5
#   Loading A[1][0] (Bank 0, Addr 1) with 6b83
#   Loading A[1][1] (Bank 1, Addr 1) with 0021
#   Loading A[1][2] (Bank 2, Addr 1) with 60e7
#   Loading A[1][3] (Bank 3, Addr 1) with 9c2b
#   Loading A[2][0] (Bank 0, Addr 2) with 50a4
#   Loading A[2][1] (Bank 1, Addr 2) with fed1
#   Loading A[2][2] (Bank 2, Addr 2) with c6a9
#   Loading A[2][3] (Bank 3, Addr 2) with 5739
#   Loading A[3][0] (Bank 0, Addr 3) with bef9
#   Loading A[3][1] (Bank 1, Addr 3) with b753
#   Loading A[3][2] (Bank 2, Addr 3) with a8ee
#   Loading A[3][3] (Bank 3, Addr 3) with a16b
#   Loading B[0][0] (Bank 0, Addr 0) with 704d
#   Loading B[0][1] (Bank 1, Addr 0) with 8ab4
#   Loading B[0][2] (Bank 2, Addr 0) with 1bfa
#   Loading B[0][3] (Bank 3, Addr 0) with 354a
#   Loading B[1][0] (Bank 0, Addr 1) with 78c2
#   Loading B[1][1] (Bank 1, Addr 1) with 376c
#   Loading B[1][2] (Bank 2, Addr 1) with ced8
#   Loading B[1][3] (Bank 3, Addr 1) with 78de
#   Loading B[2][0] (Bank 0, Addr 2) with d2b2
#   Loading B[2][1] (Bank 1, Addr 2) with c525
#   Loading B[2][2] (Bank 2, Addr 2) with 038b
#   Loading B[2][3] (Bank 3, Addr 2) with 6129
#   Loading B[3][0] (Bank 0, Addr 3) with 03d4
#   Loading B[3][1] (Bank 1, Addr 3) with 6cff
#   Loading B[3][2] (Bank 2, Addr 3) with 63f3
#   Loading B[3][3] (Bank 3, Addr 3) with 1a9d
# Matrix loading complete.
# @            20605000 Simulating controller signals to execute multiplication...
# @20625000: Starting input feeding sequence...
# @20625000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20636000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            20905000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 25...
# Test Case 25 FAIL: C[0][0] mismatch! Actual x, Expected 0d44a7ed0
# Test Case 25 FAIL: C[0][1] mismatch! Actual x, Expected 118bfe437
# Test Case 25 FAIL: C[0][2] mismatch! Actual x, Expected 0b98d1fcb
# Test Case 25 FAIL: C[0][3] mismatch! Actual x, Expected 0910ab34f
# Test Case 25 FAIL: C[1][0] mismatch! Actual x, Expected 0f54e444f
# Test Case 25 FAIL: C[1][1] mismatch! Actual x, Expected 13acdc74a
# Test Case 25 FAIL: C[1][2] mismatch! Actual x, Expected 0535f48ba
# Test Case 25 FAIL: C[1][3] mismatch! Actual x, Expected 08362c20c
# Test Case 25 FAIL: C[2][0] mismatch! Actual x, Expected 10ae6fc68
# Test Case 25 FAIL: C[2][1] mismatch! Actual x, Expected 13a05ddf3
# Test Case 25 FAIL: C[2][2] mismatch! Actual x, Expected 0a0bdef15
# Test Case 25 FAIL: C[2][3] mismatch! Actual x, Expected 0a4e309d9
# Test Case 25 FAIL: C[3][0] mismatch! Actual x, Expected 0e7241ee5
# Test Case 25 FAIL: C[3][1] mismatch! Actual x, Expected 1108ed0ba
# Test Case 25 FAIL: C[3][2] mismatch! Actual x, Expected 0d327d7ce
# Test Case 25 FAIL: C[3][3] mismatch! Actual x, Expected 0a321fb9c
# Test Case 25 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 26 of 100
# ===================================================
# Reading test case 26:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            21076000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4b67
#   Loading A[0][1] (Bank 1, Addr 0) with fb4b
#   Loading A[0][2] (Bank 2, Addr 0) with 6f40
#   Loading A[0][3] (Bank 3, Addr 0) with ce69
#   Loading A[1][0] (Bank 0, Addr 1) with edf7
#   Loading A[1][1] (Bank 1, Addr 1) with c739
#   Loading A[1][2] (Bank 2, Addr 1) with 656e
#   Loading A[1][3] (Bank 3, Addr 1) with 5112
#   Loading A[2][0] (Bank 0, Addr 2) with c431
#   Loading A[2][1] (Bank 1, Addr 2) with e51a
#   Loading A[2][2] (Bank 2, Addr 2) with 6f39
#   Loading A[2][3] (Bank 3, Addr 2) with 8c92
#   Loading A[3][0] (Bank 0, Addr 3) with 0830
#   Loading A[3][1] (Bank 1, Addr 3) with a15d
#   Loading A[3][2] (Bank 2, Addr 3) with 6583
#   Loading A[3][3] (Bank 3, Addr 3) with a0c0
#   Loading B[0][0] (Bank 0, Addr 0) with 93d8
#   Loading B[0][1] (Bank 1, Addr 0) with a69c
#   Loading B[0][2] (Bank 2, Addr 0) with 0fef
#   Loading B[0][3] (Bank 3, Addr 0) with ab35
#   Loading B[1][0] (Bank 0, Addr 1) with ba68
#   Loading B[1][1] (Bank 1, Addr 1) with 5ccb
#   Loading B[1][2] (Bank 2, Addr 1) with 4394
#   Loading B[1][3] (Bank 3, Addr 1) with a636
#   Loading B[2][0] (Bank 0, Addr 2) with bffa
#   Loading B[2][1] (Bank 1, Addr 2) with ecfd
#   Loading B[2][2] (Bank 2, Addr 2) with c7b5
#   Loading B[2][3] (Bank 3, Addr 2) with 366f
#   Loading B[3][0] (Bank 0, Addr 3) with e942
#   Loading B[3][1] (Bank 1, Addr 3) with e35f
#   Loading B[3][2] (Bank 2, Addr 3) with dcd0
#   Loading B[3][3] (Bank 3, Addr 3) with 251d
# Matrix loading complete.
# @            21415000 Simulating controller signals to execute multiplication...
# @21435000: Starting input feeding sequence...
# @21435000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21715000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 26...
# Test Case 26 FAIL: C[0][0] mismatch! Actual x, Expected 17367d97a
# Test Case 26 FAIL: C[0][1] mismatch! Actual x, Expected 14438ddde
# Test Case 26 FAIL: C[0][2] mismatch! Actual x, Expected 0e39f5a9a
# Test Case 26 FAIL: C[0][3] mismatch! Actual x, Expected 0f7d50a1c
# Test Case 26 FAIL: C[1][0] mismatch! Actual x, Expected 26105d1ce
# Test Case 26 FAIL: C[1][1] mismatch! Actual x, Expected 24f29f51c
# Test Case 26 FAIL: C[1][2] mismatch! Actual x, Expected 1822350eb
# Test Case 26 FAIL: C[1][3] mismatch! Actual x, Expected 17183a65c
# Test Case 26 FAIL: C[2][0] mismatch! Actual x, Expected 13a014a20
# Test Case 26 FAIL: C[2][1] mismatch! Actual x, Expected 12e4a8d2c
# Test Case 26 FAIL: C[2][2] mismatch! Actual x, Expected 0d0060b15
# Test Case 26 FAIL: C[2][3] mismatch! Actual x, Expected 0b29f3002
# Test Case 26 FAIL: C[3][0] mismatch! Actual x, Expected 1ae1edcfc
# Test Case 26 FAIL: C[3][1] mismatch! Actual x, Expected 1b4a00acc
# Test Case 26 FAIL: C[3][2] mismatch! Actual x, Expected 11a8feca9
# Test Case 26 FAIL: C[3][3] mismatch! Actual x, Expected 0f3df5997
# Test Case 26 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 27 of 100
# ===================================================
# Reading test case 27:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            21886000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ea13
#   Loading A[0][1] (Bank 1, Addr 0) with a7a7
#   Loading A[0][2] (Bank 2, Addr 0) with 6691
#   Loading A[0][3] (Bank 3, Addr 0) with ff78
#   Loading A[1][0] (Bank 0, Addr 1) with f2c9
#   Loading A[1][1] (Bank 1, Addr 1) with f549
#   Loading A[1][2] (Bank 2, Addr 1) with b522
#   Loading A[1][3] (Bank 3, Addr 1) with c682
#   Loading A[2][0] (Bank 0, Addr 2) with a606
#   Loading A[2][1] (Bank 1, Addr 2) with ec08
#   Loading A[2][2] (Bank 2, Addr 2) with de49
#   Loading A[2][3] (Bank 3, Addr 2) with 68b2
#   Loading A[3][0] (Bank 0, Addr 3) with fa15
#   Loading A[3][1] (Bank 1, Addr 3) with 89a7
#   Loading A[3][2] (Bank 2, Addr 3) with 0e94
#   Loading A[3][3] (Bank 3, Addr 3) with 13e4
#   Loading B[0][0] (Bank 0, Addr 0) with fb22
#   Loading B[0][1] (Bank 1, Addr 0) with 6717
#   Loading B[0][2] (Bank 2, Addr 0) with 8224
#   Loading B[0][3] (Bank 3, Addr 0) with 3ac7
#   Loading B[1][0] (Bank 0, Addr 1) with 5c4a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ea
#   Loading B[1][2] (Bank 2, Addr 1) with db47
#   Loading B[1][3] (Bank 3, Addr 1) with 9839
#   Loading B[2][0] (Bank 0, Addr 2) with 3353
#   Loading B[2][1] (Bank 1, Addr 2) with 7950
#   Loading B[2][2] (Bank 2, Addr 2) with f60f
#   Loading B[2][3] (Bank 3, Addr 2) with 5d81
#   Loading B[3][0] (Bank 0, Addr 3) with bee6
#   Loading B[3][1] (Bank 1, Addr 3) with ba4b
#   Loading B[3][2] (Bank 2, Addr 3) with 23da
#   Loading B[3][3] (Bank 3, Addr 3) with 3efe
# Matrix loading complete.
# @            22225000 Simulating controller signals to execute multiplication...
# @22245000: Starting input feeding sequence...
# @22245000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @22256000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            22525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 27...
# Test Case 27 FAIL: C[0][0] mismatch! Actual x, Expected 218eb6c70
# Test Case 27 FAIL: C[0][1] mismatch! Actual x, Expected 1c2a05a76
# Test Case 27 FAIL: C[0][2] mismatch! Actual x, Expected 2098d2ca7
# Test Case 27 FAIL: C[0][3] mismatch! Actual x, Expected 14048b762
# Test Case 27 FAIL: C[1][0] mismatch! Actual x, Expected 192dbe0ea
# Test Case 27 FAIL: C[1][1] mismatch! Actual x, Expected 178392e28
# Test Case 27 FAIL: C[1][2] mismatch! Actual x, Expected 21d786d69
# Test Case 27 FAIL: C[1][3] mismatch! Actual x, Expected 1306cfbcc
# Test Case 27 FAIL: C[2][0] mismatch! Actual x, Expected 0dd59ebb9
# Test Case 27 FAIL: C[2][1] mismatch! Actual x, Expected 0e4a62c47
# Test Case 27 FAIL: C[2][2] mismatch! Actual x, Expected 1a6fc3321
# Test Case 27 FAIL: C[2][3] mismatch! Actual x, Expected 0d807efea
# Test Case 27 FAIL: C[3][0] mismatch! Actual x, Expected 165ff2e12
# Test Case 27 FAIL: C[3][1] mismatch! Actual x, Expected 0f536cc08
# Test Case 27 FAIL: C[3][2] mismatch! Actual x, Expected 193516b84
# Test Case 27 FAIL: C[3][3] mismatch! Actual x, Expected 0dbd38924
# Test Case 27 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 28 of 100
# ===================================================
# Reading test case 28:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            22696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1e91
#   Loading A[0][1] (Bank 1, Addr 0) with 3f88
#   Loading A[0][2] (Bank 2, Addr 0) with f97b
#   Loading A[0][3] (Bank 3, Addr 0) with 3be4
#   Loading A[1][0] (Bank 0, Addr 1) with b7c1
#   Loading A[1][1] (Bank 1, Addr 1) with 15f0
#   Loading A[1][2] (Bank 2, Addr 1) with 154f
#   Loading A[1][3] (Bank 3, Addr 1) with 4e31
#   Loading A[2][0] (Bank 0, Addr 2) with e329
#   Loading A[2][1] (Bank 1, Addr 2) with bc5a
#   Loading A[2][2] (Bank 2, Addr 2) with 8564
#   Loading A[2][3] (Bank 3, Addr 2) with cdbf
#   Loading A[3][0] (Bank 0, Addr 3) with b375
#   Loading A[3][1] (Bank 1, Addr 3) with 90d7
#   Loading A[3][2] (Bank 2, Addr 3) with cca5
#   Loading A[3][3] (Bank 3, Addr 3) with 70bc
#   Loading B[0][0] (Bank 0, Addr 0) with 92ad
#   Loading B[0][1] (Bank 1, Addr 0) with 8315
#   Loading B[0][2] (Bank 2, Addr 0) with fe78
#   Loading B[0][3] (Bank 3, Addr 0) with 3853
#   Loading B[1][0] (Bank 0, Addr 1) with ebb9
#   Loading B[1][1] (Bank 1, Addr 1) with d2b1
#   Loading B[1][2] (Bank 2, Addr 1) with 1535
#   Loading B[1][3] (Bank 3, Addr 1) with ee92
#   Loading B[2][0] (Bank 0, Addr 2) with aeb9
#   Loading B[2][1] (Bank 1, Addr 2) with 2ab4
#   Loading B[2][2] (Bank 2, Addr 2) with c2ff
#   Loading B[2][3] (Bank 3, Addr 2) with bcbd
#   Loading B[3][0] (Bank 0, Addr 3) with 76dd
#   Loading B[3][1] (Bank 1, Addr 3) with d793
#   Loading B[3][2] (Bank 2, Addr 3) with c111
#   Loading B[3][3] (Bank 3, Addr 3) with b248
# Matrix loading complete.
# @            23035000 Simulating controller signals to execute multiplication...
# @23055000: Starting input feeding sequence...
# @23055000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @23066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            23335000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 28...
# Test Case 28 FAIL: C[0][0] mismatch! Actual x, Expected 1a9133018
# Test Case 28 FAIL: C[0][1] mismatch! Actual x, Expected 163e4d559
# Test Case 28 FAIL: C[0][2] mismatch! Actual x, Expected 161f98989
# Test Case 28 FAIL: C[0][3] mismatch! Actual x, Expected 1d66b7f42
# Test Case 28 FAIL: C[1][0] mismatch! Actual x, Expected 0fc6715fd
# Test Case 28 FAIL: C[1][1] mismatch! Actual x, Expected 0cbf8c8d5
# Test Case 28 FAIL: C[1][2] mismatch! Actual x, Expected 13dab795d
# Test Case 28 FAIL: C[1][3] mismatch! Actual x, Expected 112275ce2
# Test Case 28 FAIL: C[2][0] mismatch! Actual x, Expected 15c9ebeeb
# Test Case 28 FAIL: C[2][1] mismatch! Actual x, Expected 153dc39c5
# Test Case 28 FAIL: C[2][2] mismatch! Actual x, Expected 1f9b18294
# Test Case 28 FAIL: C[2][3] mismatch! Actual x, Expected 13b9b972b
# Test Case 28 FAIL: C[3][0] mismatch! Actual x, Expected 12b1478d0
# Test Case 28 FAIL: C[3][1] mismatch! Actual x, Expected 0e04577d5
# Test Case 28 FAIL: C[3][2] mismatch! Actual x, Expected 133bf67c2
# Test Case 28 FAIL: C[3][3] mismatch! Actual x, Expected 13c3e07c1
# Test Case 28 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 29 of 100
# ===================================================
# Reading test case 29:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            23506000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c9e5
#   Loading A[0][1] (Bank 1, Addr 0) with 4e3c
#   Loading A[0][2] (Bank 2, Addr 0) with 79a5
#   Loading A[0][3] (Bank 3, Addr 0) with 65aa
#   Loading A[1][0] (Bank 0, Addr 1) with d983
#   Loading A[1][1] (Bank 1, Addr 1) with 0341
#   Loading A[1][2] (Bank 2, Addr 1) with 60be
#   Loading A[1][3] (Bank 3, Addr 1) with 4d12
#   Loading A[2][0] (Bank 0, Addr 2) with f3d3
#   Loading A[2][1] (Bank 1, Addr 2) with f92f
#   Loading A[2][2] (Bank 2, Addr 2) with cbd0
#   Loading A[2][3] (Bank 3, Addr 2) with b614
#   Loading A[3][0] (Bank 0, Addr 3) with 65ce
#   Loading A[3][1] (Bank 1, Addr 3) with aadf
#   Loading A[3][2] (Bank 2, Addr 3) with 7d67
#   Loading A[3][3] (Bank 3, Addr 3) with 3c29
#   Loading B[0][0] (Bank 0, Addr 0) with 5655
#   Loading B[0][1] (Bank 1, Addr 0) with d7e2
#   Loading B[0][2] (Bank 2, Addr 0) with c5d3
#   Loading B[0][3] (Bank 3, Addr 0) with 44ae
#   Loading B[1][0] (Bank 0, Addr 1) with 210c
#   Loading B[1][1] (Bank 1, Addr 1) with 43da
#   Loading B[1][2] (Bank 2, Addr 1) with a4f3
#   Loading B[1][3] (Bank 3, Addr 1) with 5adf
#   Loading B[2][0] (Bank 0, Addr 2) with 879e
#   Loading B[2][1] (Bank 1, Addr 2) with 624f
#   Loading B[2][2] (Bank 2, Addr 2) with 6502
#   Loading B[2][3] (Bank 3, Addr 2) with 0085
#   Loading B[3][0] (Bank 0, Addr 3) with 4cc8
#   Loading B[3][1] (Bank 1, Addr 3) with fa98
#   Loading B[3][2] (Bank 2, Addr 3) with 8a45
#   Loading B[3][3] (Bank 3, Addr 3) with fac0
# Matrix loading complete.
# @            23845000 Simulating controller signals to execute multiplication...
# @23865000: Starting input feeding sequence...
# @23865000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @23876000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            24145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 29...
# Test Case 29 FAIL: C[0][0] mismatch! Actual x, Expected 0ffdd7e57
# Test Case 29 FAIL: C[0][1] mismatch! Actual x, Expected 1a531b425
# Test Case 29 FAIL: C[0][2] mismatch! Actual x, Expected 1bf5aa744
# Test Case 29 FAIL: C[0][3] mismatch! Actual x, Expected 0e795c7e2
# Test Case 29 FAIL: C[1][0] mismatch! Actual x, Expected 0d20ef032
# Test Case 29 FAIL: C[1][1] mismatch! Actual x, Expected 149ca5b3b
# Test Case 29 FAIL: C[1][2] mismatch! Actual x, Expected 0fd2923a0
# Test Case 29 FAIL: C[1][3] mismatch! Actual x, Expected 0be042f12
# Test Case 29 FAIL: C[2][0] mismatch! Actual x, Expected 0c717df89
# Test Case 29 FAIL: C[2][1] mismatch! Actual x, Expected 1493ea2ce
# Test Case 29 FAIL: C[2][2] mismatch! Actual x, Expected 1307bc2bc
# Test Case 29 FAIL: C[2][3] mismatch! Actual x, Expected 0be3819f8
# Test Case 29 FAIL: C[3][0] mismatch! Actual x, Expected 09ebbe4aa
# Test Case 29 FAIL: C[3][1] mismatch! Actual x, Expected 0eaf877ec
# Test Case 29 FAIL: C[3][2] mismatch! Actual x, Expected 0e88dee69
# Test Case 29 FAIL: C[3][3] mismatch! Actual x, Expected 071ed795e
# Test Case 29 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 30 of 100
# ===================================================
# Reading test case 30:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            24316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9e98
#   Loading A[0][1] (Bank 1, Addr 0) with 50b7
#   Loading A[0][2] (Bank 2, Addr 0) with 62e8
#   Loading A[0][3] (Bank 3, Addr 0) with 23d1
#   Loading A[1][0] (Bank 0, Addr 1) with fe26
#   Loading A[1][1] (Bank 1, Addr 1) with 5a22
#   Loading A[1][2] (Bank 2, Addr 1) with 6f92
#   Loading A[1][3] (Bank 3, Addr 1) with bfab
#   Loading A[2][0] (Bank 0, Addr 2) with 0d18
#   Loading A[2][1] (Bank 1, Addr 2) with a344
#   Loading A[2][2] (Bank 2, Addr 2) with b340
#   Loading A[2][3] (Bank 3, Addr 2) with e993
#   Loading A[3][0] (Bank 0, Addr 3) with c8ba
#   Loading A[3][1] (Bank 1, Addr 3) with 3efd
#   Loading A[3][2] (Bank 2, Addr 3) with 4a76
#   Loading A[3][3] (Bank 3, Addr 3) with bd50
#   Loading B[0][0] (Bank 0, Addr 0) with 3535
#   Loading B[0][1] (Bank 1, Addr 0) with 1a57
#   Loading B[0][2] (Bank 2, Addr 0) with a837
#   Loading B[0][3] (Bank 3, Addr 0) with ee65
#   Loading B[1][0] (Bank 0, Addr 1) with 52ce
#   Loading B[1][1] (Bank 1, Addr 1) with ce8d
#   Loading B[1][2] (Bank 2, Addr 1) with af32
#   Loading B[1][3] (Bank 3, Addr 1) with 9466
#   Loading B[2][0] (Bank 0, Addr 2) with 6839
#   Loading B[2][1] (Bank 1, Addr 2) with a2d4
#   Loading B[2][2] (Bank 2, Addr 2) with 9133
#   Loading B[2][3] (Bank 3, Addr 2) with 1305
#   Loading B[3][0] (Bank 0, Addr 3) with bac0
#   Loading B[3][1] (Bank 1, Addr 3) with 7c88
#   Loading B[3][2] (Bank 2, Addr 3) with a542
#   Loading B[3][3] (Bank 3, Addr 3) with 0ec3
# Matrix loading complete.
# @            24655000 Simulating controller signals to execute multiplication...
# @24675000: Starting input feeding sequence...
# @24675000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @24686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            24955000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 30...
# Test Case 30 FAIL: C[0][0] mismatch! Actual x, Expected 10aed55e4
# Test Case 30 FAIL: C[0][1] mismatch! Actual x, Expected 14758a746
# Test Case 30 FAIL: C[0][2] mismatch! Actual x, Expected 19f2445d0
# Test Case 30 FAIL: C[0][3] mismatch! Actual x, Expected 1338f3842
# Test Case 30 FAIL: C[1][0] mismatch! Actual x, Expected 09e590e23
# Test Case 30 FAIL: C[1][1] mismatch! Actual x, Expected 0d78343a3
# Test Case 30 FAIL: C[1][2] mismatch! Actual x, Expected 0f7fba0bb
# Test Case 30 FAIL: C[1][3] mismatch! Actual x, Expected 08f2c98ca
# Test Case 30 FAIL: C[2][0] mismatch! Actual x, Expected 0b7f08b44
# Test Case 30 FAIL: C[2][1] mismatch! Actual x, Expected 0fa6dc3f2
# Test Case 30 FAIL: C[2][2] mismatch! Actual x, Expected 123144e88
# Test Case 30 FAIL: C[2][3] mismatch! Actual x, Expected 0ae63fdd6
# Test Case 30 FAIL: C[3][0] mismatch! Actual x, Expected 12ea2869a
# Test Case 30 FAIL: C[3][1] mismatch! Actual x, Expected 18efc5772
# Test Case 30 FAIL: C[3][2] mismatch! Actual x, Expected 199645836
# Test Case 30 FAIL: C[3][3] mismatch! Actual x, Expected 0acbab666
# Test Case 30 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 31 of 100
# ===================================================
# Reading test case 31:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            25126000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with df93
#   Loading A[0][1] (Bank 1, Addr 0) with 3c60
#   Loading A[0][2] (Bank 2, Addr 0) with fb24
#   Loading A[0][3] (Bank 3, Addr 0) with 47f5
#   Loading A[1][0] (Bank 0, Addr 1) with 0421
#   Loading A[1][1] (Bank 1, Addr 1) with b00c
#   Loading A[1][2] (Bank 2, Addr 1) with 89ba
#   Loading A[1][3] (Bank 3, Addr 1) with 3dcd
#   Loading A[2][0] (Bank 0, Addr 2) with 3edf
#   Loading A[2][1] (Bank 1, Addr 2) with 0d06
#   Loading A[2][2] (Bank 2, Addr 2) with 95b0
#   Loading A[2][3] (Bank 3, Addr 2) with 6e5f
#   Loading A[3][0] (Bank 0, Addr 3) with 7a26
#   Loading A[3][1] (Bank 1, Addr 3) with 93e5
#   Loading A[3][2] (Bank 2, Addr 3) with dc24
#   Loading A[3][3] (Bank 3, Addr 3) with 065f
#   Loading B[0][0] (Bank 0, Addr 0) with ae9a
#   Loading B[0][1] (Bank 1, Addr 0) with db85
#   Loading B[0][2] (Bank 2, Addr 0) with 15e9
#   Loading B[0][3] (Bank 3, Addr 0) with 459d
#   Loading B[1][0] (Bank 0, Addr 1) with 5411
#   Loading B[1][1] (Bank 1, Addr 1) with 2a73
#   Loading B[1][2] (Bank 2, Addr 1) with 60cd
#   Loading B[1][3] (Bank 3, Addr 1) with f507
#   Loading B[2][0] (Bank 0, Addr 2) with 7bd3
#   Loading B[2][1] (Bank 1, Addr 2) with 005d
#   Loading B[2][2] (Bank 2, Addr 2) with 003a
#   Loading B[2][3] (Bank 3, Addr 2) with fbc2
#   Loading B[3][0] (Bank 0, Addr 3) with b060
#   Loading B[3][1] (Bank 1, Addr 3) with 07af
#   Loading B[3][2] (Bank 2, Addr 3) with b60f
#   Loading B[3][3] (Bank 3, Addr 3) with b133
# Matrix loading complete.
# @            25465000 Simulating controller signals to execute multiplication...
# @25485000: Starting input feeding sequence...
# @25485000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @25496000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            25765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 31...
# Test Case 31 FAIL: C[0][0] mismatch! Actual x, Expected 10c6867ac
# Test Case 31 FAIL: C[0][1] mismatch! Actual x, Expected 0c4278e2f
# Test Case 31 FAIL: C[0][2] mismatch! Actual x, Expected 06b9ea4f8
# Test Case 31 FAIL: C[0][3] mismatch! Actual x, Expected 0d320539e
# Test Case 31 FAIL: C[1][0] mismatch! Actual x, Expected 0cf2eb65e
# Test Case 31 FAIL: C[1][1] mismatch! Actual x, Expected 0556ba2fd
# Test Case 31 FAIL: C[1][2] mismatch! Actual x, Expected 0b0ecb8c3
# Test Case 31 FAIL: C[1][3] mismatch! Actual x, Expected 12c18bf5f
# Test Case 31 FAIL: C[2][0] mismatch! Actual x, Expected 1b895f692
# Test Case 31 FAIL: C[2][1] mismatch! Actual x, Expected 0f50281ce
# Test Case 31 FAIL: C[2][2] mismatch! Actual x, Expected 0e642f9b2
# Test Case 31 FAIL: C[2][3] mismatch! Actual x, Expected 1f3b33db6
# Test Case 31 FAIL: C[3][0] mismatch! Actual x, Expected 07f257eec
# Test Case 31 FAIL: C[3][1] mismatch! Actual x, Expected 0484c6ad4
# Test Case 31 FAIL: C[3][2] mismatch! Actual x, Expected 02227df3d
# Test Case 31 FAIL: C[3][3] mismatch! Actual x, Expected 0bfabc8c7
# Test Case 31 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 32 of 100
# ===================================================
# Reading test case 32:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            25936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 178d
#   Loading A[0][1] (Bank 1, Addr 0) with dc28
#   Loading A[0][2] (Bank 2, Addr 0) with e7a3
#   Loading A[0][3] (Bank 3, Addr 0) with 94ed
#   Loading A[1][0] (Bank 0, Addr 1) with 8d6f
#   Loading A[1][1] (Bank 1, Addr 1) with 8ef1
#   Loading A[1][2] (Bank 2, Addr 1) with 7c0c
#   Loading A[1][3] (Bank 3, Addr 1) with e841
#   Loading A[2][0] (Bank 0, Addr 2) with 0a4b
#   Loading A[2][1] (Bank 1, Addr 2) with 86b7
#   Loading A[2][2] (Bank 2, Addr 2) with 74e0
#   Loading A[2][3] (Bank 3, Addr 2) with af23
#   Loading A[3][0] (Bank 0, Addr 3) with 625e
#   Loading A[3][1] (Bank 1, Addr 3) with 2508
#   Loading A[3][2] (Bank 2, Addr 3) with f6cc
#   Loading A[3][3] (Bank 3, Addr 3) with c632
#   Loading B[0][0] (Bank 0, Addr 0) with d285
#   Loading B[0][1] (Bank 1, Addr 0) with 0e98
#   Loading B[0][2] (Bank 2, Addr 0) with 9863
#   Loading B[0][3] (Bank 3, Addr 0) with b2f4
#   Loading B[1][0] (Bank 0, Addr 1) with 1ab6
#   Loading B[1][1] (Bank 1, Addr 1) with ffb2
#   Loading B[1][2] (Bank 2, Addr 1) with ddda
#   Loading B[1][3] (Bank 3, Addr 1) with b763
#   Loading B[2][0] (Bank 0, Addr 2) with 2601
#   Loading B[2][1] (Bank 1, Addr 2) with ca2d
#   Loading B[2][2] (Bank 2, Addr 2) with 2e88
#   Loading B[2][3] (Bank 3, Addr 2) with c4b6
#   Loading B[3][0] (Bank 0, Addr 3) with 4a9e
#   Loading B[3][1] (Bank 1, Addr 3) with d48c
#   Loading B[3][2] (Bank 2, Addr 3) with 5016
#   Loading B[3][3] (Bank 3, Addr 3) with ec61
# Matrix loading complete.
# @            26275000 Simulating controller signals to execute multiplication...
# @26295000: Starting input feeding sequence...
# @26295000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @26306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            26575000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 32...
# Test Case 32 FAIL: C[0][0] mismatch! Actual x, Expected 04052c77a
# Test Case 32 FAIL: C[0][1] mismatch! Actual x, Expected 0e8683a7d
# Test Case 32 FAIL: C[0][2] mismatch! Actual x, Expected 0a93adcf9
# Test Case 32 FAIL: C[0][3] mismatch! Actual x, Expected 0d8843241
# Test Case 32 FAIL: C[1][0] mismatch! Actual x, Expected 0e2c025c5
# Test Case 32 FAIL: C[1][1] mismatch! Actual x, Expected 124754edd
# Test Case 32 FAIL: C[1][2] mismatch! Actual x, Expected 122fecb9a
# Test Case 32 FAIL: C[1][3] mismatch! Actual x, Expected 18a007e75
# Test Case 32 FAIL: C[2][0] mismatch! Actual x, Expected 124b674ff
# Test Case 32 FAIL: C[2][1] mismatch! Actual x, Expected 1b24fda10
# Test Case 32 FAIL: C[2][2] mismatch! Actual x, Expected 157d5a6c9
# Test Case 32 FAIL: C[2][3] mismatch! Actual x, Expected 23878d48c
# Test Case 32 FAIL: C[3][0] mismatch! Actual x, Expected 0e6782956
# Test Case 32 FAIL: C[3][1] mismatch! Actual x, Expected 21f55d169
# Test Case 32 FAIL: C[3][2] mismatch! Actual x, Expected 17fc230e5
# Test Case 32 FAIL: C[3][3] mismatch! Actual x, Expected 24c0f83db
# Test Case 32 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 33 of 100
# ===================================================
# Reading test case 33:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            26746000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e0f0
#   Loading A[0][1] (Bank 1, Addr 0) with 413c
#   Loading A[0][2] (Bank 2, Addr 0) with dce4
#   Loading A[0][3] (Bank 3, Addr 0) with cad0
#   Loading A[1][0] (Bank 0, Addr 1) with d0d5
#   Loading A[1][1] (Bank 1, Addr 1) with 41ba
#   Loading A[1][2] (Bank 2, Addr 1) with 2be9
#   Loading A[1][3] (Bank 3, Addr 1) with b487
#   Loading A[2][0] (Bank 0, Addr 2) with a840
#   Loading A[2][1] (Bank 1, Addr 2) with e296
#   Loading A[2][2] (Bank 2, Addr 2) with 5824
#   Loading A[2][3] (Bank 3, Addr 2) with 2fb7
#   Loading A[3][0] (Bank 0, Addr 3) with 8330
#   Loading A[3][1] (Bank 1, Addr 3) with b007
#   Loading A[3][2] (Bank 2, Addr 3) with 55f1
#   Loading A[3][3] (Bank 3, Addr 3) with 4ec0
#   Loading B[0][0] (Bank 0, Addr 0) with 761d
#   Loading B[0][1] (Bank 1, Addr 0) with abed
#   Loading B[0][2] (Bank 2, Addr 0) with e640
#   Loading B[0][3] (Bank 3, Addr 0) with 475d
#   Loading B[1][0] (Bank 0, Addr 1) with 586e
#   Loading B[1][1] (Bank 1, Addr 1) with bfb2
#   Loading B[1][2] (Bank 2, Addr 1) with 50d6
#   Loading B[1][3] (Bank 3, Addr 1) with 54c5
#   Loading B[2][0] (Bank 0, Addr 2) with 9721
#   Loading B[2][1] (Bank 1, Addr 2) with 0209
#   Loading B[2][2] (Bank 2, Addr 2) with dae6
#   Loading B[2][3] (Bank 3, Addr 2) with 7407
#   Loading B[3][0] (Bank 0, Addr 3) with 1ced
#   Loading B[3][1] (Bank 1, Addr 3) with f0b7
#   Loading B[3][2] (Bank 2, Addr 3) with b82a
#   Loading B[3][3] (Bank 3, Addr 3) with deb0
# Matrix loading complete.
# @            27085000 Simulating controller signals to execute multiplication...
# @27105000: Starting input feeding sequence...
# @27105000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @27116000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            27385000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 33...
# Test Case 33 FAIL: C[0][0] mismatch! Actual x, Expected 122113266
# Test Case 33 FAIL: C[0][1] mismatch! Actual x, Expected 1b021deda
# Test Case 33 FAIL: C[0][2] mismatch! Actual x, Expected 1fa7ead6e
# Test Case 33 FAIL: C[0][3] mismatch! Actual x, Expected 1423a49d9
# Test Case 33 FAIL: C[1][0] mismatch! Actual x, Expected 0ce74a389
# Test Case 33 FAIL: C[1][1] mismatch! Actual x, Expected 104587a27
# Test Case 33 FAIL: C[1][2] mismatch! Actual x, Expected 18fce8066
# Test Case 33 FAIL: C[1][3] mismatch! Actual x, Expected 127c433d8
# Test Case 33 FAIL: C[2][0] mismatch! Actual x, Expected 0b2d398b3
# Test Case 33 FAIL: C[2][1] mismatch! Actual x, Expected 106bceaa1
# Test Case 33 FAIL: C[2][2] mismatch! Actual x, Expected 15dbabfa8
# Test Case 33 FAIL: C[2][3] mismatch! Actual x, Expected 0bed285cd
# Test Case 33 FAIL: C[3][0] mismatch! Actual x, Expected 0c0ffd2e9
# Test Case 33 FAIL: C[3][1] mismatch! Actual x, Expected 159d0581d
# Test Case 33 FAIL: C[3][2] mismatch! Actual x, Expected 150de4cc4
# Test Case 33 FAIL: C[3][3] mismatch! Actual x, Expected 0ce717374
# Test Case 33 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 34 of 100
# ===================================================
# Reading test case 34:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            27556000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b766
#   Loading A[0][1] (Bank 1, Addr 0) with f32d
#   Loading A[0][2] (Bank 2, Addr 0) with f082
#   Loading A[0][3] (Bank 3, Addr 0) with 4565
#   Loading A[1][0] (Bank 0, Addr 1) with 2e80
#   Loading A[1][1] (Bank 1, Addr 1) with 9b10
#   Loading A[1][2] (Bank 2, Addr 1) with 43bb
#   Loading A[1][3] (Bank 3, Addr 1) with 6030
#   Loading A[2][0] (Bank 0, Addr 2) with 973c
#   Loading A[2][1] (Bank 1, Addr 2) with 079e
#   Loading A[2][2] (Bank 2, Addr 2) with 3b93
#   Loading A[2][3] (Bank 3, Addr 2) with d371
#   Loading A[3][0] (Bank 0, Addr 3) with b7e5
#   Loading A[3][1] (Bank 1, Addr 3) with a40a
#   Loading A[3][2] (Bank 2, Addr 3) with 1ebd
#   Loading A[3][3] (Bank 3, Addr 3) with 2e5b
#   Loading B[0][0] (Bank 0, Addr 0) with 25e3
#   Loading B[0][1] (Bank 1, Addr 0) with 3c5f
#   Loading B[0][2] (Bank 2, Addr 0) with 6771
#   Loading B[0][3] (Bank 3, Addr 0) with 29ac
#   Loading B[1][0] (Bank 0, Addr 1) with 8f04
#   Loading B[1][1] (Bank 1, Addr 1) with e70c
#   Loading B[1][2] (Bank 2, Addr 1) with 9756
#   Loading B[1][3] (Bank 3, Addr 1) with 0633
#   Loading B[2][0] (Bank 0, Addr 2) with 82f5
#   Loading B[2][1] (Bank 1, Addr 2) with a36c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a91
#   Loading B[2][3] (Bank 3, Addr 2) with 6b26
#   Loading B[3][0] (Bank 0, Addr 3) with 66fc
#   Loading B[3][1] (Bank 1, Addr 3) with 2025
#   Loading B[3][2] (Bank 2, Addr 3) with 1042
#   Loading B[3][3] (Bank 3, Addr 3) with d08f
# Matrix loading complete.
# @            27895000 Simulating controller signals to execute multiplication...
# @27915000: Starting input feeding sequence...
# @27915000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @27926000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            28195000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 34...
# Test Case 34 FAIL: C[0][0] mismatch! Actual x, Expected 0cc760f4a
# Test Case 34 FAIL: C[0][1] mismatch! Actual x, Expected 0ccd9da43
# Test Case 34 FAIL: C[0][2] mismatch! Actual x, Expected 0b03a570c
# Test Case 34 FAIL: C[0][3] mismatch! Actual x, Expected 0f41821db
# Test Case 34 FAIL: C[1][0] mismatch! Actual x, Expected 0c0807a35
# Test Case 34 FAIL: C[1][1] mismatch! Actual x, Expected 0dec1448d
# Test Case 34 FAIL: C[1][2] mismatch! Actual x, Expected 0cb83a04f
# Test Case 34 FAIL: C[1][3] mismatch! Actual x, Expected 0b42ac876
# Test Case 34 FAIL: C[2][0] mismatch! Actual x, Expected 07445caed
# Test Case 34 FAIL: C[2][1] mismatch! Actual x, Expected 09fbc6e57
# Test Case 34 FAIL: C[2][2] mismatch! Actual x, Expected 0a3f8de31
# Test Case 34 FAIL: C[2][3] mismatch! Actual x, Expected 05ac44dfe
# Test Case 34 FAIL: C[3][0] mismatch! Actual x, Expected 0bed11308
# Test Case 34 FAIL: C[3][1] mismatch! Actual x, Expected 0f3f9788e
# Test Case 34 FAIL: C[3][2] mismatch! Actual x, Expected 0afdd152c
# Test Case 34 FAIL: C[3][3] mismatch! Actual x, Expected 08be38907
# Test Case 34 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 35 of 100
# ===================================================
# Reading test case 35:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            28366000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9380
#   Loading A[0][1] (Bank 1, Addr 0) with 5b89
#   Loading A[0][2] (Bank 2, Addr 0) with e57e
#   Loading A[0][3] (Bank 3, Addr 0) with 5958
#   Loading A[1][0] (Bank 0, Addr 1) with 16ff
#   Loading A[1][1] (Bank 1, Addr 1) with 2861
#   Loading A[1][2] (Bank 2, Addr 1) with 7b2e
#   Loading A[1][3] (Bank 3, Addr 1) with 71e8
#   Loading A[2][0] (Bank 0, Addr 2) with 7809
#   Loading A[2][1] (Bank 1, Addr 2) with 00dc
#   Loading A[2][2] (Bank 2, Addr 2) with bc11
#   Loading A[2][3] (Bank 3, Addr 2) with 65c8
#   Loading A[3][0] (Bank 0, Addr 3) with c39d
#   Loading A[3][1] (Bank 1, Addr 3) with 185a
#   Loading A[3][2] (Bank 2, Addr 3) with 4357
#   Loading A[3][3] (Bank 3, Addr 3) with af4f
#   Loading B[0][0] (Bank 0, Addr 0) with cf3b
#   Loading B[0][1] (Bank 1, Addr 0) with 142c
#   Loading B[0][2] (Bank 2, Addr 0) with 567c
#   Loading B[0][3] (Bank 3, Addr 0) with 0d2e
#   Loading B[1][0] (Bank 0, Addr 1) with c3b0
#   Loading B[1][1] (Bank 1, Addr 1) with 9c18
#   Loading B[1][2] (Bank 2, Addr 1) with 3f27
#   Loading B[1][3] (Bank 3, Addr 1) with 259e
#   Loading B[2][0] (Bank 0, Addr 2) with 07fc
#   Loading B[2][1] (Bank 1, Addr 2) with 54a8
#   Loading B[2][2] (Bank 2, Addr 2) with 1f78
#   Loading B[2][3] (Bank 3, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with a6a3
#   Loading B[3][1] (Bank 1, Addr 3) with f4bd
#   Loading B[3][2] (Bank 2, Addr 3) with 2884
#   Loading B[3][3] (Bank 3, Addr 3) with 0109
# Matrix loading complete.
# @            28705000 Simulating controller signals to execute multiplication...
# @28725000: Starting input feeding sequence...
# @28725000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @28736000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            29005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 35...
# Test Case 35 FAIL: C[0][0] mismatch! Actual x, Expected 10c0d4da3
# Test Case 35 FAIL: C[0][1] mismatch! Actual x, Expected 0fc58aeb9
# Test Case 35 FAIL: C[0][2] mismatch! Actual x, Expected 065377405
# Test Case 35 FAIL: C[0][3] mismatch! Actual x, Expected 06ae514e2
# Test Case 35 FAIL: C[1][0] mismatch! Actual x, Expected 078d73f21
# Test Case 35 FAIL: C[1][1] mismatch! Actual x, Expected 03765d776
# Test Case 35 FAIL: C[1][2] mismatch! Actual x, Expected 02cd80bab
# Test Case 35 FAIL: C[1][3] mismatch! Actual x, Expected 00b6ce8ba
# Test Case 35 FAIL: C[2][0] mismatch! Actual x, Expected 149a161cb
# Test Case 35 FAIL: C[2][1] mismatch! Actual x, Expected 0dbc2805b
# Test Case 35 FAIL: C[2][2] mismatch! Actual x, Expected 08db11ade
# Test Case 35 FAIL: C[2][3] mismatch! Actual x, Expected 0b33c312a
# Test Case 35 FAIL: C[3][0] mismatch! Actual x, Expected 114ae48f5
# Test Case 35 FAIL: C[3][1] mismatch! Actual x, Expected 115bf6d73
# Test Case 35 FAIL: C[3][2] mismatch! Actual x, Expected 06289f374
# Test Case 35 FAIL: C[3][3] mismatch! Actual x, Expected 066b5e41f
# Test Case 35 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 36 of 100
# ===================================================
# Reading test case 36:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            29176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with fc12
#   Loading A[0][1] (Bank 1, Addr 0) with 0026
#   Loading A[0][2] (Bank 2, Addr 0) with 55e6
#   Loading A[0][3] (Bank 3, Addr 0) with 99cb
#   Loading A[1][0] (Bank 0, Addr 1) with 9f38
#   Loading A[1][1] (Bank 1, Addr 1) with 8db9
#   Loading A[1][2] (Bank 2, Addr 1) with 81c6
#   Loading A[1][3] (Bank 3, Addr 1) with f8d3
#   Loading A[2][0] (Bank 0, Addr 2) with e82d
#   Loading A[2][1] (Bank 1, Addr 2) with 6bdc
#   Loading A[2][2] (Bank 2, Addr 2) with 7e46
#   Loading A[2][3] (Bank 3, Addr 2) with 88d0
#   Loading A[3][0] (Bank 0, Addr 3) with 6504
#   Loading A[3][1] (Bank 1, Addr 3) with e88d
#   Loading A[3][2] (Bank 2, Addr 3) with 455d
#   Loading A[3][3] (Bank 3, Addr 3) with 854a
#   Loading B[0][0] (Bank 0, Addr 0) with 5d5a
#   Loading B[0][1] (Bank 1, Addr 0) with d381
#   Loading B[0][2] (Bank 2, Addr 0) with ba4a
#   Loading B[0][3] (Bank 3, Addr 0) with dcd3
#   Loading B[1][0] (Bank 0, Addr 1) with 1edd
#   Loading B[1][1] (Bank 1, Addr 1) with 0b18
#   Loading B[1][2] (Bank 2, Addr 1) with cd4e
#   Loading B[1][3] (Bank 3, Addr 1) with e166
#   Loading B[2][0] (Bank 0, Addr 2) with 3800
#   Loading B[2][1] (Bank 1, Addr 2) with 6f0a
#   Loading B[2][2] (Bank 2, Addr 2) with 174a
#   Loading B[2][3] (Bank 3, Addr 2) with 826a
#   Loading B[3][0] (Bank 0, Addr 3) with a1c1
#   Loading B[3][1] (Bank 1, Addr 3) with 9474
#   Loading B[3][2] (Bank 2, Addr 3) with 1927
#   Loading B[3][3] (Bank 3, Addr 3) with 4401
# Matrix loading complete.
# @            29515000 Simulating controller signals to execute multiplication...
# @29535000: Starting input feeding sequence...
# @29535000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @29546000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            29815000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 36...
# Test Case 36 FAIL: C[0][0] mismatch! Actual x, Expected 0e1baafb0
# Test Case 36 FAIL: C[0][1] mismatch! Actual x, Expected 17670dae4
# Test Case 36 FAIL: C[0][2] mismatch! Actual x, Expected 1562a3be2
# Test Case 36 FAIL: C[0][3] mismatch! Actual x, Expected 1f6bb54cc
# Test Case 36 FAIL: C[1][0] mismatch! Actual x, Expected 0bbac015e
# Test Case 36 FAIL: C[1][1] mismatch! Actual x, Expected 0bbe71ffa
# Test Case 36 FAIL: C[1][2] mismatch! Actual x, Expected 0926d1e6d
# Test Case 36 FAIL: C[1][3] mismatch! Actual x, Expected 0f1a195ad
# Test Case 36 FAIL: C[2][0] mismatch! Actual x, Expected 0766b14e7
# Test Case 36 FAIL: C[2][1] mismatch! Actual x, Expected 0ab960256
# Test Case 36 FAIL: C[2][2] mismatch! Actual x, Expected 0b8e27937
# Test Case 36 FAIL: C[2][3] mismatch! Actual x, Expected 10f1bfdcf
# Test Case 36 FAIL: C[3][0] mismatch! Actual x, Expected 0c839df4f
# Test Case 36 FAIL: C[3][1] mismatch! Actual x, Expected 1127aeabb
# Test Case 36 FAIL: C[3][2] mismatch! Actual x, Expected 151017e5e
# Test Case 36 FAIL: C[3][3] mismatch! Actual x, Expected 1c8d840cd
# Test Case 36 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 37 of 100
# ===================================================
# Reading test case 37:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            29986000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 46eb
#   Loading A[0][1] (Bank 1, Addr 0) with 5d28
#   Loading A[0][2] (Bank 2, Addr 0) with a251
#   Loading A[0][3] (Bank 3, Addr 0) with d060
#   Loading A[1][0] (Bank 0, Addr 1) with b455
#   Loading A[1][1] (Bank 1, Addr 1) with 376b
#   Loading A[1][2] (Bank 2, Addr 1) with 0c9a
#   Loading A[1][3] (Bank 3, Addr 1) with f04c
#   Loading A[2][0] (Bank 0, Addr 2) with dc29
#   Loading A[2][1] (Bank 1, Addr 2) with 5378
#   Loading A[2][2] (Bank 2, Addr 2) with bd77
#   Loading A[2][3] (Bank 3, Addr 2) with 2e86
#   Loading A[3][0] (Bank 0, Addr 3) with 674e
#   Loading A[3][1] (Bank 1, Addr 3) with 06b7
#   Loading A[3][2] (Bank 2, Addr 3) with 7572
#   Loading A[3][3] (Bank 3, Addr 3) with 64cf
#   Loading B[0][0] (Bank 0, Addr 0) with 6cba
#   Loading B[0][1] (Bank 1, Addr 0) with 2b96
#   Loading B[0][2] (Bank 2, Addr 0) with 061c
#   Loading B[0][3] (Bank 3, Addr 0) with 2251
#   Loading B[1][0] (Bank 0, Addr 1) with fe28
#   Loading B[1][1] (Bank 1, Addr 1) with a278
#   Loading B[1][2] (Bank 2, Addr 1) with f49d
#   Loading B[1][3] (Bank 3, Addr 1) with 9bc5
#   Loading B[2][0] (Bank 0, Addr 2) with 350a
#   Loading B[2][1] (Bank 1, Addr 2) with b2d3
#   Loading B[2][2] (Bank 2, Addr 2) with 18a3
#   Loading B[2][3] (Bank 3, Addr 2) with 0716
#   Loading B[3][0] (Bank 0, Addr 3) with e4d2
#   Loading B[3][1] (Bank 1, Addr 3) with f7eb
#   Loading B[3][2] (Bank 2, Addr 3) with f927
#   Loading B[3][3] (Bank 3, Addr 3) with 0d33
# Matrix loading complete.
# @            30325000 Simulating controller signals to execute multiplication...
# @30345000: Starting input feeding sequence...
# @30345000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @30356000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            30625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 37...
# Test Case 37 FAIL: C[0][0] mismatch! Actual x, Expected 15b1a7a9c
# Test Case 37 FAIL: C[0][1] mismatch! Actual x, Expected 17c5a66ef
# Test Case 37 FAIL: C[0][2] mismatch! Actual x, Expected 127bb80d2
# Test Case 37 FAIL: C[0][3] mismatch! Actual x, Expected 082a777d4
# Test Case 37 FAIL: C[1][0] mismatch! Actual x, Expected 075e0fa96
# Test Case 37 FAIL: C[1][1] mismatch! Actual x, Expected 073d6f47d
# Test Case 37 FAIL: C[1][2] mismatch! Actual x, Expected 045be8348
# Test Case 37 FAIL: C[1][3] mismatch! Actual x, Expected 030dd4dc4
# Test Case 37 FAIL: C[2][0] mismatch! Actual x, Expected 0e1adc814
# Test Case 37 FAIL: C[2][1] mismatch! Actual x, Expected 119b7c761
# Test Case 37 FAIL: C[2][2] mismatch! Actual x, Expected 09473ba71
# Test Case 37 FAIL: C[2][3] mismatch! Actual x, Expected 028b9c713
# Test Case 37 FAIL: C[3][0] mismatch! Actual x, Expected 1aacf76aa
# Test Case 37 FAIL: C[3][1] mismatch! Actual x, Expected 13e1abb57
# Test Case 37 FAIL: C[3][2] mismatch! Actual x, Expected 1512bbaf7
# Test Case 37 FAIL: C[3][3] mismatch! Actual x, Expected 0b4a1de9d
# Test Case 37 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 38 of 100
# ===================================================
# Reading test case 38:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            30796000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 61f6
#   Loading A[0][1] (Bank 1, Addr 0) with 7fd6
#   Loading A[0][2] (Bank 2, Addr 0) with fe58
#   Loading A[0][3] (Bank 3, Addr 0) with 65f5
#   Loading A[1][0] (Bank 0, Addr 1) with 4d00
#   Loading A[1][1] (Bank 1, Addr 1) with 81ee
#   Loading A[1][2] (Bank 2, Addr 1) with 4672
#   Loading A[1][3] (Bank 3, Addr 1) with f806
#   Loading A[2][0] (Bank 0, Addr 2) with f696
#   Loading A[2][1] (Bank 1, Addr 2) with 2430
#   Loading A[2][2] (Bank 2, Addr 2) with 1d1d
#   Loading A[2][3] (Bank 3, Addr 2) with 6641
#   Loading A[3][0] (Bank 0, Addr 3) with 9d74
#   Loading A[3][1] (Bank 1, Addr 3) with e3ec
#   Loading A[3][2] (Bank 2, Addr 3) with 7099
#   Loading A[3][3] (Bank 3, Addr 3) with 9b90
#   Loading B[0][0] (Bank 0, Addr 0) with ad76
#   Loading B[0][1] (Bank 1, Addr 0) with 5356
#   Loading B[0][2] (Bank 2, Addr 0) with 4564
#   Loading B[0][3] (Bank 3, Addr 0) with 4aff
#   Loading B[1][0] (Bank 0, Addr 1) with b97f
#   Loading B[1][1] (Bank 1, Addr 1) with 1adb
#   Loading B[1][2] (Bank 2, Addr 1) with 8545
#   Loading B[1][3] (Bank 3, Addr 1) with 239a
#   Loading B[2][0] (Bank 0, Addr 2) with b22e
#   Loading B[2][1] (Bank 1, Addr 2) with 970b
#   Loading B[2][2] (Bank 2, Addr 2) with 527b
#   Loading B[2][3] (Bank 3, Addr 2) with 8f34
#   Loading B[3][0] (Bank 0, Addr 3) with 0a85
#   Loading B[3][1] (Bank 1, Addr 3) with e375
#   Loading B[3][2] (Bank 2, Addr 3) with ec05
#   Loading B[3][3] (Bank 3, Addr 3) with e27a
# Matrix loading complete.
# @            31135000 Simulating controller signals to execute multiplication...
# @31155000: Starting input feeding sequence...
# @31155000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @31166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            31435000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 38...
# Test Case 38 FAIL: C[0][0] mismatch! Actual x, Expected 12c44889c
# Test Case 38 FAIL: C[0][1] mismatch! Actual x, Expected 1455a6e1a
# Test Case 38 FAIL: C[0][2] mismatch! Actual x, Expected 1233fdc6e
# Test Case 38 FAIL: C[0][3] mismatch! Actual x, Expected 13ca353ca
# Test Case 38 FAIL: C[1][0] mismatch! Actual x, Expected 0d7517ff2
# Test Case 38 FAIL: C[1][1] mismatch! Actual x, Expected 1171af36a
# Test Case 38 FAIL: C[1][2] mismatch! Actual x, Expected 144150f6a
# Test Case 38 FAIL: C[1][3] mismatch! Actual x, Expected 11566058e
# Test Case 38 FAIL: C[2][0] mismatch! Actual x, Expected 0f845e7d1
# Test Case 38 FAIL: C[2][1] mismatch! Actual x, Expected 0cf684d42
# Test Case 38 FAIL: C[2][2] mismatch! Actual x, Expected 0dacdcf06
# Test Case 38 FAIL: C[2][3] mismatch! Actual x, Expected 0c834980a
# Test Case 38 FAIL: C[3][0] mismatch! Actual x, Expected 1465cf466
# Test Case 38 FAIL: C[3][1] mismatch! Actual x, Expected 101c1fd0b
# Test Case 38 FAIL: C[3][2] mismatch! Actual x, Expected 14d1e915d
# Test Case 38 FAIL: C[3][3] mismatch! Actual x, Expected 1032ebd7b
# Test Case 38 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 39 of 100
# ===================================================
# Reading test case 39:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            31606000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d8a6
#   Loading A[0][1] (Bank 1, Addr 0) with 090c
#   Loading A[0][2] (Bank 2, Addr 0) with b379
#   Loading A[0][3] (Bank 3, Addr 0) with 4b1a
#   Loading A[1][0] (Bank 0, Addr 1) with ea63
#   Loading A[1][1] (Bank 1, Addr 1) with ab5b
#   Loading A[1][2] (Bank 2, Addr 1) with 1bea
#   Loading A[1][3] (Bank 3, Addr 1) with 5107
#   Loading A[2][0] (Bank 0, Addr 2) with 958b
#   Loading A[2][1] (Bank 1, Addr 2) with fa87
#   Loading A[2][2] (Bank 2, Addr 2) with 1f4f
#   Loading A[2][3] (Bank 3, Addr 2) with a88e
#   Loading A[3][0] (Bank 0, Addr 3) with 383b
#   Loading A[3][1] (Bank 1, Addr 3) with 0a9e
#   Loading A[3][2] (Bank 2, Addr 3) with 09ac
#   Loading A[3][3] (Bank 3, Addr 3) with 1d85
#   Loading B[0][0] (Bank 0, Addr 0) with 922e
#   Loading B[0][1] (Bank 1, Addr 0) with 754c
#   Loading B[0][2] (Bank 2, Addr 0) with aefe
#   Loading B[0][3] (Bank 3, Addr 0) with 2d98
#   Loading B[1][0] (Bank 0, Addr 1) with d095
#   Loading B[1][1] (Bank 1, Addr 1) with 6a4d
#   Loading B[1][2] (Bank 2, Addr 1) with ba4c
#   Loading B[1][3] (Bank 3, Addr 1) with 9f77
#   Loading B[2][0] (Bank 0, Addr 2) with 6e95
#   Loading B[2][1] (Bank 1, Addr 2) with 4a94
#   Loading B[2][2] (Bank 2, Addr 2) with 2d67
#   Loading B[2][3] (Bank 3, Addr 2) with 15ea
#   Loading B[3][0] (Bank 0, Addr 3) with 00b9
#   Loading B[3][1] (Bank 1, Addr 3) with 0520
#   Loading B[3][2] (Bank 2, Addr 3) with e8e6
#   Loading B[3][3] (Bank 3, Addr 3) with 1838
# Matrix loading complete.
# @            31945000 Simulating controller signals to execute multiplication...
# @31965000: Starting input feeding sequence...
# @31965000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @31976000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            32245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 39...
# Test Case 39 FAIL: C[0][0] mismatch! Actual x, Expected 17b6fdbfd
# Test Case 39 FAIL: C[0][1] mismatch! Actual x, Expected 0f1487dcb
# Test Case 39 FAIL: C[0][2] mismatch! Actual x, Expected 18c56e307
# Test Case 39 FAIL: C[0][3] mismatch! Actual x, Expected 0cab52e8b
# Test Case 39 FAIL: C[1][0] mismatch! Actual x, Expected 0fd07a2e0
# Test Case 39 FAIL: C[1][1] mismatch! Actual x, Expected 0947ea9bb
# Test Case 39 FAIL: C[1][2] mismatch! Actual x, Expected 0b8f96031
# Test Case 39 FAIL: C[1][3] mismatch! Actual x, Expected 082ccdc63
# Test Case 39 FAIL: C[2][0] mismatch! Actual x, Expected 08ac6c937
# Test Case 39 FAIL: C[2][1] mismatch! Actual x, Expected 067235f7a
# Test Case 39 FAIL: C[2][2] mismatch! Actual x, Expected 09d58a9d7
# Test Case 39 FAIL: C[2][3] mismatch! Actual x, Expected 034f27b74
# Test Case 39 FAIL: C[3][0] mismatch! Actual x, Expected 0b5cb9f82
# Test Case 39 FAIL: C[3][1] mismatch! Actual x, Expected 075c03a8b
# Test Case 39 FAIL: C[3][2] mismatch! Actual x, Expected 0a70d2880
# Test Case 39 FAIL: C[3][3] mismatch! Actual x, Expected 05111d195
# Test Case 39 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 40 of 100
# ===================================================
# Reading test case 40:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            32416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4282
#   Loading A[0][1] (Bank 1, Addr 0) with 151e
#   Loading A[0][2] (Bank 2, Addr 0) with cfcd
#   Loading A[0][3] (Bank 3, Addr 0) with ed34
#   Loading A[1][0] (Bank 0, Addr 1) with 38e5
#   Loading A[1][1] (Bank 1, Addr 1) with dc9a
#   Loading A[1][2] (Bank 2, Addr 1) with ea7c
#   Loading A[1][3] (Bank 3, Addr 1) with c0f2
#   Loading A[2][0] (Bank 0, Addr 2) with 81d1
#   Loading A[2][1] (Bank 1, Addr 2) with 2dd1
#   Loading A[2][2] (Bank 2, Addr 2) with ca09
#   Loading A[2][3] (Bank 3, Addr 2) with d529
#   Loading A[3][0] (Bank 0, Addr 3) with 4ce1
#   Loading A[3][1] (Bank 1, Addr 3) with 7822
#   Loading A[3][2] (Bank 2, Addr 3) with 9997
#   Loading A[3][3] (Bank 3, Addr 3) with 6200
#   Loading B[0][0] (Bank 0, Addr 0) with 4e89
#   Loading B[0][1] (Bank 1, Addr 0) with 02c3
#   Loading B[0][2] (Bank 2, Addr 0) with 491a
#   Loading B[0][3] (Bank 3, Addr 0) with d16c
#   Loading B[1][0] (Bank 0, Addr 1) with e690
#   Loading B[1][1] (Bank 1, Addr 1) with d186
#   Loading B[1][2] (Bank 2, Addr 1) with a4e0
#   Loading B[1][3] (Bank 3, Addr 1) with 6897
#   Loading B[2][0] (Bank 0, Addr 2) with 5096
#   Loading B[2][1] (Bank 1, Addr 2) with ae45
#   Loading B[2][2] (Bank 2, Addr 2) with c54e
#   Loading B[2][3] (Bank 3, Addr 2) with f4fa
#   Loading B[3][0] (Bank 0, Addr 3) with dec3
#   Loading B[3][1] (Bank 1, Addr 3) with 085c
#   Loading B[3][2] (Bank 2, Addr 3) with f98b
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @            32755000 Simulating controller signals to execute multiplication...
# @32775000: Starting input feeding sequence...
# @32775000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @32786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            33055000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 40...
# Test Case 40 FAIL: C[0][0] mismatch! Actual x, Expected 0b368003b
# Test Case 40 FAIL: C[0][1] mismatch! Actual x, Expected 08a2a1e15
# Test Case 40 FAIL: C[0][2] mismatch! Actual x, Expected 0e6a0496d
# Test Case 40 FAIL: C[0][3] mismatch! Actual x, Expected 0d8e333a0
# Test Case 40 FAIL: C[1][0] mismatch! Actual x, Expected 1441e0a0a
# Test Case 40 FAIL: C[1][1] mismatch! Actual x, Expected 0d7e42803
# Test Case 40 FAIL: C[1][2] mismatch! Actual x, Expected 12c8578f0
# Test Case 40 FAIL: C[1][3] mismatch! Actual x, Expected 0aeb352ee
# Test Case 40 FAIL: C[2][0] mismatch! Actual x, Expected 1d82e19c0
# Test Case 40 FAIL: C[2][1] mismatch! Actual x, Expected 150b458c0
# Test Case 40 FAIL: C[2][2] mismatch! Actual x, Expected 203c8ec0d
# Test Case 40 FAIL: C[2][3] mismatch! Actual x, Expected 1e91d1577
# Test Case 40 FAIL: C[3][0] mismatch! Actual x, Expected 18eeb18fa
# Test Case 40 FAIL: C[3][1] mismatch! Actual x, Expected 134c83155
# Test Case 40 FAIL: C[3][2] mismatch! Actual x, Expected 1c3d07c86
# Test Case 40 FAIL: C[3][3] mismatch! Actual x, Expected 1effcf8b8
# Test Case 40 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 41 of 100
# ===================================================
# Reading test case 41:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            33226000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 48ef
#   Loading A[0][1] (Bank 1, Addr 0) with 78f0
#   Loading A[0][2] (Bank 2, Addr 0) with d4a8
#   Loading A[0][3] (Bank 3, Addr 0) with d4d0
#   Loading A[1][0] (Bank 0, Addr 1) with 3d53
#   Loading A[1][1] (Bank 1, Addr 1) with 43fe
#   Loading A[1][2] (Bank 2, Addr 1) with df3b
#   Loading A[1][3] (Bank 3, Addr 1) with 587e
#   Loading A[2][0] (Bank 0, Addr 2) with 9daa
#   Loading A[2][1] (Bank 1, Addr 2) with 7b4e
#   Loading A[2][2] (Bank 2, Addr 2) with dd70
#   Loading A[2][3] (Bank 3, Addr 2) with f12c
#   Loading A[3][0] (Bank 0, Addr 3) with 9c3a
#   Loading A[3][1] (Bank 1, Addr 3) with 5b5a
#   Loading A[3][2] (Bank 2, Addr 3) with b76f
#   Loading A[3][3] (Bank 3, Addr 3) with 7d86
#   Loading B[0][0] (Bank 0, Addr 0) with 58cc
#   Loading B[0][1] (Bank 1, Addr 0) with 100b
#   Loading B[0][2] (Bank 2, Addr 0) with cb0b
#   Loading B[0][3] (Bank 3, Addr 0) with ecf2
#   Loading B[1][0] (Bank 0, Addr 1) with b973
#   Loading B[1][1] (Bank 1, Addr 1) with 2216
#   Loading B[1][2] (Bank 2, Addr 1) with 3272
#   Loading B[1][3] (Bank 3, Addr 1) with e7f2
#   Loading B[2][0] (Bank 0, Addr 2) with 810f
#   Loading B[2][1] (Bank 1, Addr 2) with 37cd
#   Loading B[2][2] (Bank 2, Addr 2) with a1a9
#   Loading B[2][3] (Bank 3, Addr 2) with e870
#   Loading B[3][0] (Bank 0, Addr 3) with 8b27
#   Loading B[3][1] (Bank 1, Addr 3) with b8ae
#   Loading B[3][2] (Bank 2, Addr 3) with ba8e
#   Loading B[3][3] (Bank 3, Addr 3) with d3ad
# Matrix loading complete.
# @            33565000 Simulating controller signals to execute multiplication...
# @33585000: Starting input feeding sequence...
# @33585000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @33596000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            33865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 41...
# Test Case 41 FAIL: C[0][0] mismatch! Actual x, Expected 0ea1fff89
# Test Case 41 FAIL: C[0][1] mismatch! Actual x, Expected 09fce03f5
# Test Case 41 FAIL: C[0][2] mismatch! Actual x, Expected 11b56f7a1
# Test Case 41 FAIL: C[0][3] mismatch! Actual x, Expected 18b658ef6
# Test Case 41 FAIL: C[1][0] mismatch! Actual x, Expected 0cb0548a2
# Test Case 41 FAIL: C[1][1] mismatch! Actual x, Expected 06d690cc6
# Test Case 41 FAIL: C[1][2] mismatch! Actual x, Expected 0fdc0e9d6
# Test Case 41 FAIL: C[1][3] mismatch! Actual x, Expected 1690796ee
# Test Case 41 FAIL: C[2][0] mismatch! Actual x, Expected 1bed0c0da
# Test Case 41 FAIL: C[2][1] mismatch! Actual x, Expected 0dfa5806c
# Test Case 41 FAIL: C[2][2] mismatch! Actual x, Expected 1e6294e00
# Test Case 41 FAIL: C[2][3] mismatch! Actual x, Expected 2efcffd99
# Test Case 41 FAIL: C[3][0] mismatch! Actual x, Expected 147bc1358
# Test Case 41 FAIL: C[3][1] mismatch! Actual x, Expected 0a83db114
# Test Case 41 FAIL: C[3][2] mismatch! Actual x, Expected 1adfef76c
# Test Case 41 FAIL: C[3][3] mismatch! Actual x, Expected 257e9ee8a
# Test Case 41 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 42 of 100
# ===================================================
# Reading test case 42:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            34036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dd7f
#   Loading A[0][1] (Bank 1, Addr 0) with 611f
#   Loading A[0][2] (Bank 2, Addr 0) with d8fb
#   Loading A[0][3] (Bank 3, Addr 0) with 13b4
#   Loading A[1][0] (Bank 0, Addr 1) with 993f
#   Loading A[1][1] (Bank 1, Addr 1) with 0f4e
#   Loading A[1][2] (Bank 2, Addr 1) with bc91
#   Loading A[1][3] (Bank 3, Addr 1) with a272
#   Loading A[2][0] (Bank 0, Addr 2) with 975f
#   Loading A[2][1] (Bank 1, Addr 2) with a713
#   Loading A[2][2] (Bank 2, Addr 2) with bec6
#   Loading A[2][3] (Bank 3, Addr 2) with dfc8
#   Loading A[3][0] (Bank 0, Addr 3) with 5212
#   Loading A[3][1] (Bank 1, Addr 3) with f07e
#   Loading A[3][2] (Bank 2, Addr 3) with 0aa9
#   Loading A[3][3] (Bank 3, Addr 3) with e1dc
#   Loading B[0][0] (Bank 0, Addr 0) with 4869
#   Loading B[0][1] (Bank 1, Addr 0) with cd56
#   Loading B[0][2] (Bank 2, Addr 0) with 3902
#   Loading B[0][3] (Bank 3, Addr 0) with 77d7
#   Loading B[1][0] (Bank 0, Addr 1) with 05e1
#   Loading B[1][1] (Bank 1, Addr 1) with a0a8
#   Loading B[1][2] (Bank 2, Addr 1) with a60d
#   Loading B[1][3] (Bank 3, Addr 1) with 12d3
#   Loading B[2][0] (Bank 0, Addr 2) with ef03
#   Loading B[2][1] (Bank 1, Addr 2) with 0c8a
#   Loading B[2][2] (Bank 2, Addr 2) with c7bd
#   Loading B[2][3] (Bank 3, Addr 2) with c6c1
#   Loading B[3][0] (Bank 0, Addr 3) with b8af
#   Loading B[3][1] (Bank 1, Addr 3) with 5047
#   Loading B[3][2] (Bank 2, Addr 3) with 7503
#   Loading B[3][3] (Bank 3, Addr 3) with 0821
# Matrix loading complete.
# @            34375000 Simulating controller signals to execute multiplication...
# @34395000: Starting input feeding sequence...
# @34395000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @34406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            34675000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 42...
# Test Case 42 FAIL: C[0][0] mismatch! Actual x, Expected 10ab3fde1
# Test Case 42 FAIL: C[0][1] mismatch! Actual x, Expected 132fb7d36
# Test Case 42 FAIL: C[0][2] mismatch! Actual x, Expected 130576e8a
# Test Case 42 FAIL: C[0][3] mismatch! Actual x, Expected 0eb158887
# Test Case 42 FAIL: C[1][0] mismatch! Actual x, Expected 1654e2fa0
# Test Case 42 FAIL: C[1][1] mismatch! Actual x, Expected 0ab1a45ca
# Test Case 42 FAIL: C[1][2] mismatch! Actual x, Expected 10fd589b5
# Test Case 42 FAIL: C[1][3] mismatch! Actual x, Expected 0b7f0aae4
# Test Case 42 FAIL: C[2][0] mismatch! Actual x, Expected 0fb81ff3d
# Test Case 42 FAIL: C[2][1] mismatch! Actual x, Expected 131102615
# Test Case 42 FAIL: C[2][2] mismatch! Actual x, Expected 144594d7c
# Test Case 42 FAIL: C[2][3] mismatch! Actual x, Expected 107e4245f
# Test Case 42 FAIL: C[3][0] mismatch! Actual x, Expected 17d2c91c2
# Test Case 42 FAIL: C[3][1] mismatch! Actual x, Expected 0c789031c
# Test Case 42 FAIL: C[3][2] mismatch! Actual x, Expected 18397476e
# Test Case 42 FAIL: C[3][3] mismatch! Actual x, Expected 0ca148346
# Test Case 42 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 43 of 100
# ===================================================
# Reading test case 43:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            34846000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bc9b
#   Loading A[0][1] (Bank 1, Addr 0) with 8357
#   Loading A[0][2] (Bank 2, Addr 0) with 4ead
#   Loading A[0][3] (Bank 3, Addr 0) with 3e83
#   Loading A[1][0] (Bank 0, Addr 1) with 1077
#   Loading A[1][1] (Bank 1, Addr 1) with 5b43
#   Loading A[1][2] (Bank 2, Addr 1) with fe94
#   Loading A[1][3] (Bank 3, Addr 1) with 9251
#   Loading A[2][0] (Bank 0, Addr 2) with e766
#   Loading A[2][1] (Bank 1, Addr 2) with a657
#   Loading A[2][2] (Bank 2, Addr 2) with eee6
#   Loading A[2][3] (Bank 3, Addr 2) with 5926
#   Loading A[3][0] (Bank 0, Addr 3) with a943
#   Loading A[3][1] (Bank 1, Addr 3) with d744
#   Loading A[3][2] (Bank 2, Addr 3) with a466
#   Loading A[3][3] (Bank 3, Addr 3) with b99f
#   Loading B[0][0] (Bank 0, Addr 0) with 20fd
#   Loading B[0][1] (Bank 1, Addr 0) with 526c
#   Loading B[0][2] (Bank 2, Addr 0) with 0e3f
#   Loading B[0][3] (Bank 3, Addr 0) with 18e7
#   Loading B[1][0] (Bank 0, Addr 1) with 3b5e
#   Loading B[1][1] (Bank 1, Addr 1) with fe4f
#   Loading B[1][2] (Bank 2, Addr 1) with 6048
#   Loading B[1][3] (Bank 3, Addr 1) with 92bb
#   Loading B[2][0] (Bank 0, Addr 2) with 34d3
#   Loading B[2][1] (Bank 1, Addr 2) with 7aa3
#   Loading B[2][2] (Bank 2, Addr 2) with 9cc1
#   Loading B[2][3] (Bank 3, Addr 2) with 3e84
#   Loading B[3][0] (Bank 0, Addr 3) with 4043
#   Loading B[3][1] (Bank 1, Addr 3) with b6da
#   Loading B[3][2] (Bank 2, Addr 3) with 8055
#   Loading B[3][3] (Bank 3, Addr 3) with a020
# Matrix loading complete.
# @            35185000 Simulating controller signals to execute multiplication...
# @35205000: Starting input feeding sequence...
# @35205000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @35216000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            35485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 43...
# Test Case 43 FAIL: C[0][0] mismatch! Actual x, Expected 0765bbb7c
# Test Case 43 FAIL: C[0][1] mismatch! Actual x, Expected 134d4151d
# Test Case 43 FAIL: C[0][2] mismatch! Actual x, Expected 0f33a74c2
# Test Case 43 FAIL: C[0][3] mismatch! Actual x, Expected 0be29a9c2
# Test Case 43 FAIL: C[1][0] mismatch! Actual x, Expected 07e72bd16
# Test Case 43 FAIL: C[1][1] mismatch! Actual x, Expected 16e62f1ae
# Test Case 43 FAIL: C[1][2] mismatch! Actual x, Expected 0fb65c46c
# Test Case 43 FAIL: C[1][3] mismatch! Actual x, Expected 0f059cace
# Test Case 43 FAIL: C[2][0] mismatch! Actual x, Expected 09fbd1d95
# Test Case 43 FAIL: C[2][1] mismatch! Actual x, Expected 1fe183df6
# Test Case 43 FAIL: C[2][2] mismatch! Actual x, Expected 148d1c577
# Test Case 43 FAIL: C[2][3] mismatch! Actual x, Expected 13abcc38f
# Test Case 43 FAIL: C[3][0] mismatch! Actual x, Expected 06afa1324
# Test Case 43 FAIL: C[3][1] mismatch! Actual x, Expected 154c3d4db
# Test Case 43 FAIL: C[3][2] mismatch! Actual x, Expected 0ce259276
# Test Case 43 FAIL: C[3][3] mismatch! Actual x, Expected 0e3d182d8
# Test Case 43 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 44 of 100
# ===================================================
# Reading test case 44:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            35656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a228
#   Loading A[0][1] (Bank 1, Addr 0) with 1831
#   Loading A[0][2] (Bank 2, Addr 0) with 9573
#   Loading A[0][3] (Bank 3, Addr 0) with d2c6
#   Loading A[1][0] (Bank 0, Addr 1) with 70d0
#   Loading A[1][1] (Bank 1, Addr 1) with c865
#   Loading A[1][2] (Bank 2, Addr 1) with ba18
#   Loading A[1][3] (Bank 3, Addr 1) with 333d
#   Loading A[2][0] (Bank 0, Addr 2) with ddb4
#   Loading A[2][1] (Bank 1, Addr 2) with 7382
#   Loading A[2][2] (Bank 2, Addr 2) with f870
#   Loading A[2][3] (Bank 3, Addr 2) with ca77
#   Loading A[3][0] (Bank 0, Addr 3) with 14fb
#   Loading A[3][1] (Bank 1, Addr 3) with 91b9
#   Loading A[3][2] (Bank 2, Addr 3) with 38d8
#   Loading A[3][3] (Bank 3, Addr 3) with 4269
#   Loading B[0][0] (Bank 0, Addr 0) with b9ea
#   Loading B[0][1] (Bank 1, Addr 0) with e480
#   Loading B[0][2] (Bank 2, Addr 0) with caff
#   Loading B[0][3] (Bank 3, Addr 0) with 0093
#   Loading B[1][0] (Bank 0, Addr 1) with 1a37
#   Loading B[1][1] (Bank 1, Addr 1) with bc9a
#   Loading B[1][2] (Bank 2, Addr 1) with af78
#   Loading B[1][3] (Bank 3, Addr 1) with 3c58
#   Loading B[2][0] (Bank 0, Addr 2) with 60da
#   Loading B[2][1] (Bank 1, Addr 2) with 2c73
#   Loading B[2][2] (Bank 2, Addr 2) with 6744
#   Loading B[2][3] (Bank 3, Addr 2) with f610
#   Loading B[3][0] (Bank 0, Addr 3) with c509
#   Loading B[3][1] (Bank 1, Addr 3) with b00f
#   Loading B[3][2] (Bank 2, Addr 3) with 63b9
#   Loading B[3][3] (Bank 3, Addr 3) with 5187
# Matrix loading complete.
# @            35995000 Simulating controller signals to execute multiplication...
# @36015000: Starting input feeding sequence...
# @36015000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @36026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            36295000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 44...
# Test Case 44 FAIL: C[0][0] mismatch! Actual x, Expected 0e556ac5b
# Test Case 44 FAIL: C[0][1] mismatch! Actual x, Expected 118c5a3b1
# Test Case 44 FAIL: C[0][2] mismatch! Actual x, Expected 12f82b18b
# Test Case 44 FAIL: C[0][3] mismatch! Actual x, Expected 0f6bbf315
# Test Case 44 FAIL: C[1][0] mismatch! Actual x, Expected 0c1f26eb2
# Test Case 44 FAIL: C[1][1] mismatch! Actual x, Expected 121806a7f
# Test Case 44 FAIL: C[1][2] mismatch! Actual x, Expected 103e59360
# Test Case 44 FAIL: C[1][3] mismatch! Actual x, Expected 0ccb8f88a
# Test Case 44 FAIL: C[2][0] mismatch! Actual x, Expected 10954e83e
# Test Case 44 FAIL: C[2][1] mismatch! Actual x, Expected 160b966e8
# Test Case 44 FAIL: C[2][2] mismatch! Actual x, Expected 1706ae8a5
# Test Case 44 FAIL: C[2][3] mismatch! Actual x, Expected 12d18e231
# Test Case 44 FAIL: C[3][0] mismatch! Actual x, Expected 11e071f1e
# Test Case 44 FAIL: C[3][1] mismatch! Actual x, Expected 132b4d54e
# Test Case 44 FAIL: C[3][2] mismatch! Actual x, Expected 135cb284f
# Test Case 44 FAIL: C[3][3] mismatch! Actual x, Expected 0e44e3079
# Test Case 44 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 45 of 100
# ===================================================
# Reading test case 45:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            36466000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 18c5
#   Loading A[0][1] (Bank 1, Addr 0) with bb55
#   Loading A[0][2] (Bank 2, Addr 0) with a59a
#   Loading A[0][3] (Bank 3, Addr 0) with 0631
#   Loading A[1][0] (Bank 0, Addr 1) with 56e8
#   Loading A[1][1] (Bank 1, Addr 1) with 46c3
#   Loading A[1][2] (Bank 2, Addr 1) with 3ade
#   Loading A[1][3] (Bank 3, Addr 1) with f3e7
#   Loading A[2][0] (Bank 0, Addr 2) with 0fad
#   Loading A[2][1] (Bank 1, Addr 2) with 6723
#   Loading A[2][2] (Bank 2, Addr 2) with 62a8
#   Loading A[2][3] (Bank 3, Addr 2) with 84fd
#   Loading A[3][0] (Bank 0, Addr 3) with 710b
#   Loading A[3][1] (Bank 1, Addr 3) with cb20
#   Loading A[3][2] (Bank 2, Addr 3) with dba6
#   Loading A[3][3] (Bank 3, Addr 3) with 1ff2
#   Loading B[0][0] (Bank 0, Addr 0) with 85e1
#   Loading B[0][1] (Bank 1, Addr 0) with 93ee
#   Loading B[0][2] (Bank 2, Addr 0) with adb6
#   Loading B[0][3] (Bank 3, Addr 0) with 3601
#   Loading B[1][0] (Bank 0, Addr 1) with 8d10
#   Loading B[1][1] (Bank 1, Addr 1) with e6a3
#   Loading B[1][2] (Bank 2, Addr 1) with fbad
#   Loading B[1][3] (Bank 3, Addr 1) with ef37
#   Loading B[2][0] (Bank 0, Addr 2) with e6f4
#   Loading B[2][1] (Bank 1, Addr 2) with 3812
#   Loading B[2][2] (Bank 2, Addr 2) with 3a0e
#   Loading B[2][3] (Bank 3, Addr 2) with 1ca3
#   Loading B[3][0] (Bank 0, Addr 3) with d5a3
#   Loading B[3][1] (Bank 1, Addr 3) with 8599
#   Loading B[3][2] (Bank 2, Addr 3) with c6d6
#   Loading B[3][3] (Bank 3, Addr 3) with 1fa3
# Matrix loading complete.
# @            36805000 Simulating controller signals to execute multiplication...
# @36825000: Starting input feeding sequence...
# @36825000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @36836000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            37105000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 45...
# Test Case 45 FAIL: C[0][0] mismatch! Actual x, Expected 0a951d48a
# Test Case 45 FAIL: C[0][1] mismatch! Actual x, Expected 09b09249b
# Test Case 45 FAIL: C[0][2] mismatch! Actual x, Expected 0c199fe7e
# Test Case 45 FAIL: C[0][3] mismatch! Actual x, Expected 0662820c5
# Test Case 45 FAIL: C[1][0] mismatch! Actual x, Expected 18f8456a1
# Test Case 45 FAIL: C[1][1] mismatch! Actual x, Expected 12c9826c5
# Test Case 45 FAIL: C[1][2] mismatch! Actual x, Expected 179d6c0df
# Test Case 45 FAIL: C[1][3] mismatch! Actual x, Expected 08e479ee3
# Test Case 45 FAIL: C[2][0] mismatch! Actual x, Expected 18758730c
# Test Case 45 FAIL: C[2][1] mismatch! Actual x, Expected 11cf6868c
# Test Case 45 FAIL: C[2][2] mismatch! Actual x, Expected 16b37b576
# Test Case 45 FAIL: C[2][3] mismatch! Actual x, Expected 0801f2ef6
# Test Case 45 FAIL: C[3][0] mismatch! Actual x, Expected 11c451fbb
# Test Case 45 FAIL: C[3][1] mismatch! Actual x, Expected 10d1d3e0f
# Test Case 45 FAIL: C[3][2] mismatch! Actual x, Expected 12af44c13
# Test Case 45 FAIL: C[3][3] mismatch! Actual x, Expected 0f80a69ff
# Test Case 45 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 46 of 100
# ===================================================
# Reading test case 46:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            37276000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b04d
#   Loading A[0][1] (Bank 1, Addr 0) with a6b7
#   Loading A[0][2] (Bank 2, Addr 0) with 0ebb
#   Loading A[0][3] (Bank 3, Addr 0) with 75f5
#   Loading A[1][0] (Bank 0, Addr 1) with 3c77
#   Loading A[1][1] (Bank 1, Addr 1) with 7150
#   Loading A[1][2] (Bank 2, Addr 1) with 12f7
#   Loading A[1][3] (Bank 3, Addr 1) with 5703
#   Loading A[2][0] (Bank 0, Addr 2) with 8cf2
#   Loading A[2][1] (Bank 1, Addr 2) with 993b
#   Loading A[2][2] (Bank 2, Addr 2) with 49cb
#   Loading A[2][3] (Bank 3, Addr 2) with 2279
#   Loading A[3][0] (Bank 0, Addr 3) with da75
#   Loading A[3][1] (Bank 1, Addr 3) with 8cc0
#   Loading A[3][2] (Bank 2, Addr 3) with 2b37
#   Loading A[3][3] (Bank 3, Addr 3) with 6f22
#   Loading B[0][0] (Bank 0, Addr 0) with 2ad4
#   Loading B[0][1] (Bank 1, Addr 0) with 1fb4
#   Loading B[0][2] (Bank 2, Addr 0) with 43c7
#   Loading B[0][3] (Bank 3, Addr 0) with a03d
#   Loading B[1][0] (Bank 0, Addr 1) with 38d8
#   Loading B[1][1] (Bank 1, Addr 1) with 5a3b
#   Loading B[1][2] (Bank 2, Addr 1) with f9fa
#   Loading B[1][3] (Bank 3, Addr 1) with 0b80
#   Loading B[2][0] (Bank 0, Addr 2) with f6e6
#   Loading B[2][1] (Bank 1, Addr 2) with 7588
#   Loading B[2][2] (Bank 2, Addr 2) with c1b9
#   Loading B[2][3] (Bank 3, Addr 2) with 49d6
#   Loading B[3][0] (Bank 0, Addr 3) with 8330
#   Loading B[3][1] (Bank 1, Addr 3) with dfea
#   Loading B[3][2] (Bank 2, Addr 3) with dcb7
#   Loading B[3][3] (Bank 3, Addr 3) with 1ae4
# Matrix loading complete.
# @            37615000 Simulating controller signals to execute multiplication...
# @37635000: Starting input feeding sequence...
# @37635000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @37646000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            37915000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 46...
# Test Case 46 FAIL: C[0][0] mismatch! Actual x, Expected 122cdb088
# Test Case 46 FAIL: C[0][1] mismatch! Actual x, Expected 12aee2313
# Test Case 46 FAIL: C[0][2] mismatch! Actual x, Expected 190b90096
# Test Case 46 FAIL: C[0][3] mismatch! Actual x, Expected 0b0aac159
# Test Case 46 FAIL: C[1][0] mismatch! Actual x, Expected 110f6320e
# Test Case 46 FAIL: C[1][1] mismatch! Actual x, Expected 0fe0ae4f4
# Test Case 46 FAIL: C[1][2] mismatch! Actual x, Expected 18816c944
# Test Case 46 FAIL: C[1][3] mismatch! Actual x, Expected 0a86bf6ed
# Test Case 46 FAIL: C[2][0] mismatch! Actual x, Expected 063fd86f6
# Test Case 46 FAIL: C[2][1] mismatch! Actual x, Expected 0502f9987
# Test Case 46 FAIL: C[2][2] mismatch! Actual x, Expected 07384af97
# Test Case 46 FAIL: C[2][3] mismatch! Actual x, Expected 023e520bd
# Test Case 46 FAIL: C[3][0] mismatch! Actual x, Expected 081406e82
# Test Case 46 FAIL: C[3][1] mismatch! Actual x, Expected 09e4e8751
# Test Case 46 FAIL: C[3][2] mismatch! Actual x, Expected 0ee188020
# Test Case 46 FAIL: C[3][3] mismatch! Actual x, Expected 0635b9e4f
# Test Case 46 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 47 of 100
# ===================================================
# Reading test case 47:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            38086000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 82ca
#   Loading A[0][1] (Bank 1, Addr 0) with 5957
#   Loading A[0][2] (Bank 2, Addr 0) with b9ae
#   Loading A[0][3] (Bank 3, Addr 0) with 5921
#   Loading A[1][0] (Bank 0, Addr 1) with f1d3
#   Loading A[1][1] (Bank 1, Addr 1) with 9025
#   Loading A[1][2] (Bank 2, Addr 1) with c062
#   Loading A[1][3] (Bank 3, Addr 1) with b0b9
#   Loading A[2][0] (Bank 0, Addr 2) with 60b5
#   Loading A[2][1] (Bank 1, Addr 2) with d689
#   Loading A[2][2] (Bank 2, Addr 2) with f593
#   Loading A[2][3] (Bank 3, Addr 2) with f32c
#   Loading A[3][0] (Bank 0, Addr 3) with 267f
#   Loading A[3][1] (Bank 1, Addr 3) with 9c34
#   Loading A[3][2] (Bank 2, Addr 3) with 89d7
#   Loading A[3][3] (Bank 3, Addr 3) with e2b1
#   Loading B[0][0] (Bank 0, Addr 0) with a894
#   Loading B[0][1] (Bank 1, Addr 0) with bffb
#   Loading B[0][2] (Bank 2, Addr 0) with cd28
#   Loading B[0][3] (Bank 3, Addr 0) with b14d
#   Loading B[1][0] (Bank 0, Addr 1) with 3931
#   Loading B[1][1] (Bank 1, Addr 1) with 919b
#   Loading B[1][2] (Bank 2, Addr 1) with 2d2f
#   Loading B[1][3] (Bank 3, Addr 1) with 6fd5
#   Loading B[2][0] (Bank 0, Addr 2) with 472b
#   Loading B[2][1] (Bank 1, Addr 2) with 41db
#   Loading B[2][2] (Bank 2, Addr 2) with 25ce
#   Loading B[2][3] (Bank 3, Addr 2) with 173c
#   Loading B[3][0] (Bank 0, Addr 3) with fb30
#   Loading B[3][1] (Bank 1, Addr 3) with 68ee
#   Loading B[3][2] (Bank 2, Addr 3) with b99d
#   Loading B[3][3] (Bank 3, Addr 3) with 28b7
# Matrix loading complete.
# @            38425000 Simulating controller signals to execute multiplication...
# @38445000: Starting input feeding sequence...
# @38445000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @38456000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            38725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 47...
# Test Case 47 FAIL: C[0][0] mismatch! Actual x, Expected 0ccce9f62
# Test Case 47 FAIL: C[0][1] mismatch! Actual x, Expected 11447f1b8
# Test Case 47 FAIL: C[0][2] mismatch! Actual x, Expected 0bdb00bd6
# Test Case 47 FAIL: C[0][3] mismatch! Actual x, Expected 0d31efc86
# Test Case 47 FAIL: C[1][0] mismatch! Actual x, Expected 12ff0e024
# Test Case 47 FAIL: C[1][1] mismatch! Actual x, Expected 10c32653f
# Test Case 47 FAIL: C[1][2] mismatch! Actual x, Expected 0f1f96785
# Test Case 47 FAIL: C[1][3] mismatch! Actual x, Expected 0a928603c
# Test Case 47 FAIL: C[2][0] mismatch! Actual x, Expected 170c4d75b
# Test Case 47 FAIL: C[2][1] mismatch! Actual x, Expected 17056c293
# Test Case 47 FAIL: C[2][2] mismatch! Actual x, Expected 13ef6a853
# Test Case 47 FAIL: C[2][3] mismatch! Actual x, Expected 100d99b05
# Test Case 47 FAIL: C[3][0] mismatch! Actual x, Expected 184344c11
# Test Case 47 FAIL: C[3][1] mismatch! Actual x, Expected 142d3a690
# Test Case 47 FAIL: C[3][2] mismatch! Actual x, Expected 12ee44a14
# Test Case 47 FAIL: C[3][3] mismatch! Actual x, Expected 0c50d87b1
# Test Case 47 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 48 of 100
# ===================================================
# Reading test case 48:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            38896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f1df
#   Loading A[0][1] (Bank 1, Addr 0) with 90bd
#   Loading A[0][2] (Bank 2, Addr 0) with 4302
#   Loading A[0][3] (Bank 3, Addr 0) with ba76
#   Loading A[1][0] (Bank 0, Addr 1) with 11e7
#   Loading A[1][1] (Bank 1, Addr 1) with b223
#   Loading A[1][2] (Bank 2, Addr 1) with f8b1
#   Loading A[1][3] (Bank 3, Addr 1) with 2a4b
#   Loading A[2][0] (Bank 0, Addr 2) with cd43
#   Loading A[2][1] (Bank 1, Addr 2) with 6737
#   Loading A[2][2] (Bank 2, Addr 2) with 3a8c
#   Loading A[2][3] (Bank 3, Addr 2) with b39b
#   Loading A[3][0] (Bank 0, Addr 3) with 0ba5
#   Loading A[3][1] (Bank 1, Addr 3) with f096
#   Loading A[3][2] (Bank 2, Addr 3) with e494
#   Loading A[3][3] (Bank 3, Addr 3) with 717f
#   Loading B[0][0] (Bank 0, Addr 0) with 4392
#   Loading B[0][1] (Bank 1, Addr 0) with 89f2
#   Loading B[0][2] (Bank 2, Addr 0) with 0d70
#   Loading B[0][3] (Bank 3, Addr 0) with ed4c
#   Loading B[1][0] (Bank 0, Addr 1) with fbab
#   Loading B[1][1] (Bank 1, Addr 1) with fecf
#   Loading B[1][2] (Bank 2, Addr 1) with cc96
#   Loading B[1][3] (Bank 3, Addr 1) with 11eb
#   Loading B[2][0] (Bank 0, Addr 2) with b216
#   Loading B[2][1] (Bank 1, Addr 2) with 0c44
#   Loading B[2][2] (Bank 2, Addr 2) with 4685
#   Loading B[2][3] (Bank 3, Addr 2) with 6839
#   Loading B[3][0] (Bank 0, Addr 3) with a272
#   Loading B[3][1] (Bank 1, Addr 3) with 15ee
#   Loading B[3][2] (Bank 2, Addr 3) with 492d
#   Loading B[3][3] (Bank 3, Addr 3) with aa23
# Matrix loading complete.
# @            39235000 Simulating controller signals to execute multiplication...
# @39255000: Starting input feeding sequence...
# @39255000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @39266000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            39535000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 48...
# Test Case 48 FAIL: C[0][0] mismatch! Actual x, Expected 0e79e93b7
# Test Case 48 FAIL: C[0][1] mismatch! Actual x, Expected 09efbadc9
# Test Case 48 FAIL: C[0][2] mismatch! Actual x, Expected 056dfc4ba
# Test Case 48 FAIL: C[0][3] mismatch! Actual x, Expected 13cc21cbb
# Test Case 48 FAIL: C[1][0] mismatch! Actual x, Expected 1b5ca7cb1
# Test Case 48 FAIL: C[1][1] mismatch! Actual x, Expected 118dab407
# Test Case 48 FAIL: C[1][2] mismatch! Actual x, Expected 0f728ea23
# Test Case 48 FAIL: C[1][3] mismatch! Actual x, Expected 15c8b9dfe
# Test Case 48 FAIL: C[2][0] mismatch! Actual x, Expected 1bff1384f
# Test Case 48 FAIL: C[2][1] mismatch! Actual x, Expected 13206e1cb
# Test Case 48 FAIL: C[2][2] mismatch! Actual x, Expected 11bba4356
# Test Case 48 FAIL: C[2][3] mismatch! Actual x, Expected 0ff443b7b
# Test Case 48 FAIL: C[3][0] mismatch! Actual x, Expected 11fc12045
# Test Case 48 FAIL: C[3][1] mismatch! Actual x, Expected 0a0e5ee6f
# Test Case 48 FAIL: C[3][2] mismatch! Actual x, Expected 07d80f96c
# Test Case 48 FAIL: C[3][3] mismatch! Actual x, Expected 1445936c1
# Test Case 48 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 49 of 100
# ===================================================
# Reading test case 49:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            39706000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6446
#   Loading A[0][1] (Bank 1, Addr 0) with 2351
#   Loading A[0][2] (Bank 2, Addr 0) with bb07
#   Loading A[0][3] (Bank 3, Addr 0) with 20da
#   Loading A[1][0] (Bank 0, Addr 1) with ac39
#   Loading A[1][1] (Bank 1, Addr 1) with d8db
#   Loading A[1][2] (Bank 2, Addr 1) with 9e06
#   Loading A[1][3] (Bank 3, Addr 1) with af80
#   Loading A[2][0] (Bank 0, Addr 2) with fc34
#   Loading A[2][1] (Bank 1, Addr 2) with 40c3
#   Loading A[2][2] (Bank 2, Addr 2) with ccfa
#   Loading A[2][3] (Bank 3, Addr 2) with edf9
#   Loading A[3][0] (Bank 0, Addr 3) with c555
#   Loading A[3][1] (Bank 1, Addr 3) with 8ecf
#   Loading A[3][2] (Bank 2, Addr 3) with 997f
#   Loading A[3][3] (Bank 3, Addr 3) with 7a22
#   Loading B[0][0] (Bank 0, Addr 0) with 8669
#   Loading B[0][1] (Bank 1, Addr 0) with 71ea
#   Loading B[0][2] (Bank 2, Addr 0) with 0f15
#   Loading B[0][3] (Bank 3, Addr 0) with d489
#   Loading B[1][0] (Bank 0, Addr 1) with adae
#   Loading B[1][1] (Bank 1, Addr 1) with 1804
#   Loading B[1][2] (Bank 2, Addr 1) with b1db
#   Loading B[1][3] (Bank 3, Addr 1) with 1956
#   Loading B[2][0] (Bank 0, Addr 2) with 1ecf
#   Loading B[2][1] (Bank 1, Addr 2) with 68a1
#   Loading B[2][2] (Bank 2, Addr 2) with 0be5
#   Loading B[2][3] (Bank 3, Addr 2) with dc47
#   Loading B[3][0] (Bank 0, Addr 3) with 6db2
#   Loading B[3][1] (Bank 1, Addr 3) with 0263
#   Loading B[3][2] (Bank 2, Addr 3) with fa93
#   Loading B[3][3] (Bank 3, Addr 3) with d339
# Matrix loading complete.
# @            40045000 Simulating controller signals to execute multiplication...
# @40065000: Starting input feeding sequence...
# @40065000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @40076000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            40345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 49...
# Test Case 49 FAIL: C[0][0] mismatch! Actual x, Expected 11c65c49a
# Test Case 49 FAIL: C[0][1] mismatch! Actual x, Expected 0a5b14d73
# Test Case 49 FAIL: C[0][2] mismatch! Actual x, Expected 14a6d39d4
# Test Case 49 FAIL: C[0][3] mismatch! Actual x, Expected 1e01eaef5
# Test Case 49 FAIL: C[1][0] mismatch! Actual x, Expected 0eaa6ecae
# Test Case 49 FAIL: C[1][1] mismatch! Actual x, Expected 03fdbbf26
# Test Case 49 FAIL: C[1][2] mismatch! Actual x, Expected 12788094a
# Test Case 49 FAIL: C[1][3] mismatch! Actual x, Expected 0e0562a17
# Test Case 49 FAIL: C[2][0] mismatch! Actual x, Expected 127d8ad67
# Test Case 49 FAIL: C[2][1] mismatch! Actual x, Expected 0b740e6d5
# Test Case 49 FAIL: C[2][2] mismatch! Actual x, Expected 118925944
# Test Case 49 FAIL: C[2][3] mismatch! Actual x, Expected 1d9ef1a60
# Test Case 49 FAIL: C[3][0] mismatch! Actual x, Expected 0d9495e65
# Test Case 49 FAIL: C[3][1] mismatch! Actual x, Expected 0817b5003
# Test Case 49 FAIL: C[3][2] mismatch! Actual x, Expected 0fe7702a5
# Test Case 49 FAIL: C[3][3] mismatch! Actual x, Expected 15e2dc54b
# Test Case 49 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 50 of 100
# ===================================================
# Reading test case 50:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            40516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with caeb
#   Loading A[0][1] (Bank 1, Addr 0) with d63d
#   Loading A[0][2] (Bank 2, Addr 0) with 7b56
#   Loading A[0][3] (Bank 3, Addr 0) with aaac
#   Loading A[1][0] (Bank 0, Addr 1) with 8ac3
#   Loading A[1][1] (Bank 1, Addr 1) with 2636
#   Loading A[1][2] (Bank 2, Addr 1) with bbe5
#   Loading A[1][3] (Bank 3, Addr 1) with 5543
#   Loading A[2][0] (Bank 0, Addr 2) with 7464
#   Loading A[2][1] (Bank 1, Addr 2) with fe33
#   Loading A[2][2] (Bank 2, Addr 2) with e5a7
#   Loading A[2][3] (Bank 3, Addr 2) with 28e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7a69
#   Loading A[3][1] (Bank 1, Addr 3) with 2a45
#   Loading A[3][2] (Bank 2, Addr 3) with b91d
#   Loading A[3][3] (Bank 3, Addr 3) with a838
#   Loading B[0][0] (Bank 0, Addr 0) with a718
#   Loading B[0][1] (Bank 1, Addr 0) with 2c15
#   Loading B[0][2] (Bank 2, Addr 0) with 9eaa
#   Loading B[0][3] (Bank 3, Addr 0) with 0f2e
#   Loading B[1][0] (Bank 0, Addr 1) with 94ae
#   Loading B[1][1] (Bank 1, Addr 1) with ffac
#   Loading B[1][2] (Bank 2, Addr 1) with 89a9
#   Loading B[1][3] (Bank 3, Addr 1) with 7d0e
#   Loading B[2][0] (Bank 0, Addr 2) with 3e3c
#   Loading B[2][1] (Bank 1, Addr 2) with cab9
#   Loading B[2][2] (Bank 2, Addr 2) with 76b1
#   Loading B[2][3] (Bank 3, Addr 2) with 8517
#   Loading B[3][0] (Bank 0, Addr 3) with 5f77
#   Loading B[3][1] (Bank 1, Addr 3) with 8fb6
#   Loading B[3][2] (Bank 2, Addr 3) with efad
#   Loading B[3][3] (Bank 3, Addr 3) with f6c1
# Matrix loading complete.
# @            40855000 Simulating controller signals to execute multiplication...
# @40875000: Starting input feeding sequence...
# @40875000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @40886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            41155000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 50...
# Test Case 50 FAIL: C[0][0] mismatch! Actual x, Expected 11efabcd1
# Test Case 50 FAIL: C[0][1] mismatch! Actual x, Expected 14e693335
# Test Case 50 FAIL: C[0][2] mismatch! Actual x, Expected 170f310e2
# Test Case 50 FAIL: C[0][3] mismatch! Actual x, Expected 10250a109
# Test Case 50 FAIL: C[1][0] mismatch! Actual x, Expected 0ef964073
# Test Case 50 FAIL: C[1][1] mismatch! Actual x, Expected 12c140e32
# Test Case 50 FAIL: C[1][2] mismatch! Actual x, Expected 136c2490c
# Test Case 50 FAIL: C[1][3] mismatch! Actual x, Expected 0cc440884
# Test Case 50 FAIL: C[2][0] mismatch! Actual x, Expected 13a7cd855
# Test Case 50 FAIL: C[2][1] mismatch! Actual x, Expected 1eeaac837
# Test Case 50 FAIL: C[2][2] mismatch! Actual x, Expected 1c9438059
# Test Case 50 FAIL: C[2][3] mismatch! Actual x, Expected 18ceb1cd8
# Test Case 50 FAIL: C[3][0] mismatch! Actual x, Expected 0e9962eaa
# Test Case 50 FAIL: C[3][1] mismatch! Actual x, Expected 0f1595542
# Test Case 50 FAIL: C[3][2] mismatch! Actual x, Expected 14813088d
# Test Case 50 FAIL: C[3][3] mismatch! Actual x, Expected 0eb2ad818
# Test Case 50 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 51 of 100
# ===================================================
# Reading test case 51:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            41326000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b94a
#   Loading A[0][1] (Bank 1, Addr 0) with aaca
#   Loading A[0][2] (Bank 2, Addr 0) with 02d1
#   Loading A[0][3] (Bank 3, Addr 0) with 87a3
#   Loading A[1][0] (Bank 0, Addr 1) with 65c8
#   Loading A[1][1] (Bank 1, Addr 1) with e1d0
#   Loading A[1][2] (Bank 2, Addr 1) with 4a3e
#   Loading A[1][3] (Bank 3, Addr 1) with ca6d
#   Loading A[2][0] (Bank 0, Addr 2) with 2dec
#   Loading A[2][1] (Bank 1, Addr 2) with ff83
#   Loading A[2][2] (Bank 2, Addr 2) with 2067
#   Loading A[2][3] (Bank 3, Addr 2) with 0323
#   Loading A[3][0] (Bank 0, Addr 3) with 6b4e
#   Loading A[3][1] (Bank 1, Addr 3) with 6af9
#   Loading A[3][2] (Bank 2, Addr 3) with 244c
#   Loading A[3][3] (Bank 3, Addr 3) with 37a9
#   Loading B[0][0] (Bank 0, Addr 0) with a0dd
#   Loading B[0][1] (Bank 1, Addr 0) with 4c0f
#   Loading B[0][2] (Bank 2, Addr 0) with 9956
#   Loading B[0][3] (Bank 3, Addr 0) with 082c
#   Loading B[1][0] (Bank 0, Addr 1) with 48c5
#   Loading B[1][1] (Bank 1, Addr 1) with d24a
#   Loading B[1][2] (Bank 2, Addr 1) with 0690
#   Loading B[1][3] (Bank 3, Addr 1) with 8ba3
#   Loading B[2][0] (Bank 0, Addr 2) with f5c6
#   Loading B[2][1] (Bank 1, Addr 2) with b3e8
#   Loading B[2][2] (Bank 2, Addr 2) with 8108
#   Loading B[2][3] (Bank 3, Addr 2) with 0cf6
#   Loading B[3][0] (Bank 0, Addr 3) with 6c69
#   Loading B[3][1] (Bank 1, Addr 3) with d834
#   Loading B[3][2] (Bank 2, Addr 3) with 5131
#   Loading B[3][3] (Bank 3, Addr 3) with 21ac
# Matrix loading complete.
# @            41665000 Simulating controller signals to execute multiplication...
# @41685000: Starting input feeding sequence...
# @41685000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @41696000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            41965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 51...
# Test Case 51 FAIL: C[0][0] mismatch! Actual x, Expected 0eae41350
# Test Case 51 FAIL: C[0][1] mismatch! Actual x, Expected 1058d8cde
# Test Case 51 FAIL: C[0][2] mismatch! Actual x, Expected 0aac4fcaa
# Test Case 51 FAIL: C[0][3] mismatch! Actual x, Expected 04ddee640
# Test Case 51 FAIL: C[1][0] mismatch! Actual x, Expected 1ce1cdfe5
# Test Case 51 FAIL: C[1][1] mismatch! Actual x, Expected 1fa23da42
# Test Case 51 FAIL: C[1][2] mismatch! Actual x, Expected 10ecc409d
# Test Case 51 FAIL: C[1][3] mismatch! Actual x, Expected 09ba10656
# Test Case 51 FAIL: C[2][0] mismatch! Actual x, Expected 0455a35f9
# Test Case 51 FAIL: C[2][1] mismatch! Actual x, Expected 0733f69f3
# Test Case 51 FAIL: C[2][2] mismatch! Actual x, Expected 01f6efada
# Test Case 51 FAIL: C[2][3] mismatch! Actual x, Expected 02f001970
# Test Case 51 FAIL: C[3][0] mismatch! Actual x, Expected 0a95a71fb
# Test Case 51 FAIL: C[3][1] mismatch! Actual x, Expected 0ffca7b1b
# Test Case 51 FAIL: C[3][2] mismatch! Actual x, Expected 069aa4383
# Test Case 51 FAIL: C[3][3] mismatch! Actual x, Expected 07a395099
# Test Case 51 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 52 of 100
# ===================================================
# Reading test case 52:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            42136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 70f2
#   Loading A[0][1] (Bank 1, Addr 0) with 7b1e
#   Loading A[0][2] (Bank 2, Addr 0) with 9b94
#   Loading A[0][3] (Bank 3, Addr 0) with ed32
#   Loading A[1][0] (Bank 0, Addr 1) with 764d
#   Loading A[1][1] (Bank 1, Addr 1) with f3bf
#   Loading A[1][2] (Bank 2, Addr 1) with bf10
#   Loading A[1][3] (Bank 3, Addr 1) with 3c11
#   Loading A[2][0] (Bank 0, Addr 2) with ba25
#   Loading A[2][1] (Bank 1, Addr 2) with fbdc
#   Loading A[2][2] (Bank 2, Addr 2) with a986
#   Loading A[2][3] (Bank 3, Addr 2) with b2fe
#   Loading A[3][0] (Bank 0, Addr 3) with 055a
#   Loading A[3][1] (Bank 1, Addr 3) with 8483
#   Loading A[3][2] (Bank 2, Addr 3) with 8d57
#   Loading A[3][3] (Bank 3, Addr 3) with 34b4
#   Loading B[0][0] (Bank 0, Addr 0) with 6bf5
#   Loading B[0][1] (Bank 1, Addr 0) with cc1b
#   Loading B[0][2] (Bank 2, Addr 0) with a477
#   Loading B[0][3] (Bank 3, Addr 0) with ad22
#   Loading B[1][0] (Bank 0, Addr 1) with 3832
#   Loading B[1][1] (Bank 1, Addr 1) with bd08
#   Loading B[1][2] (Bank 2, Addr 1) with dce4
#   Loading B[1][3] (Bank 3, Addr 1) with 7128
#   Loading B[2][0] (Bank 0, Addr 2) with 243d
#   Loading B[2][1] (Bank 1, Addr 2) with 8a65
#   Loading B[2][2] (Bank 2, Addr 2) with 699d
#   Loading B[2][3] (Bank 3, Addr 2) with 3fde
#   Loading B[3][0] (Bank 0, Addr 3) with b1da
#   Loading B[3][1] (Bank 1, Addr 3) with 82a8
#   Loading B[3][2] (Bank 2, Addr 3) with 437e
#   Loading B[3][3] (Bank 3, Addr 3) with e961
# Matrix loading complete.
# @            42475000 Simulating controller signals to execute multiplication...
# @42495000: Starting input feeding sequence...
# @42495000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @42506000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            42775000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 52...
# Test Case 52 FAIL: C[0][0] mismatch! Actual x, Expected 067aa8819
# Test Case 52 FAIL: C[0][1] mismatch! Actual x, Expected 118c3e697
# Test Case 52 FAIL: C[0][2] mismatch! Actual x, Expected 0fcd7970f
# Test Case 52 FAIL: C[0][3] mismatch! Actual x, Expected 0b3fe7b5c
# Test Case 52 FAIL: C[1][0] mismatch! Actual x, Expected 0e9231efe
# Test Case 52 FAIL: C[1][1] mismatch! Actual x, Expected 1e1edf6e6
# Test Case 52 FAIL: C[1][2] mismatch! Actual x, Expected 1ac40e074
# Test Case 52 FAIL: C[1][3] mismatch! Actual x, Expected 176a4023f
# Test Case 52 FAIL: C[2][0] mismatch! Actual x, Expected 0e5bd51c8
# Test Case 52 FAIL: C[2][1] mismatch! Actual x, Expected 1ace72e12
# Test Case 52 FAIL: C[2][2] mismatch! Actual x, Expected 174024f0c
# Test Case 52 FAIL: C[2][3] mismatch! Actual x, Expected 168d05153
# Test Case 52 FAIL: C[3][0] mismatch! Actual x, Expected 0af2a0dfa
# Test Case 52 FAIL: C[3][1] mismatch! Actual x, Expected 16520d224
# Test Case 52 FAIL: C[3][2] mismatch! Actual x, Expected 123f365c0
# Test Case 52 FAIL: C[3][3] mismatch! Actual x, Expected 117aab4c4
# Test Case 52 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 53 of 100
# ===================================================
# Reading test case 53:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            42946000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8957
#   Loading A[0][1] (Bank 1, Addr 0) with b6d0
#   Loading A[0][2] (Bank 2, Addr 0) with 99f8
#   Loading A[0][3] (Bank 3, Addr 0) with f302
#   Loading A[1][0] (Bank 0, Addr 1) with ded0
#   Loading A[1][1] (Bank 1, Addr 1) with 78fc
#   Loading A[1][2] (Bank 2, Addr 1) with f6dd
#   Loading A[1][3] (Bank 3, Addr 1) with e583
#   Loading A[2][0] (Bank 0, Addr 2) with 8306
#   Loading A[2][1] (Bank 1, Addr 2) with 7d28
#   Loading A[2][2] (Bank 2, Addr 2) with c68e
#   Loading A[2][3] (Bank 3, Addr 2) with 9371
#   Loading A[3][0] (Bank 0, Addr 3) with a73d
#   Loading A[3][1] (Bank 1, Addr 3) with 5afc
#   Loading A[3][2] (Bank 2, Addr 3) with 8bd4
#   Loading A[3][3] (Bank 3, Addr 3) with d1f4
#   Loading B[0][0] (Bank 0, Addr 0) with 59f9
#   Loading B[0][1] (Bank 1, Addr 0) with 6d34
#   Loading B[0][2] (Bank 2, Addr 0) with c07f
#   Loading B[0][3] (Bank 3, Addr 0) with aef4
#   Loading B[1][0] (Bank 0, Addr 1) with 1848
#   Loading B[1][1] (Bank 1, Addr 1) with 0b16
#   Loading B[1][2] (Bank 2, Addr 1) with 9fd0
#   Loading B[1][3] (Bank 3, Addr 1) with e219
#   Loading B[2][0] (Bank 0, Addr 2) with 002e
#   Loading B[2][1] (Bank 1, Addr 2) with 0d23
#   Loading B[2][2] (Bank 2, Addr 2) with 35a8
#   Loading B[2][3] (Bank 3, Addr 2) with 0a28
#   Loading B[3][0] (Bank 0, Addr 3) with 8646
#   Loading B[3][1] (Bank 1, Addr 3) with dbe7
#   Loading B[3][2] (Bank 2, Addr 3) with ca02
#   Loading B[3][3] (Bank 3, Addr 3) with 8ae0
# Matrix loading complete.
# @            43285000 Simulating controller signals to execute multiplication...
# @43305000: Starting input feeding sequence...
# @43305000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @43316000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            43585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 53...
# Test Case 53 FAIL: C[0][0] mismatch! Actual x, Expected 09d3632e1
# Test Case 53 FAIL: C[0][1] mismatch! Actual x, Expected 0da9d5569
# Test Case 53 FAIL: C[0][2] mismatch! Actual x, Expected 191cb4593
# Test Case 53 FAIL: C[0][3] mismatch! Actual x, Expected 18291578c
# Test Case 53 FAIL: C[1][0] mismatch! Actual x, Expected 07b890d48
# Test Case 53 FAIL: C[1][1] mismatch! Actual x, Expected 0a7ccbdc4
# Test Case 53 FAIL: C[1][2] mismatch! Actual x, Expected 137047a28
# Test Case 53 FAIL: C[1][3] mismatch! Actual x, Expected 11e1c799c
# Test Case 53 FAIL: C[2][0] mismatch! Actual x, Expected 0970201dc
# Test Case 53 FAIL: C[2][1] mismatch! Actual x, Expected 0ceab7814
# Test Case 53 FAIL: C[2][2] mismatch! Actual x, Expected 1a5d64b70
# Test Case 53 FAIL: C[2][3] mismatch! Actual x, Expected 196fbb9a5
# Test Case 53 FAIL: C[3][0] mismatch! Actual x, Expected 0d96682d0
# Test Case 53 FAIL: C[3][1] mismatch! Actual x, Expected 12d83a549
# Test Case 53 FAIL: C[3][2] mismatch! Actual x, Expected 20a94387e
# Test Case 53 FAIL: C[3][3] mismatch! Actual x, Expected 1e885badb
# Test Case 53 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 54 of 100
# ===================================================
# Reading test case 54:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            43756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d78c
#   Loading A[0][1] (Bank 1, Addr 0) with 966f
#   Loading A[0][2] (Bank 2, Addr 0) with 34be
#   Loading A[0][3] (Bank 3, Addr 0) with 9a2a
#   Loading A[1][0] (Bank 0, Addr 1) with d9a7
#   Loading A[1][1] (Bank 1, Addr 1) with 9831
#   Loading A[1][2] (Bank 2, Addr 1) with 0ad9
#   Loading A[1][3] (Bank 3, Addr 1) with f72e
#   Loading A[2][0] (Bank 0, Addr 2) with 5693
#   Loading A[2][1] (Bank 1, Addr 2) with 9ed2
#   Loading A[2][2] (Bank 2, Addr 2) with 7cb4
#   Loading A[2][3] (Bank 3, Addr 2) with f1e3
#   Loading A[3][0] (Bank 0, Addr 3) with 2365
#   Loading A[3][1] (Bank 1, Addr 3) with f00f
#   Loading A[3][2] (Bank 2, Addr 3) with 3235
#   Loading A[3][3] (Bank 3, Addr 3) with 07ac
#   Loading B[0][0] (Bank 0, Addr 0) with 66c4
#   Loading B[0][1] (Bank 1, Addr 0) with 218b
#   Loading B[0][2] (Bank 2, Addr 0) with 0130
#   Loading B[0][3] (Bank 3, Addr 0) with 4a74
#   Loading B[1][0] (Bank 0, Addr 1) with 699d
#   Loading B[1][1] (Bank 1, Addr 1) with 307d
#   Loading B[1][2] (Bank 2, Addr 1) with ea3d
#   Loading B[1][3] (Bank 3, Addr 1) with 40c6
#   Loading B[2][0] (Bank 0, Addr 2) with 2ed4
#   Loading B[2][1] (Bank 1, Addr 2) with 50db
#   Loading B[2][2] (Bank 2, Addr 2) with 321a
#   Loading B[2][3] (Bank 3, Addr 2) with 8fa7
#   Loading B[3][0] (Bank 0, Addr 3) with ab8b
#   Loading B[3][1] (Bank 1, Addr 3) with 8236
#   Loading B[3][2] (Bank 2, Addr 3) with 374b
#   Loading B[3][3] (Bank 3, Addr 3) with d81e
# Matrix loading complete.
# @            44095000 Simulating controller signals to execute multiplication...
# @44115000: Starting input feeding sequence...
# @44115000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @44126000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            44395000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 54...
# Test Case 54 FAIL: C[0][0] mismatch! Actual x, Expected 0d7df942e
# Test Case 54 FAIL: C[0][1] mismatch! Actual x, Expected 072d06c9e
# Test Case 54 FAIL: C[0][2] mismatch! Actual x, Expected 0e0bd0b90
# Test Case 54 FAIL: C[0][3] mismatch! Actual x, Expected 0c4382f55
# Test Case 54 FAIL: C[1][0] mismatch! Actual x, Expected 139167516
# Test Case 54 FAIL: C[1][1] mismatch! Actual x, Expected 0dccd3c02
# Test Case 54 FAIL: C[1][2] mismatch! Actual x, Expected 0dee26436
# Test Case 54 FAIL: C[1][3] mismatch! Actual x, Expected 17609e8f2
# Test Case 54 FAIL: C[2][0] mismatch! Actual x, Expected 0521a0464
# Test Case 54 FAIL: C[2][1] mismatch! Actual x, Expected 049e38c49
# Test Case 54 FAIL: C[2][2] mismatch! Actual x, Expected 02d6b7c24
# Test Case 54 FAIL: C[2][3] mismatch! Actual x, Expected 08271f590
# Test Case 54 FAIL: C[3][0] mismatch! Actual x, Expected 0d53f61be
# Test Case 54 FAIL: C[3][1] mismatch! Actual x, Expected 0935143bd
# Test Case 54 FAIL: C[3][2] mismatch! Actual x, Expected 113e11e48
# Test Case 54 FAIL: C[3][3] mismatch! Actual x, Expected 0f9964ad9
# Test Case 54 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 55 of 100
# ===================================================
# Reading test case 55:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            44566000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with af76
#   Loading A[0][1] (Bank 1, Addr 0) with 4a33
#   Loading A[0][2] (Bank 2, Addr 0) with 62c6
#   Loading A[0][3] (Bank 3, Addr 0) with d55f
#   Loading A[1][0] (Bank 0, Addr 1) with fc16
#   Loading A[1][1] (Bank 1, Addr 1) with f8b1
#   Loading A[1][2] (Bank 2, Addr 1) with efdc
#   Loading A[1][3] (Bank 3, Addr 1) with 6ece
#   Loading A[2][0] (Bank 0, Addr 2) with 02a3
#   Loading A[2][1] (Bank 1, Addr 2) with 51ac
#   Loading A[2][2] (Bank 2, Addr 2) with d0ae
#   Loading A[2][3] (Bank 3, Addr 2) with 54bc
#   Loading A[3][0] (Bank 0, Addr 3) with 5b6d
#   Loading A[3][1] (Bank 1, Addr 3) with ec6a
#   Loading A[3][2] (Bank 2, Addr 3) with 6d7d
#   Loading A[3][3] (Bank 3, Addr 3) with 186d
#   Loading B[0][0] (Bank 0, Addr 0) with 7963
#   Loading B[0][1] (Bank 1, Addr 0) with 5e72
#   Loading B[0][2] (Bank 2, Addr 0) with 78f9
#   Loading B[0][3] (Bank 3, Addr 0) with e043
#   Loading B[1][0] (Bank 0, Addr 1) with 7415
#   Loading B[1][1] (Bank 1, Addr 1) with f36e
#   Loading B[1][2] (Bank 2, Addr 1) with 066c
#   Loading B[1][3] (Bank 3, Addr 1) with 09a4
#   Loading B[2][0] (Bank 0, Addr 2) with f774
#   Loading B[2][1] (Bank 1, Addr 2) with 4fc5
#   Loading B[2][2] (Bank 2, Addr 2) with 5e04
#   Loading B[2][3] (Bank 3, Addr 2) with 31b6
#   Loading B[3][0] (Bank 0, Addr 3) with 32c3
#   Loading B[3][1] (Bank 1, Addr 3) with 5197
#   Loading B[3][2] (Bank 2, Addr 3) with e384
#   Loading B[3][3] (Bank 3, Addr 3) with f20d
# Matrix loading complete.
# @            44905000 Simulating controller signals to execute multiplication...
# @44925000: Starting input feeding sequence...
# @44925000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @44936000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            45205000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 55...
# Test Case 55 FAIL: C[0][0] mismatch! Actual x, Expected 0da2eab53
# Test Case 55 FAIL: C[0][1] mismatch! Actual x, Expected 14e6668ba
# Test Case 55 FAIL: C[0][2] mismatch! Actual x, Expected 0ab7586ce
# Test Case 55 FAIL: C[0][3] mismatch! Actual x, Expected 0fa283165
# Test Case 55 FAIL: C[1][0] mismatch! Actual x, Expected 111c625ec
# Test Case 55 FAIL: C[1][1] mismatch! Actual x, Expected 16ca68da6
# Test Case 55 FAIL: C[1][2] mismatch! Actual x, Expected 11967779f
# Test Case 55 FAIL: C[1][3] mismatch! Actual x, Expected 139c1c767
# Test Case 55 FAIL: C[2][0] mismatch! Actual x, Expected 17b0566ad
# Test Case 55 FAIL: C[2][1] mismatch! Actual x, Expected 16c70fe55
# Test Case 55 FAIL: C[2][2] mismatch! Actual x, Expected 0e2a2ad92
# Test Case 55 FAIL: C[2][3] mismatch! Actual x, Expected 0ef9ae1cf
# Test Case 55 FAIL: C[3][0] mismatch! Actual x, Expected 0ee2a87da
# Test Case 55 FAIL: C[3][1] mismatch! Actual x, Expected 0da452ac9
# Test Case 55 FAIL: C[3][2] mismatch! Actual x, Expected 09c6f3e73
# Test Case 55 FAIL: C[3][3] mismatch! Actual x, Expected 0e6a3b306
# Test Case 55 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 56 of 100
# ===================================================
# Reading test case 56:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            45376000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 26b6
#   Loading A[0][1] (Bank 1, Addr 0) with 1485
#   Loading A[0][2] (Bank 2, Addr 0) with 3466
#   Loading A[0][3] (Bank 3, Addr 0) with 3474
#   Loading A[1][0] (Bank 0, Addr 1) with f6ae
#   Loading A[1][1] (Bank 1, Addr 1) with 3867
#   Loading A[1][2] (Bank 2, Addr 1) with ce86
#   Loading A[1][3] (Bank 3, Addr 1) with 2baf
#   Loading A[2][0] (Bank 0, Addr 2) with 77e0
#   Loading A[2][1] (Bank 1, Addr 2) with 597e
#   Loading A[2][2] (Bank 2, Addr 2) with a185
#   Loading A[2][3] (Bank 3, Addr 2) with fe3c
#   Loading A[3][0] (Bank 0, Addr 3) with a144
#   Loading A[3][1] (Bank 1, Addr 3) with 2b89
#   Loading A[3][2] (Bank 2, Addr 3) with 03b1
#   Loading A[3][3] (Bank 3, Addr 3) with 0ce8
#   Loading B[0][0] (Bank 0, Addr 0) with 9c53
#   Loading B[0][1] (Bank 1, Addr 0) with 75ae
#   Loading B[0][2] (Bank 2, Addr 0) with 9d35
#   Loading B[0][3] (Bank 3, Addr 0) with 5b8f
#   Loading B[1][0] (Bank 0, Addr 1) with 5977
#   Loading B[1][1] (Bank 1, Addr 1) with 4d84
#   Loading B[1][2] (Bank 2, Addr 1) with abf2
#   Loading B[1][3] (Bank 3, Addr 1) with b174
#   Loading B[2][0] (Bank 0, Addr 2) with 6f16
#   Loading B[2][1] (Bank 1, Addr 2) with 4e4c
#   Loading B[2][2] (Bank 2, Addr 2) with e697
#   Loading B[2][3] (Bank 3, Addr 2) with 0a13
#   Loading B[3][0] (Bank 0, Addr 3) with 168b
#   Loading B[3][1] (Bank 1, Addr 3) with b14b
#   Loading B[3][2] (Bank 2, Addr 3) with 6c9c
#   Loading B[3][3] (Bank 3, Addr 3) with 5e4a
# Matrix loading complete.
# @            45715000 Simulating controller signals to execute multiplication...
# @45735000: Starting input feeding sequence...
# @45735000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @45746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            46015000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 56...
# Test Case 56 FAIL: C[0][0] mismatch! Actual x, Expected 0b0107310
# Test Case 56 FAIL: C[0][1] mismatch! Actual x, Expected 0f0d61ed8
# Test Case 56 FAIL: C[0][2] mismatch! Actual x, Expected 16dd9f6ba
# Test Case 56 FAIL: C[0][3] mismatch! Actual x, Expected 0f8f3a1ca
# Test Case 56 FAIL: C[1][0] mismatch! Actual x, Expected 04ae87637
# Test Case 56 FAIL: C[1][1] mismatch! Actual x, Expected 054083b0d
# Test Case 56 FAIL: C[1][2] mismatch! Actual x, Expected 095903fb5
# Test Case 56 FAIL: C[1][3] mismatch! Actual x, Expected 041fdf6eb
# Test Case 56 FAIL: C[2][0] mismatch! Actual x, Expected 0ae957ee5
# Test Case 56 FAIL: C[2][1] mismatch! Actual x, Expected 08a93f5c3
# Test Case 56 FAIL: C[2][2] mismatch! Actual x, Expected 13df1d319
# Test Case 56 FAIL: C[2][3] mismatch! Actual x, Expected 0a99cffbb
# Test Case 56 FAIL: C[3][0] mismatch! Actual x, Expected 09ec0a615
# Test Case 56 FAIL: C[3][1] mismatch! Actual x, Expected 07c08c5dc
# Test Case 56 FAIL: C[3][2] mismatch! Actual x, Expected 12806cb36
# Test Case 56 FAIL: C[3][3] mismatch! Actual x, Expected 03fcc749c
# Test Case 56 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 57 of 100
# ===================================================
# Reading test case 57:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            46186000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 004c
#   Loading A[0][1] (Bank 1, Addr 0) with 5741
#   Loading A[0][2] (Bank 2, Addr 0) with b626
#   Loading A[0][3] (Bank 3, Addr 0) with c6e1
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with 78a8
#   Loading A[1][2] (Bank 2, Addr 1) with 9528
#   Loading A[1][3] (Bank 3, Addr 1) with dcce
#   Loading A[2][0] (Bank 0, Addr 2) with 72a5
#   Loading A[2][1] (Bank 1, Addr 2) with e5e0
#   Loading A[2][2] (Bank 2, Addr 2) with 1511
#   Loading A[2][3] (Bank 3, Addr 2) with b2d2
#   Loading A[3][0] (Bank 0, Addr 3) with 6352
#   Loading A[3][1] (Bank 1, Addr 3) with 3fb9
#   Loading A[3][2] (Bank 2, Addr 3) with 6fd8
#   Loading A[3][3] (Bank 3, Addr 3) with 4a1a
#   Loading B[0][0] (Bank 0, Addr 0) with 783c
#   Loading B[0][1] (Bank 1, Addr 0) with e8fd
#   Loading B[0][2] (Bank 2, Addr 0) with 83a8
#   Loading B[0][3] (Bank 3, Addr 0) with ef22
#   Loading B[1][0] (Bank 0, Addr 1) with 0b2d
#   Loading B[1][1] (Bank 1, Addr 1) with 00be
#   Loading B[1][2] (Bank 2, Addr 1) with 90bd
#   Loading B[1][3] (Bank 3, Addr 1) with e62f
#   Loading B[2][0] (Bank 0, Addr 2) with a4ed
#   Loading B[2][1] (Bank 1, Addr 2) with de57
#   Loading B[2][2] (Bank 2, Addr 2) with 8036
#   Loading B[2][3] (Bank 3, Addr 2) with fd16
#   Loading B[3][0] (Bank 0, Addr 3) with 8e5c
#   Loading B[3][1] (Bank 1, Addr 3) with 2e90
#   Loading B[3][2] (Bank 2, Addr 3) with a6a4
#   Loading B[3][3] (Bank 3, Addr 3) with a430
# Matrix loading complete.
# @            46525000 Simulating controller signals to execute multiplication...
# @46545000: Starting input feeding sequence...
# @46545000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @46556000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            46825000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 57...
# Test Case 57 FAIL: C[0][0] mismatch! Actual x, Expected 085079252
# Test Case 57 FAIL: C[0][1] mismatch! Actual x, Expected 076286cf5
# Test Case 57 FAIL: C[0][2] mismatch! Actual x, Expected 0ab7025cf
# Test Case 57 FAIL: C[0][3] mismatch! Actual x, Expected 0ff96ba09
# Test Case 57 FAIL: C[1][0] mismatch! Actual x, Expected 0e5c72da0
# Test Case 57 FAIL: C[1][1] mismatch! Actual x, Expected 12300251d
# Test Case 57 FAIL: C[1][2] mismatch! Actual x, Expected 10db25f74
# Test Case 57 FAIL: C[1][3] mismatch! Actual x, Expected 1ca1ef46a
# Test Case 57 FAIL: C[2][0] mismatch! Actual x, Expected 0a7d3d74d
# Test Case 57 FAIL: C[2][1] mismatch! Actual x, Expected 0ccd8c785
# Test Case 57 FAIL: C[2][2] mismatch! Actual x, Expected 1055c416e
# Test Case 57 FAIL: C[2][3] mismatch! Actual x, Expected 18cd1f25a
# Test Case 57 FAIL: C[3][0] mismatch! Actual x, Expected 10374e0b4
# Test Case 57 FAIL: C[3][1] mismatch! Actual x, Expected 15e6d913f
# Test Case 57 FAIL: C[3][2] mismatch! Actual x, Expected 16ce997b2
# Test Case 57 FAIL: C[3][3] mismatch! Actual x, Expected 2609f8ba0
# Test Case 57 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 58 of 100
# ===================================================
# Reading test case 58:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            46996000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00f1
#   Loading A[0][1] (Bank 1, Addr 0) with 44e6
#   Loading A[0][2] (Bank 2, Addr 0) with 1f50
#   Loading A[0][3] (Bank 3, Addr 0) with f9d8
#   Loading A[1][0] (Bank 0, Addr 1) with e300
#   Loading A[1][1] (Bank 1, Addr 1) with 8e7c
#   Loading A[1][2] (Bank 2, Addr 1) with 0b71
#   Loading A[1][3] (Bank 3, Addr 1) with 84e0
#   Loading A[2][0] (Bank 0, Addr 2) with 1ca8
#   Loading A[2][1] (Bank 1, Addr 2) with d4ee
#   Loading A[2][2] (Bank 2, Addr 2) with 810e
#   Loading A[2][3] (Bank 3, Addr 2) with 2c2e
#   Loading A[3][0] (Bank 0, Addr 3) with 4641
#   Loading A[3][1] (Bank 1, Addr 3) with c339
#   Loading A[3][2] (Bank 2, Addr 3) with c97d
#   Loading A[3][3] (Bank 3, Addr 3) with 7aeb
#   Loading B[0][0] (Bank 0, Addr 0) with 9e8b
#   Loading B[0][1] (Bank 1, Addr 0) with 85a2
#   Loading B[0][2] (Bank 2, Addr 0) with 931b
#   Loading B[0][3] (Bank 3, Addr 0) with 254e
#   Loading B[1][0] (Bank 0, Addr 1) with b9d2
#   Loading B[1][1] (Bank 1, Addr 1) with e7ee
#   Loading B[1][2] (Bank 2, Addr 1) with b486
#   Loading B[1][3] (Bank 3, Addr 1) with 6f70
#   Loading B[2][0] (Bank 0, Addr 2) with 68b3
#   Loading B[2][1] (Bank 1, Addr 2) with 1c90
#   Loading B[2][2] (Bank 2, Addr 2) with 7bb7
#   Loading B[2][3] (Bank 3, Addr 2) with 3018
#   Loading B[3][0] (Bank 0, Addr 3) with 0581
#   Loading B[3][1] (Bank 1, Addr 3) with 0b11
#   Loading B[3][2] (Bank 2, Addr 3) with b5fb
#   Loading B[3][3] (Bank 3, Addr 3) with 7ae2
# Matrix loading complete.
# @            47335000 Simulating controller signals to execute multiplication...
# @47355000: Starting input feeding sequence...
# @47355000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @47366000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            47635000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 58...
# Test Case 58 FAIL: C[0][0] mismatch! Actual x, Expected 0b2956c14
# Test Case 58 FAIL: C[0][1] mismatch! Actual x, Expected 0d461cb53
# Test Case 58 FAIL: C[0][2] mismatch! Actual x, Expected 0e067593e
# Test Case 58 FAIL: C[0][3] mismatch! Actual x, Expected 08a0e9d90
# Test Case 58 FAIL: C[1][0] mismatch! Actual x, Expected 0ed5fe9bd
# Test Case 58 FAIL: C[1][1] mismatch! Actual x, Expected 0c53faa7d
# Test Case 58 FAIL: C[1][2] mismatch! Actual x, Expected 17dbe612f
# Test Case 58 FAIL: C[1][3] mismatch! Actual x, Expected 0cdc66ef6
# Test Case 58 FAIL: C[2][0] mismatch! Actual x, Expected 054cf51e9
# Test Case 58 FAIL: C[2][1] mismatch! Actual x, Expected 031d1dadb
# Test Case 58 FAIL: C[2][2] mismatch! Actual x, Expected 0e7a89827
# Test Case 58 FAIL: C[2][3] mismatch! Actual x, Expected 08281467a
# Test Case 58 FAIL: C[3][0] mismatch! Actual x, Expected 10fe3f39d
# Test Case 58 FAIL: C[3][1] mismatch! Actual x, Expected 1050b1f6b
# Test Case 58 FAIL: C[3][2] mismatch! Actual x, Expected 159fec953
# Test Case 58 FAIL: C[3][3] mismatch! Actual x, Expected 0a18cdf96
# Test Case 58 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 59 of 100
# ===================================================
# Reading test case 59:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            47806000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b8a6
#   Loading A[0][1] (Bank 1, Addr 0) with f372
#   Loading A[0][2] (Bank 2, Addr 0) with fb67
#   Loading A[0][3] (Bank 3, Addr 0) with 45fe
#   Loading A[1][0] (Bank 0, Addr 1) with 57af
#   Loading A[1][1] (Bank 1, Addr 1) with 7994
#   Loading A[1][2] (Bank 2, Addr 1) with dc16
#   Loading A[1][3] (Bank 3, Addr 1) with d9ec
#   Loading A[2][0] (Bank 0, Addr 2) with 2fe5
#   Loading A[2][1] (Bank 1, Addr 2) with 0596
#   Loading A[2][2] (Bank 2, Addr 2) with 938e
#   Loading A[2][3] (Bank 3, Addr 2) with 2bc9
#   Loading A[3][0] (Bank 0, Addr 3) with a548
#   Loading A[3][1] (Bank 1, Addr 3) with 6564
#   Loading A[3][2] (Bank 2, Addr 3) with 2b6c
#   Loading A[3][3] (Bank 3, Addr 3) with 9894
#   Loading B[0][0] (Bank 0, Addr 0) with 66ea
#   Loading B[0][1] (Bank 1, Addr 0) with 6340
#   Loading B[0][2] (Bank 2, Addr 0) with aaa0
#   Loading B[0][3] (Bank 3, Addr 0) with 8280
#   Loading B[1][0] (Bank 0, Addr 1) with 24d0
#   Loading B[1][1] (Bank 1, Addr 1) with 0b72
#   Loading B[1][2] (Bank 2, Addr 1) with c69b
#   Loading B[1][3] (Bank 3, Addr 1) with 5d67
#   Loading B[2][0] (Bank 0, Addr 2) with f6a0
#   Loading B[2][1] (Bank 1, Addr 2) with 6771
#   Loading B[2][2] (Bank 2, Addr 2) with 93db
#   Loading B[2][3] (Bank 3, Addr 2) with da0e
#   Loading B[3][0] (Bank 0, Addr 3) with 8578
#   Loading B[3][1] (Bank 1, Addr 3) with 0e4d
#   Loading B[3][2] (Bank 2, Addr 3) with f46f
#   Loading B[3][3] (Bank 3, Addr 3) with ffc1
# Matrix loading complete.
# @            48145000 Simulating controller signals to execute multiplication...
# @48165000: Starting input feeding sequence...
# @48165000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @48176000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            48445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 59...
# Test Case 59 FAIL: C[0][0] mismatch! Actual x, Expected 0db26a4cc
# Test Case 59 FAIL: C[0][1] mismatch! Actual x, Expected 06817da2b
# Test Case 59 FAIL: C[0][2] mismatch! Actual x, Expected 17891d6d4
# Test Case 59 FAIL: C[0][3] mismatch! Actual x, Expected 14c096d37
# Test Case 59 FAIL: C[1][0] mismatch! Actual x, Expected 0ad97a714
# Test Case 59 FAIL: C[1][1] mismatch! Actual x, Expected 06bbd3ab2
# Test Case 59 FAIL: C[1][2] mismatch! Actual x, Expected 1649d1f8a
# Test Case 59 FAIL: C[1][3] mismatch! Actual x, Expected 112826224
# Test Case 59 FAIL: C[2][0] mismatch! Actual x, Expected 12980e366
# Test Case 59 FAIL: C[2][1] mismatch! Actual x, Expected 0a95addb6
# Test Case 59 FAIL: C[2][2] mismatch! Actual x, Expected 1d0fc5400
# Test Case 59 FAIL: C[2][3] mismatch! Actual x, Expected 17984da8a
# Test Case 59 FAIL: C[3][0] mismatch! Actual x, Expected 0b5345aec
# Test Case 59 FAIL: C[3][1] mismatch! Actual x, Expected 03f1817d5
# Test Case 59 FAIL: C[3][2] mismatch! Actual x, Expected 182affcc3
# Test Case 59 FAIL: C[3][3] mismatch! Actual x, Expected 130ea6786
# Test Case 59 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 60 of 100
# ===================================================
# Reading test case 60:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            48616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2794
#   Loading A[0][1] (Bank 1, Addr 0) with 49e8
#   Loading A[0][2] (Bank 2, Addr 0) with befa
#   Loading A[0][3] (Bank 3, Addr 0) with 1159
#   Loading A[1][0] (Bank 0, Addr 1) with 8aee
#   Loading A[1][1] (Bank 1, Addr 1) with 436e
#   Loading A[1][2] (Bank 2, Addr 1) with 75f0
#   Loading A[1][3] (Bank 3, Addr 1) with f082
#   Loading A[2][0] (Bank 0, Addr 2) with 0d49
#   Loading A[2][1] (Bank 1, Addr 2) with e22c
#   Loading A[2][2] (Bank 2, Addr 2) with e210
#   Loading A[2][3] (Bank 3, Addr 2) with 564c
#   Loading A[3][0] (Bank 0, Addr 3) with 942a
#   Loading A[3][1] (Bank 1, Addr 3) with a2b4
#   Loading A[3][2] (Bank 2, Addr 3) with 8194
#   Loading A[3][3] (Bank 3, Addr 3) with b8be
#   Loading B[0][0] (Bank 0, Addr 0) with 1788
#   Loading B[0][1] (Bank 1, Addr 0) with 0c4d
#   Loading B[0][2] (Bank 2, Addr 0) with 3499
#   Loading B[0][3] (Bank 3, Addr 0) with 8353
#   Loading B[1][0] (Bank 0, Addr 1) with ea3e
#   Loading B[1][1] (Bank 1, Addr 1) with 420b
#   Loading B[1][2] (Bank 2, Addr 1) with 192b
#   Loading B[1][3] (Bank 3, Addr 1) with c596
#   Loading B[2][0] (Bank 0, Addr 2) with a0bd
#   Loading B[2][1] (Bank 1, Addr 2) with 77dc
#   Loading B[2][2] (Bank 2, Addr 2) with 9b4b
#   Loading B[2][3] (Bank 3, Addr 2) with 37f8
#   Loading B[3][0] (Bank 0, Addr 3) with ba7d
#   Loading B[3][1] (Bank 1, Addr 3) with dc4a
#   Loading B[3][2] (Bank 2, Addr 3) with 8152
#   Loading B[3][3] (Bank 3, Addr 3) with 7716
# Matrix loading complete.
# @            48955000 Simulating controller signals to execute multiplication...
# @48975000: Starting input feeding sequence...
# @48975000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @48986000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            49255000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 60...
# Test Case 60 FAIL: C[0][0] mismatch! Actual x, Expected 0f708cfab
# Test Case 60 FAIL: C[0][1] mismatch! Actual x, Expected 0ab75719e
# Test Case 60 FAIL: C[0][2] mismatch! Actual x, Expected 068b20245
# Test Case 60 FAIL: C[0][3] mismatch! Actual x, Expected 0c75bedc4
# Test Case 60 FAIL: C[1][0] mismatch! Actual x, Expected 14906b044
# Test Case 60 FAIL: C[1][1] mismatch! Actual x, Expected 10ad8e65a
# Test Case 60 FAIL: C[1][2] mismatch! Actual x, Expected 0f13415ae
# Test Case 60 FAIL: C[1][3] mismatch! Actual x, Expected 0d7170cc4
# Test Case 60 FAIL: C[2][0] mismatch! Actual x, Expected 169cd8e04
# Test Case 60 FAIL: C[2][1] mismatch! Actual x, Expected 100f2750a
# Test Case 60 FAIL: C[2][2] mismatch! Actual x, Expected 0fd6c2ad2
# Test Case 60 FAIL: C[2][3] mismatch! Actual x, Expected 12ab201e6
# Test Case 60 FAIL: C[3][0] mismatch! Actual x, Expected 19a6cc0a6
# Test Case 60 FAIL: C[3][1] mismatch! Actual x, Expected 106416997
# Test Case 60 FAIL: C[3][2] mismatch! Actual x, Expected 0ace1c127
# Test Case 60 FAIL: C[3][3] mismatch! Actual x, Expected 12b5540fb
# Test Case 60 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 61 of 100
# ===================================================
# Reading test case 61:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            49426000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 54f1
#   Loading A[0][1] (Bank 1, Addr 0) with a6ae
#   Loading A[0][2] (Bank 2, Addr 0) with 4b05
#   Loading A[0][3] (Bank 3, Addr 0) with 8099
#   Loading A[1][0] (Bank 0, Addr 1) with 7a1f
#   Loading A[1][1] (Bank 1, Addr 1) with fac6
#   Loading A[1][2] (Bank 2, Addr 1) with 00cf
#   Loading A[1][3] (Bank 3, Addr 1) with 7ac5
#   Loading A[2][0] (Bank 0, Addr 2) with c02b
#   Loading A[2][1] (Bank 1, Addr 2) with 3749
#   Loading A[2][2] (Bank 2, Addr 2) with fc04
#   Loading A[2][3] (Bank 3, Addr 2) with 2395
#   Loading A[3][0] (Bank 0, Addr 3) with f72f
#   Loading A[3][1] (Bank 1, Addr 3) with 89e8
#   Loading A[3][2] (Bank 2, Addr 3) with fc6d
#   Loading A[3][3] (Bank 3, Addr 3) with 8241
#   Loading B[0][0] (Bank 0, Addr 0) with 8521
#   Loading B[0][1] (Bank 1, Addr 0) with aaad
#   Loading B[0][2] (Bank 2, Addr 0) with aeed
#   Loading B[0][3] (Bank 3, Addr 0) with cec1
#   Loading B[1][0] (Bank 0, Addr 1) with 8afb
#   Loading B[1][1] (Bank 1, Addr 1) with 1bf1
#   Loading B[1][2] (Bank 2, Addr 1) with 0bd0
#   Loading B[1][3] (Bank 3, Addr 1) with 0e90
#   Loading B[2][0] (Bank 0, Addr 2) with d0c5
#   Loading B[2][1] (Bank 1, Addr 2) with 3ec4
#   Loading B[2][2] (Bank 2, Addr 2) with 4109
#   Loading B[2][3] (Bank 3, Addr 2) with 0bea
#   Loading B[3][0] (Bank 0, Addr 3) with 2cac
#   Loading B[3][1] (Bank 1, Addr 3) with e547
#   Loading B[3][2] (Bank 2, Addr 3) with 97b3
#   Loading B[3][3] (Bank 3, Addr 3) with 7be9
# Matrix loading complete.
# @            49765000 Simulating controller signals to execute multiplication...
# @49785000: Starting input feeding sequence...
# @49785000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @49796000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            50065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 61...
# Test Case 61 FAIL: C[0][0] mismatch! Actual x, Expected 136519321
# Test Case 61 FAIL: C[0][1] mismatch! Actual x, Expected 15274d101
# Test Case 61 FAIL: C[0][2] mismatch! Actual x, Expected 102f83aad
# Test Case 61 FAIL: C[0][3] mismatch! Actual x, Expected 0cc226a36
# Test Case 61 FAIL: C[1][0] mismatch! Actual x, Expected 123f8e19d
# Test Case 61 FAIL: C[1][1] mismatch! Actual x, Expected 1138fef38
# Test Case 61 FAIL: C[1][2] mismatch! Actual x, Expected 0dd3a95bf
# Test Case 61 FAIL: C[1][3] mismatch! Actual x, Expected 0da343870
# Test Case 61 FAIL: C[2][0] mismatch! Actual x, Expected 1210529ea
# Test Case 61 FAIL: C[2][1] mismatch! Actual x, Expected 151f80a8b
# Test Case 61 FAIL: C[2][2] mismatch! Actual x, Expected 108e7122c
# Test Case 61 FAIL: C[2][3] mismatch! Actual x, Expected 0c28b0112
# Test Case 61 FAIL: C[3][0] mismatch! Actual x, Expected 0b945c335
# Test Case 61 FAIL: C[3][1] mismatch! Actual x, Expected 0e08474f5
# Test Case 61 FAIL: C[3][2] mismatch! Actual x, Expected 0b3c2c265
# Test Case 61 FAIL: C[3][3] mismatch! Actual x, Expected 0af8b9b84
# Test Case 61 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 62 of 100
# ===================================================
# Reading test case 62:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            50236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 455b
#   Loading A[0][1] (Bank 1, Addr 0) with 2ca8
#   Loading A[0][2] (Bank 2, Addr 0) with a907
#   Loading A[0][3] (Bank 3, Addr 0) with 9ff4
#   Loading A[1][0] (Bank 0, Addr 1) with 15f9
#   Loading A[1][1] (Bank 1, Addr 1) with defa
#   Loading A[1][2] (Bank 2, Addr 1) with 8dbd
#   Loading A[1][3] (Bank 3, Addr 1) with 728d
#   Loading A[2][0] (Bank 0, Addr 2) with f09f
#   Loading A[2][1] (Bank 1, Addr 2) with 0f24
#   Loading A[2][2] (Bank 2, Addr 2) with 7f9a
#   Loading A[2][3] (Bank 3, Addr 2) with e091
#   Loading A[3][0] (Bank 0, Addr 3) with 860e
#   Loading A[3][1] (Bank 1, Addr 3) with ad72
#   Loading A[3][2] (Bank 2, Addr 3) with bc40
#   Loading A[3][3] (Bank 3, Addr 3) with 7f97
#   Loading B[0][0] (Bank 0, Addr 0) with 8e56
#   Loading B[0][1] (Bank 1, Addr 0) with f539
#   Loading B[0][2] (Bank 2, Addr 0) with c0f3
#   Loading B[0][3] (Bank 3, Addr 0) with 4bfa
#   Loading B[1][0] (Bank 0, Addr 1) with 4db3
#   Loading B[1][1] (Bank 1, Addr 1) with 6272
#   Loading B[1][2] (Bank 2, Addr 1) with 76d7
#   Loading B[1][3] (Bank 3, Addr 1) with 187b
#   Loading B[2][0] (Bank 0, Addr 2) with 0a68
#   Loading B[2][1] (Bank 1, Addr 2) with 1c48
#   Loading B[2][2] (Bank 2, Addr 2) with 7b11
#   Loading B[2][3] (Bank 3, Addr 2) with 9b09
#   Loading B[3][0] (Bank 0, Addr 3) with ddb4
#   Loading B[3][1] (Bank 1, Addr 3) with 0320
#   Loading B[3][2] (Bank 2, Addr 3) with a1dc
#   Loading B[3][3] (Bank 3, Addr 3) with ab7f
# Matrix loading complete.
# @            50575000 Simulating controller signals to execute multiplication...
# @50595000: Starting input feeding sequence...
# @50595000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @50606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            50875000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 62...
# Test Case 62 FAIL: C[0][0] mismatch! Actual x, Expected 0ab1b571d
# Test Case 62 FAIL: C[0][1] mismatch! Actual x, Expected 0671a9f9d
# Test Case 62 FAIL: C[0][2] mismatch! Actual x, Expected 106e7b117
# Test Case 62 FAIL: C[0][3] mismatch! Actual x, Expected 10235e00a
# Test Case 62 FAIL: C[1][0] mismatch! Actual x, Expected 0f3543806
# Test Case 62 FAIL: C[1][1] mismatch! Actual x, Expected 0844fef1c
# Test Case 62 FAIL: C[1][2] mismatch! Actual x, Expected 0fe1bf0ca
# Test Case 62 FAIL: C[1][3] mismatch! Actual x, Expected 09fefec00
# Test Case 62 FAIL: C[2][0] mismatch! Actual x, Expected 131371611
# Test Case 62 FAIL: C[2][1] mismatch! Actual x, Expected 0e8cfd109
# Test Case 62 FAIL: C[2][2] mismatch! Actual x, Expected 1758f579a
# Test Case 62 FAIL: C[2][3] mismatch! Actual x, Expected 10b1acdcf
# Test Case 62 FAIL: C[3][0] mismatch! Actual x, Expected 0f3538ba3
# Test Case 62 FAIL: C[3][1] mismatch! Actual x, Expected 0dfa2dac6
# Test Case 62 FAIL: C[3][2] mismatch! Actual x, Expected 16a5c386c
# Test Case 62 FAIL: C[3][3] mismatch! Actual x, Expected 117e5cb09
# Test Case 62 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 63 of 100
# ===================================================
# Reading test case 63:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            51046000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 649b
#   Loading A[0][1] (Bank 1, Addr 0) with fd2e
#   Loading A[0][2] (Bank 2, Addr 0) with 6f15
#   Loading A[0][3] (Bank 3, Addr 0) with 6619
#   Loading A[1][0] (Bank 0, Addr 1) with 8952
#   Loading A[1][1] (Bank 1, Addr 1) with ae97
#   Loading A[1][2] (Bank 2, Addr 1) with d0b5
#   Loading A[1][3] (Bank 3, Addr 1) with ccc0
#   Loading A[2][0] (Bank 0, Addr 2) with c897
#   Loading A[2][1] (Bank 1, Addr 2) with befb
#   Loading A[2][2] (Bank 2, Addr 2) with cf95
#   Loading A[2][3] (Bank 3, Addr 2) with 7a10
#   Loading A[3][0] (Bank 0, Addr 3) with 28d9
#   Loading A[3][1] (Bank 1, Addr 3) with 477c
#   Loading A[3][2] (Bank 2, Addr 3) with 1931
#   Loading A[3][3] (Bank 3, Addr 3) with 0a4a
#   Loading B[0][0] (Bank 0, Addr 0) with ead2
#   Loading B[0][1] (Bank 1, Addr 0) with 22b6
#   Loading B[0][2] (Bank 2, Addr 0) with b96e
#   Loading B[0][3] (Bank 3, Addr 0) with 43b0
#   Loading B[1][0] (Bank 0, Addr 1) with d169
#   Loading B[1][1] (Bank 1, Addr 1) with 2e22
#   Loading B[1][2] (Bank 2, Addr 1) with c38d
#   Loading B[1][3] (Bank 3, Addr 1) with 969d
#   Loading B[2][0] (Bank 0, Addr 2) with 59c0
#   Loading B[2][1] (Bank 1, Addr 2) with 5871
#   Loading B[2][2] (Bank 2, Addr 2) with 5179
#   Loading B[2][3] (Bank 3, Addr 2) with 6722
#   Loading B[3][0] (Bank 0, Addr 3) with 0074
#   Loading B[3][1] (Bank 1, Addr 3) with 86df
#   Loading B[3][2] (Bank 2, Addr 3) with a568
#   Loading B[3][3] (Bank 3, Addr 3) with 98ce
# Matrix loading complete.
# @            51385000 Simulating controller signals to execute multiplication...
# @51405000: Starting input feeding sequence...
# @51405000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @51416000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            51685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 63...
# Test Case 63 FAIL: C[0][0] mismatch! Actual x, Expected 11301ec5c
# Test Case 63 FAIL: C[0][1] mismatch! Actual x, Expected 08134b2c4
# Test Case 63 FAIL: C[0][2] mismatch! Actual x, Expected 10bff614b
# Test Case 63 FAIL: C[0][3] mismatch! Actual x, Expected 0d4951a86
# Test Case 63 FAIL: C[1][0] mismatch! Actual x, Expected 1ba21821b
# Test Case 63 FAIL: C[1][1] mismatch! Actual x, Expected 0a96e2e91
# Test Case 63 FAIL: C[1][2] mismatch! Actual x, Expected 1a7b7dbf2
# Test Case 63 FAIL: C[1][3] mismatch! Actual x, Expected 121442659
# Test Case 63 FAIL: C[2][0] mismatch! Actual x, Expected 1596f976b
# Test Case 63 FAIL: C[2][1] mismatch! Actual x, Expected 089a8716c
# Test Case 63 FAIL: C[2][2] mismatch! Actual x, Expected 14239ce0c
# Test Case 63 FAIL: C[2][3] mismatch! Actual x, Expected 0fad2cca9
# Test Case 63 FAIL: C[3][0] mismatch! Actual x, Expected 12ff31aca
# Test Case 63 FAIL: C[3][1] mismatch! Actual x, Expected 06254accc
# Test Case 63 FAIL: C[3][2] mismatch! Actual x, Expected 113d9971e
# Test Case 63 FAIL: C[3][3] mismatch! Actual x, Expected 0cac5ab9c
# Test Case 63 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 64 of 100
# ===================================================
# Reading test case 64:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_64/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_64/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_64/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            51856000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6532
#   Loading A[0][1] (Bank 1, Addr 0) with 8234
#   Loading A[0][2] (Bank 2, Addr 0) with e295
#   Loading A[0][3] (Bank 3, Addr 0) with 13ce
#   Loading A[1][0] (Bank 0, Addr 1) with 102e
#   Loading A[1][1] (Bank 1, Addr 1) with 6d28
#   Loading A[1][2] (Bank 2, Addr 1) with 27ea
#   Loading A[1][3] (Bank 3, Addr 1) with 3a12
#   Loading A[2][0] (Bank 0, Addr 2) with d1cf
#   Loading A[2][1] (Bank 1, Addr 2) with 3d8e
#   Loading A[2][2] (Bank 2, Addr 2) with cfc1
#   Loading A[2][3] (Bank 3, Addr 2) with f388
#   Loading A[3][0] (Bank 0, Addr 3) with 12bf
#   Loading A[3][1] (Bank 1, Addr 3) with 06a5
#   Loading A[3][2] (Bank 2, Addr 3) with f413
#   Loading A[3][3] (Bank 3, Addr 3) with 3786
#   Loading B[0][0] (Bank 0, Addr 0) with 5fe7
#   Loading B[0][1] (Bank 1, Addr 0) with d146
#   Loading B[0][2] (Bank 2, Addr 0) with 12cd
#   Loading B[0][3] (Bank 3, Addr 0) with 831a
#   Loading B[1][0] (Bank 0, Addr 1) with 1198
#   Loading B[1][1] (Bank 1, Addr 1) with 0770
#   Loading B[1][2] (Bank 2, Addr 1) with c26e
#   Loading B[1][3] (Bank 3, Addr 1) with 676a
#   Loading B[2][0] (Bank 0, Addr 2) with 6915
#   Loading B[2][1] (Bank 1, Addr 2) with dc9d
#   Loading B[2][2] (Bank 2, Addr 2) with 91a8
#   Loading B[2][3] (Bank 3, Addr 2) with 590a
#   Loading B[3][0] (Bank 0, Addr 3) with 38dc
#   Loading B[3][1] (Bank 1, Addr 3) with 8491
#   Loading B[3][2] (Bank 2, Addr 3) with ad06
#   Loading B[3][3] (Bank 3, Addr 3) with 4444
# Matrix loading complete.
# @            52195000 Simulating controller signals to execute multiplication...
# @52215000: Starting input feeding sequence...
# @52215000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @52226000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
quit -sim
# End time: 11:14:40 on May 16,2025, Elapsed time: 0:01:33
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 11:22:19 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint sim:/datapath_tb/execute_multiplication/execute_multiplication/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @               20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @              355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @375000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @              665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual x, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @              836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @             1175000 Simulating controller signals to execute multiplication...
# @1195000: Starting input feeding sequence...
# @1195000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             1485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual x, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual x, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual x, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual x, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual x, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual x, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual x, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual x, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual x, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual x, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual x, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual x, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual x, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual x, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual x, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             1656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @             1995000 Simulating controller signals to execute multiplication...
# @2015000: Starting input feeding sequence...
# @2015000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             2305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual x, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual x, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual x, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual x, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual x, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual x, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual x, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual x, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual x, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual x, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual x, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual x, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual x, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual x, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual x, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             2476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @             2815000 Simulating controller signals to execute multiplication...
# @2835000: Starting input feeding sequence...
# @2835000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2846000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3125000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual x, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual x, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual x, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual x, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual x, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual x, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual x, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual x, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual x, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual x, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual x, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual x, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual x, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual x, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual x, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             3296000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @             3635000 Simulating controller signals to execute multiplication...
# @3655000: Starting input feeding sequence...
# @3655000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3666000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual x, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual x, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual x, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual x, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual x, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual x, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual x, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual x, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual x, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual x, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual x, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual x, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual x, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual x, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual x, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @             4455000 Simulating controller signals to execute multiplication...
# @4475000: Starting input feeding sequence...
# @4475000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             4765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual x, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual x, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual x, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual x, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual x, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual x, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual x, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual x, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual x, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual x, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual x, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual x, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual x, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual x, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual x, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @             5275000 Simulating controller signals to execute multiplication...
# @5295000: Starting input feeding sequence...
# @5295000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual x, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual x, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual x, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual x, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual x, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual x, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual x, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual x, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual x, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual x, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual x, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual x, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual x, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual x, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual x, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             5756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @             6095000 Simulating controller signals to execute multiplication...
# @6115000: Starting input feeding sequence...
# @6115000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6126000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             6405000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual x, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual x, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual x, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual x, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual x, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual x, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual x, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual x, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual x, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual x, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual x, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual x, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual x, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual x, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual x, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6576000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @             6915000 Simulating controller signals to execute multiplication...
# @6935000: Starting input feeding sequence...
# @6935000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6946000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             7225000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual x, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual x, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual x, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual x, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual x, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual x, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual x, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual x, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual x, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual x, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual x, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual x, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual x, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual x, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual x, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             7396000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @             7735000 Simulating controller signals to execute multiplication...
# @7755000: Starting input feeding sequence...
# @7755000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 0, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual x, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual x, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual x, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual x, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual x, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual x, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual x, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual x, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual x, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual x, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual x, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual x, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual x, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual x, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual x, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             8216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @             8555000 Simulating controller signals to execute multiplication...
# @8575000: Starting input feeding sequence...
# @8575000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 0, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual x, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual x, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual x, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual x, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual x, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual x, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual x, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual x, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual x, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual x, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual x, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual x, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual x, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual x, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual x, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @             9375000 Simulating controller signals to execute multiplication...
# @9395000: Starting input feeding sequence...
# @9395000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             9685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual x, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual x, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual x, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual x, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual x, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual x, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual x, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual x, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual x, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual x, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual x, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual x, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual x, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual x, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual x, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9856000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @            10195000 Simulating controller signals to execute multiplication...
# @10215000: Starting input feeding sequence...
# @10215000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10226000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            10505000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual x, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual x, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual x, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual x, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual x, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual x, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual x, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual x, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual x, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual x, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual x, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual x, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual x, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual x, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual x, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            10676000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @            11015000 Simulating controller signals to execute multiplication...
# @11035000: Starting input feeding sequence...
# @11035000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual x, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual x, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual x, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual x, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual x, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual x, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual x, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual x, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual x, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual x, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual x, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual x, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual x, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual x, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual x, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            11496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @            11835000 Simulating controller signals to execute multiplication...
# @11855000: Starting input feeding sequence...
# @11855000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual x, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual x, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual x, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual x, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual x, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual x, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual x, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual x, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual x, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual x, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual x, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual x, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual x, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual x, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual x, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @            12655000 Simulating controller signals to execute multiplication...
# @12675000: Starting input feeding sequence...
# @12675000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual 0, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual x, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual x, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual x, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual x, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual x, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual x, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual x, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual x, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual x, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual x, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual x, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual x, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual x, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual x, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual x, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 1, Addr 0) with 0cc3
#   Loading A[0][2] (Bank 2, Addr 0) with 2d23
#   Loading A[0][3] (Bank 3, Addr 0) with c654
#   Loading A[1][0] (Bank 0, Addr 1) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 2, Addr 1) with e87e
#   Loading A[1][3] (Bank 3, Addr 1) with 6d0d
#   Loading A[2][0] (Bank 0, Addr 2) with a8cf
#   Loading A[2][1] (Bank 1, Addr 2) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 3, Addr 2) with f0ac
#   Loading A[3][0] (Bank 0, Addr 3) with a4d5
#   Loading A[3][1] (Bank 1, Addr 3) with 337b
#   Loading A[3][2] (Bank 2, Addr 3) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @            13475000 Simulating controller signals to execute multiplication...
# @13495000: Starting input feeding sequence...
# @13495000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13506000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            13785000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual 0, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual x, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual x, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual x, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual x, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual x, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual x, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual x, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual x, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual x, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual x, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual x, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual x, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual x, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual x, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual x, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13956000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 1, Addr 0) with 33ae
#   Loading A[0][2] (Bank 2, Addr 0) with 1949
#   Loading A[0][3] (Bank 3, Addr 0) with c2ac
#   Loading A[1][0] (Bank 0, Addr 1) with 74ca
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 2, Addr 1) with 5b33
#   Loading A[1][3] (Bank 3, Addr 1) with 086c
#   Loading A[2][0] (Bank 0, Addr 2) with 1549
#   Loading A[2][1] (Bank 1, Addr 2) with 602f
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 3, Addr 2) with bc83
#   Loading A[3][0] (Bank 0, Addr 3) with a3b9
#   Loading A[3][1] (Bank 1, Addr 3) with bfbe
#   Loading A[3][2] (Bank 2, Addr 3) with 0884
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[0][1] (Bank 1, Addr 0) with 4904
#   Loading B[0][2] (Bank 2, Addr 0) with 8a0c
#   Loading B[0][3] (Bank 3, Addr 0) with b0ba
#   Loading B[1][0] (Bank 0, Addr 1) with 4193
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[1][2] (Bank 2, Addr 1) with b102
#   Loading B[1][3] (Bank 3, Addr 1) with 0e75
#   Loading B[2][0] (Bank 0, Addr 2) with c8a1
#   Loading B[2][1] (Bank 1, Addr 2) with b09f
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[2][3] (Bank 3, Addr 2) with 4b2b
#   Loading B[3][0] (Bank 0, Addr 3) with b8e2
#   Loading B[3][1] (Bank 1, Addr 3) with a481
#   Loading B[3][2] (Bank 2, Addr 3) with 2498
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @            14295000 Simulating controller signals to execute multiplication...
# @14315000: Starting input feeding sequence...
# @14315000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            14605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual 0, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual x, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual x, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual x, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual x, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual x, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual x, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual x, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual x, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual x, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual x, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual x, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual x, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual x, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual x, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual x, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            14776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 1, Addr 0) with 4374
#   Loading A[0][2] (Bank 2, Addr 0) with d8de
#   Loading A[0][3] (Bank 3, Addr 0) with 0bcd
#   Loading A[1][0] (Bank 0, Addr 1) with ebff
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 2, Addr 1) with 5315
#   Loading A[1][3] (Bank 3, Addr 1) with 377a
#   Loading A[2][0] (Bank 0, Addr 2) with 881b
#   Loading A[2][1] (Bank 1, Addr 2) with 3ecf
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 3, Addr 2) with 5223
#   Loading A[3][0] (Bank 0, Addr 3) with 87cd
#   Loading A[3][1] (Bank 1, Addr 3) with 2a6f
#   Loading A[3][2] (Bank 2, Addr 3) with c889
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[0][1] (Bank 1, Addr 0) with 00f3
#   Loading B[0][2] (Bank 2, Addr 0) with a35c
#   Loading B[0][3] (Bank 3, Addr 0) with aa65
#   Loading B[1][0] (Bank 0, Addr 1) with 222b
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[1][2] (Bank 2, Addr 1) with da28
#   Loading B[1][3] (Bank 3, Addr 1) with eaa8
#   Loading B[2][0] (Bank 0, Addr 2) with ff56
#   Loading B[2][1] (Bank 1, Addr 2) with 6ba0
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[2][3] (Bank 3, Addr 2) with 90d1
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc4
#   Loading B[3][1] (Bank 1, Addr 3) with 671c
#   Loading B[3][2] (Bank 2, Addr 3) with ba64
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @            15115000 Simulating controller signals to execute multiplication...
# @15135000: Starting input feeding sequence...
# @15135000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            15425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual 0, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual x, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual x, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual x, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual x, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual x, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual x, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual x, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual x, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual x, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual x, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual x, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual x, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual x, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual x, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual x, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            15596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 1, Addr 0) with e7d1
#   Loading A[0][2] (Bank 2, Addr 0) with 03a8
#   Loading A[0][3] (Bank 3, Addr 0) with 97d0
#   Loading A[1][0] (Bank 0, Addr 1) with 9a37
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 2, Addr 1) with cb14
#   Loading A[1][3] (Bank 3, Addr 1) with 916b
#   Loading A[2][0] (Bank 0, Addr 2) with 3e85
#   Loading A[2][1] (Bank 1, Addr 2) with 83c8
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 3, Addr 2) with ead0
#   Loading A[3][0] (Bank 0, Addr 3) with ac60
#   Loading A[3][1] (Bank 1, Addr 3) with 5c5f
#   Loading A[3][2] (Bank 2, Addr 3) with 3852
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[0][1] (Bank 1, Addr 0) with ad8e
#   Loading B[0][2] (Bank 2, Addr 0) with 9a34
#   Loading B[0][3] (Bank 3, Addr 0) with 7f8e
#   Loading B[1][0] (Bank 0, Addr 1) with 5d1a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[1][2] (Bank 2, Addr 1) with 9ffd
#   Loading B[1][3] (Bank 3, Addr 1) with 6841
#   Loading B[2][0] (Bank 0, Addr 2) with 3375
#   Loading B[2][1] (Bank 1, Addr 2) with 6107
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[2][3] (Bank 3, Addr 2) with 6583
#   Loading B[3][0] (Bank 0, Addr 3) with db9d
#   Loading B[3][1] (Bank 1, Addr 3) with 492a
#   Loading B[3][2] (Bank 2, Addr 3) with 66cd
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @            15935000 Simulating controller signals to execute multiplication...
# @15955000: Starting input feeding sequence...
# @15955000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            16245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual 0, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual x, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual x, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual x, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual x, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual x, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual x, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual x, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual x, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual x, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual x, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual x, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual x, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual x, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual x, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual x, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            16416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 1, Addr 0) with 3fa9
#   Loading A[0][2] (Bank 2, Addr 0) with 6ddd
#   Loading A[0][3] (Bank 3, Addr 0) with d7cf
#   Loading A[1][0] (Bank 0, Addr 1) with 6b9d
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 2, Addr 1) with aafa
#   Loading A[1][3] (Bank 3, Addr 1) with d2a3
#   Loading A[2][0] (Bank 0, Addr 2) with 8dec
#   Loading A[2][1] (Bank 1, Addr 2) with e147
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 3, Addr 2) with 1b9c
#   Loading A[3][0] (Bank 0, Addr 3) with 3fce
#   Loading A[3][1] (Bank 1, Addr 3) with 23f2
#   Loading A[3][2] (Bank 2, Addr 3) with 7c98
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[0][1] (Bank 1, Addr 0) with 08ee
#   Loading B[0][2] (Bank 2, Addr 0) with 33d2
#   Loading B[0][3] (Bank 3, Addr 0) with 6b1f
#   Loading B[1][0] (Bank 0, Addr 1) with 1532
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[1][2] (Bank 2, Addr 1) with b4e2
#   Loading B[1][3] (Bank 3, Addr 1) with 4267
#   Loading B[2][0] (Bank 0, Addr 2) with 9a2e
#   Loading B[2][1] (Bank 1, Addr 2) with 67b5
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 197e
#   Loading B[3][0] (Bank 0, Addr 3) with 72d3
#   Loading B[3][1] (Bank 1, Addr 3) with 030b
#   Loading B[3][2] (Bank 2, Addr 3) with 9c52
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @            16755000 Simulating controller signals to execute multiplication...
# @16775000: Starting input feeding sequence...
# @16775000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual 0, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual x, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual x, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual x, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual x, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual x, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual x, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual x, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual x, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual x, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual x, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual x, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual x, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual x, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual x, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual x, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            17236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 1, Addr 0) with 7631
#   Loading A[0][2] (Bank 2, Addr 0) with 08e8
#   Loading A[0][3] (Bank 3, Addr 0) with d98c
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 2, Addr 1) with 0b94
#   Loading A[1][3] (Bank 3, Addr 1) with a1d8
#   Loading A[2][0] (Bank 0, Addr 2) with be24
#   Loading A[2][1] (Bank 1, Addr 2) with 3dab
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 3, Addr 2) with b4a5
#   Loading A[3][0] (Bank 0, Addr 3) with 766e
#   Loading A[3][1] (Bank 1, Addr 3) with 5e6d
#   Loading A[3][2] (Bank 2, Addr 3) with bd75
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[0][1] (Bank 1, Addr 0) with 536a
#   Loading B[0][2] (Bank 2, Addr 0) with 8a59
#   Loading B[0][3] (Bank 3, Addr 0) with 3372
#   Loading B[1][0] (Bank 0, Addr 1) with ccbb
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[1][2] (Bank 2, Addr 1) with 5dd6
#   Loading B[1][3] (Bank 3, Addr 1) with 9215
#   Loading B[2][0] (Bank 0, Addr 2) with 56b7
#   Loading B[2][1] (Bank 1, Addr 2) with f0d1
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 21d0
#   Loading B[3][0] (Bank 0, Addr 3) with 11fc
#   Loading B[3][1] (Bank 1, Addr 3) with 1be3
#   Loading B[3][2] (Bank 2, Addr 3) with 54d6
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @            17575000 Simulating controller signals to execute multiplication...
# @17595000: Starting input feeding sequence...
# @17595000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual 0, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual x, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual x, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual x, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual x, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual x, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual x, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual x, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual x, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual x, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual x, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual x, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual x, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual x, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual x, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual x, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 1, Addr 0) with 1713
#   Loading A[0][2] (Bank 2, Addr 0) with fc9d
#   Loading A[0][3] (Bank 3, Addr 0) with d833
#   Loading A[1][0] (Bank 0, Addr 1) with 893b
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 2, Addr 1) with a562
#   Loading A[1][3] (Bank 3, Addr 1) with 4ca0
#   Loading A[2][0] (Bank 0, Addr 2) with 192d
#   Loading A[2][1] (Bank 1, Addr 2) with 4bfa
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 3, Addr 2) with 295a
#   Loading A[3][0] (Bank 0, Addr 3) with 783f
#   Loading A[3][1] (Bank 1, Addr 3) with 025b
#   Loading A[3][2] (Bank 2, Addr 3) with 5e47
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[0][1] (Bank 1, Addr 0) with f807
#   Loading B[0][2] (Bank 2, Addr 0) with 18a0
#   Loading B[0][3] (Bank 3, Addr 0) with c97d
#   Loading B[1][0] (Bank 0, Addr 1) with d1a4
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[1][2] (Bank 2, Addr 1) with b713
#   Loading B[1][3] (Bank 3, Addr 1) with e42e
#   Loading B[2][0] (Bank 0, Addr 2) with cd53
#   Loading B[2][1] (Bank 1, Addr 2) with 0a61
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[2][3] (Bank 3, Addr 2) with cd4b
#   Loading B[3][0] (Bank 0, Addr 3) with 1489
#   Loading B[3][1] (Bank 1, Addr 3) with 7ec8
#   Loading B[3][2] (Bank 2, Addr 3) with d878
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @            18395000 Simulating controller signals to execute multiplication...
# @18415000: Starting input feeding sequence...
# @18415000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            18705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual 0, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual x, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual x, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual x, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual x, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual x, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual x, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual x, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual x, Expected 16bea50ee
# Test Case 22 FAIL: C[2][1] mismatch! Actual x, Expected 1b4a3f648
# Test Case 22 FAIL: C[2][2] mismatch! Actual x, Expected 17ed8a09a
# Test Case 22 FAIL: C[2][3] mismatch! Actual x, Expected 227590bcd
# Test Case 22 FAIL: C[3][0] mismatch! Actual x, Expected 0906811ac
# Test Case 22 FAIL: C[3][1] mismatch! Actual x, Expected 127c3c8ff
# Test Case 22 FAIL: C[3][2] mismatch! Actual x, Expected 08f952008
# Test Case 22 FAIL: C[3][3] mismatch! Actual x, Expected 1206c5ac1
# Test Case 22 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 23 of 100
# ===================================================
# Reading test case 23:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9208
#   Loading A[0][1] (Bank 1, Addr 0) with 8d91
#   Loading A[0][2] (Bank 2, Addr 0) with 0f91
#   Loading A[0][3] (Bank 3, Addr 0) with 4324
#   Loading A[1][0] (Bank 0, Addr 1) with 1893
#   Loading A[1][1] (Bank 1, Addr 1) with e01e
#   Loading A[1][2] (Bank 2, Addr 1) with 7421
#   Loading A[1][3] (Bank 3, Addr 1) with 0c24
#   Loading A[2][0] (Bank 0, Addr 2) with 68d0
#   Loading A[2][1] (Bank 1, Addr 2) with ec47
#   Loading A[2][2] (Bank 2, Addr 2) with 6ef2
#   Loading A[2][3] (Bank 3, Addr 2) with 26a8
#   Loading A[3][0] (Bank 0, Addr 3) with 5427
#   Loading A[3][1] (Bank 1, Addr 3) with b764
#   Loading A[3][2] (Bank 2, Addr 3) with bc95
#   Loading A[3][3] (Bank 3, Addr 3) with 5dea
#   Loading B[0][0] (Bank 0, Addr 0) with 128b
#   Loading B[0][1] (Bank 1, Addr 0) with eb07
#   Loading B[0][2] (Bank 2, Addr 0) with ba48
#   Loading B[0][3] (Bank 3, Addr 0) with 9e00
#   Loading B[1][0] (Bank 0, Addr 1) with efbc
#   Loading B[1][1] (Bank 1, Addr 1) with db1c
#   Loading B[1][2] (Bank 2, Addr 1) with 7aba
#   Loading B[1][3] (Bank 3, Addr 1) with 1968
#   Loading B[2][0] (Bank 0, Addr 2) with d9d0
#   Loading B[2][1] (Bank 1, Addr 2) with 7a26
#   Loading B[2][2] (Bank 2, Addr 2) with 39df
#   Loading B[2][3] (Bank 3, Addr 2) with 6ed6
#   Loading B[3][0] (Bank 0, Addr 3) with b124
#   Loading B[3][1] (Bank 1, Addr 3) with cd33
#   Loading B[3][2] (Bank 2, Addr 3) with 6a50
#   Loading B[3][3] (Bank 3, Addr 3) with 0583
# Matrix loading complete.
# @            19215000 Simulating controller signals to execute multiplication...
# @19235000: Starting input feeding sequence...
# @19235000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            19525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 23...
# Test Case 23 FAIL: C[0][0] mismatch! Actual 0, Expected 0b4ff68c8
# Test Case 23 FAIL: C[0][1] mismatch! Actual x, Expected 1109074f1
# Test Case 23 FAIL: C[0][2] mismatch! Actual x, Expected 0b0aeda6e
# Test Case 23 FAIL: C[0][3] mismatch! Actual x, Expected 08bc2178d
# Test Case 23 FAIL: C[1][0] mismatch! Actual x, Expected 2240fbe83
# Test Case 23 FAIL: C[1][1] mismatch! Actual x, Expected 24586acb5
# Test Case 23 FAIL: C[1][2] mismatch! Actual x, Expected 15406a4ad
# Test Case 23 FAIL: C[1][3] mismatch! Actual x, Expected 0d7dc49b6
# Test Case 23 FAIL: C[2][0] mismatch! Actual x, Expected 14ec38d8b
# Test Case 23 FAIL: C[2][1] mismatch! Actual x, Expected 13dc8252e
# Test Case 23 FAIL: C[2][2] mismatch! Actual x, Expected 0aa64fc20
# Test Case 23 FAIL: C[2][3] mismatch! Actual x, Expected 0493a07f3
# Test Case 23 FAIL: C[3][0] mismatch! Actual x, Expected 0721b5264
# Test Case 23 FAIL: C[3][1] mismatch! Actual x, Expected 0a5c0e67a
# Test Case 23 FAIL: C[3][2] mismatch! Actual x, Expected 0666a55c0
# Test Case 23 FAIL: C[3][3] mismatch! Actual x, Expected 03d66cbce
# Test Case 23 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 24 of 100
# ===================================================
# Reading test case 24:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            19696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0891
#   Loading A[0][1] (Bank 1, Addr 0) with 3d27
#   Loading A[0][2] (Bank 2, Addr 0) with d5c0
#   Loading A[0][3] (Bank 3, Addr 0) with 7093
#   Loading A[1][0] (Bank 0, Addr 1) with c03d
#   Loading A[1][1] (Bank 1, Addr 1) with bbba
#   Loading A[1][2] (Bank 2, Addr 1) with e629
#   Loading A[1][3] (Bank 3, Addr 1) with a341
#   Loading A[2][0] (Bank 0, Addr 2) with a224
#   Loading A[2][1] (Bank 1, Addr 2) with b475
#   Loading A[2][2] (Bank 2, Addr 2) with 71ee
#   Loading A[2][3] (Bank 3, Addr 2) with cd06
#   Loading A[3][0] (Bank 0, Addr 3) with c965
#   Loading A[3][1] (Bank 1, Addr 3) with 0efe
#   Loading A[3][2] (Bank 2, Addr 3) with e79e
#   Loading A[3][3] (Bank 3, Addr 3) with d9c1
#   Loading B[0][0] (Bank 0, Addr 0) with b3fa
#   Loading B[0][1] (Bank 1, Addr 0) with 3827
#   Loading B[0][2] (Bank 2, Addr 0) with 9810
#   Loading B[0][3] (Bank 3, Addr 0) with 97ce
#   Loading B[1][0] (Bank 0, Addr 1) with ffef
#   Loading B[1][1] (Bank 1, Addr 1) with dc10
#   Loading B[1][2] (Bank 2, Addr 1) with 923e
#   Loading B[1][3] (Bank 3, Addr 1) with 3828
#   Loading B[2][0] (Bank 0, Addr 2) with a1be
#   Loading B[2][1] (Bank 1, Addr 2) with 17d2
#   Loading B[2][2] (Bank 2, Addr 2) with 81fb
#   Loading B[2][3] (Bank 3, Addr 2) with 4261
#   Loading B[3][0] (Bank 0, Addr 3) with 41fd
#   Loading B[3][1] (Bank 1, Addr 3) with 200a
#   Loading B[3][2] (Bank 2, Addr 3) with bc64
#   Loading B[3][3] (Bank 3, Addr 3) with c89a
# Matrix loading complete.
# @            20035000 Simulating controller signals to execute multiplication...
# @20055000: Starting input feeding sequence...
# @20055000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            20345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 24...
# Test Case 24 FAIL: C[0][0] mismatch! Actual 0, Expected 16090a516
# Test Case 24 FAIL: C[0][1] mismatch! Actual x, Expected 0cf6c3161
# Test Case 24 FAIL: C[0][2] mismatch! Actual x, Expected 1596fee96
# Test Case 24 FAIL: C[0][3] mismatch! Actual x, Expected 0f71a939c
# Test Case 24 FAIL: C[1][0] mismatch! Actual x, Expected 15c8c5898
# Test Case 24 FAIL: C[1][1] mismatch! Actual x, Expected 0c1744d77
# Test Case 24 FAIL: C[1][2] mismatch! Actual x, Expected 0f638cc6b
# Test Case 24 FAIL: C[1][3] mismatch! Actual x, Expected 087fb3a93
# Test Case 24 FAIL: C[2][0] mismatch! Actual x, Expected 2000ef691
# Test Case 24 FAIL: C[2][1] mismatch! Actual x, Expected 11c52d238
# Test Case 24 FAIL: C[2][2] mismatch! Actual x, Expected 1e6bda000
# Test Case 24 FAIL: C[2][3] mismatch! Actual x, Expected 184467b22
# Test Case 24 FAIL: C[3][0] mismatch! Actual x, Expected 1ac05066e
# Test Case 24 FAIL: C[3][1] mismatch! Actual x, Expected 0d35bb8eb
# Test Case 24 FAIL: C[3][2] mismatch! Actual x, Expected 1a878c334
# Test Case 24 FAIL: C[3][3] mismatch! Actual x, Expected 1465c06d2
# Test Case 24 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 25 of 100
# ===================================================
# Reading test case 25:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            20516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d286
#   Loading A[0][1] (Bank 1, Addr 0) with 4abb
#   Loading A[0][2] (Bank 2, Addr 0) with 7dc0
#   Loading A[0][3] (Bank 3, Addr 0) with bdd5
#   Loading A[1][0] (Bank 0, Addr 1) with 6b83
#   Loading A[1][1] (Bank 1, Addr 1) with 0021
#   Loading A[1][2] (Bank 2, Addr 1) with 60e7
#   Loading A[1][3] (Bank 3, Addr 1) with 9c2b
#   Loading A[2][0] (Bank 0, Addr 2) with 50a4
#   Loading A[2][1] (Bank 1, Addr 2) with fed1
#   Loading A[2][2] (Bank 2, Addr 2) with c6a9
#   Loading A[2][3] (Bank 3, Addr 2) with 5739
#   Loading A[3][0] (Bank 0, Addr 3) with bef9
#   Loading A[3][1] (Bank 1, Addr 3) with b753
#   Loading A[3][2] (Bank 2, Addr 3) with a8ee
#   Loading A[3][3] (Bank 3, Addr 3) with a16b
#   Loading B[0][0] (Bank 0, Addr 0) with 704d
#   Loading B[0][1] (Bank 1, Addr 0) with 8ab4
#   Loading B[0][2] (Bank 2, Addr 0) with 1bfa
#   Loading B[0][3] (Bank 3, Addr 0) with 354a
#   Loading B[1][0] (Bank 0, Addr 1) with 78c2
#   Loading B[1][1] (Bank 1, Addr 1) with 376c
#   Loading B[1][2] (Bank 2, Addr 1) with ced8
#   Loading B[1][3] (Bank 3, Addr 1) with 78de
#   Loading B[2][0] (Bank 0, Addr 2) with d2b2
#   Loading B[2][1] (Bank 1, Addr 2) with c525
#   Loading B[2][2] (Bank 2, Addr 2) with 038b
#   Loading B[2][3] (Bank 3, Addr 2) with 6129
#   Loading B[3][0] (Bank 0, Addr 3) with 03d4
#   Loading B[3][1] (Bank 1, Addr 3) with 6cff
#   Loading B[3][2] (Bank 2, Addr 3) with 63f3
#   Loading B[3][3] (Bank 3, Addr 3) with 1a9d
# Matrix loading complete.
# @            20855000 Simulating controller signals to execute multiplication...
# @20875000: Starting input feeding sequence...
# @20875000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 25...
# Test Case 25 FAIL: C[0][0] mismatch! Actual 0, Expected 0d44a7ed0
# Test Case 25 FAIL: C[0][1] mismatch! Actual x, Expected 118bfe437
# Test Case 25 FAIL: C[0][2] mismatch! Actual x, Expected 0b98d1fcb
# Test Case 25 FAIL: C[0][3] mismatch! Actual x, Expected 0910ab34f
# Test Case 25 FAIL: C[1][0] mismatch! Actual x, Expected 0f54e444f
# Test Case 25 FAIL: C[1][1] mismatch! Actual x, Expected 13acdc74a
# Test Case 25 FAIL: C[1][2] mismatch! Actual x, Expected 0535f48ba
# Test Case 25 FAIL: C[1][3] mismatch! Actual x, Expected 08362c20c
# Test Case 25 FAIL: C[2][0] mismatch! Actual x, Expected 10ae6fc68
# Test Case 25 FAIL: C[2][1] mismatch! Actual x, Expected 13a05ddf3
# Test Case 25 FAIL: C[2][2] mismatch! Actual x, Expected 0a0bdef15
# Test Case 25 FAIL: C[2][3] mismatch! Actual x, Expected 0a4e309d9
# Test Case 25 FAIL: C[3][0] mismatch! Actual x, Expected 0e7241ee5
# Test Case 25 FAIL: C[3][1] mismatch! Actual x, Expected 1108ed0ba
# Test Case 25 FAIL: C[3][2] mismatch! Actual x, Expected 0d327d7ce
# Test Case 25 FAIL: C[3][3] mismatch! Actual x, Expected 0a321fb9c
# Test Case 25 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 26 of 100
# ===================================================
# Reading test case 26:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            21336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4b67
#   Loading A[0][1] (Bank 1, Addr 0) with fb4b
#   Loading A[0][2] (Bank 2, Addr 0) with 6f40
#   Loading A[0][3] (Bank 3, Addr 0) with ce69
#   Loading A[1][0] (Bank 0, Addr 1) with edf7
#   Loading A[1][1] (Bank 1, Addr 1) with c739
#   Loading A[1][2] (Bank 2, Addr 1) with 656e
#   Loading A[1][3] (Bank 3, Addr 1) with 5112
#   Loading A[2][0] (Bank 0, Addr 2) with c431
#   Loading A[2][1] (Bank 1, Addr 2) with e51a
#   Loading A[2][2] (Bank 2, Addr 2) with 6f39
#   Loading A[2][3] (Bank 3, Addr 2) with 8c92
#   Loading A[3][0] (Bank 0, Addr 3) with 0830
#   Loading A[3][1] (Bank 1, Addr 3) with a15d
#   Loading A[3][2] (Bank 2, Addr 3) with 6583
#   Loading A[3][3] (Bank 3, Addr 3) with a0c0
#   Loading B[0][0] (Bank 0, Addr 0) with 93d8
#   Loading B[0][1] (Bank 1, Addr 0) with a69c
#   Loading B[0][2] (Bank 2, Addr 0) with 0fef
#   Loading B[0][3] (Bank 3, Addr 0) with ab35
#   Loading B[1][0] (Bank 0, Addr 1) with ba68
#   Loading B[1][1] (Bank 1, Addr 1) with 5ccb
#   Loading B[1][2] (Bank 2, Addr 1) with 4394
#   Loading B[1][3] (Bank 3, Addr 1) with a636
#   Loading B[2][0] (Bank 0, Addr 2) with bffa
#   Loading B[2][1] (Bank 1, Addr 2) with ecfd
#   Loading B[2][2] (Bank 2, Addr 2) with c7b5
#   Loading B[2][3] (Bank 3, Addr 2) with 366f
#   Loading B[3][0] (Bank 0, Addr 3) with e942
#   Loading B[3][1] (Bank 1, Addr 3) with e35f
#   Loading B[3][2] (Bank 2, Addr 3) with dcd0
#   Loading B[3][3] (Bank 3, Addr 3) with 251d
# Matrix loading complete.
# @            21675000 Simulating controller signals to execute multiplication...
# @21695000: Starting input feeding sequence...
# @21695000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21706000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21985000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 26...
# Test Case 26 FAIL: C[0][0] mismatch! Actual 0, Expected 17367d97a
# Test Case 26 FAIL: C[0][1] mismatch! Actual x, Expected 14438ddde
# Test Case 26 FAIL: C[0][2] mismatch! Actual x, Expected 0e39f5a9a
# Test Case 26 FAIL: C[0][3] mismatch! Actual x, Expected 0f7d50a1c
# Test Case 26 FAIL: C[1][0] mismatch! Actual x, Expected 26105d1ce
# Test Case 26 FAIL: C[1][1] mismatch! Actual x, Expected 24f29f51c
# Test Case 26 FAIL: C[1][2] mismatch! Actual x, Expected 1822350eb
# Test Case 26 FAIL: C[1][3] mismatch! Actual x, Expected 17183a65c
# Test Case 26 FAIL: C[2][0] mismatch! Actual x, Expected 13a014a20
# Test Case 26 FAIL: C[2][1] mismatch! Actual x, Expected 12e4a8d2c
# Test Case 26 FAIL: C[2][2] mismatch! Actual x, Expected 0d0060b15
# Test Case 26 FAIL: C[2][3] mismatch! Actual x, Expected 0b29f3002
# Test Case 26 FAIL: C[3][0] mismatch! Actual x, Expected 1ae1edcfc
# Test Case 26 FAIL: C[3][1] mismatch! Actual x, Expected 1b4a00acc
# Test Case 26 FAIL: C[3][2] mismatch! Actual x, Expected 11a8feca9
# Test Case 26 FAIL: C[3][3] mismatch! Actual x, Expected 0f3df5997
# Test Case 26 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 27 of 100
# ===================================================
# Reading test case 27:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            22156000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ea13
#   Loading A[0][1] (Bank 1, Addr 0) with a7a7
#   Loading A[0][2] (Bank 2, Addr 0) with 6691
#   Loading A[0][3] (Bank 3, Addr 0) with ff78
#   Loading A[1][0] (Bank 0, Addr 1) with f2c9
#   Loading A[1][1] (Bank 1, Addr 1) with f549
#   Loading A[1][2] (Bank 2, Addr 1) with b522
#   Loading A[1][3] (Bank 3, Addr 1) with c682
#   Loading A[2][0] (Bank 0, Addr 2) with a606
#   Loading A[2][1] (Bank 1, Addr 2) with ec08
#   Loading A[2][2] (Bank 2, Addr 2) with de49
#   Loading A[2][3] (Bank 3, Addr 2) with 68b2
#   Loading A[3][0] (Bank 0, Addr 3) with fa15
#   Loading A[3][1] (Bank 1, Addr 3) with 89a7
#   Loading A[3][2] (Bank 2, Addr 3) with 0e94
#   Loading A[3][3] (Bank 3, Addr 3) with 13e4
#   Loading B[0][0] (Bank 0, Addr 0) with fb22
#   Loading B[0][1] (Bank 1, Addr 0) with 6717
#   Loading B[0][2] (Bank 2, Addr 0) with 8224
#   Loading B[0][3] (Bank 3, Addr 0) with 3ac7
#   Loading B[1][0] (Bank 0, Addr 1) with 5c4a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ea
#   Loading B[1][2] (Bank 2, Addr 1) with db47
#   Loading B[1][3] (Bank 3, Addr 1) with 9839
#   Loading B[2][0] (Bank 0, Addr 2) with 3353
#   Loading B[2][1] (Bank 1, Addr 2) with 7950
#   Loading B[2][2] (Bank 2, Addr 2) with f60f
#   Loading B[2][3] (Bank 3, Addr 2) with 5d81
#   Loading B[3][0] (Bank 0, Addr 3) with bee6
#   Loading B[3][1] (Bank 1, Addr 3) with ba4b
#   Loading B[3][2] (Bank 2, Addr 3) with 23da
#   Loading B[3][3] (Bank 3, Addr 3) with 3efe
# Matrix loading complete.
# @            22495000 Simulating controller signals to execute multiplication...
# @22515000: Starting input feeding sequence...
# @22515000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @22526000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            22805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 27...
# Test Case 27 FAIL: C[0][0] mismatch! Actual 0, Expected 218eb6c70
# Test Case 27 FAIL: C[0][1] mismatch! Actual x, Expected 1c2a05a76
# Test Case 27 FAIL: C[0][2] mismatch! Actual x, Expected 2098d2ca7
# Test Case 27 FAIL: C[0][3] mismatch! Actual x, Expected 14048b762
# Test Case 27 FAIL: C[1][0] mismatch! Actual x, Expected 192dbe0ea
# Test Case 27 FAIL: C[1][1] mismatch! Actual x, Expected 178392e28
# Test Case 27 FAIL: C[1][2] mismatch! Actual x, Expected 21d786d69
# Test Case 27 FAIL: C[1][3] mismatch! Actual x, Expected 1306cfbcc
# Test Case 27 FAIL: C[2][0] mismatch! Actual x, Expected 0dd59ebb9
# Test Case 27 FAIL: C[2][1] mismatch! Actual x, Expected 0e4a62c47
# Test Case 27 FAIL: C[2][2] mismatch! Actual x, Expected 1a6fc3321
# Test Case 27 FAIL: C[2][3] mismatch! Actual x, Expected 0d807efea
# Test Case 27 FAIL: C[3][0] mismatch! Actual x, Expected 165ff2e12
# Test Case 27 FAIL: C[3][1] mismatch! Actual x, Expected 0f536cc08
# Test Case 27 FAIL: C[3][2] mismatch! Actual x, Expected 193516b84
# Test Case 27 FAIL: C[3][3] mismatch! Actual x, Expected 0dbd38924
# Test Case 27 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 28 of 100
# ===================================================
# Reading test case 28:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            22976000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1e91
#   Loading A[0][1] (Bank 1, Addr 0) with 3f88
#   Loading A[0][2] (Bank 2, Addr 0) with f97b
#   Loading A[0][3] (Bank 3, Addr 0) with 3be4
#   Loading A[1][0] (Bank 0, Addr 1) with b7c1
#   Loading A[1][1] (Bank 1, Addr 1) with 15f0
#   Loading A[1][2] (Bank 2, Addr 1) with 154f
#   Loading A[1][3] (Bank 3, Addr 1) with 4e31
#   Loading A[2][0] (Bank 0, Addr 2) with e329
#   Loading A[2][1] (Bank 1, Addr 2) with bc5a
#   Loading A[2][2] (Bank 2, Addr 2) with 8564
#   Loading A[2][3] (Bank 3, Addr 2) with cdbf
#   Loading A[3][0] (Bank 0, Addr 3) with b375
#   Loading A[3][1] (Bank 1, Addr 3) with 90d7
#   Loading A[3][2] (Bank 2, Addr 3) with cca5
#   Loading A[3][3] (Bank 3, Addr 3) with 70bc
#   Loading B[0][0] (Bank 0, Addr 0) with 92ad
#   Loading B[0][1] (Bank 1, Addr 0) with 8315
#   Loading B[0][2] (Bank 2, Addr 0) with fe78
#   Loading B[0][3] (Bank 3, Addr 0) with 3853
#   Loading B[1][0] (Bank 0, Addr 1) with ebb9
#   Loading B[1][1] (Bank 1, Addr 1) with d2b1
#   Loading B[1][2] (Bank 2, Addr 1) with 1535
#   Loading B[1][3] (Bank 3, Addr 1) with ee92
#   Loading B[2][0] (Bank 0, Addr 2) with aeb9
#   Loading B[2][1] (Bank 1, Addr 2) with 2ab4
#   Loading B[2][2] (Bank 2, Addr 2) with c2ff
#   Loading B[2][3] (Bank 3, Addr 2) with bcbd
#   Loading B[3][0] (Bank 0, Addr 3) with 76dd
#   Loading B[3][1] (Bank 1, Addr 3) with d793
#   Loading B[3][2] (Bank 2, Addr 3) with c111
#   Loading B[3][3] (Bank 3, Addr 3) with b248
# Matrix loading complete.
# @            23315000 Simulating controller signals to execute multiplication...
# @23335000: Starting input feeding sequence...
# @23335000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @23346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            23625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 28...
# Test Case 28 FAIL: C[0][0] mismatch! Actual 0, Expected 1a9133018
# Test Case 28 FAIL: C[0][1] mismatch! Actual x, Expected 163e4d559
# Test Case 28 FAIL: C[0][2] mismatch! Actual x, Expected 161f98989
# Test Case 28 FAIL: C[0][3] mismatch! Actual x, Expected 1d66b7f42
# Test Case 28 FAIL: C[1][0] mismatch! Actual x, Expected 0fc6715fd
# Test Case 28 FAIL: C[1][1] mismatch! Actual x, Expected 0cbf8c8d5
# Test Case 28 FAIL: C[1][2] mismatch! Actual x, Expected 13dab795d
# Test Case 28 FAIL: C[1][3] mismatch! Actual x, Expected 112275ce2
# Test Case 28 FAIL: C[2][0] mismatch! Actual x, Expected 15c9ebeeb
# Test Case 28 FAIL: C[2][1] mismatch! Actual x, Expected 153dc39c5
# Test Case 28 FAIL: C[2][2] mismatch! Actual x, Expected 1f9b18294
# Test Case 28 FAIL: C[2][3] mismatch! Actual x, Expected 13b9b972b
# Test Case 28 FAIL: C[3][0] mismatch! Actual x, Expected 12b1478d0
# Test Case 28 FAIL: C[3][1] mismatch! Actual x, Expected 0e04577d5
# Test Case 28 FAIL: C[3][2] mismatch! Actual x, Expected 133bf67c2
# Test Case 28 FAIL: C[3][3] mismatch! Actual x, Expected 13c3e07c1
# Test Case 28 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 29 of 100
# ===================================================
# Reading test case 29:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            23796000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c9e5
#   Loading A[0][1] (Bank 1, Addr 0) with 4e3c
#   Loading A[0][2] (Bank 2, Addr 0) with 79a5
#   Loading A[0][3] (Bank 3, Addr 0) with 65aa
#   Loading A[1][0] (Bank 0, Addr 1) with d983
#   Loading A[1][1] (Bank 1, Addr 1) with 0341
#   Loading A[1][2] (Bank 2, Addr 1) with 60be
#   Loading A[1][3] (Bank 3, Addr 1) with 4d12
#   Loading A[2][0] (Bank 0, Addr 2) with f3d3
#   Loading A[2][1] (Bank 1, Addr 2) with f92f
#   Loading A[2][2] (Bank 2, Addr 2) with cbd0
#   Loading A[2][3] (Bank 3, Addr 2) with b614
#   Loading A[3][0] (Bank 0, Addr 3) with 65ce
#   Loading A[3][1] (Bank 1, Addr 3) with aadf
#   Loading A[3][2] (Bank 2, Addr 3) with 7d67
#   Loading A[3][3] (Bank 3, Addr 3) with 3c29
#   Loading B[0][0] (Bank 0, Addr 0) with 5655
#   Loading B[0][1] (Bank 1, Addr 0) with d7e2
#   Loading B[0][2] (Bank 2, Addr 0) with c5d3
#   Loading B[0][3] (Bank 3, Addr 0) with 44ae
#   Loading B[1][0] (Bank 0, Addr 1) with 210c
#   Loading B[1][1] (Bank 1, Addr 1) with 43da
#   Loading B[1][2] (Bank 2, Addr 1) with a4f3
#   Loading B[1][3] (Bank 3, Addr 1) with 5adf
#   Loading B[2][0] (Bank 0, Addr 2) with 879e
#   Loading B[2][1] (Bank 1, Addr 2) with 624f
#   Loading B[2][2] (Bank 2, Addr 2) with 6502
#   Loading B[2][3] (Bank 3, Addr 2) with 0085
#   Loading B[3][0] (Bank 0, Addr 3) with 4cc8
#   Loading B[3][1] (Bank 1, Addr 3) with fa98
#   Loading B[3][2] (Bank 2, Addr 3) with 8a45
#   Loading B[3][3] (Bank 3, Addr 3) with fac0
# Matrix loading complete.
# @            24135000 Simulating controller signals to execute multiplication...
# @24155000: Starting input feeding sequence...
# @24155000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @24166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            24445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 29...
# Test Case 29 FAIL: C[0][0] mismatch! Actual 0, Expected 0ffdd7e57
# Test Case 29 FAIL: C[0][1] mismatch! Actual x, Expected 1a531b425
# Test Case 29 FAIL: C[0][2] mismatch! Actual x, Expected 1bf5aa744
# Test Case 29 FAIL: C[0][3] mismatch! Actual x, Expected 0e795c7e2
# Test Case 29 FAIL: C[1][0] mismatch! Actual x, Expected 0d20ef032
# Test Case 29 FAIL: C[1][1] mismatch! Actual x, Expected 149ca5b3b
# Test Case 29 FAIL: C[1][2] mismatch! Actual x, Expected 0fd2923a0
# Test Case 29 FAIL: C[1][3] mismatch! Actual x, Expected 0be042f12
# Test Case 29 FAIL: C[2][0] mismatch! Actual x, Expected 0c717df89
# Test Case 29 FAIL: C[2][1] mismatch! Actual x, Expected 1493ea2ce
# Test Case 29 FAIL: C[2][2] mismatch! Actual x, Expected 1307bc2bc
# Test Case 29 FAIL: C[2][3] mismatch! Actual x, Expected 0be3819f8
# Test Case 29 FAIL: C[3][0] mismatch! Actual x, Expected 09ebbe4aa
# Test Case 29 FAIL: C[3][1] mismatch! Actual x, Expected 0eaf877ec
# Test Case 29 FAIL: C[3][2] mismatch! Actual x, Expected 0e88dee69
# Test Case 29 FAIL: C[3][3] mismatch! Actual x, Expected 071ed795e
# Test Case 29 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 30 of 100
# ===================================================
# Reading test case 30:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            24616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9e98
#   Loading A[0][1] (Bank 1, Addr 0) with 50b7
#   Loading A[0][2] (Bank 2, Addr 0) with 62e8
#   Loading A[0][3] (Bank 3, Addr 0) with 23d1
#   Loading A[1][0] (Bank 0, Addr 1) with fe26
#   Loading A[1][1] (Bank 1, Addr 1) with 5a22
#   Loading A[1][2] (Bank 2, Addr 1) with 6f92
#   Loading A[1][3] (Bank 3, Addr 1) with bfab
#   Loading A[2][0] (Bank 0, Addr 2) with 0d18
#   Loading A[2][1] (Bank 1, Addr 2) with a344
#   Loading A[2][2] (Bank 2, Addr 2) with b340
#   Loading A[2][3] (Bank 3, Addr 2) with e993
#   Loading A[3][0] (Bank 0, Addr 3) with c8ba
#   Loading A[3][1] (Bank 1, Addr 3) with 3efd
#   Loading A[3][2] (Bank 2, Addr 3) with 4a76
#   Loading A[3][3] (Bank 3, Addr 3) with bd50
#   Loading B[0][0] (Bank 0, Addr 0) with 3535
#   Loading B[0][1] (Bank 1, Addr 0) with 1a57
#   Loading B[0][2] (Bank 2, Addr 0) with a837
#   Loading B[0][3] (Bank 3, Addr 0) with ee65
#   Loading B[1][0] (Bank 0, Addr 1) with 52ce
#   Loading B[1][1] (Bank 1, Addr 1) with ce8d
#   Loading B[1][2] (Bank 2, Addr 1) with af32
#   Loading B[1][3] (Bank 3, Addr 1) with 9466
#   Loading B[2][0] (Bank 0, Addr 2) with 6839
#   Loading B[2][1] (Bank 1, Addr 2) with a2d4
#   Loading B[2][2] (Bank 2, Addr 2) with 9133
#   Loading B[2][3] (Bank 3, Addr 2) with 1305
#   Loading B[3][0] (Bank 0, Addr 3) with bac0
#   Loading B[3][1] (Bank 1, Addr 3) with 7c88
#   Loading B[3][2] (Bank 2, Addr 3) with a542
#   Loading B[3][3] (Bank 3, Addr 3) with 0ec3
# Matrix loading complete.
# @            24955000 Simulating controller signals to execute multiplication...
# @24975000: Starting input feeding sequence...
# @24975000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @24986000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            25265000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 30...
# Test Case 30 FAIL: C[0][0] mismatch! Actual 0, Expected 10aed55e4
# Test Case 30 FAIL: C[0][1] mismatch! Actual x, Expected 14758a746
# Test Case 30 FAIL: C[0][2] mismatch! Actual x, Expected 19f2445d0
# Test Case 30 FAIL: C[0][3] mismatch! Actual x, Expected 1338f3842
# Test Case 30 FAIL: C[1][0] mismatch! Actual x, Expected 09e590e23
# Test Case 30 FAIL: C[1][1] mismatch! Actual x, Expected 0d78343a3
# Test Case 30 FAIL: C[1][2] mismatch! Actual x, Expected 0f7fba0bb
# Test Case 30 FAIL: C[1][3] mismatch! Actual x, Expected 08f2c98ca
# Test Case 30 FAIL: C[2][0] mismatch! Actual x, Expected 0b7f08b44
# Test Case 30 FAIL: C[2][1] mismatch! Actual x, Expected 0fa6dc3f2
# Test Case 30 FAIL: C[2][2] mismatch! Actual x, Expected 123144e88
# Test Case 30 FAIL: C[2][3] mismatch! Actual x, Expected 0ae63fdd6
# Test Case 30 FAIL: C[3][0] mismatch! Actual x, Expected 12ea2869a
# Test Case 30 FAIL: C[3][1] mismatch! Actual x, Expected 18efc5772
# Test Case 30 FAIL: C[3][2] mismatch! Actual x, Expected 199645836
# Test Case 30 FAIL: C[3][3] mismatch! Actual x, Expected 0acbab666
# Test Case 30 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
quit -sim
# End time: 11:24:58 on May 16,2025, Elapsed time: 0:02:39
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 11:25:07 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
add wave -position insertpoint sim:/datapath_tb/execute_multiplication/execute_multiplication/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @               20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @              355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @375000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @              665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @              836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @             1175000 Simulating controller signals to execute multiplication...
# @1195000: Starting input feeding sequence...
# @1195000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             1485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual x, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual x, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual x, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual x, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual x, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual x, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual x, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual x, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual x, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual x, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual x, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual x, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual x, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual x, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual x, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             1656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @             1995000 Simulating controller signals to execute multiplication...
# @2015000: Starting input feeding sequence...
# @2015000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             2305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual x, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual x, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual x, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual x, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual x, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual x, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual x, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual x, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual x, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual x, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual x, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual x, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual x, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual x, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual x, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             2476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @             2815000 Simulating controller signals to execute multiplication...
# @2835000: Starting input feeding sequence...
# @2835000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2846000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3125000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual x, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual x, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual x, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual x, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual x, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual x, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual x, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual x, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual x, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual x, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual x, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual x, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual x, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual x, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual x, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             3296000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @             3635000 Simulating controller signals to execute multiplication...
# @3655000: Starting input feeding sequence...
# @3655000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3666000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual x, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual x, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual x, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual x, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual x, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual x, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual x, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual x, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual x, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual x, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual x, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual x, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual x, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual x, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual x, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @             4455000 Simulating controller signals to execute multiplication...
# @4475000: Starting input feeding sequence...
# @4475000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             4765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual x, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual x, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual x, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual x, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual x, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual x, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual x, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual x, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual x, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual x, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual x, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual x, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual x, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual x, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual x, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @             5275000 Simulating controller signals to execute multiplication...
# @5295000: Starting input feeding sequence...
# @5295000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual x, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual x, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual x, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual x, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual x, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual x, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual x, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual x, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual x, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual x, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual x, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual x, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual x, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual x, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual x, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             5756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @             6095000 Simulating controller signals to execute multiplication...
# @6115000: Starting input feeding sequence...
# @6115000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6126000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             6405000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual x, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual x, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual x, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual x, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual x, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual x, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual x, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual x, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual x, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual x, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual x, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual x, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual x, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual x, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual x, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6576000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @             6915000 Simulating controller signals to execute multiplication...
# @6935000: Starting input feeding sequence...
# @6935000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6946000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             7225000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual x, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual x, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual x, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual x, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual x, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual x, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual x, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual x, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual x, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual x, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual x, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual x, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual x, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual x, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual x, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             7396000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @             7735000 Simulating controller signals to execute multiplication...
# @7755000: Starting input feeding sequence...
# @7755000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 0, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual x, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual x, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual x, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual x, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual x, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual x, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual x, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual x, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual x, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual x, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual x, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual x, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual x, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual x, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual x, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             8216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @             8555000 Simulating controller signals to execute multiplication...
# @8575000: Starting input feeding sequence...
# @8575000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 0, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual x, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual x, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual x, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual x, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual x, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual x, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual x, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual x, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual x, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual x, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual x, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual x, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual x, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual x, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual x, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @             9375000 Simulating controller signals to execute multiplication...
# @9395000: Starting input feeding sequence...
# @9395000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             9685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual x, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual x, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual x, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual x, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual x, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual x, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual x, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual x, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual x, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual x, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual x, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual x, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual x, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual x, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual x, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9856000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @            10195000 Simulating controller signals to execute multiplication...
# @10215000: Starting input feeding sequence...
# @10215000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10226000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            10505000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual x, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual x, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual x, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual x, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual x, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual x, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual x, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual x, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual x, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual x, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual x, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual x, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual x, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual x, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual x, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            10676000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @            11015000 Simulating controller signals to execute multiplication...
# @11035000: Starting input feeding sequence...
# @11035000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual x, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual x, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual x, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual x, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual x, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual x, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual x, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual x, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual x, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual x, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual x, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual x, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual x, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual x, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual x, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            11496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @            11835000 Simulating controller signals to execute multiplication...
# @11855000: Starting input feeding sequence...
# @11855000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual x, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual x, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual x, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual x, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual x, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual x, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual x, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual x, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual x, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual x, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual x, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual x, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual x, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual x, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual x, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @            12655000 Simulating controller signals to execute multiplication...
# @12675000: Starting input feeding sequence...
# @12675000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual 0, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual x, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual x, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual x, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual x, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual x, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual x, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual x, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual x, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual x, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual x, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual x, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual x, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual x, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual x, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual x, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 1, Addr 0) with 0cc3
#   Loading A[0][2] (Bank 2, Addr 0) with 2d23
#   Loading A[0][3] (Bank 3, Addr 0) with c654
#   Loading A[1][0] (Bank 0, Addr 1) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 2, Addr 1) with e87e
#   Loading A[1][3] (Bank 3, Addr 1) with 6d0d
#   Loading A[2][0] (Bank 0, Addr 2) with a8cf
#   Loading A[2][1] (Bank 1, Addr 2) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 3, Addr 2) with f0ac
#   Loading A[3][0] (Bank 0, Addr 3) with a4d5
#   Loading A[3][1] (Bank 1, Addr 3) with 337b
#   Loading A[3][2] (Bank 2, Addr 3) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @            13475000 Simulating controller signals to execute multiplication...
# @13495000: Starting input feeding sequence...
# @13495000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13506000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            13785000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual 0, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual x, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual x, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual x, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual x, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual x, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual x, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual x, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual x, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual x, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual x, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual x, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual x, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual x, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual x, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual x, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            13956000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 1, Addr 0) with 33ae
#   Loading A[0][2] (Bank 2, Addr 0) with 1949
#   Loading A[0][3] (Bank 3, Addr 0) with c2ac
#   Loading A[1][0] (Bank 0, Addr 1) with 74ca
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 2, Addr 1) with 5b33
#   Loading A[1][3] (Bank 3, Addr 1) with 086c
#   Loading A[2][0] (Bank 0, Addr 2) with 1549
#   Loading A[2][1] (Bank 1, Addr 2) with 602f
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 3, Addr 2) with bc83
#   Loading A[3][0] (Bank 0, Addr 3) with a3b9
#   Loading A[3][1] (Bank 1, Addr 3) with bfbe
#   Loading A[3][2] (Bank 2, Addr 3) with 0884
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[0][1] (Bank 1, Addr 0) with 4904
#   Loading B[0][2] (Bank 2, Addr 0) with 8a0c
#   Loading B[0][3] (Bank 3, Addr 0) with b0ba
#   Loading B[1][0] (Bank 0, Addr 1) with 4193
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[1][2] (Bank 2, Addr 1) with b102
#   Loading B[1][3] (Bank 3, Addr 1) with 0e75
#   Loading B[2][0] (Bank 0, Addr 2) with c8a1
#   Loading B[2][1] (Bank 1, Addr 2) with b09f
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[2][3] (Bank 3, Addr 2) with 4b2b
#   Loading B[3][0] (Bank 0, Addr 3) with b8e2
#   Loading B[3][1] (Bank 1, Addr 3) with a481
#   Loading B[3][2] (Bank 2, Addr 3) with 2498
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @            14295000 Simulating controller signals to execute multiplication...
# @14315000: Starting input feeding sequence...
# @14315000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            14605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual 0, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual x, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual x, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual x, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual x, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual x, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual x, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual x, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual x, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual x, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual x, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual x, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual x, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual x, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual x, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual x, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            14776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 1, Addr 0) with 4374
#   Loading A[0][2] (Bank 2, Addr 0) with d8de
#   Loading A[0][3] (Bank 3, Addr 0) with 0bcd
#   Loading A[1][0] (Bank 0, Addr 1) with ebff
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 2, Addr 1) with 5315
#   Loading A[1][3] (Bank 3, Addr 1) with 377a
#   Loading A[2][0] (Bank 0, Addr 2) with 881b
#   Loading A[2][1] (Bank 1, Addr 2) with 3ecf
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 3, Addr 2) with 5223
#   Loading A[3][0] (Bank 0, Addr 3) with 87cd
#   Loading A[3][1] (Bank 1, Addr 3) with 2a6f
#   Loading A[3][2] (Bank 2, Addr 3) with c889
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[0][1] (Bank 1, Addr 0) with 00f3
#   Loading B[0][2] (Bank 2, Addr 0) with a35c
#   Loading B[0][3] (Bank 3, Addr 0) with aa65
#   Loading B[1][0] (Bank 0, Addr 1) with 222b
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[1][2] (Bank 2, Addr 1) with da28
#   Loading B[1][3] (Bank 3, Addr 1) with eaa8
#   Loading B[2][0] (Bank 0, Addr 2) with ff56
#   Loading B[2][1] (Bank 1, Addr 2) with 6ba0
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[2][3] (Bank 3, Addr 2) with 90d1
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc4
#   Loading B[3][1] (Bank 1, Addr 3) with 671c
#   Loading B[3][2] (Bank 2, Addr 3) with ba64
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @            15115000 Simulating controller signals to execute multiplication...
# @15135000: Starting input feeding sequence...
# @15135000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            15425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual 0, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual x, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual x, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual x, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual x, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual x, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual x, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual x, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual x, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual x, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual x, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual x, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual x, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual x, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual x, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual x, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            15596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 1, Addr 0) with e7d1
#   Loading A[0][2] (Bank 2, Addr 0) with 03a8
#   Loading A[0][3] (Bank 3, Addr 0) with 97d0
#   Loading A[1][0] (Bank 0, Addr 1) with 9a37
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 2, Addr 1) with cb14
#   Loading A[1][3] (Bank 3, Addr 1) with 916b
#   Loading A[2][0] (Bank 0, Addr 2) with 3e85
#   Loading A[2][1] (Bank 1, Addr 2) with 83c8
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 3, Addr 2) with ead0
#   Loading A[3][0] (Bank 0, Addr 3) with ac60
#   Loading A[3][1] (Bank 1, Addr 3) with 5c5f
#   Loading A[3][2] (Bank 2, Addr 3) with 3852
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[0][1] (Bank 1, Addr 0) with ad8e
#   Loading B[0][2] (Bank 2, Addr 0) with 9a34
#   Loading B[0][3] (Bank 3, Addr 0) with 7f8e
#   Loading B[1][0] (Bank 0, Addr 1) with 5d1a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[1][2] (Bank 2, Addr 1) with 9ffd
#   Loading B[1][3] (Bank 3, Addr 1) with 6841
#   Loading B[2][0] (Bank 0, Addr 2) with 3375
#   Loading B[2][1] (Bank 1, Addr 2) with 6107
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[2][3] (Bank 3, Addr 2) with 6583
#   Loading B[3][0] (Bank 0, Addr 3) with db9d
#   Loading B[3][1] (Bank 1, Addr 3) with 492a
#   Loading B[3][2] (Bank 2, Addr 3) with 66cd
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @            15935000 Simulating controller signals to execute multiplication...
# @15955000: Starting input feeding sequence...
# @15955000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            16245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual 0, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual x, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual x, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual x, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual x, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual x, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual x, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual x, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual x, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual x, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual x, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual x, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual x, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual x, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual x, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual x, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            16416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 1, Addr 0) with 3fa9
#   Loading A[0][2] (Bank 2, Addr 0) with 6ddd
#   Loading A[0][3] (Bank 3, Addr 0) with d7cf
#   Loading A[1][0] (Bank 0, Addr 1) with 6b9d
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 2, Addr 1) with aafa
#   Loading A[1][3] (Bank 3, Addr 1) with d2a3
#   Loading A[2][0] (Bank 0, Addr 2) with 8dec
#   Loading A[2][1] (Bank 1, Addr 2) with e147
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 3, Addr 2) with 1b9c
#   Loading A[3][0] (Bank 0, Addr 3) with 3fce
#   Loading A[3][1] (Bank 1, Addr 3) with 23f2
#   Loading A[3][2] (Bank 2, Addr 3) with 7c98
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[0][1] (Bank 1, Addr 0) with 08ee
#   Loading B[0][2] (Bank 2, Addr 0) with 33d2
#   Loading B[0][3] (Bank 3, Addr 0) with 6b1f
#   Loading B[1][0] (Bank 0, Addr 1) with 1532
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[1][2] (Bank 2, Addr 1) with b4e2
#   Loading B[1][3] (Bank 3, Addr 1) with 4267
#   Loading B[2][0] (Bank 0, Addr 2) with 9a2e
#   Loading B[2][1] (Bank 1, Addr 2) with 67b5
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 197e
#   Loading B[3][0] (Bank 0, Addr 3) with 72d3
#   Loading B[3][1] (Bank 1, Addr 3) with 030b
#   Loading B[3][2] (Bank 2, Addr 3) with 9c52
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @            16755000 Simulating controller signals to execute multiplication...
# @16775000: Starting input feeding sequence...
# @16775000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual 0, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual x, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual x, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual x, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual x, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual x, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual x, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual x, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual x, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual x, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual x, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual x, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual x, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual x, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual x, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual x, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            17236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 1, Addr 0) with 7631
#   Loading A[0][2] (Bank 2, Addr 0) with 08e8
#   Loading A[0][3] (Bank 3, Addr 0) with d98c
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 2, Addr 1) with 0b94
#   Loading A[1][3] (Bank 3, Addr 1) with a1d8
#   Loading A[2][0] (Bank 0, Addr 2) with be24
#   Loading A[2][1] (Bank 1, Addr 2) with 3dab
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 3, Addr 2) with b4a5
#   Loading A[3][0] (Bank 0, Addr 3) with 766e
#   Loading A[3][1] (Bank 1, Addr 3) with 5e6d
#   Loading A[3][2] (Bank 2, Addr 3) with bd75
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[0][1] (Bank 1, Addr 0) with 536a
#   Loading B[0][2] (Bank 2, Addr 0) with 8a59
#   Loading B[0][3] (Bank 3, Addr 0) with 3372
#   Loading B[1][0] (Bank 0, Addr 1) with ccbb
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[1][2] (Bank 2, Addr 1) with 5dd6
#   Loading B[1][3] (Bank 3, Addr 1) with 9215
#   Loading B[2][0] (Bank 0, Addr 2) with 56b7
#   Loading B[2][1] (Bank 1, Addr 2) with f0d1
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 21d0
#   Loading B[3][0] (Bank 0, Addr 3) with 11fc
#   Loading B[3][1] (Bank 1, Addr 3) with 1be3
#   Loading B[3][2] (Bank 2, Addr 3) with 54d6
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @            17575000 Simulating controller signals to execute multiplication...
# @17595000: Starting input feeding sequence...
# @17595000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            17885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual 0, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual x, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual x, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual x, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual x, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual x, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual x, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual x, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual x, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual x, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual x, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual x, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual x, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual x, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual x, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual x, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 1, Addr 0) with 1713
#   Loading A[0][2] (Bank 2, Addr 0) with fc9d
#   Loading A[0][3] (Bank 3, Addr 0) with d833
#   Loading A[1][0] (Bank 0, Addr 1) with 893b
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 2, Addr 1) with a562
#   Loading A[1][3] (Bank 3, Addr 1) with 4ca0
#   Loading A[2][0] (Bank 0, Addr 2) with 192d
#   Loading A[2][1] (Bank 1, Addr 2) with 4bfa
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 3, Addr 2) with 295a
#   Loading A[3][0] (Bank 0, Addr 3) with 783f
#   Loading A[3][1] (Bank 1, Addr 3) with 025b
#   Loading A[3][2] (Bank 2, Addr 3) with 5e47
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[0][1] (Bank 1, Addr 0) with f807
#   Loading B[0][2] (Bank 2, Addr 0) with 18a0
#   Loading B[0][3] (Bank 3, Addr 0) with c97d
#   Loading B[1][0] (Bank 0, Addr 1) with d1a4
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[1][2] (Bank 2, Addr 1) with b713
#   Loading B[1][3] (Bank 3, Addr 1) with e42e
#   Loading B[2][0] (Bank 0, Addr 2) with cd53
#   Loading B[2][1] (Bank 1, Addr 2) with 0a61
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[2][3] (Bank 3, Addr 2) with cd4b
#   Loading B[3][0] (Bank 0, Addr 3) with 1489
#   Loading B[3][1] (Bank 1, Addr 3) with 7ec8
#   Loading B[3][2] (Bank 2, Addr 3) with d878
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @            18395000 Simulating controller signals to execute multiplication...
# @18415000: Starting input feeding sequence...
# @18415000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            18705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual 0, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual x, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual x, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual x, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual x, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual x, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual x, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual x, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual x, Expected 16bea50ee
# Test Case 22 FAIL: C[2][1] mismatch! Actual x, Expected 1b4a3f648
# Test Case 22 FAIL: C[2][2] mismatch! Actual x, Expected 17ed8a09a
# Test Case 22 FAIL: C[2][3] mismatch! Actual x, Expected 227590bcd
# Test Case 22 FAIL: C[3][0] mismatch! Actual x, Expected 0906811ac
# Test Case 22 FAIL: C[3][1] mismatch! Actual x, Expected 127c3c8ff
# Test Case 22 FAIL: C[3][2] mismatch! Actual x, Expected 08f952008
# Test Case 22 FAIL: C[3][3] mismatch! Actual x, Expected 1206c5ac1
# Test Case 22 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 23 of 100
# ===================================================
# Reading test case 23:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            18876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9208
#   Loading A[0][1] (Bank 1, Addr 0) with 8d91
#   Loading A[0][2] (Bank 2, Addr 0) with 0f91
#   Loading A[0][3] (Bank 3, Addr 0) with 4324
#   Loading A[1][0] (Bank 0, Addr 1) with 1893
#   Loading A[1][1] (Bank 1, Addr 1) with e01e
#   Loading A[1][2] (Bank 2, Addr 1) with 7421
#   Loading A[1][3] (Bank 3, Addr 1) with 0c24
#   Loading A[2][0] (Bank 0, Addr 2) with 68d0
#   Loading A[2][1] (Bank 1, Addr 2) with ec47
#   Loading A[2][2] (Bank 2, Addr 2) with 6ef2
#   Loading A[2][3] (Bank 3, Addr 2) with 26a8
#   Loading A[3][0] (Bank 0, Addr 3) with 5427
#   Loading A[3][1] (Bank 1, Addr 3) with b764
#   Loading A[3][2] (Bank 2, Addr 3) with bc95
#   Loading A[3][3] (Bank 3, Addr 3) with 5dea
#   Loading B[0][0] (Bank 0, Addr 0) with 128b
#   Loading B[0][1] (Bank 1, Addr 0) with eb07
#   Loading B[0][2] (Bank 2, Addr 0) with ba48
#   Loading B[0][3] (Bank 3, Addr 0) with 9e00
#   Loading B[1][0] (Bank 0, Addr 1) with efbc
#   Loading B[1][1] (Bank 1, Addr 1) with db1c
#   Loading B[1][2] (Bank 2, Addr 1) with 7aba
#   Loading B[1][3] (Bank 3, Addr 1) with 1968
#   Loading B[2][0] (Bank 0, Addr 2) with d9d0
#   Loading B[2][1] (Bank 1, Addr 2) with 7a26
#   Loading B[2][2] (Bank 2, Addr 2) with 39df
#   Loading B[2][3] (Bank 3, Addr 2) with 6ed6
#   Loading B[3][0] (Bank 0, Addr 3) with b124
#   Loading B[3][1] (Bank 1, Addr 3) with cd33
#   Loading B[3][2] (Bank 2, Addr 3) with 6a50
#   Loading B[3][3] (Bank 3, Addr 3) with 0583
# Matrix loading complete.
# @            19215000 Simulating controller signals to execute multiplication...
# @19235000: Starting input feeding sequence...
# @19235000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            19525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 23...
# Test Case 23 FAIL: C[0][0] mismatch! Actual 0, Expected 0b4ff68c8
# Test Case 23 FAIL: C[0][1] mismatch! Actual x, Expected 1109074f1
# Test Case 23 FAIL: C[0][2] mismatch! Actual x, Expected 0b0aeda6e
# Test Case 23 FAIL: C[0][3] mismatch! Actual x, Expected 08bc2178d
# Test Case 23 FAIL: C[1][0] mismatch! Actual x, Expected 2240fbe83
# Test Case 23 FAIL: C[1][1] mismatch! Actual x, Expected 24586acb5
# Test Case 23 FAIL: C[1][2] mismatch! Actual x, Expected 15406a4ad
# Test Case 23 FAIL: C[1][3] mismatch! Actual x, Expected 0d7dc49b6
# Test Case 23 FAIL: C[2][0] mismatch! Actual x, Expected 14ec38d8b
# Test Case 23 FAIL: C[2][1] mismatch! Actual x, Expected 13dc8252e
# Test Case 23 FAIL: C[2][2] mismatch! Actual x, Expected 0aa64fc20
# Test Case 23 FAIL: C[2][3] mismatch! Actual x, Expected 0493a07f3
# Test Case 23 FAIL: C[3][0] mismatch! Actual x, Expected 0721b5264
# Test Case 23 FAIL: C[3][1] mismatch! Actual x, Expected 0a5c0e67a
# Test Case 23 FAIL: C[3][2] mismatch! Actual x, Expected 0666a55c0
# Test Case 23 FAIL: C[3][3] mismatch! Actual x, Expected 03d66cbce
# Test Case 23 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 24 of 100
# ===================================================
# Reading test case 24:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            19696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0891
#   Loading A[0][1] (Bank 1, Addr 0) with 3d27
#   Loading A[0][2] (Bank 2, Addr 0) with d5c0
#   Loading A[0][3] (Bank 3, Addr 0) with 7093
#   Loading A[1][0] (Bank 0, Addr 1) with c03d
#   Loading A[1][1] (Bank 1, Addr 1) with bbba
#   Loading A[1][2] (Bank 2, Addr 1) with e629
#   Loading A[1][3] (Bank 3, Addr 1) with a341
#   Loading A[2][0] (Bank 0, Addr 2) with a224
#   Loading A[2][1] (Bank 1, Addr 2) with b475
#   Loading A[2][2] (Bank 2, Addr 2) with 71ee
#   Loading A[2][3] (Bank 3, Addr 2) with cd06
#   Loading A[3][0] (Bank 0, Addr 3) with c965
#   Loading A[3][1] (Bank 1, Addr 3) with 0efe
#   Loading A[3][2] (Bank 2, Addr 3) with e79e
#   Loading A[3][3] (Bank 3, Addr 3) with d9c1
#   Loading B[0][0] (Bank 0, Addr 0) with b3fa
#   Loading B[0][1] (Bank 1, Addr 0) with 3827
#   Loading B[0][2] (Bank 2, Addr 0) with 9810
#   Loading B[0][3] (Bank 3, Addr 0) with 97ce
#   Loading B[1][0] (Bank 0, Addr 1) with ffef
#   Loading B[1][1] (Bank 1, Addr 1) with dc10
#   Loading B[1][2] (Bank 2, Addr 1) with 923e
#   Loading B[1][3] (Bank 3, Addr 1) with 3828
#   Loading B[2][0] (Bank 0, Addr 2) with a1be
#   Loading B[2][1] (Bank 1, Addr 2) with 17d2
#   Loading B[2][2] (Bank 2, Addr 2) with 81fb
#   Loading B[2][3] (Bank 3, Addr 2) with 4261
#   Loading B[3][0] (Bank 0, Addr 3) with 41fd
#   Loading B[3][1] (Bank 1, Addr 3) with 200a
#   Loading B[3][2] (Bank 2, Addr 3) with bc64
#   Loading B[3][3] (Bank 3, Addr 3) with c89a
# Matrix loading complete.
# @            20035000 Simulating controller signals to execute multiplication...
# @20055000: Starting input feeding sequence...
# @20055000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            20345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 24...
# Test Case 24 FAIL: C[0][0] mismatch! Actual 0, Expected 16090a516
# Test Case 24 FAIL: C[0][1] mismatch! Actual x, Expected 0cf6c3161
# Test Case 24 FAIL: C[0][2] mismatch! Actual x, Expected 1596fee96
# Test Case 24 FAIL: C[0][3] mismatch! Actual x, Expected 0f71a939c
# Test Case 24 FAIL: C[1][0] mismatch! Actual x, Expected 15c8c5898
# Test Case 24 FAIL: C[1][1] mismatch! Actual x, Expected 0c1744d77
# Test Case 24 FAIL: C[1][2] mismatch! Actual x, Expected 0f638cc6b
# Test Case 24 FAIL: C[1][3] mismatch! Actual x, Expected 087fb3a93
# Test Case 24 FAIL: C[2][0] mismatch! Actual x, Expected 2000ef691
# Test Case 24 FAIL: C[2][1] mismatch! Actual x, Expected 11c52d238
# Test Case 24 FAIL: C[2][2] mismatch! Actual x, Expected 1e6bda000
# Test Case 24 FAIL: C[2][3] mismatch! Actual x, Expected 184467b22
# Test Case 24 FAIL: C[3][0] mismatch! Actual x, Expected 1ac05066e
# Test Case 24 FAIL: C[3][1] mismatch! Actual x, Expected 0d35bb8eb
# Test Case 24 FAIL: C[3][2] mismatch! Actual x, Expected 1a878c334
# Test Case 24 FAIL: C[3][3] mismatch! Actual x, Expected 1465c06d2
# Test Case 24 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 25 of 100
# ===================================================
# Reading test case 25:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            20516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d286
#   Loading A[0][1] (Bank 1, Addr 0) with 4abb
#   Loading A[0][2] (Bank 2, Addr 0) with 7dc0
#   Loading A[0][3] (Bank 3, Addr 0) with bdd5
#   Loading A[1][0] (Bank 0, Addr 1) with 6b83
#   Loading A[1][1] (Bank 1, Addr 1) with 0021
#   Loading A[1][2] (Bank 2, Addr 1) with 60e7
#   Loading A[1][3] (Bank 3, Addr 1) with 9c2b
#   Loading A[2][0] (Bank 0, Addr 2) with 50a4
#   Loading A[2][1] (Bank 1, Addr 2) with fed1
#   Loading A[2][2] (Bank 2, Addr 2) with c6a9
#   Loading A[2][3] (Bank 3, Addr 2) with 5739
#   Loading A[3][0] (Bank 0, Addr 3) with bef9
#   Loading A[3][1] (Bank 1, Addr 3) with b753
#   Loading A[3][2] (Bank 2, Addr 3) with a8ee
#   Loading A[3][3] (Bank 3, Addr 3) with a16b
#   Loading B[0][0] (Bank 0, Addr 0) with 704d
#   Loading B[0][1] (Bank 1, Addr 0) with 8ab4
#   Loading B[0][2] (Bank 2, Addr 0) with 1bfa
#   Loading B[0][3] (Bank 3, Addr 0) with 354a
#   Loading B[1][0] (Bank 0, Addr 1) with 78c2
#   Loading B[1][1] (Bank 1, Addr 1) with 376c
#   Loading B[1][2] (Bank 2, Addr 1) with ced8
#   Loading B[1][3] (Bank 3, Addr 1) with 78de
#   Loading B[2][0] (Bank 0, Addr 2) with d2b2
#   Loading B[2][1] (Bank 1, Addr 2) with c525
#   Loading B[2][2] (Bank 2, Addr 2) with 038b
#   Loading B[2][3] (Bank 3, Addr 2) with 6129
#   Loading B[3][0] (Bank 0, Addr 3) with 03d4
#   Loading B[3][1] (Bank 1, Addr 3) with 6cff
#   Loading B[3][2] (Bank 2, Addr 3) with 63f3
#   Loading B[3][3] (Bank 3, Addr 3) with 1a9d
# Matrix loading complete.
# @            20855000 Simulating controller signals to execute multiplication...
# @20875000: Starting input feeding sequence...
# @20875000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 25...
# Test Case 25 FAIL: C[0][0] mismatch! Actual 0, Expected 0d44a7ed0
# Test Case 25 FAIL: C[0][1] mismatch! Actual x, Expected 118bfe437
# Test Case 25 FAIL: C[0][2] mismatch! Actual x, Expected 0b98d1fcb
# Test Case 25 FAIL: C[0][3] mismatch! Actual x, Expected 0910ab34f
# Test Case 25 FAIL: C[1][0] mismatch! Actual x, Expected 0f54e444f
# Test Case 25 FAIL: C[1][1] mismatch! Actual x, Expected 13acdc74a
# Test Case 25 FAIL: C[1][2] mismatch! Actual x, Expected 0535f48ba
# Test Case 25 FAIL: C[1][3] mismatch! Actual x, Expected 08362c20c
# Test Case 25 FAIL: C[2][0] mismatch! Actual x, Expected 10ae6fc68
# Test Case 25 FAIL: C[2][1] mismatch! Actual x, Expected 13a05ddf3
# Test Case 25 FAIL: C[2][2] mismatch! Actual x, Expected 0a0bdef15
# Test Case 25 FAIL: C[2][3] mismatch! Actual x, Expected 0a4e309d9
# Test Case 25 FAIL: C[3][0] mismatch! Actual x, Expected 0e7241ee5
# Test Case 25 FAIL: C[3][1] mismatch! Actual x, Expected 1108ed0ba
# Test Case 25 FAIL: C[3][2] mismatch! Actual x, Expected 0d327d7ce
# Test Case 25 FAIL: C[3][3] mismatch! Actual x, Expected 0a321fb9c
# Test Case 25 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 26 of 100
# ===================================================
# Reading test case 26:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            21336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4b67
#   Loading A[0][1] (Bank 1, Addr 0) with fb4b
#   Loading A[0][2] (Bank 2, Addr 0) with 6f40
#   Loading A[0][3] (Bank 3, Addr 0) with ce69
#   Loading A[1][0] (Bank 0, Addr 1) with edf7
#   Loading A[1][1] (Bank 1, Addr 1) with c739
#   Loading A[1][2] (Bank 2, Addr 1) with 656e
#   Loading A[1][3] (Bank 3, Addr 1) with 5112
#   Loading A[2][0] (Bank 0, Addr 2) with c431
#   Loading A[2][1] (Bank 1, Addr 2) with e51a
#   Loading A[2][2] (Bank 2, Addr 2) with 6f39
#   Loading A[2][3] (Bank 3, Addr 2) with 8c92
#   Loading A[3][0] (Bank 0, Addr 3) with 0830
#   Loading A[3][1] (Bank 1, Addr 3) with a15d
#   Loading A[3][2] (Bank 2, Addr 3) with 6583
#   Loading A[3][3] (Bank 3, Addr 3) with a0c0
#   Loading B[0][0] (Bank 0, Addr 0) with 93d8
#   Loading B[0][1] (Bank 1, Addr 0) with a69c
#   Loading B[0][2] (Bank 2, Addr 0) with 0fef
#   Loading B[0][3] (Bank 3, Addr 0) with ab35
#   Loading B[1][0] (Bank 0, Addr 1) with ba68
#   Loading B[1][1] (Bank 1, Addr 1) with 5ccb
#   Loading B[1][2] (Bank 2, Addr 1) with 4394
#   Loading B[1][3] (Bank 3, Addr 1) with a636
#   Loading B[2][0] (Bank 0, Addr 2) with bffa
#   Loading B[2][1] (Bank 1, Addr 2) with ecfd
#   Loading B[2][2] (Bank 2, Addr 2) with c7b5
#   Loading B[2][3] (Bank 3, Addr 2) with 366f
#   Loading B[3][0] (Bank 0, Addr 3) with e942
#   Loading B[3][1] (Bank 1, Addr 3) with e35f
#   Loading B[3][2] (Bank 2, Addr 3) with dcd0
#   Loading B[3][3] (Bank 3, Addr 3) with 251d
# Matrix loading complete.
# @            21675000 Simulating controller signals to execute multiplication...
# @21695000: Starting input feeding sequence...
# @21695000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21706000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            21985000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 26...
# Test Case 26 FAIL: C[0][0] mismatch! Actual 0, Expected 17367d97a
# Test Case 26 FAIL: C[0][1] mismatch! Actual x, Expected 14438ddde
# Test Case 26 FAIL: C[0][2] mismatch! Actual x, Expected 0e39f5a9a
# Test Case 26 FAIL: C[0][3] mismatch! Actual x, Expected 0f7d50a1c
# Test Case 26 FAIL: C[1][0] mismatch! Actual x, Expected 26105d1ce
# Test Case 26 FAIL: C[1][1] mismatch! Actual x, Expected 24f29f51c
# Test Case 26 FAIL: C[1][2] mismatch! Actual x, Expected 1822350eb
# Test Case 26 FAIL: C[1][3] mismatch! Actual x, Expected 17183a65c
# Test Case 26 FAIL: C[2][0] mismatch! Actual x, Expected 13a014a20
# Test Case 26 FAIL: C[2][1] mismatch! Actual x, Expected 12e4a8d2c
# Test Case 26 FAIL: C[2][2] mismatch! Actual x, Expected 0d0060b15
# Test Case 26 FAIL: C[2][3] mismatch! Actual x, Expected 0b29f3002
# Test Case 26 FAIL: C[3][0] mismatch! Actual x, Expected 1ae1edcfc
# Test Case 26 FAIL: C[3][1] mismatch! Actual x, Expected 1b4a00acc
# Test Case 26 FAIL: C[3][2] mismatch! Actual x, Expected 11a8feca9
# Test Case 26 FAIL: C[3][3] mismatch! Actual x, Expected 0f3df5997
# Test Case 26 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 27 of 100
# ===================================================
# Reading test case 27:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            22156000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ea13
#   Loading A[0][1] (Bank 1, Addr 0) with a7a7
#   Loading A[0][2] (Bank 2, Addr 0) with 6691
#   Loading A[0][3] (Bank 3, Addr 0) with ff78
#   Loading A[1][0] (Bank 0, Addr 1) with f2c9
#   Loading A[1][1] (Bank 1, Addr 1) with f549
#   Loading A[1][2] (Bank 2, Addr 1) with b522
#   Loading A[1][3] (Bank 3, Addr 1) with c682
#   Loading A[2][0] (Bank 0, Addr 2) with a606
#   Loading A[2][1] (Bank 1, Addr 2) with ec08
#   Loading A[2][2] (Bank 2, Addr 2) with de49
#   Loading A[2][3] (Bank 3, Addr 2) with 68b2
#   Loading A[3][0] (Bank 0, Addr 3) with fa15
#   Loading A[3][1] (Bank 1, Addr 3) with 89a7
#   Loading A[3][2] (Bank 2, Addr 3) with 0e94
#   Loading A[3][3] (Bank 3, Addr 3) with 13e4
#   Loading B[0][0] (Bank 0, Addr 0) with fb22
#   Loading B[0][1] (Bank 1, Addr 0) with 6717
#   Loading B[0][2] (Bank 2, Addr 0) with 8224
#   Loading B[0][3] (Bank 3, Addr 0) with 3ac7
#   Loading B[1][0] (Bank 0, Addr 1) with 5c4a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ea
#   Loading B[1][2] (Bank 2, Addr 1) with db47
#   Loading B[1][3] (Bank 3, Addr 1) with 9839
#   Loading B[2][0] (Bank 0, Addr 2) with 3353
#   Loading B[2][1] (Bank 1, Addr 2) with 7950
#   Loading B[2][2] (Bank 2, Addr 2) with f60f
#   Loading B[2][3] (Bank 3, Addr 2) with 5d81
#   Loading B[3][0] (Bank 0, Addr 3) with bee6
#   Loading B[3][1] (Bank 1, Addr 3) with ba4b
#   Loading B[3][2] (Bank 2, Addr 3) with 23da
#   Loading B[3][3] (Bank 3, Addr 3) with 3efe
# Matrix loading complete.
# @            22495000 Simulating controller signals to execute multiplication...
# @22515000: Starting input feeding sequence...
# @22515000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @22526000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            22805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 27...
# Test Case 27 FAIL: C[0][0] mismatch! Actual 0, Expected 218eb6c70
# Test Case 27 FAIL: C[0][1] mismatch! Actual x, Expected 1c2a05a76
# Test Case 27 FAIL: C[0][2] mismatch! Actual x, Expected 2098d2ca7
# Test Case 27 FAIL: C[0][3] mismatch! Actual x, Expected 14048b762
# Test Case 27 FAIL: C[1][0] mismatch! Actual x, Expected 192dbe0ea
# Test Case 27 FAIL: C[1][1] mismatch! Actual x, Expected 178392e28
# Test Case 27 FAIL: C[1][2] mismatch! Actual x, Expected 21d786d69
# Test Case 27 FAIL: C[1][3] mismatch! Actual x, Expected 1306cfbcc
# Test Case 27 FAIL: C[2][0] mismatch! Actual x, Expected 0dd59ebb9
# Test Case 27 FAIL: C[2][1] mismatch! Actual x, Expected 0e4a62c47
# Test Case 27 FAIL: C[2][2] mismatch! Actual x, Expected 1a6fc3321
# Test Case 27 FAIL: C[2][3] mismatch! Actual x, Expected 0d807efea
# Test Case 27 FAIL: C[3][0] mismatch! Actual x, Expected 165ff2e12
# Test Case 27 FAIL: C[3][1] mismatch! Actual x, Expected 0f536cc08
# Test Case 27 FAIL: C[3][2] mismatch! Actual x, Expected 193516b84
# Test Case 27 FAIL: C[3][3] mismatch! Actual x, Expected 0dbd38924
# Test Case 27 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 28 of 100
# ===================================================
# Reading test case 28:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            22976000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1e91
#   Loading A[0][1] (Bank 1, Addr 0) with 3f88
#   Loading A[0][2] (Bank 2, Addr 0) with f97b
#   Loading A[0][3] (Bank 3, Addr 0) with 3be4
#   Loading A[1][0] (Bank 0, Addr 1) with b7c1
#   Loading A[1][1] (Bank 1, Addr 1) with 15f0
#   Loading A[1][2] (Bank 2, Addr 1) with 154f
#   Loading A[1][3] (Bank 3, Addr 1) with 4e31
#   Loading A[2][0] (Bank 0, Addr 2) with e329
#   Loading A[2][1] (Bank 1, Addr 2) with bc5a
#   Loading A[2][2] (Bank 2, Addr 2) with 8564
#   Loading A[2][3] (Bank 3, Addr 2) with cdbf
#   Loading A[3][0] (Bank 0, Addr 3) with b375
#   Loading A[3][1] (Bank 1, Addr 3) with 90d7
#   Loading A[3][2] (Bank 2, Addr 3) with cca5
#   Loading A[3][3] (Bank 3, Addr 3) with 70bc
#   Loading B[0][0] (Bank 0, Addr 0) with 92ad
#   Loading B[0][1] (Bank 1, Addr 0) with 8315
#   Loading B[0][2] (Bank 2, Addr 0) with fe78
#   Loading B[0][3] (Bank 3, Addr 0) with 3853
#   Loading B[1][0] (Bank 0, Addr 1) with ebb9
#   Loading B[1][1] (Bank 1, Addr 1) with d2b1
#   Loading B[1][2] (Bank 2, Addr 1) with 1535
#   Loading B[1][3] (Bank 3, Addr 1) with ee92
#   Loading B[2][0] (Bank 0, Addr 2) with aeb9
#   Loading B[2][1] (Bank 1, Addr 2) with 2ab4
#   Loading B[2][2] (Bank 2, Addr 2) with c2ff
#   Loading B[2][3] (Bank 3, Addr 2) with bcbd
#   Loading B[3][0] (Bank 0, Addr 3) with 76dd
#   Loading B[3][1] (Bank 1, Addr 3) with d793
#   Loading B[3][2] (Bank 2, Addr 3) with c111
#   Loading B[3][3] (Bank 3, Addr 3) with b248
# Matrix loading complete.
# @            23315000 Simulating controller signals to execute multiplication...
# @23335000: Starting input feeding sequence...
# @23335000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @23346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            23625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 28...
# Test Case 28 FAIL: C[0][0] mismatch! Actual 0, Expected 1a9133018
# Test Case 28 FAIL: C[0][1] mismatch! Actual x, Expected 163e4d559
# Test Case 28 FAIL: C[0][2] mismatch! Actual x, Expected 161f98989
# Test Case 28 FAIL: C[0][3] mismatch! Actual x, Expected 1d66b7f42
# Test Case 28 FAIL: C[1][0] mismatch! Actual x, Expected 0fc6715fd
# Test Case 28 FAIL: C[1][1] mismatch! Actual x, Expected 0cbf8c8d5
# Test Case 28 FAIL: C[1][2] mismatch! Actual x, Expected 13dab795d
# Test Case 28 FAIL: C[1][3] mismatch! Actual x, Expected 112275ce2
# Test Case 28 FAIL: C[2][0] mismatch! Actual x, Expected 15c9ebeeb
# Test Case 28 FAIL: C[2][1] mismatch! Actual x, Expected 153dc39c5
# Test Case 28 FAIL: C[2][2] mismatch! Actual x, Expected 1f9b18294
# Test Case 28 FAIL: C[2][3] mismatch! Actual x, Expected 13b9b972b
# Test Case 28 FAIL: C[3][0] mismatch! Actual x, Expected 12b1478d0
# Test Case 28 FAIL: C[3][1] mismatch! Actual x, Expected 0e04577d5
# Test Case 28 FAIL: C[3][2] mismatch! Actual x, Expected 133bf67c2
# Test Case 28 FAIL: C[3][3] mismatch! Actual x, Expected 13c3e07c1
# Test Case 28 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 29 of 100
# ===================================================
# Reading test case 29:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            23796000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c9e5
#   Loading A[0][1] (Bank 1, Addr 0) with 4e3c
#   Loading A[0][2] (Bank 2, Addr 0) with 79a5
#   Loading A[0][3] (Bank 3, Addr 0) with 65aa
#   Loading A[1][0] (Bank 0, Addr 1) with d983
#   Loading A[1][1] (Bank 1, Addr 1) with 0341
#   Loading A[1][2] (Bank 2, Addr 1) with 60be
#   Loading A[1][3] (Bank 3, Addr 1) with 4d12
#   Loading A[2][0] (Bank 0, Addr 2) with f3d3
#   Loading A[2][1] (Bank 1, Addr 2) with f92f
#   Loading A[2][2] (Bank 2, Addr 2) with cbd0
#   Loading A[2][3] (Bank 3, Addr 2) with b614
#   Loading A[3][0] (Bank 0, Addr 3) with 65ce
#   Loading A[3][1] (Bank 1, Addr 3) with aadf
#   Loading A[3][2] (Bank 2, Addr 3) with 7d67
#   Loading A[3][3] (Bank 3, Addr 3) with 3c29
#   Loading B[0][0] (Bank 0, Addr 0) with 5655
#   Loading B[0][1] (Bank 1, Addr 0) with d7e2
#   Loading B[0][2] (Bank 2, Addr 0) with c5d3
#   Loading B[0][3] (Bank 3, Addr 0) with 44ae
#   Loading B[1][0] (Bank 0, Addr 1) with 210c
#   Loading B[1][1] (Bank 1, Addr 1) with 43da
#   Loading B[1][2] (Bank 2, Addr 1) with a4f3
#   Loading B[1][3] (Bank 3, Addr 1) with 5adf
#   Loading B[2][0] (Bank 0, Addr 2) with 879e
#   Loading B[2][1] (Bank 1, Addr 2) with 624f
#   Loading B[2][2] (Bank 2, Addr 2) with 6502
#   Loading B[2][3] (Bank 3, Addr 2) with 0085
#   Loading B[3][0] (Bank 0, Addr 3) with 4cc8
#   Loading B[3][1] (Bank 1, Addr 3) with fa98
#   Loading B[3][2] (Bank 2, Addr 3) with 8a45
#   Loading B[3][3] (Bank 3, Addr 3) with fac0
quit -sim
# End time: 11:33:11 on May 16,2025, Elapsed time: 0:08:04
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 11:33:28 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @               20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @              355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @              705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @              876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @             1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual x, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual x, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual x, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual x, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual x, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual x, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual x, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual x, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual x, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual x, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual x, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual x, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual x, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual x, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual x, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @             2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual x, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual x, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual x, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual x, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual x, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual x, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual x, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual x, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual x, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual x, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual x, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual x, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual x, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual x, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual x, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @             2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual x, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual x, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual x, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual x, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual x, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual x, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual x, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual x, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual x, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual x, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual x, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual x, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual x, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual x, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual x, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @             3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual x, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual x, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual x, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual x, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual x, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual x, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual x, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual x, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual x, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual x, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual x, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual x, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual x, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual x, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual x, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @             4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual x, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual x, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual x, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual x, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual x, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual x, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual x, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual x, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual x, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual x, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual x, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual x, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual x, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual x, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual x, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             5176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @             5515000 Simulating controller signals to execute multiplication...
# @5535000: Starting input feeding sequence...
# @5576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual x, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual x, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual x, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual x, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual x, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual x, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual x, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual x, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual x, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual x, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual x, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual x, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual x, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual x, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual x, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @             6375000 Simulating controller signals to execute multiplication...
# @6395000: Starting input feeding sequence...
# @6436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             6725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual x, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual x, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual x, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual x, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual x, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual x, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual x, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual x, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual x, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual x, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual x, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual x, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual x, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual x, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual x, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @             7235000 Simulating controller signals to execute multiplication...
# @7255000: Starting input feeding sequence...
# @7296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             7585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual x, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual x, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual x, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual x, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual x, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual x, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual x, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual x, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual x, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual x, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual x, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual x, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual x, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual x, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual x, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             7756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @             8095000 Simulating controller signals to execute multiplication...
# @8115000: Starting input feeding sequence...
# @8156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 0, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual x, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual x, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual x, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual x, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual x, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual x, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual x, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual x, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual x, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual x, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual x, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual x, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual x, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual x, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual x, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             8616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @             8955000 Simulating controller signals to execute multiplication...
# @8975000: Starting input feeding sequence...
# @9016000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             9305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 0, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual x, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual x, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual x, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual x, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual x, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual x, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual x, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual x, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual x, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual x, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual x, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual x, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual x, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual x, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual x, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @             9815000 Simulating controller signals to execute multiplication...
# @9835000: Starting input feeding sequence...
# @9876000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            10165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual x, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual x, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual x, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual x, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual x, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual x, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual x, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual x, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual x, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual x, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual x, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual x, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual x, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual x, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual x, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            10336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @            10675000 Simulating controller signals to execute multiplication...
# @10695000: Starting input feeding sequence...
# @10736000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual x, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual x, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual x, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual x, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual x, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual x, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual x, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual x, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual x, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual x, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual x, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual x, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual x, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual x, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual x, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            11196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @            11535000 Simulating controller signals to execute multiplication...
# @11555000: Starting input feeding sequence...
# @11596000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual x, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual x, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual x, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual x, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual x, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual x, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual x, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual x, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual x, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual x, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual x, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual x, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual x, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual x, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual x, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @            12395000 Simulating controller signals to execute multiplication...
# @12415000: Starting input feeding sequence...
# @12456000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12466000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12745000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual x, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual x, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual x, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual x, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual x, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual x, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual x, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual x, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual x, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual x, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual x, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual x, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual x, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual x, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual x, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# Break key hit
# Break in NamedBeginStat verify_results at /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v line 617
quit -sim
# End time: 11:37:23 on May 16,2025, Elapsed time: 0:03:55
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 11:37:32 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @               20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @              355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @              705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @              876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @             1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 1, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 1, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 1, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 0, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 0, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 0, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @             2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 1, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 1, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 1, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 1, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @             2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 1, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 1, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 1, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 1, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 1, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 1, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 0, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @             3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual 1, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual 1, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual 0, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual 1, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual 1, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual 0, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual 0, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual 0, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual 0, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual 0, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual 0, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual 0, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 0, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @             4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual 1, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual 0, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual 1, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual 0, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual 0, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual 0, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual 0, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual 0, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual 0, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual 0, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual 0, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual 0, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual 0, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual 0, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             5176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @             5515000 Simulating controller signals to execute multiplication...
# @5535000: Starting input feeding sequence...
# @5576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             5865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual 0, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual 0, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual 0, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual 0, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual 1, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual 0, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual 0, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual 0, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual 0, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual 0, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual 0, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual 0, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual 0, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual 0, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual 0, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @             6375000 Simulating controller signals to execute multiplication...
# @6395000: Starting input feeding sequence...
# @6436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             6725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual 0, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual 0, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual 1, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual 0, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual 1, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual 1, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual 0, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual 0, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual 0, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual 0, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual 0, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual 0, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual 0, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual 0, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual 0, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             6896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @             7235000 Simulating controller signals to execute multiplication...
# @7255000: Starting input feeding sequence...
# @7296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             7585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual 0, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual 0, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual 0, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual 0, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual 0, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual 0, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual 0, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual 0, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual 0, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual 0, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual 0, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual 0, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual 0, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual 0, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual 0, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             7756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @             8095000 Simulating controller signals to execute multiplication...
# @8115000: Starting input feeding sequence...
# @8156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             8445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 0, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual 0, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual 0, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual 1, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual 1, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual 0, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual 1, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual 0, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual 0, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual 0, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual 0, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual 0, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual 0, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual 0, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual 0, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual 0, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             8616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @             8955000 Simulating controller signals to execute multiplication...
# @8975000: Starting input feeding sequence...
# @9016000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @             9305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 0, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual 0, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual 0, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual 0, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual 0, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual 0, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual 0, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual 0, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual 0, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual 0, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual 0, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual 1, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual 0, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual 0, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual 0, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual 0, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @             9476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @             9815000 Simulating controller signals to execute multiplication...
# @9835000: Starting input feeding sequence...
# @9876000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            10165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual 1, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual 0, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual 0, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual 0, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual 1, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual 0, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual 0, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual 0, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual 1, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual 0, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual 0, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual 0, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual 0, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual 0, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual 0, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            10336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @            10675000 Simulating controller signals to execute multiplication...
# @10695000: Starting input feeding sequence...
# @10736000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual 0, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual 0, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual 0, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual 0, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual 1, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual 0, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual 1, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual 0, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual 1, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual 0, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual 1, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual 0, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual 0, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual 0, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual 0, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            11196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @            11535000 Simulating controller signals to execute multiplication...
# @11555000: Starting input feeding sequence...
# @11596000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            11885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual 0, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual 0, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual 0, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual 0, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual 0, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual 0, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual 0, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual 0, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual 0, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual 0, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual 0, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual 1, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual 0, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual 1, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual 1, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @            12395000 Simulating controller signals to execute multiplication...
# @12415000: Starting input feeding sequence...
# @12456000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12466000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @            12745000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual 1, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual 0, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual 0, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual 0, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual 1, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual 0, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual 0, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual 0, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual 0, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual 0, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual 0, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual 1, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual 0, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual 0, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual 1, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# Matrix Partition
# ===================================================
# @            12916000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
# Break key hit
quit -sim
# End time: 13:36:04 on May 16,2025, Elapsed time: 1:58:32
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 13:36:25 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (4) for port 'addr_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(9).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (4) for port 'addr_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(9).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (4) for port 'addr_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(9).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (4) for port 'addr_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(9).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 184
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (4) for port 'addr_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(9).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (4) for port 'addr_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(9).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (4) for port 'addr_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(9).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (4) for port 'addr_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(9).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (2) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 210
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 234
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/*}
# ** UI-Msg: (vish-4014) No objects found matching '/datapath_tb/uut/b_bram_gen[3]/*'.
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 1, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 1, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 1, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 0, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 0, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 0, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 1, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 1, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 1, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 1, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 1, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 1, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 1, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 1, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 1, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 1, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 0, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3456000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3456000 Matrix Partition
# ===================================================
# @3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual 1, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual 1, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual 0, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual 1, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual 1, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual 0, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual 0, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual 0, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual 0, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual 0, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual 0, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual 0, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 0, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4316000 Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4316000 Matrix Partition
# ===================================================
# @4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual 1, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual 0, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual 1, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual 0, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual 0, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual 0, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual 0, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual 0, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual 0, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual 0, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual 0, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual 0, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual 0, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual 0, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @5176000 Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @5176000 Matrix Partition
# ===================================================
# @5176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @5515000 Simulating controller signals to execute multiplication...
# @5535000: Starting input feeding sequence...
# @5576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual 0, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual 0, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual 0, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual 0, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual 1, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual 0, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual 0, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual 0, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual 0, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual 0, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual 0, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual 0, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual 0, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual 0, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual 0, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6036000 Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6036000 Matrix Partition
# ===================================================
# @6036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @6375000 Simulating controller signals to execute multiplication...
# @6395000: Starting input feeding sequence...
# @6436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @6725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual 0, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual 0, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual 1, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual 0, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual 1, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual 1, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual 0, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual 0, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual 0, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual 0, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual 0, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual 0, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual 0, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual 0, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual 0, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6896000 Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6896000 Matrix Partition
# ===================================================
# @6896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @7235000 Simulating controller signals to execute multiplication...
# @7255000: Starting input feeding sequence...
# @7296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @7585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual 0, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual 0, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual 0, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual 0, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual 0, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual 0, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual 0, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual 0, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual 0, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual 0, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual 0, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual 0, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual 0, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual 0, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual 0, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @7756000 Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @7756000 Matrix Partition
# ===================================================
# @7756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @8095000 Simulating controller signals to execute multiplication...
# @8115000: Starting input feeding sequence...
# @8156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @8445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 0, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual 0, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual 0, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual 1, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual 1, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual 0, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual 1, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual 0, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual 0, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual 0, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual 0, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual 0, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual 0, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual 0, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual 0, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual 0, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @8616000 Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @8616000 Matrix Partition
# ===================================================
# @8616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @8955000 Simulating controller signals to execute multiplication...
# @8975000: Starting input feeding sequence...
# @9016000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @9305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 0, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual 0, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual 0, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual 0, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual 0, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual 0, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual 0, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual 0, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual 0, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual 0, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual 0, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual 1, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual 0, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual 0, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual 0, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual 0, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @9476000 Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @9476000 Matrix Partition
# ===================================================
# @9476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @9815000 Simulating controller signals to execute multiplication...
# @9835000: Starting input feeding sequence...
# @9876000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @10165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual 1, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual 0, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual 0, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual 0, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual 1, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual 0, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual 0, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual 0, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual 1, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual 0, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual 0, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual 0, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual 0, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual 0, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual 0, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @10336000 Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @10336000 Matrix Partition
# ===================================================
# @10336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @10675000 Simulating controller signals to execute multiplication...
# @10695000: Starting input feeding sequence...
# @10736000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual 0, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual 0, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual 0, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual 0, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual 1, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual 0, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual 1, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual 0, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual 1, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual 0, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual 1, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual 0, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual 0, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual 0, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual 0, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @11196000 Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @11196000 Matrix Partition
# ===================================================
# @11196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @11535000 Simulating controller signals to execute multiplication...
# @11555000: Starting input feeding sequence...
# @11596000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual 0, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual 0, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual 0, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual 0, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual 0, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual 0, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual 0, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual 0, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual 0, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual 0, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual 0, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual 1, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual 0, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual 1, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual 1, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12056000 Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12056000 Matrix Partition
# ===================================================
# @12056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @12395000 Simulating controller signals to execute multiplication...
# @12415000: Starting input feeding sequence...
# @12456000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12466000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @12745000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual 1, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual 0, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual 0, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual 0, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual 1, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual 0, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual 0, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual 0, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual 0, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual 0, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual 0, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual 1, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual 0, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual 0, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual 1, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12916000 Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12916000 Matrix Partition
# ===================================================
# @12916000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @13255000 Simulating controller signals to execute multiplication...
# @13275000: Starting input feeding sequence...
# @13316000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @13605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual 0, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual 0, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual 0, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual 0, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual 1, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual 1, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual 0, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual 1, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual 0, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual 0, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual 0, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual 0, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual 0, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual 0, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual 0, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual 0, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @13776000 Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @13776000 Matrix Partition
# ===================================================
# @13776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 1, Addr 0) with 0cc3
#   Loading A[0][2] (Bank 2, Addr 0) with 2d23
#   Loading A[0][3] (Bank 3, Addr 0) with c654
#   Loading A[1][0] (Bank 0, Addr 1) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 2, Addr 1) with e87e
#   Loading A[1][3] (Bank 3, Addr 1) with 6d0d
#   Loading A[2][0] (Bank 0, Addr 2) with a8cf
#   Loading A[2][1] (Bank 1, Addr 2) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 3, Addr 2) with f0ac
#   Loading A[3][0] (Bank 0, Addr 3) with a4d5
#   Loading A[3][1] (Bank 1, Addr 3) with 337b
#   Loading A[3][2] (Bank 2, Addr 3) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @14115000 Simulating controller signals to execute multiplication...
# @14135000: Starting input feeding sequence...
# @14176000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14186000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @14465000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual 0, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual 1, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual 0, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual 0, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual 0, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual 0, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual 1, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual 1, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual 0, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual 1, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual 0, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual 0, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual 0, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual 0, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual 0, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual 1, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @14636000 Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @14636000 Matrix Partition
# ===================================================
# @14636000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 1, Addr 0) with 33ae
#   Loading A[0][2] (Bank 2, Addr 0) with 1949
#   Loading A[0][3] (Bank 3, Addr 0) with c2ac
#   Loading A[1][0] (Bank 0, Addr 1) with 74ca
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 2, Addr 1) with 5b33
#   Loading A[1][3] (Bank 3, Addr 1) with 086c
#   Loading A[2][0] (Bank 0, Addr 2) with 1549
#   Loading A[2][1] (Bank 1, Addr 2) with 602f
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 3, Addr 2) with bc83
#   Loading A[3][0] (Bank 0, Addr 3) with a3b9
#   Loading A[3][1] (Bank 1, Addr 3) with bfbe
#   Loading A[3][2] (Bank 2, Addr 3) with 0884
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[0][1] (Bank 1, Addr 0) with 4904
#   Loading B[0][2] (Bank 2, Addr 0) with 8a0c
#   Loading B[0][3] (Bank 3, Addr 0) with b0ba
#   Loading B[1][0] (Bank 0, Addr 1) with 4193
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[1][2] (Bank 2, Addr 1) with b102
#   Loading B[1][3] (Bank 3, Addr 1) with 0e75
#   Loading B[2][0] (Bank 0, Addr 2) with c8a1
#   Loading B[2][1] (Bank 1, Addr 2) with b09f
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[2][3] (Bank 3, Addr 2) with 4b2b
#   Loading B[3][0] (Bank 0, Addr 3) with b8e2
#   Loading B[3][1] (Bank 1, Addr 3) with a481
#   Loading B[3][2] (Bank 2, Addr 3) with 2498
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @14975000 Simulating controller signals to execute multiplication...
# @14995000: Starting input feeding sequence...
# @15036000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @15325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual 0, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual 1, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual 0, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual 0, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual 1, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual 0, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual 0, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual 1, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual 0, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual 1, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual 0, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual 0, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual 1, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual 0, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual 1, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual 1, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @15496000 Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @15496000 Matrix Partition
# ===================================================
# @15496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 1, Addr 0) with 4374
#   Loading A[0][2] (Bank 2, Addr 0) with d8de
#   Loading A[0][3] (Bank 3, Addr 0) with 0bcd
#   Loading A[1][0] (Bank 0, Addr 1) with ebff
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 2, Addr 1) with 5315
#   Loading A[1][3] (Bank 3, Addr 1) with 377a
#   Loading A[2][0] (Bank 0, Addr 2) with 881b
#   Loading A[2][1] (Bank 1, Addr 2) with 3ecf
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 3, Addr 2) with 5223
#   Loading A[3][0] (Bank 0, Addr 3) with 87cd
#   Loading A[3][1] (Bank 1, Addr 3) with 2a6f
#   Loading A[3][2] (Bank 2, Addr 3) with c889
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[0][1] (Bank 1, Addr 0) with 00f3
#   Loading B[0][2] (Bank 2, Addr 0) with a35c
#   Loading B[0][3] (Bank 3, Addr 0) with aa65
#   Loading B[1][0] (Bank 0, Addr 1) with 222b
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[1][2] (Bank 2, Addr 1) with da28
#   Loading B[1][3] (Bank 3, Addr 1) with eaa8
#   Loading B[2][0] (Bank 0, Addr 2) with ff56
#   Loading B[2][1] (Bank 1, Addr 2) with 6ba0
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[2][3] (Bank 3, Addr 2) with 90d1
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc4
#   Loading B[3][1] (Bank 1, Addr 3) with 671c
#   Loading B[3][2] (Bank 2, Addr 3) with ba64
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @15835000 Simulating controller signals to execute multiplication...
# @15855000: Starting input feeding sequence...
# @15896000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15906000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @16185000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual 0, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual 0, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual 0, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual 0, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual 0, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual 1, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual 1, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual 1, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual 0, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual 0, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual 0, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual 0, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual 0, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual 0, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual 0, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual 0, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @16356000 Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @16356000 Matrix Partition
# ===================================================
# @16356000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 1, Addr 0) with e7d1
#   Loading A[0][2] (Bank 2, Addr 0) with 03a8
#   Loading A[0][3] (Bank 3, Addr 0) with 97d0
#   Loading A[1][0] (Bank 0, Addr 1) with 9a37
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 2, Addr 1) with cb14
#   Loading A[1][3] (Bank 3, Addr 1) with 916b
#   Loading A[2][0] (Bank 0, Addr 2) with 3e85
#   Loading A[2][1] (Bank 1, Addr 2) with 83c8
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 3, Addr 2) with ead0
#   Loading A[3][0] (Bank 0, Addr 3) with ac60
#   Loading A[3][1] (Bank 1, Addr 3) with 5c5f
#   Loading A[3][2] (Bank 2, Addr 3) with 3852
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[0][1] (Bank 1, Addr 0) with ad8e
#   Loading B[0][2] (Bank 2, Addr 0) with 9a34
#   Loading B[0][3] (Bank 3, Addr 0) with 7f8e
#   Loading B[1][0] (Bank 0, Addr 1) with 5d1a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[1][2] (Bank 2, Addr 1) with 9ffd
#   Loading B[1][3] (Bank 3, Addr 1) with 6841
#   Loading B[2][0] (Bank 0, Addr 2) with 3375
#   Loading B[2][1] (Bank 1, Addr 2) with 6107
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[2][3] (Bank 3, Addr 2) with 6583
#   Loading B[3][0] (Bank 0, Addr 3) with db9d
#   Loading B[3][1] (Bank 1, Addr 3) with 492a
#   Loading B[3][2] (Bank 2, Addr 3) with 66cd
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @16695000 Simulating controller signals to execute multiplication...
# @16715000: Starting input feeding sequence...
# @16756000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @17045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual 0, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual 0, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual 0, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual 0, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual 0, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual 1, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual 0, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual 0, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual 0, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual 1, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual 0, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual 0, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual 0, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual 0, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual 0, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual 0, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @17216000 Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @17216000 Matrix Partition
# ===================================================
# @17216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 1, Addr 0) with 3fa9
#   Loading A[0][2] (Bank 2, Addr 0) with 6ddd
#   Loading A[0][3] (Bank 3, Addr 0) with d7cf
#   Loading A[1][0] (Bank 0, Addr 1) with 6b9d
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 2, Addr 1) with aafa
#   Loading A[1][3] (Bank 3, Addr 1) with d2a3
#   Loading A[2][0] (Bank 0, Addr 2) with 8dec
#   Loading A[2][1] (Bank 1, Addr 2) with e147
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 3, Addr 2) with 1b9c
#   Loading A[3][0] (Bank 0, Addr 3) with 3fce
#   Loading A[3][1] (Bank 1, Addr 3) with 23f2
#   Loading A[3][2] (Bank 2, Addr 3) with 7c98
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[0][1] (Bank 1, Addr 0) with 08ee
#   Loading B[0][2] (Bank 2, Addr 0) with 33d2
#   Loading B[0][3] (Bank 3, Addr 0) with 6b1f
#   Loading B[1][0] (Bank 0, Addr 1) with 1532
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[1][2] (Bank 2, Addr 1) with b4e2
#   Loading B[1][3] (Bank 3, Addr 1) with 4267
#   Loading B[2][0] (Bank 0, Addr 2) with 9a2e
#   Loading B[2][1] (Bank 1, Addr 2) with 67b5
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 197e
#   Loading B[3][0] (Bank 0, Addr 3) with 72d3
#   Loading B[3][1] (Bank 1, Addr 3) with 030b
#   Loading B[3][2] (Bank 2, Addr 3) with 9c52
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @17555000 Simulating controller signals to execute multiplication...
# @17575000: Starting input feeding sequence...
# @17616000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17626000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @17905000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual 0, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual 0, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual 0, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual 0, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual 1, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual 0, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual 0, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual 1, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual 0, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual 0, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual 0, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual 0, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual 0, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual 0, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual 0, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual 0, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @18076000 Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @18076000 Matrix Partition
# ===================================================
# @18076000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 1, Addr 0) with 7631
#   Loading A[0][2] (Bank 2, Addr 0) with 08e8
#   Loading A[0][3] (Bank 3, Addr 0) with d98c
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 2, Addr 1) with 0b94
#   Loading A[1][3] (Bank 3, Addr 1) with a1d8
#   Loading A[2][0] (Bank 0, Addr 2) with be24
#   Loading A[2][1] (Bank 1, Addr 2) with 3dab
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 3, Addr 2) with b4a5
#   Loading A[3][0] (Bank 0, Addr 3) with 766e
#   Loading A[3][1] (Bank 1, Addr 3) with 5e6d
#   Loading A[3][2] (Bank 2, Addr 3) with bd75
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[0][1] (Bank 1, Addr 0) with 536a
#   Loading B[0][2] (Bank 2, Addr 0) with 8a59
#   Loading B[0][3] (Bank 3, Addr 0) with 3372
#   Loading B[1][0] (Bank 0, Addr 1) with ccbb
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[1][2] (Bank 2, Addr 1) with 5dd6
#   Loading B[1][3] (Bank 3, Addr 1) with 9215
#   Loading B[2][0] (Bank 0, Addr 2) with 56b7
#   Loading B[2][1] (Bank 1, Addr 2) with f0d1
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 21d0
#   Loading B[3][0] (Bank 0, Addr 3) with 11fc
#   Loading B[3][1] (Bank 1, Addr 3) with 1be3
#   Loading B[3][2] (Bank 2, Addr 3) with 54d6
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @18415000 Simulating controller signals to execute multiplication...
# @18435000: Starting input feeding sequence...
# @18476000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @18765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual 0, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual 0, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual 0, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual 0, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual 0, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual 1, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual 0, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual 1, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual 0, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual 0, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual 0, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual 1, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual 0, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual 1, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual 0, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual 1, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @18936000 Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @18936000 Matrix Partition
# ===================================================
# @18936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 1, Addr 0) with 1713
#   Loading A[0][2] (Bank 2, Addr 0) with fc9d
#   Loading A[0][3] (Bank 3, Addr 0) with d833
#   Loading A[1][0] (Bank 0, Addr 1) with 893b
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 2, Addr 1) with a562
#   Loading A[1][3] (Bank 3, Addr 1) with 4ca0
#   Loading A[2][0] (Bank 0, Addr 2) with 192d
#   Loading A[2][1] (Bank 1, Addr 2) with 4bfa
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 3, Addr 2) with 295a
#   Loading A[3][0] (Bank 0, Addr 3) with 783f
#   Loading A[3][1] (Bank 1, Addr 3) with 025b
#   Loading A[3][2] (Bank 2, Addr 3) with 5e47
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[0][1] (Bank 1, Addr 0) with f807
#   Loading B[0][2] (Bank 2, Addr 0) with 18a0
#   Loading B[0][3] (Bank 3, Addr 0) with c97d
#   Loading B[1][0] (Bank 0, Addr 1) with d1a4
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[1][2] (Bank 2, Addr 1) with b713
#   Loading B[1][3] (Bank 3, Addr 1) with e42e
#   Loading B[2][0] (Bank 0, Addr 2) with cd53
#   Loading B[2][1] (Bank 1, Addr 2) with 0a61
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[2][3] (Bank 3, Addr 2) with cd4b
#   Loading B[3][0] (Bank 0, Addr 3) with 1489
#   Loading B[3][1] (Bank 1, Addr 3) with 7ec8
#   Loading B[3][2] (Bank 2, Addr 3) with d878
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @19275000 Simulating controller signals to execute multiplication...
# @19295000: Starting input feeding sequence...
# @19336000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @19625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual 0, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual 0, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual 0, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual 0, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual 0, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual 0, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual 0, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual 0, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual 0, Expected 16bea50ee
quit -sim
# End time: 13:57:21 on May 16,2025, Elapsed time: 0:20:56
# Errors: 0, Warnings: 32
# Compile of datapath.v was successful.
# Compile of datapath_tb.v failed with 1 errors.
# 2 compiles, 1 failed with 1 error.
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 13:58:01 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
# WARNING: No extended dataflow license exists
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 1, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 1, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 1, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 0, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 0, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 0, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 1, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 1, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 1, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 1, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 1, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 1, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 1, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 1, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 1, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 1, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 0, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3456000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3456000 Matrix Partition
# ===================================================
# @3456000 Matrix partition ended! 
# @3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual 1, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual 1, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual 0, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual 1, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual 1, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual 0, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual 0, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual 0, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual 0, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual 0, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual 0, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual 0, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 0, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4316000 Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4316000 Matrix Partition
# ===================================================
# @4316000 Matrix partition ended! 
# @4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual 1, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual 0, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual 1, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual 0, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual 0, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual 0, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual 0, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual 0, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual 0, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual 0, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual 0, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual 0, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual 0, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual 0, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @5176000 Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @5176000 Matrix Partition
# ===================================================
# @5176000 Matrix partition ended! 
# @5176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @5515000 Simulating controller signals to execute multiplication...
# @5535000: Starting input feeding sequence...
# @5576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual 0, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual 0, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual 0, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual 0, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual 1, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual 0, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual 0, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual 0, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual 0, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual 0, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual 0, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual 0, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual 0, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual 0, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual 0, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6036000 Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6036000 Matrix Partition
# ===================================================
# @6036000 Matrix partition ended! 
# @6036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @6375000 Simulating controller signals to execute multiplication...
# @6395000: Starting input feeding sequence...
# @6436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @6725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual 0, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual 0, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual 1, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual 0, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual 1, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual 1, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual 0, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual 0, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual 0, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual 0, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual 0, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual 0, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual 0, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual 0, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual 0, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6896000 Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6896000 Matrix Partition
# ===================================================
# @6896000 Matrix partition ended! 
# @6896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @7235000 Simulating controller signals to execute multiplication...
# @7255000: Starting input feeding sequence...
# @7296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @7585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual 0, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual 0, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual 0, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual 0, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual 0, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual 0, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual 0, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual 0, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual 0, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual 0, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual 0, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual 0, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual 0, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual 0, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual 0, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @7756000 Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @7756000 Matrix Partition
# ===================================================
# @7756000 Matrix partition ended! 
# @7756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @8095000 Simulating controller signals to execute multiplication...
# @8115000: Starting input feeding sequence...
# @8156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @8445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 0, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual 0, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual 0, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual 1, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual 1, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual 0, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual 1, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual 0, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual 0, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual 0, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual 0, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual 0, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual 0, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual 0, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual 0, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual 0, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @8616000 Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @8616000 Matrix Partition
# ===================================================
# @8616000 Matrix partition ended! 
# @8616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @8955000 Simulating controller signals to execute multiplication...
# @8975000: Starting input feeding sequence...
# @9016000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @9305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 0, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual 0, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual 0, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual 0, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual 0, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual 0, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual 0, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual 0, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual 0, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual 0, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual 0, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual 1, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual 0, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual 0, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual 0, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual 0, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @9476000 Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @9476000 Matrix Partition
# ===================================================
# @9476000 Matrix partition ended! 
# @9476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @9815000 Simulating controller signals to execute multiplication...
# @9835000: Starting input feeding sequence...
# @9876000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @10165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual 1, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual 0, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual 0, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual 0, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual 1, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual 0, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual 0, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual 0, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual 1, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual 0, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual 0, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual 0, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual 0, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual 0, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual 0, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @10336000 Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @10336000 Matrix Partition
# ===================================================
# @10336000 Matrix partition ended! 
# @10336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @10675000 Simulating controller signals to execute multiplication...
# @10695000: Starting input feeding sequence...
# @10736000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual 0, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual 0, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual 0, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual 0, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual 1, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual 0, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual 1, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual 0, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual 1, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual 0, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual 1, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual 0, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual 0, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual 0, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual 0, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @11196000 Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @11196000 Matrix Partition
# ===================================================
# @11196000 Matrix partition ended! 
# @11196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @11535000 Simulating controller signals to execute multiplication...
# @11555000: Starting input feeding sequence...
# @11596000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual 0, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual 0, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual 0, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual 0, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual 0, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual 0, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual 0, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual 0, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual 0, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual 0, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual 0, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual 1, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual 0, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual 1, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual 1, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12056000 Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12056000 Matrix Partition
# ===================================================
# @12056000 Matrix partition ended! 
# @12056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @12395000 Simulating controller signals to execute multiplication...
# @12415000: Starting input feeding sequence...
# @12456000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12466000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @12745000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual 1, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual 0, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual 0, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual 0, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual 1, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual 0, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual 0, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual 0, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual 0, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual 0, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual 0, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual 1, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual 0, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual 0, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual 1, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12916000 Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12916000 Matrix Partition
# ===================================================
# @12916000 Matrix partition ended! 
# @12916000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @13255000 Simulating controller signals to execute multiplication...
# @13275000: Starting input feeding sequence...
# @13316000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @13605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual 0, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual 0, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual 0, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual 0, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual 1, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual 1, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual 0, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual 1, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual 0, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual 0, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual 0, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual 0, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual 0, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual 0, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual 0, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual 0, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @13776000 Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @13776000 Matrix Partition
# ===================================================
# @13776000 Matrix partition ended! 
# @13776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 1, Addr 0) with 0cc3
#   Loading A[0][2] (Bank 2, Addr 0) with 2d23
#   Loading A[0][3] (Bank 3, Addr 0) with c654
#   Loading A[1][0] (Bank 0, Addr 1) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 2, Addr 1) with e87e
#   Loading A[1][3] (Bank 3, Addr 1) with 6d0d
#   Loading A[2][0] (Bank 0, Addr 2) with a8cf
#   Loading A[2][1] (Bank 1, Addr 2) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 3, Addr 2) with f0ac
#   Loading A[3][0] (Bank 0, Addr 3) with a4d5
#   Loading A[3][1] (Bank 1, Addr 3) with 337b
#   Loading A[3][2] (Bank 2, Addr 3) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @14115000 Simulating controller signals to execute multiplication...
# @14135000: Starting input feeding sequence...
# @14176000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14186000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
# Break key hit
quit -sim
# End time: 14:12:13 on May 16,2025, Elapsed time: 0:14:12
# Errors: 0, Warnings: 25
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 14:12:22 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 1, Addr 0) with d608
#   Loading A[0][2] (Bank 2, Addr 0) with c866
#   Loading A[0][3] (Bank 3, Addr 0) with 3cda
#   Loading A[1][0] (Bank 0, Addr 1) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 2, Addr 1) with 23e9
#   Loading A[1][3] (Bank 3, Addr 1) with c10d
#   Loading A[2][0] (Bank 0, Addr 2) with 8053
#   Loading A[2][1] (Bank 1, Addr 2) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 3, Addr 2) with d509
#   Loading A[3][0] (Bank 0, Addr 3) with a306
#   Loading A[3][1] (Bank 1, Addr 3) with 83b8
#   Loading A[3][2] (Bank 2, Addr 3) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @115000 Simulating controller signals to execute multiplication...
# @135000: Starting input feeding sequence...
# @176000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @186000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @465000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual x, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @636000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @636000 Matrix Partition
# ===================================================
# @636000 Matrix partition ended! 
# @636000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 1, Addr 0) with 5aa8
#   Loading A[0][2] (Bank 2, Addr 0) with 8f3a
#   Loading A[0][3] (Bank 3, Addr 0) with 8985
#   Loading A[1][0] (Bank 0, Addr 1) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 2, Addr 1) with 46a4
#   Loading A[1][3] (Bank 3, Addr 1) with 6146
#   Loading A[2][0] (Bank 0, Addr 2) with 1106
#   Loading A[2][1] (Bank 1, Addr 2) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 3, Addr 2) with 90e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7557
#   Loading A[3][1] (Bank 1, Addr 3) with 9d29
#   Loading A[3][2] (Bank 2, Addr 3) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @735000 Simulating controller signals to execute multiplication...
# @755000: Starting input feeding sequence...
# @796000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @806000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1085000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual x, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual x, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual x, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual x, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual x, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual x, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual x, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual x, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual x, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual x, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual x, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual x, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual x, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual x, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual x, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 0, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1256000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1256000 Matrix Partition
# ===================================================
# @1256000 Matrix partition ended! 
# @1256000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 1, Addr 0) with 62dc
#   Loading A[0][2] (Bank 2, Addr 0) with 3050
#   Loading A[0][3] (Bank 3, Addr 0) with 630d
#   Loading A[1][0] (Bank 0, Addr 1) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 2, Addr 1) with 1c72
#   Loading A[1][3] (Bank 3, Addr 1) with 8cfe
#   Loading A[2][0] (Bank 0, Addr 2) with 152a
#   Loading A[2][1] (Bank 1, Addr 2) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 3, Addr 2) with 66e2
#   Loading A[3][0] (Bank 0, Addr 3) with 7c5c
#   Loading A[3][1] (Bank 1, Addr 3) with 2e47
#   Loading A[3][2] (Bank 2, Addr 3) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @1355000 Simulating controller signals to execute multiplication...
# @1375000: Starting input feeding sequence...
# @1416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual x, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual x, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual x, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual x, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual x, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual x, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual x, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual x, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual x, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual x, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual x, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual x, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual x, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual x, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual x, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1876000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1876000 Matrix Partition
# ===================================================
# @1876000 Matrix partition ended! 
# @1876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 1, Addr 0) with 5d17
#   Loading A[0][2] (Bank 2, Addr 0) with 546c
#   Loading A[0][3] (Bank 3, Addr 0) with 9b65
#   Loading A[1][0] (Bank 0, Addr 1) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 2, Addr 1) with ab63
#   Loading A[1][3] (Bank 3, Addr 1) with 151f
#   Loading A[2][0] (Bank 0, Addr 2) with d2a1
#   Loading A[2][1] (Bank 1, Addr 2) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 3, Addr 2) with 2d93
#   Loading A[3][0] (Bank 0, Addr 3) with 5dc4
#   Loading A[3][1] (Bank 1, Addr 3) with 7b97
#   Loading A[3][2] (Bank 2, Addr 3) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @1975000 Simulating controller signals to execute multiplication...
# @1995000: Starting input feeding sequence...
# @2036000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual x, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual x, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual x, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual x, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual x, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual x, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual x, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual x, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual x, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual x, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual x, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual x, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual x, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual x, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual x, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 0, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2496000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2496000 Matrix Partition
# ===================================================
# @2496000 Matrix partition ended! 
# @2496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 1, Addr 0) with 140c
#   Loading A[0][2] (Bank 2, Addr 0) with 1bbe
#   Loading A[0][3] (Bank 3, Addr 0) with e39e
#   Loading A[1][0] (Bank 0, Addr 1) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 2, Addr 1) with be4d
#   Loading A[1][3] (Bank 3, Addr 1) with 968b
#   Loading A[2][0] (Bank 0, Addr 2) with 8db5
#   Loading A[2][1] (Bank 1, Addr 2) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 3, Addr 2) with 39b3
#   Loading A[3][0] (Bank 0, Addr 3) with 5ef7
#   Loading A[3][1] (Bank 1, Addr 3) with 47ee
#   Loading A[3][2] (Bank 2, Addr 3) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @2595000 Simulating controller signals to execute multiplication...
# @2615000: Starting input feeding sequence...
# @2656000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2666000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual x, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual x, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual x, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual x, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual x, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual x, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual x, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual x, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual x, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual x, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual x, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual x, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual x, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual x, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual x, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 0, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3116000 Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3116000 Matrix Partition
# ===================================================
# @3116000 Matrix partition ended! 
# @3116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 1, Addr 0) with 8e22
#   Loading A[0][2] (Bank 2, Addr 0) with ddbd
#   Loading A[0][3] (Bank 3, Addr 0) with 9bcd
#   Loading A[1][0] (Bank 0, Addr 1) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 2, Addr 1) with 8f25
#   Loading A[1][3] (Bank 3, Addr 1) with de61
#   Loading A[2][0] (Bank 0, Addr 2) with 5215
#   Loading A[2][1] (Bank 1, Addr 2) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 3, Addr 2) with 0d28
#   Loading A[3][0] (Bank 0, Addr 3) with 4ad1
#   Loading A[3][1] (Bank 1, Addr 3) with dfc6
#   Loading A[3][2] (Bank 2, Addr 3) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @3215000 Simulating controller signals to execute multiplication...
# @3235000: Starting input feeding sequence...
# @3276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual x, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual x, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual x, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual x, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual x, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual x, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual x, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual x, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual x, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual x, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual x, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual x, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual x, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual x, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual x, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual 0, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3736000 Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3736000 Matrix Partition
# ===================================================
# @3736000 Matrix partition ended! 
# @3736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 1, Addr 0) with d921
#   Loading A[0][2] (Bank 2, Addr 0) with 3320
#   Loading A[0][3] (Bank 3, Addr 0) with 57f2
#   Loading A[1][0] (Bank 0, Addr 1) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 2, Addr 1) with ed08
#   Loading A[1][3] (Bank 3, Addr 1) with 693c
#   Loading A[2][0] (Bank 0, Addr 2) with 75be
#   Loading A[2][1] (Bank 1, Addr 2) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 3, Addr 2) with dd13
#   Loading A[3][0] (Bank 0, Addr 3) with 09fa
#   Loading A[3][1] (Bank 1, Addr 3) with a3a1
#   Loading A[3][2] (Bank 2, Addr 3) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @3835000 Simulating controller signals to execute multiplication...
# @3855000: Starting input feeding sequence...
# @3896000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3906000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4185000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual x, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual x, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual x, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual x, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual x, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual x, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual x, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual x, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual x, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual x, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual x, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual x, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual x, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual x, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual x, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual 0, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4356000 Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4356000 Matrix Partition
# ===================================================
# @4356000 Matrix partition ended! 
# @4356000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 1, Addr 0) with db20
#   Loading A[0][2] (Bank 2, Addr 0) with 18c1
#   Loading A[0][3] (Bank 3, Addr 0) with 51dd
#   Loading A[1][0] (Bank 0, Addr 1) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 2, Addr 1) with e208
#   Loading A[1][3] (Bank 3, Addr 1) with add1
#   Loading A[2][0] (Bank 0, Addr 2) with 1cec
#   Loading A[2][1] (Bank 1, Addr 2) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 3, Addr 2) with 50c1
#   Loading A[3][0] (Bank 0, Addr 3) with 7745
#   Loading A[3][1] (Bank 1, Addr 3) with 41d8
#   Loading A[3][2] (Bank 2, Addr 3) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @4455000 Simulating controller signals to execute multiplication...
# @4475000: Starting input feeding sequence...
# @4516000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4526000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual x, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual x, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual x, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual x, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual x, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual x, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual x, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual x, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual x, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual x, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual x, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual x, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual x, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual x, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual x, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual 0, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4976000 Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4976000 Matrix Partition
# ===================================================
# @4976000 Matrix partition ended! 
# @4976000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 1, Addr 0) with 125d
#   Loading A[0][2] (Bank 2, Addr 0) with 3382
#   Loading A[0][3] (Bank 3, Addr 0) with ee9b
#   Loading A[1][0] (Bank 0, Addr 1) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 2, Addr 1) with 2c62
#   Loading A[1][3] (Bank 3, Addr 1) with 94e6
#   Loading A[2][0] (Bank 0, Addr 2) with a82f
#   Loading A[2][1] (Bank 1, Addr 2) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 3, Addr 2) with ba8e
#   Loading A[3][0] (Bank 0, Addr 3) with 4f36
#   Loading A[3][1] (Bank 1, Addr 3) with 9e41
#   Loading A[3][2] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @5075000 Simulating controller signals to execute multiplication...
# @5095000: Starting input feeding sequence...
# @5136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual x, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual x, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual x, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual x, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual x, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual x, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual x, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual x, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual x, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual x, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual x, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual x, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual x, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual x, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual x, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual 0, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @5596000 Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @5596000 Matrix Partition
# ===================================================
# @5596000 Matrix partition ended! 
# @5596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 1, Addr 0) with c82b
#   Loading A[0][2] (Bank 2, Addr 0) with 899a
#   Loading A[0][3] (Bank 3, Addr 0) with 206a
#   Loading A[1][0] (Bank 0, Addr 1) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 2, Addr 1) with 72c1
#   Loading A[1][3] (Bank 3, Addr 1) with 7480
#   Loading A[2][0] (Bank 0, Addr 2) with 2548
#   Loading A[2][1] (Bank 1, Addr 2) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 3, Addr 2) with dfd9
#   Loading A[3][0] (Bank 0, Addr 3) with d73d
#   Loading A[3][1] (Bank 1, Addr 3) with 78be
#   Loading A[3][2] (Bank 2, Addr 3) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @5695000 Simulating controller signals to execute multiplication...
# @5715000: Starting input feeding sequence...
# @5756000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @6045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual x, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual x, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual x, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual x, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual x, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual x, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual x, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual x, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual x, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual x, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual x, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual x, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual x, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual x, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual x, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual 0, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6216000 Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6216000 Matrix Partition
# ===================================================
# @6216000 Matrix partition ended! 
# @6216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 1, Addr 0) with f4b7
#   Loading A[0][2] (Bank 2, Addr 0) with 9958
#   Loading A[0][3] (Bank 3, Addr 0) with 3783
#   Loading A[1][0] (Bank 0, Addr 1) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 2, Addr 1) with 97e5
#   Loading A[1][3] (Bank 3, Addr 1) with adc1
#   Loading A[2][0] (Bank 0, Addr 2) with c07b
#   Loading A[2][1] (Bank 1, Addr 2) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 3, Addr 2) with 49be
#   Loading A[3][0] (Bank 0, Addr 3) with ed1a
#   Loading A[3][1] (Bank 1, Addr 3) with 1fc0
#   Loading A[3][2] (Bank 2, Addr 3) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @6315000 Simulating controller signals to execute multiplication...
# @6335000: Starting input feeding sequence...
# @6376000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @6665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual x, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual x, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual x, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual x, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual x, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual x, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual x, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual x, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual x, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual x, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual x, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual x, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual x, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual x, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual x, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual 0, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6836000 Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6836000 Matrix Partition
# ===================================================
# @6836000 Matrix partition ended! 
# @6836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 1, Addr 0) with d6ef
#   Loading A[0][2] (Bank 2, Addr 0) with c404
#   Loading A[0][3] (Bank 3, Addr 0) with 01bb
#   Loading A[1][0] (Bank 0, Addr 1) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 2, Addr 1) with c12c
#   Loading A[1][3] (Bank 3, Addr 1) with 0ebc
#   Loading A[2][0] (Bank 0, Addr 2) with d516
#   Loading A[2][1] (Bank 1, Addr 2) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 3, Addr 2) with 7627
#   Loading A[3][0] (Bank 0, Addr 3) with 914f
#   Loading A[3][1] (Bank 1, Addr 3) with 74e9
#   Loading A[3][2] (Bank 2, Addr 3) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @6935000 Simulating controller signals to execute multiplication...
# @6955000: Starting input feeding sequence...
# @6996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @7285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual x, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual x, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual x, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual x, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual x, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual x, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual x, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual x, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual x, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual x, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual x, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual x, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual x, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual x, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual x, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual 0, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @7456000 Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @7456000 Matrix Partition
# ===================================================
# @7456000 Matrix partition ended! 
# @7456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 1, Addr 0) with d8e3
#   Loading A[0][2] (Bank 2, Addr 0) with 571c
#   Loading A[0][3] (Bank 3, Addr 0) with f89a
#   Loading A[1][0] (Bank 0, Addr 1) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 2, Addr 1) with e541
#   Loading A[1][3] (Bank 3, Addr 1) with 3d63
#   Loading A[2][0] (Bank 0, Addr 2) with fb5d
#   Loading A[2][1] (Bank 1, Addr 2) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 3, Addr 2) with 8519
#   Loading A[3][0] (Bank 0, Addr 3) with 291a
#   Loading A[3][1] (Bank 1, Addr 3) with 62db
#   Loading A[3][2] (Bank 2, Addr 3) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @7555000 Simulating controller signals to execute multiplication...
# @7575000: Starting input feeding sequence...
# @7616000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7626000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @7905000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual x, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual x, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual x, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual x, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual x, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual x, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual x, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual x, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual x, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual x, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual x, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual x, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual x, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual x, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual x, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual 0, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @8076000 Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @8076000 Matrix Partition
# ===================================================
# @8076000 Matrix partition ended! 
# @8076000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 1, Addr 0) with caae
#   Loading A[0][2] (Bank 2, Addr 0) with 4aa0
#   Loading A[0][3] (Bank 3, Addr 0) with 5063
#   Loading A[1][0] (Bank 0, Addr 1) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 2, Addr 1) with aba7
#   Loading A[1][3] (Bank 3, Addr 1) with e4c4
#   Loading A[2][0] (Bank 0, Addr 2) with 35d7
#   Loading A[2][1] (Bank 1, Addr 2) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 3, Addr 2) with 1918
#   Loading A[3][0] (Bank 0, Addr 3) with 3226
#   Loading A[3][1] (Bank 1, Addr 3) with e0b5
#   Loading A[3][2] (Bank 2, Addr 3) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @8175000 Simulating controller signals to execute multiplication...
# @8195000: Starting input feeding sequence...
# @8236000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @8525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual x, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual x, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual x, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual x, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual x, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual x, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual x, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual x, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual x, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual x, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual x, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual x, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual x, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual x, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual x, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual 1, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @8696000 Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @8696000 Matrix Partition
# ===================================================
# @8696000 Matrix partition ended! 
# @8696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 1, Addr 0) with fe9b
#   Loading A[0][2] (Bank 2, Addr 0) with 40aa
#   Loading A[0][3] (Bank 3, Addr 0) with 45f8
#   Loading A[1][0] (Bank 0, Addr 1) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 2, Addr 1) with b2a2
#   Loading A[1][3] (Bank 3, Addr 1) with 273c
#   Loading A[2][0] (Bank 0, Addr 2) with f3ef
#   Loading A[2][1] (Bank 1, Addr 2) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 3, Addr 2) with 0e89
#   Loading A[3][0] (Bank 0, Addr 3) with 94bd
#   Loading A[3][1] (Bank 1, Addr 3) with 3447
#   Loading A[3][2] (Bank 2, Addr 3) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @8795000 Simulating controller signals to execute multiplication...
# @8815000: Starting input feeding sequence...
# @8856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @9145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual x, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual x, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual x, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual x, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual x, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual x, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual x, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual x, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual x, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual x, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual x, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual x, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual x, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual x, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual x, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual 1, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @9316000 Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @9316000 Matrix Partition
# ===================================================
# @9316000 Matrix partition ended! 
# @9316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 1, Addr 0) with b874
#   Loading A[0][2] (Bank 2, Addr 0) with ee81
#   Loading A[0][3] (Bank 3, Addr 0) with 5230
#   Loading A[1][0] (Bank 0, Addr 1) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 2, Addr 1) with c2d9
#   Loading A[1][3] (Bank 3, Addr 1) with efe6
#   Loading A[2][0] (Bank 0, Addr 2) with fc98
#   Loading A[2][1] (Bank 1, Addr 2) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 3, Addr 2) with 22a3
#   Loading A[3][0] (Bank 0, Addr 3) with 9b31
#   Loading A[3][1] (Bank 1, Addr 3) with cba8
#   Loading A[3][2] (Bank 2, Addr 3) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @9415000 Simulating controller signals to execute multiplication...
# @9435000: Starting input feeding sequence...
# @9476000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @9765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual x, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual x, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual x, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual x, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual x, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual x, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual x, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual x, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual x, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual x, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual x, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual x, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual x, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual x, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual x, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual 0, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @9936000 Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @9936000 Matrix Partition
# ===================================================
# @9936000 Matrix partition ended! 
# @9936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 1, Addr 0) with 0cc3
#   Loading A[0][2] (Bank 2, Addr 0) with 2d23
#   Loading A[0][3] (Bank 3, Addr 0) with c654
#   Loading A[1][0] (Bank 0, Addr 1) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 2, Addr 1) with e87e
#   Loading A[1][3] (Bank 3, Addr 1) with 6d0d
#   Loading A[2][0] (Bank 0, Addr 2) with a8cf
#   Loading A[2][1] (Bank 1, Addr 2) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 3, Addr 2) with f0ac
#   Loading A[3][0] (Bank 0, Addr 3) with a4d5
#   Loading A[3][1] (Bank 1, Addr 3) with 337b
#   Loading A[3][2] (Bank 2, Addr 3) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @10035000 Simulating controller signals to execute multiplication...
# @10055000: Starting input feeding sequence...
# @10096000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10106000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @10385000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual x, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual x, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual x, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual x, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual x, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual x, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual x, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual x, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual x, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual x, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual x, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual x, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual x, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual x, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual x, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual 1, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @10556000 Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @10556000 Matrix Partition
# ===================================================
# @10556000 Matrix partition ended! 
# @10556000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 1, Addr 0) with 33ae
#   Loading A[0][2] (Bank 2, Addr 0) with 1949
#   Loading A[0][3] (Bank 3, Addr 0) with c2ac
#   Loading A[1][0] (Bank 0, Addr 1) with 74ca
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 2, Addr 1) with 5b33
#   Loading A[1][3] (Bank 3, Addr 1) with 086c
#   Loading A[2][0] (Bank 0, Addr 2) with 1549
#   Loading A[2][1] (Bank 1, Addr 2) with 602f
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 3, Addr 2) with bc83
#   Loading A[3][0] (Bank 0, Addr 3) with a3b9
#   Loading A[3][1] (Bank 1, Addr 3) with bfbe
#   Loading A[3][2] (Bank 2, Addr 3) with 0884
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[0][1] (Bank 1, Addr 0) with 4904
#   Loading B[0][2] (Bank 2, Addr 0) with 8a0c
#   Loading B[0][3] (Bank 3, Addr 0) with b0ba
#   Loading B[1][0] (Bank 0, Addr 1) with 4193
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[1][2] (Bank 2, Addr 1) with b102
#   Loading B[1][3] (Bank 3, Addr 1) with 0e75
#   Loading B[2][0] (Bank 0, Addr 2) with c8a1
#   Loading B[2][1] (Bank 1, Addr 2) with b09f
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[2][3] (Bank 3, Addr 2) with 4b2b
#   Loading B[3][0] (Bank 0, Addr 3) with b8e2
#   Loading B[3][1] (Bank 1, Addr 3) with a481
#   Loading B[3][2] (Bank 2, Addr 3) with 2498
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @10655000 Simulating controller signals to execute multiplication...
# @10675000: Starting input feeding sequence...
# @10716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual x, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual x, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual x, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual x, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual x, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual x, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual x, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual x, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual x, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual x, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual x, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual x, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual x, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual x, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual x, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual 1, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @11176000 Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @11176000 Matrix Partition
# ===================================================
# @11176000 Matrix partition ended! 
# @11176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 1, Addr 0) with 4374
#   Loading A[0][2] (Bank 2, Addr 0) with d8de
#   Loading A[0][3] (Bank 3, Addr 0) with 0bcd
#   Loading A[1][0] (Bank 0, Addr 1) with ebff
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 2, Addr 1) with 5315
#   Loading A[1][3] (Bank 3, Addr 1) with 377a
#   Loading A[2][0] (Bank 0, Addr 2) with 881b
#   Loading A[2][1] (Bank 1, Addr 2) with 3ecf
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 3, Addr 2) with 5223
#   Loading A[3][0] (Bank 0, Addr 3) with 87cd
#   Loading A[3][1] (Bank 1, Addr 3) with 2a6f
#   Loading A[3][2] (Bank 2, Addr 3) with c889
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[0][1] (Bank 1, Addr 0) with 00f3
#   Loading B[0][2] (Bank 2, Addr 0) with a35c
#   Loading B[0][3] (Bank 3, Addr 0) with aa65
#   Loading B[1][0] (Bank 0, Addr 1) with 222b
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[1][2] (Bank 2, Addr 1) with da28
#   Loading B[1][3] (Bank 3, Addr 1) with eaa8
#   Loading B[2][0] (Bank 0, Addr 2) with ff56
#   Loading B[2][1] (Bank 1, Addr 2) with 6ba0
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[2][3] (Bank 3, Addr 2) with 90d1
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc4
#   Loading B[3][1] (Bank 1, Addr 3) with 671c
#   Loading B[3][2] (Bank 2, Addr 3) with ba64
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @11275000 Simulating controller signals to execute multiplication...
# @11295000: Starting input feeding sequence...
# @11336000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual x, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual x, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual x, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual x, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual x, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual x, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual x, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual x, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual x, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual x, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual x, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual x, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual x, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual x, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual x, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual 0, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @11796000 Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @11796000 Matrix Partition
# ===================================================
# @11796000 Matrix partition ended! 
# @11796000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 1, Addr 0) with e7d1
#   Loading A[0][2] (Bank 2, Addr 0) with 03a8
#   Loading A[0][3] (Bank 3, Addr 0) with 97d0
#   Loading A[1][0] (Bank 0, Addr 1) with 9a37
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 2, Addr 1) with cb14
#   Loading A[1][3] (Bank 3, Addr 1) with 916b
#   Loading A[2][0] (Bank 0, Addr 2) with 3e85
#   Loading A[2][1] (Bank 1, Addr 2) with 83c8
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 3, Addr 2) with ead0
#   Loading A[3][0] (Bank 0, Addr 3) with ac60
#   Loading A[3][1] (Bank 1, Addr 3) with 5c5f
#   Loading A[3][2] (Bank 2, Addr 3) with 3852
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[0][1] (Bank 1, Addr 0) with ad8e
#   Loading B[0][2] (Bank 2, Addr 0) with 9a34
#   Loading B[0][3] (Bank 3, Addr 0) with 7f8e
#   Loading B[1][0] (Bank 0, Addr 1) with 5d1a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[1][2] (Bank 2, Addr 1) with 9ffd
#   Loading B[1][3] (Bank 3, Addr 1) with 6841
#   Loading B[2][0] (Bank 0, Addr 2) with 3375
#   Loading B[2][1] (Bank 1, Addr 2) with 6107
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[2][3] (Bank 3, Addr 2) with 6583
#   Loading B[3][0] (Bank 0, Addr 3) with db9d
#   Loading B[3][1] (Bank 1, Addr 3) with 492a
#   Loading B[3][2] (Bank 2, Addr 3) with 66cd
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @11895000 Simulating controller signals to execute multiplication...
# @11915000: Starting input feeding sequence...
# @11956000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @12245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual x, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual x, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual x, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual x, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual x, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual x, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual x, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual x, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual x, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual x, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual x, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual x, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual x, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual x, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual x, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual 0, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12416000 Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12416000 Matrix Partition
# ===================================================
# @12416000 Matrix partition ended! 
# @12416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 1, Addr 0) with 3fa9
#   Loading A[0][2] (Bank 2, Addr 0) with 6ddd
#   Loading A[0][3] (Bank 3, Addr 0) with d7cf
#   Loading A[1][0] (Bank 0, Addr 1) with 6b9d
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 2, Addr 1) with aafa
#   Loading A[1][3] (Bank 3, Addr 1) with d2a3
#   Loading A[2][0] (Bank 0, Addr 2) with 8dec
#   Loading A[2][1] (Bank 1, Addr 2) with e147
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 3, Addr 2) with 1b9c
#   Loading A[3][0] (Bank 0, Addr 3) with 3fce
#   Loading A[3][1] (Bank 1, Addr 3) with 23f2
#   Loading A[3][2] (Bank 2, Addr 3) with 7c98
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[0][1] (Bank 1, Addr 0) with 08ee
#   Loading B[0][2] (Bank 2, Addr 0) with 33d2
#   Loading B[0][3] (Bank 3, Addr 0) with 6b1f
#   Loading B[1][0] (Bank 0, Addr 1) with 1532
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[1][2] (Bank 2, Addr 1) with b4e2
#   Loading B[1][3] (Bank 3, Addr 1) with 4267
#   Loading B[2][0] (Bank 0, Addr 2) with 9a2e
#   Loading B[2][1] (Bank 1, Addr 2) with 67b5
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 197e
#   Loading B[3][0] (Bank 0, Addr 3) with 72d3
#   Loading B[3][1] (Bank 1, Addr 3) with 030b
#   Loading B[3][2] (Bank 2, Addr 3) with 9c52
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @12515000 Simulating controller signals to execute multiplication...
# @12535000: Starting input feeding sequence...
# @12576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @12865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual x, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual x, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual x, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual x, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual x, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual x, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual x, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual x, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual x, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual x, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual x, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual x, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual x, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual x, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual x, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual 0, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @13036000 Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @13036000 Matrix Partition
# ===================================================
# @13036000 Matrix partition ended! 
# @13036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 1, Addr 0) with 7631
#   Loading A[0][2] (Bank 2, Addr 0) with 08e8
#   Loading A[0][3] (Bank 3, Addr 0) with d98c
#   Loading A[1][0] (Bank 0, Addr 1) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 2, Addr 1) with 0b94
#   Loading A[1][3] (Bank 3, Addr 1) with a1d8
#   Loading A[2][0] (Bank 0, Addr 2) with be24
#   Loading A[2][1] (Bank 1, Addr 2) with 3dab
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 3, Addr 2) with b4a5
#   Loading A[3][0] (Bank 0, Addr 3) with 766e
#   Loading A[3][1] (Bank 1, Addr 3) with 5e6d
#   Loading A[3][2] (Bank 2, Addr 3) with bd75
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[0][1] (Bank 1, Addr 0) with 536a
#   Loading B[0][2] (Bank 2, Addr 0) with 8a59
#   Loading B[0][3] (Bank 3, Addr 0) with 3372
#   Loading B[1][0] (Bank 0, Addr 1) with ccbb
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[1][2] (Bank 2, Addr 1) with 5dd6
#   Loading B[1][3] (Bank 3, Addr 1) with 9215
#   Loading B[2][0] (Bank 0, Addr 2) with 56b7
#   Loading B[2][1] (Bank 1, Addr 2) with f0d1
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[2][3] (Bank 3, Addr 2) with 21d0
#   Loading B[3][0] (Bank 0, Addr 3) with 11fc
#   Loading B[3][1] (Bank 1, Addr 3) with 1be3
#   Loading B[3][2] (Bank 2, Addr 3) with 54d6
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @13135000 Simulating controller signals to execute multiplication...
# @13155000: Starting input feeding sequence...
# @13196000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @13485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual x, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual x, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual x, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual x, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual x, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual x, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual x, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual x, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual x, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual x, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual x, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual x, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual x, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual x, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual x, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual 1, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @13656000 Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @13656000 Matrix Partition
# ===================================================
# @13656000 Matrix partition ended! 
# @13656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 1, Addr 0) with 1713
#   Loading A[0][2] (Bank 2, Addr 0) with fc9d
#   Loading A[0][3] (Bank 3, Addr 0) with d833
#   Loading A[1][0] (Bank 0, Addr 1) with 893b
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 2, Addr 1) with a562
#   Loading A[1][3] (Bank 3, Addr 1) with 4ca0
#   Loading A[2][0] (Bank 0, Addr 2) with 192d
#   Loading A[2][1] (Bank 1, Addr 2) with 4bfa
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 3, Addr 2) with 295a
#   Loading A[3][0] (Bank 0, Addr 3) with 783f
#   Loading A[3][1] (Bank 1, Addr 3) with 025b
#   Loading A[3][2] (Bank 2, Addr 3) with 5e47
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[0][1] (Bank 1, Addr 0) with f807
#   Loading B[0][2] (Bank 2, Addr 0) with 18a0
#   Loading B[0][3] (Bank 3, Addr 0) with c97d
#   Loading B[1][0] (Bank 0, Addr 1) with d1a4
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[1][2] (Bank 2, Addr 1) with b713
#   Loading B[1][3] (Bank 3, Addr 1) with e42e
#   Loading B[2][0] (Bank 0, Addr 2) with cd53
#   Loading B[2][1] (Bank 1, Addr 2) with 0a61
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[2][3] (Bank 3, Addr 2) with cd4b
#   Loading B[3][0] (Bank 0, Addr 3) with 1489
#   Loading B[3][1] (Bank 1, Addr 3) with 7ec8
#   Loading B[3][2] (Bank 2, Addr 3) with d878
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @13755000 Simulating controller signals to execute multiplication...
# @13775000: Starting input feeding sequence...
# @13816000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13826000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @14105000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual x, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual x, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual x, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual x, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual x, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual x, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual x, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual x, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual x, Expected 16bea50ee
# Test Case 22 FAIL: C[2][1] mismatch! Actual x, Expected 1b4a3f648
# Test Case 22 FAIL: C[2][2] mismatch! Actual x, Expected 17ed8a09a
# Test Case 22 FAIL: C[2][3] mismatch! Actual x, Expected 227590bcd
# Test Case 22 FAIL: C[3][0] mismatch! Actual x, Expected 0906811ac
# Test Case 22 FAIL: C[3][1] mismatch! Actual x, Expected 127c3c8ff
# Test Case 22 FAIL: C[3][2] mismatch! Actual x, Expected 08f952008
# Test Case 22 FAIL: C[3][3] mismatch! Actual 1, Expected 1206c5ac1
# Test Case 22 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @14276000 Starting Test Case 23 of 100
# ===================================================
# Reading test case 23:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @14276000 Matrix Partition
# ===================================================
# @14276000 Matrix partition ended! 
# @14276000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9208
#   Loading A[0][1] (Bank 1, Addr 0) with 8d91
#   Loading A[0][2] (Bank 2, Addr 0) with 0f91
#   Loading A[0][3] (Bank 3, Addr 0) with 4324
#   Loading A[1][0] (Bank 0, Addr 1) with 1893
#   Loading A[1][1] (Bank 1, Addr 1) with e01e
#   Loading A[1][2] (Bank 2, Addr 1) with 7421
#   Loading A[1][3] (Bank 3, Addr 1) with 0c24
#   Loading A[2][0] (Bank 0, Addr 2) with 68d0
#   Loading A[2][1] (Bank 1, Addr 2) with ec47
#   Loading A[2][2] (Bank 2, Addr 2) with 6ef2
#   Loading A[2][3] (Bank 3, Addr 2) with 26a8
#   Loading A[3][0] (Bank 0, Addr 3) with 5427
#   Loading A[3][1] (Bank 1, Addr 3) with b764
#   Loading A[3][2] (Bank 2, Addr 3) with bc95
#   Loading A[3][3] (Bank 3, Addr 3) with 5dea
#   Loading B[0][0] (Bank 0, Addr 0) with 128b
#   Loading B[0][1] (Bank 1, Addr 0) with eb07
#   Loading B[0][2] (Bank 2, Addr 0) with ba48
#   Loading B[0][3] (Bank 3, Addr 0) with 9e00
#   Loading B[1][0] (Bank 0, Addr 1) with efbc
#   Loading B[1][1] (Bank 1, Addr 1) with db1c
#   Loading B[1][2] (Bank 2, Addr 1) with 7aba
#   Loading B[1][3] (Bank 3, Addr 1) with 1968
#   Loading B[2][0] (Bank 0, Addr 2) with d9d0
#   Loading B[2][1] (Bank 1, Addr 2) with 7a26
#   Loading B[2][2] (Bank 2, Addr 2) with 39df
#   Loading B[2][3] (Bank 3, Addr 2) with 6ed6
#   Loading B[3][0] (Bank 0, Addr 3) with b124
#   Loading B[3][1] (Bank 1, Addr 3) with cd33
#   Loading B[3][2] (Bank 2, Addr 3) with 6a50
#   Loading B[3][3] (Bank 3, Addr 3) with 0583
# Matrix loading complete.
# @14375000 Simulating controller signals to execute multiplication...
# @14395000: Starting input feeding sequence...
# @14436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @14725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 23...
# Test Case 23 FAIL: C[0][0] mismatch! Actual x, Expected 0b4ff68c8
# Test Case 23 FAIL: C[0][1] mismatch! Actual x, Expected 1109074f1
# Test Case 23 FAIL: C[0][2] mismatch! Actual x, Expected 0b0aeda6e
# Test Case 23 FAIL: C[0][3] mismatch! Actual x, Expected 08bc2178d
# Test Case 23 FAIL: C[1][0] mismatch! Actual x, Expected 2240fbe83
# Test Case 23 FAIL: C[1][1] mismatch! Actual x, Expected 24586acb5
# Test Case 23 FAIL: C[1][2] mismatch! Actual x, Expected 15406a4ad
# Test Case 23 FAIL: C[1][3] mismatch! Actual x, Expected 0d7dc49b6
# Test Case 23 FAIL: C[2][0] mismatch! Actual x, Expected 14ec38d8b
# Test Case 23 FAIL: C[2][1] mismatch! Actual x, Expected 13dc8252e
# Test Case 23 FAIL: C[2][2] mismatch! Actual x, Expected 0aa64fc20
# Test Case 23 FAIL: C[2][3] mismatch! Actual x, Expected 0493a07f3
# Test Case 23 FAIL: C[3][0] mismatch! Actual x, Expected 0721b5264
# Test Case 23 FAIL: C[3][1] mismatch! Actual x, Expected 0a5c0e67a
# Test Case 23 FAIL: C[3][2] mismatch! Actual x, Expected 0666a55c0
# Test Case 23 FAIL: C[3][3] mismatch! Actual 0, Expected 03d66cbce
# Test Case 23 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @14896000 Starting Test Case 24 of 100
# ===================================================
# Reading test case 24:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @14896000 Matrix Partition
# ===================================================
# @14896000 Matrix partition ended! 
# @14896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0891
#   Loading A[0][1] (Bank 1, Addr 0) with 3d27
#   Loading A[0][2] (Bank 2, Addr 0) with d5c0
#   Loading A[0][3] (Bank 3, Addr 0) with 7093
#   Loading A[1][0] (Bank 0, Addr 1) with c03d
#   Loading A[1][1] (Bank 1, Addr 1) with bbba
#   Loading A[1][2] (Bank 2, Addr 1) with e629
#   Loading A[1][3] (Bank 3, Addr 1) with a341
#   Loading A[2][0] (Bank 0, Addr 2) with a224
#   Loading A[2][1] (Bank 1, Addr 2) with b475
#   Loading A[2][2] (Bank 2, Addr 2) with 71ee
#   Loading A[2][3] (Bank 3, Addr 2) with cd06
#   Loading A[3][0] (Bank 0, Addr 3) with c965
#   Loading A[3][1] (Bank 1, Addr 3) with 0efe
#   Loading A[3][2] (Bank 2, Addr 3) with e79e
#   Loading A[3][3] (Bank 3, Addr 3) with d9c1
#   Loading B[0][0] (Bank 0, Addr 0) with b3fa
#   Loading B[0][1] (Bank 1, Addr 0) with 3827
#   Loading B[0][2] (Bank 2, Addr 0) with 9810
#   Loading B[0][3] (Bank 3, Addr 0) with 97ce
#   Loading B[1][0] (Bank 0, Addr 1) with ffef
#   Loading B[1][1] (Bank 1, Addr 1) with dc10
#   Loading B[1][2] (Bank 2, Addr 1) with 923e
#   Loading B[1][3] (Bank 3, Addr 1) with 3828
#   Loading B[2][0] (Bank 0, Addr 2) with a1be
#   Loading B[2][1] (Bank 1, Addr 2) with 17d2
#   Loading B[2][2] (Bank 2, Addr 2) with 81fb
#   Loading B[2][3] (Bank 3, Addr 2) with 4261
#   Loading B[3][0] (Bank 0, Addr 3) with 41fd
#   Loading B[3][1] (Bank 1, Addr 3) with 200a
#   Loading B[3][2] (Bank 2, Addr 3) with bc64
#   Loading B[3][3] (Bank 3, Addr 3) with c89a
# Matrix loading complete.
# @14995000 Simulating controller signals to execute multiplication...
# @15015000: Starting input feeding sequence...
# @15056000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @15345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 24...
# Test Case 24 FAIL: C[0][0] mismatch! Actual x, Expected 16090a516
# Test Case 24 FAIL: C[0][1] mismatch! Actual x, Expected 0cf6c3161
# Test Case 24 FAIL: C[0][2] mismatch! Actual x, Expected 1596fee96
# Test Case 24 FAIL: C[0][3] mismatch! Actual x, Expected 0f71a939c
# Test Case 24 FAIL: C[1][0] mismatch! Actual x, Expected 15c8c5898
# Test Case 24 FAIL: C[1][1] mismatch! Actual x, Expected 0c1744d77
# Test Case 24 FAIL: C[1][2] mismatch! Actual x, Expected 0f638cc6b
# Test Case 24 FAIL: C[1][3] mismatch! Actual x, Expected 087fb3a93
# Test Case 24 FAIL: C[2][0] mismatch! Actual x, Expected 2000ef691
# Test Case 24 FAIL: C[2][1] mismatch! Actual x, Expected 11c52d238
# Test Case 24 FAIL: C[2][2] mismatch! Actual x, Expected 1e6bda000
# Test Case 24 FAIL: C[2][3] mismatch! Actual x, Expected 184467b22
# Test Case 24 FAIL: C[3][0] mismatch! Actual x, Expected 1ac05066e
# Test Case 24 FAIL: C[3][1] mismatch! Actual x, Expected 0d35bb8eb
# Test Case 24 FAIL: C[3][2] mismatch! Actual x, Expected 1a878c334
# Test Case 24 FAIL: C[3][3] mismatch! Actual 0, Expected 1465c06d2
# Test Case 24 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @15516000 Starting Test Case 25 of 100
# ===================================================
# Reading test case 25:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @15516000 Matrix Partition
# ===================================================
# @15516000 Matrix partition ended! 
# @15516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d286
#   Loading A[0][1] (Bank 1, Addr 0) with 4abb
#   Loading A[0][2] (Bank 2, Addr 0) with 7dc0
#   Loading A[0][3] (Bank 3, Addr 0) with bdd5
#   Loading A[1][0] (Bank 0, Addr 1) with 6b83
#   Loading A[1][1] (Bank 1, Addr 1) with 0021
#   Loading A[1][2] (Bank 2, Addr 1) with 60e7
#   Loading A[1][3] (Bank 3, Addr 1) with 9c2b
#   Loading A[2][0] (Bank 0, Addr 2) with 50a4
#   Loading A[2][1] (Bank 1, Addr 2) with fed1
#   Loading A[2][2] (Bank 2, Addr 2) with c6a9
#   Loading A[2][3] (Bank 3, Addr 2) with 5739
#   Loading A[3][0] (Bank 0, Addr 3) with bef9
#   Loading A[3][1] (Bank 1, Addr 3) with b753
#   Loading A[3][2] (Bank 2, Addr 3) with a8ee
#   Loading A[3][3] (Bank 3, Addr 3) with a16b
#   Loading B[0][0] (Bank 0, Addr 0) with 704d
#   Loading B[0][1] (Bank 1, Addr 0) with 8ab4
#   Loading B[0][2] (Bank 2, Addr 0) with 1bfa
#   Loading B[0][3] (Bank 3, Addr 0) with 354a
#   Loading B[1][0] (Bank 0, Addr 1) with 78c2
#   Loading B[1][1] (Bank 1, Addr 1) with 376c
#   Loading B[1][2] (Bank 2, Addr 1) with ced8
#   Loading B[1][3] (Bank 3, Addr 1) with 78de
#   Loading B[2][0] (Bank 0, Addr 2) with d2b2
#   Loading B[2][1] (Bank 1, Addr 2) with c525
#   Loading B[2][2] (Bank 2, Addr 2) with 038b
#   Loading B[2][3] (Bank 3, Addr 2) with 6129
#   Loading B[3][0] (Bank 0, Addr 3) with 03d4
#   Loading B[3][1] (Bank 1, Addr 3) with 6cff
#   Loading B[3][2] (Bank 2, Addr 3) with 63f3
#   Loading B[3][3] (Bank 3, Addr 3) with 1a9d
# Matrix loading complete.
# @15615000 Simulating controller signals to execute multiplication...
# @15635000: Starting input feeding sequence...
# @15676000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @15965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 25...
# Test Case 25 FAIL: C[0][0] mismatch! Actual x, Expected 0d44a7ed0
# Test Case 25 FAIL: C[0][1] mismatch! Actual x, Expected 118bfe437
# Test Case 25 FAIL: C[0][2] mismatch! Actual x, Expected 0b98d1fcb
# Test Case 25 FAIL: C[0][3] mismatch! Actual x, Expected 0910ab34f
# Test Case 25 FAIL: C[1][0] mismatch! Actual x, Expected 0f54e444f
# Test Case 25 FAIL: C[1][1] mismatch! Actual x, Expected 13acdc74a
# Test Case 25 FAIL: C[1][2] mismatch! Actual x, Expected 0535f48ba
# Test Case 25 FAIL: C[1][3] mismatch! Actual x, Expected 08362c20c
# Test Case 25 FAIL: C[2][0] mismatch! Actual x, Expected 10ae6fc68
# Test Case 25 FAIL: C[2][1] mismatch! Actual x, Expected 13a05ddf3
# Test Case 25 FAIL: C[2][2] mismatch! Actual x, Expected 0a0bdef15
# Test Case 25 FAIL: C[2][3] mismatch! Actual x, Expected 0a4e309d9
# Test Case 25 FAIL: C[3][0] mismatch! Actual x, Expected 0e7241ee5
# Test Case 25 FAIL: C[3][1] mismatch! Actual x, Expected 1108ed0ba
# Test Case 25 FAIL: C[3][2] mismatch! Actual x, Expected 0d327d7ce
# Test Case 25 FAIL: C[3][3] mismatch! Actual 1, Expected 0a321fb9c
# Test Case 25 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @16136000 Starting Test Case 26 of 100
# ===================================================
# Reading test case 26:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @16136000 Matrix Partition
# ===================================================
# @16136000 Matrix partition ended! 
# @16136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4b67
#   Loading A[0][1] (Bank 1, Addr 0) with fb4b
#   Loading A[0][2] (Bank 2, Addr 0) with 6f40
#   Loading A[0][3] (Bank 3, Addr 0) with ce69
#   Loading A[1][0] (Bank 0, Addr 1) with edf7
#   Loading A[1][1] (Bank 1, Addr 1) with c739
#   Loading A[1][2] (Bank 2, Addr 1) with 656e
#   Loading A[1][3] (Bank 3, Addr 1) with 5112
#   Loading A[2][0] (Bank 0, Addr 2) with c431
#   Loading A[2][1] (Bank 1, Addr 2) with e51a
#   Loading A[2][2] (Bank 2, Addr 2) with 6f39
#   Loading A[2][3] (Bank 3, Addr 2) with 8c92
#   Loading A[3][0] (Bank 0, Addr 3) with 0830
#   Loading A[3][1] (Bank 1, Addr 3) with a15d
#   Loading A[3][2] (Bank 2, Addr 3) with 6583
#   Loading A[3][3] (Bank 3, Addr 3) with a0c0
#   Loading B[0][0] (Bank 0, Addr 0) with 93d8
#   Loading B[0][1] (Bank 1, Addr 0) with a69c
#   Loading B[0][2] (Bank 2, Addr 0) with 0fef
#   Loading B[0][3] (Bank 3, Addr 0) with ab35
#   Loading B[1][0] (Bank 0, Addr 1) with ba68
#   Loading B[1][1] (Bank 1, Addr 1) with 5ccb
#   Loading B[1][2] (Bank 2, Addr 1) with 4394
#   Loading B[1][3] (Bank 3, Addr 1) with a636
#   Loading B[2][0] (Bank 0, Addr 2) with bffa
#   Loading B[2][1] (Bank 1, Addr 2) with ecfd
#   Loading B[2][2] (Bank 2, Addr 2) with c7b5
#   Loading B[2][3] (Bank 3, Addr 2) with 366f
#   Loading B[3][0] (Bank 0, Addr 3) with e942
#   Loading B[3][1] (Bank 1, Addr 3) with e35f
#   Loading B[3][2] (Bank 2, Addr 3) with dcd0
#   Loading B[3][3] (Bank 3, Addr 3) with 251d
# Matrix loading complete.
# @16235000 Simulating controller signals to execute multiplication...
# @16255000: Starting input feeding sequence...
# @16296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @16585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 26...
# Test Case 26 FAIL: C[0][0] mismatch! Actual x, Expected 17367d97a
# Test Case 26 FAIL: C[0][1] mismatch! Actual x, Expected 14438ddde
# Test Case 26 FAIL: C[0][2] mismatch! Actual x, Expected 0e39f5a9a
# Test Case 26 FAIL: C[0][3] mismatch! Actual x, Expected 0f7d50a1c
# Test Case 26 FAIL: C[1][0] mismatch! Actual x, Expected 26105d1ce
# Test Case 26 FAIL: C[1][1] mismatch! Actual x, Expected 24f29f51c
# Test Case 26 FAIL: C[1][2] mismatch! Actual x, Expected 1822350eb
# Test Case 26 FAIL: C[1][3] mismatch! Actual x, Expected 17183a65c
# Test Case 26 FAIL: C[2][0] mismatch! Actual x, Expected 13a014a20
# Test Case 26 FAIL: C[2][1] mismatch! Actual x, Expected 12e4a8d2c
# Test Case 26 FAIL: C[2][2] mismatch! Actual x, Expected 0d0060b15
# Test Case 26 FAIL: C[2][3] mismatch! Actual x, Expected 0b29f3002
# Test Case 26 FAIL: C[3][0] mismatch! Actual x, Expected 1ae1edcfc
# Test Case 26 FAIL: C[3][1] mismatch! Actual x, Expected 1b4a00acc
# Test Case 26 FAIL: C[3][2] mismatch! Actual x, Expected 11a8feca9
# Test Case 26 FAIL: C[3][3] mismatch! Actual 1, Expected 0f3df5997
# Test Case 26 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @16756000 Starting Test Case 27 of 100
# ===================================================
# Reading test case 27:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @16756000 Matrix Partition
# ===================================================
# @16756000 Matrix partition ended! 
# @16756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ea13
#   Loading A[0][1] (Bank 1, Addr 0) with a7a7
#   Loading A[0][2] (Bank 2, Addr 0) with 6691
#   Loading A[0][3] (Bank 3, Addr 0) with ff78
#   Loading A[1][0] (Bank 0, Addr 1) with f2c9
#   Loading A[1][1] (Bank 1, Addr 1) with f549
#   Loading A[1][2] (Bank 2, Addr 1) with b522
#   Loading A[1][3] (Bank 3, Addr 1) with c682
#   Loading A[2][0] (Bank 0, Addr 2) with a606
#   Loading A[2][1] (Bank 1, Addr 2) with ec08
#   Loading A[2][2] (Bank 2, Addr 2) with de49
#   Loading A[2][3] (Bank 3, Addr 2) with 68b2
#   Loading A[3][0] (Bank 0, Addr 3) with fa15
#   Loading A[3][1] (Bank 1, Addr 3) with 89a7
#   Loading A[3][2] (Bank 2, Addr 3) with 0e94
#   Loading A[3][3] (Bank 3, Addr 3) with 13e4
#   Loading B[0][0] (Bank 0, Addr 0) with fb22
#   Loading B[0][1] (Bank 1, Addr 0) with 6717
#   Loading B[0][2] (Bank 2, Addr 0) with 8224
#   Loading B[0][3] (Bank 3, Addr 0) with 3ac7
#   Loading B[1][0] (Bank 0, Addr 1) with 5c4a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ea
#   Loading B[1][2] (Bank 2, Addr 1) with db47
#   Loading B[1][3] (Bank 3, Addr 1) with 9839
#   Loading B[2][0] (Bank 0, Addr 2) with 3353
#   Loading B[2][1] (Bank 1, Addr 2) with 7950
#   Loading B[2][2] (Bank 2, Addr 2) with f60f
#   Loading B[2][3] (Bank 3, Addr 2) with 5d81
#   Loading B[3][0] (Bank 0, Addr 3) with bee6
#   Loading B[3][1] (Bank 1, Addr 3) with ba4b
#   Loading B[3][2] (Bank 2, Addr 3) with 23da
#   Loading B[3][3] (Bank 3, Addr 3) with 3efe
# Matrix loading complete.
# @16855000 Simulating controller signals to execute multiplication...
# @16875000: Starting input feeding sequence...
# @16916000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16926000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @17205000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 27...
# Test Case 27 FAIL: C[0][0] mismatch! Actual x, Expected 218eb6c70
# Test Case 27 FAIL: C[0][1] mismatch! Actual x, Expected 1c2a05a76
# Test Case 27 FAIL: C[0][2] mismatch! Actual x, Expected 2098d2ca7
# Test Case 27 FAIL: C[0][3] mismatch! Actual x, Expected 14048b762
# Test Case 27 FAIL: C[1][0] mismatch! Actual x, Expected 192dbe0ea
# Test Case 27 FAIL: C[1][1] mismatch! Actual x, Expected 178392e28
# Test Case 27 FAIL: C[1][2] mismatch! Actual x, Expected 21d786d69
# Test Case 27 FAIL: C[1][3] mismatch! Actual x, Expected 1306cfbcc
# Test Case 27 FAIL: C[2][0] mismatch! Actual x, Expected 0dd59ebb9
# Test Case 27 FAIL: C[2][1] mismatch! Actual x, Expected 0e4a62c47
# Test Case 27 FAIL: C[2][2] mismatch! Actual x, Expected 1a6fc3321
# Test Case 27 FAIL: C[2][3] mismatch! Actual x, Expected 0d807efea
# Test Case 27 FAIL: C[3][0] mismatch! Actual x, Expected 165ff2e12
# Test Case 27 FAIL: C[3][1] mismatch! Actual x, Expected 0f536cc08
# Test Case 27 FAIL: C[3][2] mismatch! Actual x, Expected 193516b84
# Test Case 27 FAIL: C[3][3] mismatch! Actual 0, Expected 0dbd38924
# Test Case 27 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @17376000 Starting Test Case 28 of 100
# ===================================================
# Reading test case 28:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @17376000 Matrix Partition
# ===================================================
# @17376000 Matrix partition ended! 
# @17376000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1e91
#   Loading A[0][1] (Bank 1, Addr 0) with 3f88
#   Loading A[0][2] (Bank 2, Addr 0) with f97b
#   Loading A[0][3] (Bank 3, Addr 0) with 3be4
#   Loading A[1][0] (Bank 0, Addr 1) with b7c1
#   Loading A[1][1] (Bank 1, Addr 1) with 15f0
#   Loading A[1][2] (Bank 2, Addr 1) with 154f
#   Loading A[1][3] (Bank 3, Addr 1) with 4e31
#   Loading A[2][0] (Bank 0, Addr 2) with e329
#   Loading A[2][1] (Bank 1, Addr 2) with bc5a
#   Loading A[2][2] (Bank 2, Addr 2) with 8564
#   Loading A[2][3] (Bank 3, Addr 2) with cdbf
#   Loading A[3][0] (Bank 0, Addr 3) with b375
#   Loading A[3][1] (Bank 1, Addr 3) with 90d7
#   Loading A[3][2] (Bank 2, Addr 3) with cca5
#   Loading A[3][3] (Bank 3, Addr 3) with 70bc
#   Loading B[0][0] (Bank 0, Addr 0) with 92ad
#   Loading B[0][1] (Bank 1, Addr 0) with 8315
#   Loading B[0][2] (Bank 2, Addr 0) with fe78
#   Loading B[0][3] (Bank 3, Addr 0) with 3853
#   Loading B[1][0] (Bank 0, Addr 1) with ebb9
#   Loading B[1][1] (Bank 1, Addr 1) with d2b1
#   Loading B[1][2] (Bank 2, Addr 1) with 1535
#   Loading B[1][3] (Bank 3, Addr 1) with ee92
#   Loading B[2][0] (Bank 0, Addr 2) with aeb9
#   Loading B[2][1] (Bank 1, Addr 2) with 2ab4
#   Loading B[2][2] (Bank 2, Addr 2) with c2ff
#   Loading B[2][3] (Bank 3, Addr 2) with bcbd
#   Loading B[3][0] (Bank 0, Addr 3) with 76dd
#   Loading B[3][1] (Bank 1, Addr 3) with d793
#   Loading B[3][2] (Bank 2, Addr 3) with c111
#   Loading B[3][3] (Bank 3, Addr 3) with b248
# Matrix loading complete.
# @17475000 Simulating controller signals to execute multiplication...
# @17495000: Starting input feeding sequence...
# @17536000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17546000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @17825000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 28...
# Test Case 28 FAIL: C[0][0] mismatch! Actual x, Expected 1a9133018
# Test Case 28 FAIL: C[0][1] mismatch! Actual x, Expected 163e4d559
# Test Case 28 FAIL: C[0][2] mismatch! Actual x, Expected 161f98989
# Test Case 28 FAIL: C[0][3] mismatch! Actual x, Expected 1d66b7f42
# Test Case 28 FAIL: C[1][0] mismatch! Actual x, Expected 0fc6715fd
# Test Case 28 FAIL: C[1][1] mismatch! Actual x, Expected 0cbf8c8d5
# Test Case 28 FAIL: C[1][2] mismatch! Actual x, Expected 13dab795d
# Test Case 28 FAIL: C[1][3] mismatch! Actual x, Expected 112275ce2
# Test Case 28 FAIL: C[2][0] mismatch! Actual x, Expected 15c9ebeeb
# Test Case 28 FAIL: C[2][1] mismatch! Actual x, Expected 153dc39c5
# Test Case 28 FAIL: C[2][2] mismatch! Actual x, Expected 1f9b18294
# Test Case 28 FAIL: C[2][3] mismatch! Actual x, Expected 13b9b972b
# Test Case 28 FAIL: C[3][0] mismatch! Actual x, Expected 12b1478d0
# Test Case 28 FAIL: C[3][1] mismatch! Actual x, Expected 0e04577d5
# Test Case 28 FAIL: C[3][2] mismatch! Actual x, Expected 133bf67c2
# Test Case 28 FAIL: C[3][3] mismatch! Actual 0, Expected 13c3e07c1
# Test Case 28 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @17996000 Starting Test Case 29 of 100
# ===================================================
# Reading test case 29:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @17996000 Matrix Partition
# ===================================================
# @17996000 Matrix partition ended! 
# @17996000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c9e5
#   Loading A[0][1] (Bank 1, Addr 0) with 4e3c
#   Loading A[0][2] (Bank 2, Addr 0) with 79a5
#   Loading A[0][3] (Bank 3, Addr 0) with 65aa
#   Loading A[1][0] (Bank 0, Addr 1) with d983
#   Loading A[1][1] (Bank 1, Addr 1) with 0341
#   Loading A[1][2] (Bank 2, Addr 1) with 60be
#   Loading A[1][3] (Bank 3, Addr 1) with 4d12
#   Loading A[2][0] (Bank 0, Addr 2) with f3d3
#   Loading A[2][1] (Bank 1, Addr 2) with f92f
#   Loading A[2][2] (Bank 2, Addr 2) with cbd0
#   Loading A[2][3] (Bank 3, Addr 2) with b614
#   Loading A[3][0] (Bank 0, Addr 3) with 65ce
#   Loading A[3][1] (Bank 1, Addr 3) with aadf
#   Loading A[3][2] (Bank 2, Addr 3) with 7d67
#   Loading A[3][3] (Bank 3, Addr 3) with 3c29
#   Loading B[0][0] (Bank 0, Addr 0) with 5655
#   Loading B[0][1] (Bank 1, Addr 0) with d7e2
#   Loading B[0][2] (Bank 2, Addr 0) with c5d3
#   Loading B[0][3] (Bank 3, Addr 0) with 44ae
#   Loading B[1][0] (Bank 0, Addr 1) with 210c
#   Loading B[1][1] (Bank 1, Addr 1) with 43da
#   Loading B[1][2] (Bank 2, Addr 1) with a4f3
#   Loading B[1][3] (Bank 3, Addr 1) with 5adf
#   Loading B[2][0] (Bank 0, Addr 2) with 879e
#   Loading B[2][1] (Bank 1, Addr 2) with 624f
#   Loading B[2][2] (Bank 2, Addr 2) with 6502
#   Loading B[2][3] (Bank 3, Addr 2) with 0085
#   Loading B[3][0] (Bank 0, Addr 3) with 4cc8
#   Loading B[3][1] (Bank 1, Addr 3) with fa98
#   Loading B[3][2] (Bank 2, Addr 3) with 8a45
#   Loading B[3][3] (Bank 3, Addr 3) with fac0
# Matrix loading complete.
# @18095000 Simulating controller signals to execute multiplication...
# @18115000: Starting input feeding sequence...
# @18156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @18445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 29...
# Test Case 29 FAIL: C[0][0] mismatch! Actual x, Expected 0ffdd7e57
# Test Case 29 FAIL: C[0][1] mismatch! Actual x, Expected 1a531b425
# Test Case 29 FAIL: C[0][2] mismatch! Actual x, Expected 1bf5aa744
# Test Case 29 FAIL: C[0][3] mismatch! Actual x, Expected 0e795c7e2
# Test Case 29 FAIL: C[1][0] mismatch! Actual x, Expected 0d20ef032
# Test Case 29 FAIL: C[1][1] mismatch! Actual x, Expected 149ca5b3b
# Test Case 29 FAIL: C[1][2] mismatch! Actual x, Expected 0fd2923a0
# Test Case 29 FAIL: C[1][3] mismatch! Actual x, Expected 0be042f12
# Test Case 29 FAIL: C[2][0] mismatch! Actual x, Expected 0c717df89
# Test Case 29 FAIL: C[2][1] mismatch! Actual x, Expected 1493ea2ce
# Test Case 29 FAIL: C[2][2] mismatch! Actual x, Expected 1307bc2bc
# Test Case 29 FAIL: C[2][3] mismatch! Actual x, Expected 0be3819f8
# Test Case 29 FAIL: C[3][0] mismatch! Actual x, Expected 09ebbe4aa
# Test Case 29 FAIL: C[3][1] mismatch! Actual x, Expected 0eaf877ec
# Test Case 29 FAIL: C[3][2] mismatch! Actual x, Expected 0e88dee69
# Test Case 29 FAIL: C[3][3] mismatch! Actual 0, Expected 071ed795e
# Test Case 29 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @18616000 Starting Test Case 30 of 100
# ===================================================
# Reading test case 30:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @18616000 Matrix Partition
# ===================================================
# @18616000 Matrix partition ended! 
# @18616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9e98
#   Loading A[0][1] (Bank 1, Addr 0) with 50b7
#   Loading A[0][2] (Bank 2, Addr 0) with 62e8
#   Loading A[0][3] (Bank 3, Addr 0) with 23d1
#   Loading A[1][0] (Bank 0, Addr 1) with fe26
#   Loading A[1][1] (Bank 1, Addr 1) with 5a22
#   Loading A[1][2] (Bank 2, Addr 1) with 6f92
#   Loading A[1][3] (Bank 3, Addr 1) with bfab
#   Loading A[2][0] (Bank 0, Addr 2) with 0d18
#   Loading A[2][1] (Bank 1, Addr 2) with a344
#   Loading A[2][2] (Bank 2, Addr 2) with b340
#   Loading A[2][3] (Bank 3, Addr 2) with e993
#   Loading A[3][0] (Bank 0, Addr 3) with c8ba
#   Loading A[3][1] (Bank 1, Addr 3) with 3efd
#   Loading A[3][2] (Bank 2, Addr 3) with 4a76
#   Loading A[3][3] (Bank 3, Addr 3) with bd50
#   Loading B[0][0] (Bank 0, Addr 0) with 3535
#   Loading B[0][1] (Bank 1, Addr 0) with 1a57
#   Loading B[0][2] (Bank 2, Addr 0) with a837
#   Loading B[0][3] (Bank 3, Addr 0) with ee65
#   Loading B[1][0] (Bank 0, Addr 1) with 52ce
#   Loading B[1][1] (Bank 1, Addr 1) with ce8d
#   Loading B[1][2] (Bank 2, Addr 1) with af32
#   Loading B[1][3] (Bank 3, Addr 1) with 9466
#   Loading B[2][0] (Bank 0, Addr 2) with 6839
#   Loading B[2][1] (Bank 1, Addr 2) with a2d4
#   Loading B[2][2] (Bank 2, Addr 2) with 9133
#   Loading B[2][3] (Bank 3, Addr 2) with 1305
#   Loading B[3][0] (Bank 0, Addr 3) with bac0
#   Loading B[3][1] (Bank 1, Addr 3) with 7c88
#   Loading B[3][2] (Bank 2, Addr 3) with a542
#   Loading B[3][3] (Bank 3, Addr 3) with 0ec3
# Matrix loading complete.
# @18715000 Simulating controller signals to execute multiplication...
# @18735000: Starting input feeding sequence...
# @18776000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @19065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 30...
# Test Case 30 FAIL: C[0][0] mismatch! Actual x, Expected 10aed55e4
# Test Case 30 FAIL: C[0][1] mismatch! Actual x, Expected 14758a746
# Test Case 30 FAIL: C[0][2] mismatch! Actual x, Expected 19f2445d0
# Test Case 30 FAIL: C[0][3] mismatch! Actual x, Expected 1338f3842
# Test Case 30 FAIL: C[1][0] mismatch! Actual x, Expected 09e590e23
# Test Case 30 FAIL: C[1][1] mismatch! Actual x, Expected 0d78343a3
# Test Case 30 FAIL: C[1][2] mismatch! Actual x, Expected 0f7fba0bb
# Test Case 30 FAIL: C[1][3] mismatch! Actual x, Expected 08f2c98ca
# Test Case 30 FAIL: C[2][0] mismatch! Actual x, Expected 0b7f08b44
# Test Case 30 FAIL: C[2][1] mismatch! Actual x, Expected 0fa6dc3f2
# Test Case 30 FAIL: C[2][2] mismatch! Actual x, Expected 123144e88
# Test Case 30 FAIL: C[2][3] mismatch! Actual x, Expected 0ae63fdd6
# Test Case 30 FAIL: C[3][0] mismatch! Actual x, Expected 12ea2869a
# Test Case 30 FAIL: C[3][1] mismatch! Actual x, Expected 18efc5772
# Test Case 30 FAIL: C[3][2] mismatch! Actual x, Expected 199645836
# Test Case 30 FAIL: C[3][3] mismatch! Actual 0, Expected 0acbab666
# Test Case 30 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @19236000 Starting Test Case 31 of 100
# ===================================================
# Reading test case 31:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @19236000 Matrix Partition
# ===================================================
# @19236000 Matrix partition ended! 
# @19236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with df93
#   Loading A[0][1] (Bank 1, Addr 0) with 3c60
#   Loading A[0][2] (Bank 2, Addr 0) with fb24
#   Loading A[0][3] (Bank 3, Addr 0) with 47f5
#   Loading A[1][0] (Bank 0, Addr 1) with 0421
#   Loading A[1][1] (Bank 1, Addr 1) with b00c
#   Loading A[1][2] (Bank 2, Addr 1) with 89ba
#   Loading A[1][3] (Bank 3, Addr 1) with 3dcd
#   Loading A[2][0] (Bank 0, Addr 2) with 3edf
#   Loading A[2][1] (Bank 1, Addr 2) with 0d06
#   Loading A[2][2] (Bank 2, Addr 2) with 95b0
#   Loading A[2][3] (Bank 3, Addr 2) with 6e5f
#   Loading A[3][0] (Bank 0, Addr 3) with 7a26
#   Loading A[3][1] (Bank 1, Addr 3) with 93e5
#   Loading A[3][2] (Bank 2, Addr 3) with dc24
#   Loading A[3][3] (Bank 3, Addr 3) with 065f
#   Loading B[0][0] (Bank 0, Addr 0) with ae9a
#   Loading B[0][1] (Bank 1, Addr 0) with db85
#   Loading B[0][2] (Bank 2, Addr 0) with 15e9
#   Loading B[0][3] (Bank 3, Addr 0) with 459d
#   Loading B[1][0] (Bank 0, Addr 1) with 5411
#   Loading B[1][1] (Bank 1, Addr 1) with 2a73
#   Loading B[1][2] (Bank 2, Addr 1) with 60cd
#   Loading B[1][3] (Bank 3, Addr 1) with f507
#   Loading B[2][0] (Bank 0, Addr 2) with 7bd3
#   Loading B[2][1] (Bank 1, Addr 2) with 005d
#   Loading B[2][2] (Bank 2, Addr 2) with 003a
#   Loading B[2][3] (Bank 3, Addr 2) with fbc2
#   Loading B[3][0] (Bank 0, Addr 3) with b060
#   Loading B[3][1] (Bank 1, Addr 3) with 07af
#   Loading B[3][2] (Bank 2, Addr 3) with b60f
#   Loading B[3][3] (Bank 3, Addr 3) with b133
# Matrix loading complete.
# @19335000 Simulating controller signals to execute multiplication...
# @19355000: Starting input feeding sequence...
# @19396000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @19685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 31...
# Test Case 31 FAIL: C[0][0] mismatch! Actual x, Expected 10c6867ac
# Test Case 31 FAIL: C[0][1] mismatch! Actual x, Expected 0c4278e2f
# Test Case 31 FAIL: C[0][2] mismatch! Actual x, Expected 06b9ea4f8
# Test Case 31 FAIL: C[0][3] mismatch! Actual x, Expected 0d320539e
# Test Case 31 FAIL: C[1][0] mismatch! Actual x, Expected 0cf2eb65e
# Test Case 31 FAIL: C[1][1] mismatch! Actual x, Expected 0556ba2fd
# Test Case 31 FAIL: C[1][2] mismatch! Actual x, Expected 0b0ecb8c3
quit -sim
# End time: 14:29:31 on May 16,2025, Elapsed time: 0:17:09
# Errors: 0, Warnings: 24
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 14:29:42 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (64) for port 'din_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(10).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (64) for port 'din_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(10).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (64) for port 'din_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(10).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (64) for port 'din_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(10).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (64) for port 'din_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(10).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (64) for port 'din_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(10).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (64) for port 'din_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(10).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (64) for port 'din_a'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(10).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with af98
#   Loading A[0][2] (Bank 0, Addr 2) with 8053
#   Loading A[0][3] (Bank 0, Addr 3) with a306
#   Loading A[1][0] (Bank 1, Addr 0) with d608
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with acf5
#   Loading A[1][3] (Bank 1, Addr 3) with 83b8
#   Loading A[2][0] (Bank 2, Addr 0) with c866
#   Loading A[2][1] (Bank 2, Addr 1) with 23e9
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with 03c5
#   Loading A[3][0] (Bank 3, Addr 0) with 3cda
#   Loading A[3][1] (Bank 3, Addr 1) with c10d
#   Loading A[3][2] (Bank 3, Addr 2) with d509
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with e346
#   Loading B[2][0] (Bank 0, Addr 2) with 8b0f
#   Loading B[3][0] (Bank 0, Addr 3) with df56
#   Loading B[0][1] (Bank 1, Addr 0) with 5df7
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f418
#   Loading B[3][1] (Bank 1, Addr 3) with eaca
#   Loading B[0][2] (Bank 2, Addr 0) with b1e9
#   Loading B[1][2] (Bank 2, Addr 1) with f159
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with 58f3
#   Loading B[0][3] (Bank 3, Addr 0) with ffdb
#   Loading B[1][3] (Bank 3, Addr 1) with a525
#   Loading B[2][3] (Bank 3, Addr 2) with eea9
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with afa9
#   Loading A[0][2] (Bank 0, Addr 2) with 1106
#   Loading A[0][3] (Bank 0, Addr 3) with 7557
#   Loading A[1][0] (Bank 1, Addr 0) with 5aa8
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 2d5f
#   Loading A[1][3] (Bank 1, Addr 3) with 9d29
#   Loading A[2][0] (Bank 2, Addr 0) with 8f3a
#   Loading A[2][1] (Bank 2, Addr 1) with 46a4
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 2570
#   Loading A[3][0] (Bank 3, Addr 0) with 8985
#   Loading A[3][1] (Bank 3, Addr 1) with 6146
#   Loading A[3][2] (Bank 3, Addr 2) with 90e2
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with be69
#   Loading B[2][0] (Bank 0, Addr 2) with dcb6
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc6
#   Loading B[0][1] (Bank 1, Addr 0) with 739f
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 83fa
#   Loading B[3][1] (Bank 1, Addr 3) with 0b6b
#   Loading B[0][2] (Bank 2, Addr 0) with f536
#   Loading B[1][2] (Bank 2, Addr 1) with 73aa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e080
#   Loading B[0][3] (Bank 3, Addr 0) with 0439
#   Loading B[1][3] (Bank 3, Addr 1) with 0ef6
#   Loading B[2][3] (Bank 3, Addr 2) with e7b6
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 0, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 1, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 1, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 1, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 1, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 1, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 1, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 1, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 5a10
#   Loading A[0][2] (Bank 0, Addr 2) with 152a
#   Loading A[0][3] (Bank 0, Addr 3) with 7c5c
#   Loading A[1][0] (Bank 1, Addr 0) with 62dc
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with fb2b
#   Loading A[1][3] (Bank 1, Addr 3) with 2e47
#   Loading A[2][0] (Bank 2, Addr 0) with 3050
#   Loading A[2][1] (Bank 2, Addr 1) with 1c72
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with e566
#   Loading A[3][0] (Bank 3, Addr 0) with 630d
#   Loading A[3][1] (Bank 3, Addr 1) with 8cfe
#   Loading A[3][2] (Bank 3, Addr 2) with 66e2
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 5626
#   Loading B[2][0] (Bank 0, Addr 2) with 5768
#   Loading B[3][0] (Bank 0, Addr 3) with e199
#   Loading B[0][1] (Bank 1, Addr 0) with 4f78
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with b3a8
#   Loading B[3][1] (Bank 1, Addr 3) with 0418
#   Loading B[0][2] (Bank 2, Addr 0) with cae3
#   Loading B[1][2] (Bank 2, Addr 1) with 2383
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with ff73
#   Loading B[0][3] (Bank 3, Addr 0) with d6f0
#   Loading B[1][3] (Bank 3, Addr 1) with 402d
#   Loading B[2][3] (Bank 3, Addr 2) with f07d
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 1, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 1, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 1, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 1, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 1, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 1, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 0, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 1, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 0, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 1, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 0, Addr 1) with 9b77
#   Loading A[0][2] (Bank 0, Addr 2) with d2a1
#   Loading A[0][3] (Bank 0, Addr 3) with 5dc4
#   Loading A[1][0] (Bank 1, Addr 0) with 5d17
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 1, Addr 2) with b7b6
#   Loading A[1][3] (Bank 1, Addr 3) with 7b97
#   Loading A[2][0] (Bank 2, Addr 0) with 546c
#   Loading A[2][1] (Bank 2, Addr 1) with ab63
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 2, Addr 3) with abe3
#   Loading A[3][0] (Bank 3, Addr 0) with 9b65
#   Loading A[3][1] (Bank 3, Addr 1) with 151f
#   Loading A[3][2] (Bank 3, Addr 2) with 2d93
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[1][0] (Bank 0, Addr 1) with 9ee7
#   Loading B[2][0] (Bank 0, Addr 2) with bb59
#   Loading B[3][0] (Bank 0, Addr 3) with 45ee
#   Loading B[0][1] (Bank 1, Addr 0) with bfbe
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[2][1] (Bank 1, Addr 2) with d9bf
#   Loading B[3][1] (Bank 1, Addr 3) with f9ff
#   Loading B[0][2] (Bank 2, Addr 0) with 588e
#   Loading B[1][2] (Bank 2, Addr 1) with 7d34
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[3][2] (Bank 2, Addr 3) with 2b37
#   Loading B[0][3] (Bank 3, Addr 0) with d7f2
#   Loading B[1][3] (Bank 3, Addr 1) with 450d
#   Loading B[2][3] (Bank 3, Addr 2) with 7124
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 0, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 0, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 0, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 0, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 0, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 0, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 0, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3456000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3456000 Matrix Partition
# ===================================================
# @3456000 Matrix partition ended! 
# @3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 0, Addr 1) with b95f
#   Loading A[0][2] (Bank 0, Addr 2) with 8db5
#   Loading A[0][3] (Bank 0, Addr 3) with 5ef7
#   Loading A[1][0] (Bank 1, Addr 0) with 140c
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 1, Addr 2) with 2c91
#   Loading A[1][3] (Bank 1, Addr 3) with 47ee
#   Loading A[2][0] (Bank 2, Addr 0) with 1bbe
#   Loading A[2][1] (Bank 2, Addr 1) with be4d
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 2, Addr 3) with 0e18
#   Loading A[3][0] (Bank 3, Addr 0) with e39e
#   Loading A[3][1] (Bank 3, Addr 1) with 968b
#   Loading A[3][2] (Bank 3, Addr 2) with 39b3
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[1][0] (Bank 0, Addr 1) with 874e
#   Loading B[2][0] (Bank 0, Addr 2) with 521e
#   Loading B[3][0] (Bank 0, Addr 3) with c582
#   Loading B[0][1] (Bank 1, Addr 0) with 5d49
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[2][1] (Bank 1, Addr 2) with 8d02
#   Loading B[3][1] (Bank 1, Addr 3) with d7ad
#   Loading B[0][2] (Bank 2, Addr 0) with 21d2
#   Loading B[1][2] (Bank 2, Addr 1) with 61c6
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[3][2] (Bank 2, Addr 3) with 6e26
#   Loading B[0][3] (Bank 3, Addr 0) with be24
#   Loading B[1][3] (Bank 3, Addr 1) with d9cf
#   Loading B[2][3] (Bank 3, Addr 2) with 1b34
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual 0, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual 1, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual 0, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual 0, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual 0, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual 0, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual 1, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual 0, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual 0, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual 1, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual 0, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual 0, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 0, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4316000 Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4316000 Matrix Partition
# ===================================================
# @4316000 Matrix partition ended! 
# @4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 0, Addr 1) with 3054
#   Loading A[0][2] (Bank 0, Addr 2) with 5215
#   Loading A[0][3] (Bank 0, Addr 3) with 4ad1
#   Loading A[1][0] (Bank 1, Addr 0) with 8e22
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 1, Addr 2) with c9e8
#   Loading A[1][3] (Bank 1, Addr 3) with dfc6
#   Loading A[2][0] (Bank 2, Addr 0) with ddbd
#   Loading A[2][1] (Bank 2, Addr 1) with 8f25
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 2, Addr 3) with 8758
#   Loading A[3][0] (Bank 3, Addr 0) with 9bcd
#   Loading A[3][1] (Bank 3, Addr 1) with de61
#   Loading A[3][2] (Bank 3, Addr 2) with 0d28
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[1][0] (Bank 0, Addr 1) with 2988
#   Loading B[2][0] (Bank 0, Addr 2) with fde4
#   Loading B[3][0] (Bank 0, Addr 3) with e7b5
#   Loading B[0][1] (Bank 1, Addr 0) with e02c
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[2][1] (Bank 1, Addr 2) with 9a35
#   Loading B[3][1] (Bank 1, Addr 3) with c1ce
#   Loading B[0][2] (Bank 2, Addr 0) with 5ba5
#   Loading B[1][2] (Bank 2, Addr 1) with 7a69
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[3][2] (Bank 2, Addr 3) with 4563
#   Loading B[0][3] (Bank 3, Addr 0) with 8bce
#   Loading B[1][3] (Bank 3, Addr 1) with c8b3
#   Loading B[2][3] (Bank 3, Addr 2) with cf2b
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual 1, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual 0, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual 0, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual 0, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual 0, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual 0, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual 0, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual 0, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual 0, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual 0, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual 0, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual 0, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual 1, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual 0, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @5176000 Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @5176000 Matrix Partition
# ===================================================
# @5176000 Matrix partition ended! 
# @5176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 0, Addr 1) with 66e9
#   Loading A[0][2] (Bank 0, Addr 2) with 75be
#   Loading A[0][3] (Bank 0, Addr 3) with 09fa
#   Loading A[1][0] (Bank 1, Addr 0) with d921
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 1, Addr 2) with c3b6
#   Loading A[1][3] (Bank 1, Addr 3) with a3a1
#   Loading A[2][0] (Bank 2, Addr 0) with 3320
#   Loading A[2][1] (Bank 2, Addr 1) with ed08
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 2, Addr 3) with 199a
#   Loading A[3][0] (Bank 3, Addr 0) with 57f2
#   Loading A[3][1] (Bank 3, Addr 1) with 693c
#   Loading A[3][2] (Bank 3, Addr 2) with dd13
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[1][0] (Bank 0, Addr 1) with d8db
#   Loading B[2][0] (Bank 0, Addr 2) with be9b
#   Loading B[3][0] (Bank 0, Addr 3) with fed7
#   Loading B[0][1] (Bank 1, Addr 0) with c25b
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[2][1] (Bank 1, Addr 2) with 90b7
#   Loading B[3][1] (Bank 1, Addr 3) with 2578
#   Loading B[0][2] (Bank 2, Addr 0) with 1e50
#   Loading B[1][2] (Bank 2, Addr 1) with 1d83
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[3][2] (Bank 2, Addr 3) with 1bce
#   Loading B[0][3] (Bank 3, Addr 0) with bc35
#   Loading B[1][3] (Bank 3, Addr 1) with 9534
#   Loading B[2][3] (Bank 3, Addr 2) with 2c78
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @5515000 Simulating controller signals to execute multiplication...
# @5535000: Starting input feeding sequence...
# @5576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual 0, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual 0, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual 0, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual 0, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual 0, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual 1, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual 0, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual 0, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual 1, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual 0, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual 0, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual 0, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual 0, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual 0, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual 0, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6036000 Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6036000 Matrix Partition
# ===================================================
# @6036000 Matrix partition ended! 
# @6036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 0, Addr 1) with 797c
#   Loading A[0][2] (Bank 0, Addr 2) with 1cec
#   Loading A[0][3] (Bank 0, Addr 3) with 7745
#   Loading A[1][0] (Bank 1, Addr 0) with db20
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 1, Addr 2) with 14b5
#   Loading A[1][3] (Bank 1, Addr 3) with 41d8
#   Loading A[2][0] (Bank 2, Addr 0) with 18c1
#   Loading A[2][1] (Bank 2, Addr 1) with e208
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 2, Addr 3) with 586a
#   Loading A[3][0] (Bank 3, Addr 0) with 51dd
#   Loading A[3][1] (Bank 3, Addr 1) with add1
#   Loading A[3][2] (Bank 3, Addr 2) with 50c1
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[1][0] (Bank 0, Addr 1) with c4c9
#   Loading B[2][0] (Bank 0, Addr 2) with cc0b
#   Loading B[3][0] (Bank 0, Addr 3) with b481
#   Loading B[0][1] (Bank 1, Addr 0) with 5fb9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[2][1] (Bank 1, Addr 2) with 64b0
#   Loading B[3][1] (Bank 1, Addr 3) with dd2b
#   Loading B[0][2] (Bank 2, Addr 0) with 5e5d
#   Loading B[1][2] (Bank 2, Addr 1) with 6cd8
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[3][2] (Bank 2, Addr 3) with 79c4
#   Loading B[0][3] (Bank 3, Addr 0) with 1a01
#   Loading B[1][3] (Bank 3, Addr 1) with 7cb2
#   Loading B[2][3] (Bank 3, Addr 2) with 7177
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @6375000 Simulating controller signals to execute multiplication...
# @6395000: Starting input feeding sequence...
# @6436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @6725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual 0, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual 0, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual 0, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual 0, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual 1, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual 0, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual 1, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual 0, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual 0, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual 0, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual 0, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual 0, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual 1, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual 1, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual 1, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6896000 Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6896000 Matrix Partition
# ===================================================
# @6896000 Matrix partition ended! 
# @6896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 0, Addr 1) with ca13
#   Loading A[0][2] (Bank 0, Addr 2) with a82f
#   Loading A[0][3] (Bank 0, Addr 3) with 4f36
#   Loading A[1][0] (Bank 1, Addr 0) with 125d
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 1, Addr 2) with 49c1
#   Loading A[1][3] (Bank 1, Addr 3) with 9e41
#   Loading A[2][0] (Bank 2, Addr 0) with 3382
#   Loading A[2][1] (Bank 2, Addr 1) with 2c62
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 2, Addr 3) with 9bf6
#   Loading A[3][0] (Bank 3, Addr 0) with ee9b
#   Loading A[3][1] (Bank 3, Addr 1) with 94e6
#   Loading A[3][2] (Bank 3, Addr 2) with ba8e
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[1][0] (Bank 0, Addr 1) with 7b7b
#   Loading B[2][0] (Bank 0, Addr 2) with e7c7
#   Loading B[3][0] (Bank 0, Addr 3) with b184
#   Loading B[0][1] (Bank 1, Addr 0) with 51bf
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[2][1] (Bank 1, Addr 2) with 63fe
#   Loading B[3][1] (Bank 1, Addr 3) with 9e83
#   Loading B[0][2] (Bank 2, Addr 0) with cd18
#   Loading B[1][2] (Bank 2, Addr 1) with 79a4
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[3][2] (Bank 2, Addr 3) with d989
#   Loading B[0][3] (Bank 3, Addr 0) with edaf
#   Loading B[1][3] (Bank 3, Addr 1) with 00e6
#   Loading B[2][3] (Bank 3, Addr 2) with 27b4
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @7235000 Simulating controller signals to execute multiplication...
# @7255000: Starting input feeding sequence...
# @7296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @7585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual 0, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual 0, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual 0, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual 0, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual 0, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual 0, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual 0, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual 0, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual 0, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual 0, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual 0, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual 0, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual 0, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual 0, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual 0, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @7756000 Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @7756000 Matrix Partition
# ===================================================
# @7756000 Matrix partition ended! 
# @7756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 0, Addr 1) with 52d8
#   Loading A[0][2] (Bank 0, Addr 2) with 2548
#   Loading A[0][3] (Bank 0, Addr 3) with d73d
#   Loading A[1][0] (Bank 1, Addr 0) with c82b
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 1, Addr 2) with 866a
#   Loading A[1][3] (Bank 1, Addr 3) with 78be
#   Loading A[2][0] (Bank 2, Addr 0) with 899a
#   Loading A[2][1] (Bank 2, Addr 1) with 72c1
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 2, Addr 3) with 02a2
#   Loading A[3][0] (Bank 3, Addr 0) with 206a
#   Loading A[3][1] (Bank 3, Addr 1) with 7480
#   Loading A[3][2] (Bank 3, Addr 2) with dfd9
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[1][0] (Bank 0, Addr 1) with 6aeb
#   Loading B[2][0] (Bank 0, Addr 2) with 7173
#   Loading B[3][0] (Bank 0, Addr 3) with 971c
#   Loading B[0][1] (Bank 1, Addr 0) with 9650
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[2][1] (Bank 1, Addr 2) with 01e1
#   Loading B[3][1] (Bank 1, Addr 3) with 69ab
#   Loading B[0][2] (Bank 2, Addr 0) with 5b34
#   Loading B[1][2] (Bank 2, Addr 1) with 840d
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[3][2] (Bank 2, Addr 3) with 6c05
#   Loading B[0][3] (Bank 3, Addr 0) with 86e4
#   Loading B[1][3] (Bank 3, Addr 1) with cd63
#   Loading B[2][3] (Bank 3, Addr 2) with 3f7c
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @8095000 Simulating controller signals to execute multiplication...
# @8115000: Starting input feeding sequence...
# @8156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @8445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 0, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual 0, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual 0, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual 0, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual 1, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual 1, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual 0, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual 1, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual 0, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual 1, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual 0, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual 0, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual 1, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual 1, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual 0, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual 1, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @8616000 Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @8616000 Matrix Partition
# ===================================================
# @8616000 Matrix partition ended! 
# @8616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 0, Addr 1) with 4f35
#   Loading A[0][2] (Bank 0, Addr 2) with c07b
#   Loading A[0][3] (Bank 0, Addr 3) with ed1a
#   Loading A[1][0] (Bank 1, Addr 0) with f4b7
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 1, Addr 2) with 3428
#   Loading A[1][3] (Bank 1, Addr 3) with 1fc0
#   Loading A[2][0] (Bank 2, Addr 0) with 9958
#   Loading A[2][1] (Bank 2, Addr 1) with 97e5
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 2, Addr 3) with a3a5
#   Loading A[3][0] (Bank 3, Addr 0) with 3783
#   Loading A[3][1] (Bank 3, Addr 1) with adc1
#   Loading A[3][2] (Bank 3, Addr 2) with 49be
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[1][0] (Bank 0, Addr 1) with f066
#   Loading B[2][0] (Bank 0, Addr 2) with 6b9d
#   Loading B[3][0] (Bank 0, Addr 3) with 331f
#   Loading B[0][1] (Bank 1, Addr 0) with 9e42
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[2][1] (Bank 1, Addr 2) with 5cb2
#   Loading B[3][1] (Bank 1, Addr 3) with eea5
#   Loading B[0][2] (Bank 2, Addr 0) with 102e
#   Loading B[1][2] (Bank 2, Addr 1) with 349b
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[3][2] (Bank 2, Addr 3) with e930
#   Loading B[0][3] (Bank 3, Addr 0) with 4d56
#   Loading B[1][3] (Bank 3, Addr 1) with 936a
#   Loading B[2][3] (Bank 3, Addr 2) with d4d6
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @8955000 Simulating controller signals to execute multiplication...
# @8975000: Starting input feeding sequence...
# @9016000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @9305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 0, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual 0, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual 0, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual 0, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual 1, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual 0, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual 0, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual 0, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual 0, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual 0, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual 0, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual 0, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual 1, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual 0, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual 0, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual 0, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @9476000 Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @9476000 Matrix Partition
# ===================================================
# @9476000 Matrix partition ended! 
# @9476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 0, Addr 1) with 81c6
#   Loading A[0][2] (Bank 0, Addr 2) with d516
#   Loading A[0][3] (Bank 0, Addr 3) with 914f
#   Loading A[1][0] (Bank 1, Addr 0) with d6ef
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 1, Addr 2) with 1aab
#   Loading A[1][3] (Bank 1, Addr 3) with 74e9
#   Loading A[2][0] (Bank 2, Addr 0) with c404
#   Loading A[2][1] (Bank 2, Addr 1) with c12c
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 2, Addr 3) with 9391
#   Loading A[3][0] (Bank 3, Addr 0) with 01bb
#   Loading A[3][1] (Bank 3, Addr 1) with 0ebc
#   Loading A[3][2] (Bank 3, Addr 2) with 7627
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[1][0] (Bank 0, Addr 1) with 6f79
#   Loading B[2][0] (Bank 0, Addr 2) with 1187
#   Loading B[3][0] (Bank 0, Addr 3) with 63c9
#   Loading B[0][1] (Bank 1, Addr 0) with 85bd
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[2][1] (Bank 1, Addr 2) with 81fe
#   Loading B[3][1] (Bank 1, Addr 3) with ba30
#   Loading B[0][2] (Bank 2, Addr 0) with 62b9
#   Loading B[1][2] (Bank 2, Addr 1) with 0221
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[3][2] (Bank 2, Addr 3) with f2f8
#   Loading B[0][3] (Bank 3, Addr 0) with 6c8d
#   Loading B[1][3] (Bank 3, Addr 1) with 6e52
#   Loading B[2][3] (Bank 3, Addr 2) with 2ca1
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @9815000 Simulating controller signals to execute multiplication...
# @9835000: Starting input feeding sequence...
# @9876000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @10165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual 1, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual 0, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual 1, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual 0, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual 1, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual 0, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual 1, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual 0, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual 1, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual 0, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual 1, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual 0, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual 1, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual 0, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual 1, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @10336000 Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @10336000 Matrix Partition
# ===================================================
# @10336000 Matrix partition ended! 
# @10336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 0, Addr 1) with 631f
#   Loading A[0][2] (Bank 0, Addr 2) with fb5d
#   Loading A[0][3] (Bank 0, Addr 3) with 291a
#   Loading A[1][0] (Bank 1, Addr 0) with d8e3
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 1, Addr 2) with d628
#   Loading A[1][3] (Bank 1, Addr 3) with 62db
#   Loading A[2][0] (Bank 2, Addr 0) with 571c
#   Loading A[2][1] (Bank 2, Addr 1) with e541
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 2, Addr 3) with 8283
#   Loading A[3][0] (Bank 3, Addr 0) with f89a
#   Loading A[3][1] (Bank 3, Addr 1) with 3d63
#   Loading A[3][2] (Bank 3, Addr 2) with 8519
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[1][0] (Bank 0, Addr 1) with 816e
#   Loading B[2][0] (Bank 0, Addr 2) with fc9d
#   Loading B[3][0] (Bank 0, Addr 3) with 8db6
#   Loading B[0][1] (Bank 1, Addr 0) with 7394
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[2][1] (Bank 1, Addr 2) with 3349
#   Loading B[3][1] (Bank 1, Addr 3) with afc5
#   Loading B[0][2] (Bank 2, Addr 0) with cf66
#   Loading B[1][2] (Bank 2, Addr 1) with 27c3
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[3][2] (Bank 2, Addr 3) with fdde
#   Loading B[0][3] (Bank 3, Addr 0) with 66e1
#   Loading B[1][3] (Bank 3, Addr 1) with 633e
#   Loading B[2][3] (Bank 3, Addr 2) with d7e1
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @10675000 Simulating controller signals to execute multiplication...
# @10695000: Starting input feeding sequence...
# @10736000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual 0, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual 0, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual 0, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual 0, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual 1, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual 1, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual 1, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual 0, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual 1, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual 0, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual 0, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual 0, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual 1, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual 0, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual 1, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @11196000 Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @11196000 Matrix Partition
# ===================================================
# @11196000 Matrix partition ended! 
# @11196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 0, Addr 1) with cfa5
#   Loading A[0][2] (Bank 0, Addr 2) with 35d7
#   Loading A[0][3] (Bank 0, Addr 3) with 3226
#   Loading A[1][0] (Bank 1, Addr 0) with caae
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 1, Addr 2) with d007
#   Loading A[1][3] (Bank 1, Addr 3) with e0b5
#   Loading A[2][0] (Bank 2, Addr 0) with 4aa0
#   Loading A[2][1] (Bank 2, Addr 1) with aba7
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 2, Addr 3) with d8e8
#   Loading A[3][0] (Bank 3, Addr 0) with 5063
#   Loading A[3][1] (Bank 3, Addr 1) with e4c4
#   Loading A[3][2] (Bank 3, Addr 2) with 1918
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[1][0] (Bank 0, Addr 1) with 22d7
#   Loading B[2][0] (Bank 0, Addr 2) with 54ea
#   Loading B[3][0] (Bank 0, Addr 3) with 5845
#   Loading B[0][1] (Bank 1, Addr 0) with 9b9b
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[2][1] (Bank 1, Addr 2) with af63
#   Loading B[3][1] (Bank 1, Addr 3) with 49da
#   Loading B[0][2] (Bank 2, Addr 0) with bf62
#   Loading B[1][2] (Bank 2, Addr 1) with 10fa
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[3][2] (Bank 2, Addr 3) with 0cd4
#   Loading B[0][3] (Bank 3, Addr 0) with 1242
#   Loading B[1][3] (Bank 3, Addr 1) with 32d2
#   Loading B[2][3] (Bank 3, Addr 2) with e163
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @11535000 Simulating controller signals to execute multiplication...
# @11555000: Starting input feeding sequence...
# @11596000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual 1, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual 0, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual 1, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual 1, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual 1, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual 0, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual 0, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual 0, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual 0, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual 0, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual 1, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual 1, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual 1, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual 0, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual 0, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12056000 Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12056000 Matrix Partition
# ===================================================
# @12056000 Matrix partition ended! 
# @12056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 0, Addr 1) with 5f94
#   Loading A[0][2] (Bank 0, Addr 2) with f3ef
#   Loading A[0][3] (Bank 0, Addr 3) with 94bd
#   Loading A[1][0] (Bank 1, Addr 0) with fe9b
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 1, Addr 2) with dcac
#   Loading A[1][3] (Bank 1, Addr 3) with 3447
#   Loading A[2][0] (Bank 2, Addr 0) with 40aa
#   Loading A[2][1] (Bank 2, Addr 1) with b2a2
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 2, Addr 3) with 8790
#   Loading A[3][0] (Bank 3, Addr 0) with 45f8
#   Loading A[3][1] (Bank 3, Addr 1) with 273c
#   Loading A[3][2] (Bank 3, Addr 2) with 0e89
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[1][0] (Bank 0, Addr 1) with e1a3
#   Loading B[2][0] (Bank 0, Addr 2) with 2dcd
#   Loading B[3][0] (Bank 0, Addr 3) with 1c01
#   Loading B[0][1] (Bank 1, Addr 0) with ca2d
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[2][1] (Bank 1, Addr 2) with c8f0
#   Loading B[3][1] (Bank 1, Addr 3) with 225d
#   Loading B[0][2] (Bank 2, Addr 0) with d4c0
#   Loading B[1][2] (Bank 2, Addr 1) with 2bd6
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[3][2] (Bank 2, Addr 3) with f781
#   Loading B[0][3] (Bank 3, Addr 0) with 67b6
#   Loading B[1][3] (Bank 3, Addr 1) with 686f
#   Loading B[2][3] (Bank 3, Addr 2) with a59a
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @12395000 Simulating controller signals to execute multiplication...
# @12415000: Starting input feeding sequence...
# @12456000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12466000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @12745000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual 0, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual 0, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual 0, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual 1, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual 1, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual 0, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual 0, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual 0, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual 0, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual 0, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual 0, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual 1, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual 1, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual 0, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual 0, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12916000 Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12916000 Matrix Partition
# ===================================================
# @12916000 Matrix partition ended! 
# @12916000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 0, Addr 1) with 9337
#   Loading A[0][2] (Bank 0, Addr 2) with fc98
#   Loading A[0][3] (Bank 0, Addr 3) with 9b31
#   Loading A[1][0] (Bank 1, Addr 0) with b874
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 1, Addr 2) with b2d2
#   Loading A[1][3] (Bank 1, Addr 3) with cba8
#   Loading A[2][0] (Bank 2, Addr 0) with ee81
#   Loading A[2][1] (Bank 2, Addr 1) with c2d9
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 2, Addr 3) with 3993
#   Loading A[3][0] (Bank 3, Addr 0) with 5230
#   Loading A[3][1] (Bank 3, Addr 1) with efe6
#   Loading A[3][2] (Bank 3, Addr 2) with 22a3
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[1][0] (Bank 0, Addr 1) with b46f
#   Loading B[2][0] (Bank 0, Addr 2) with 439f
#   Loading B[3][0] (Bank 0, Addr 3) with 23bf
#   Loading B[0][1] (Bank 1, Addr 0) with 8101
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[2][1] (Bank 1, Addr 2) with 976c
#   Loading B[3][1] (Bank 1, Addr 3) with 97fb
#   Loading B[0][2] (Bank 2, Addr 0) with 5149
#   Loading B[1][2] (Bank 2, Addr 1) with 0255
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[3][2] (Bank 2, Addr 3) with 5077
#   Loading B[0][3] (Bank 3, Addr 0) with a956
#   Loading B[1][3] (Bank 3, Addr 1) with b8f4
#   Loading B[2][3] (Bank 3, Addr 2) with c6a5
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @13255000 Simulating controller signals to execute multiplication...
# @13275000: Starting input feeding sequence...
# @13316000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @13605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual 0, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual 0, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual 0, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual 0, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual 0, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual 0, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual 0, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual 0, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual 0, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual 0, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual 0, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual 0, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual 0, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual 0, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual 0, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual 0, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @13776000 Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @13776000 Matrix Partition
# ===================================================
# @13776000 Matrix partition ended! 
# @13776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 0, Addr 1) with efa7
#   Loading A[0][2] (Bank 0, Addr 2) with a8cf
#   Loading A[0][3] (Bank 0, Addr 3) with a4d5
#   Loading A[1][0] (Bank 1, Addr 0) with 0cc3
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 1, Addr 2) with 0908
#   Loading A[1][3] (Bank 1, Addr 3) with 337b
#   Loading A[2][0] (Bank 2, Addr 0) with 2d23
#   Loading A[2][1] (Bank 2, Addr 1) with e87e
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 2, Addr 3) with 4cab
#   Loading A[3][0] (Bank 3, Addr 0) with c654
#   Loading A[3][1] (Bank 3, Addr 1) with 6d0d
#   Loading A[3][2] (Bank 3, Addr 2) with f0ac
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[1][0] (Bank 0, Addr 1) with 9bba
#   Loading B[2][0] (Bank 0, Addr 2) with c81e
#   Loading B[3][0] (Bank 0, Addr 3) with 2fb6
#   Loading B[0][1] (Bank 1, Addr 0) with 4d8a
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[2][1] (Bank 1, Addr 2) with 6323
#   Loading B[3][1] (Bank 1, Addr 3) with be17
#   Loading B[0][2] (Bank 2, Addr 0) with a034
#   Loading B[1][2] (Bank 2, Addr 1) with 9314
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[3][2] (Bank 2, Addr 3) with 6636
#   Loading B[0][3] (Bank 3, Addr 0) with 87c4
#   Loading B[1][3] (Bank 3, Addr 1) with 8d52
#   Loading B[2][3] (Bank 3, Addr 2) with f3c1
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @14115000 Simulating controller signals to execute multiplication...
# @14135000: Starting input feeding sequence...
# @14176000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14186000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @14465000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual 0, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual 0, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual 0, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual 0, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual 0, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual 0, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual 0, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual 0, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual 0, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual 0, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual 0, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual 0, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual 0, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual 0, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual 0, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual 0, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @14636000 Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @14636000 Matrix Partition
# ===================================================
# @14636000 Matrix partition ended! 
# @14636000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 0, Addr 1) with 74ca
#   Loading A[0][2] (Bank 0, Addr 2) with 1549
#   Loading A[0][3] (Bank 0, Addr 3) with a3b9
#   Loading A[1][0] (Bank 1, Addr 0) with 33ae
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 1, Addr 2) with 602f
#   Loading A[1][3] (Bank 1, Addr 3) with bfbe
#   Loading A[2][0] (Bank 2, Addr 0) with 1949
#   Loading A[2][1] (Bank 2, Addr 1) with 5b33
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 2, Addr 3) with 0884
#   Loading A[3][0] (Bank 3, Addr 0) with c2ac
#   Loading A[3][1] (Bank 3, Addr 1) with 086c
#   Loading A[3][2] (Bank 3, Addr 2) with bc83
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[1][0] (Bank 0, Addr 1) with 4193
#   Loading B[2][0] (Bank 0, Addr 2) with c8a1
#   Loading B[3][0] (Bank 0, Addr 3) with b8e2
#   Loading B[0][1] (Bank 1, Addr 0) with 4904
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[2][1] (Bank 1, Addr 2) with b09f
#   Loading B[3][1] (Bank 1, Addr 3) with a481
#   Loading B[0][2] (Bank 2, Addr 0) with 8a0c
#   Loading B[1][2] (Bank 2, Addr 1) with b102
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[3][2] (Bank 2, Addr 3) with 2498
#   Loading B[0][3] (Bank 3, Addr 0) with b0ba
#   Loading B[1][3] (Bank 3, Addr 1) with 0e75
#   Loading B[2][3] (Bank 3, Addr 2) with 4b2b
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @14975000 Simulating controller signals to execute multiplication...
# @14995000: Starting input feeding sequence...
# @15036000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @15325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual 0, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual 0, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual 0, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual 0, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual 0, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual 0, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual 0, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual 0, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual 0, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual 0, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual 0, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual 0, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual 0, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual 0, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual 0, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual 0, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @15496000 Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @15496000 Matrix Partition
# ===================================================
# @15496000 Matrix partition ended! 
# @15496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 0, Addr 1) with ebff
#   Loading A[0][2] (Bank 0, Addr 2) with 881b
#   Loading A[0][3] (Bank 0, Addr 3) with 87cd
#   Loading A[1][0] (Bank 1, Addr 0) with 4374
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 1, Addr 2) with 3ecf
#   Loading A[1][3] (Bank 1, Addr 3) with 2a6f
#   Loading A[2][0] (Bank 2, Addr 0) with d8de
#   Loading A[2][1] (Bank 2, Addr 1) with 5315
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 2, Addr 3) with c889
#   Loading A[3][0] (Bank 3, Addr 0) with 0bcd
#   Loading A[3][1] (Bank 3, Addr 1) with 377a
#   Loading A[3][2] (Bank 3, Addr 2) with 5223
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[1][0] (Bank 0, Addr 1) with 222b
#   Loading B[2][0] (Bank 0, Addr 2) with ff56
#   Loading B[3][0] (Bank 0, Addr 3) with 0bc4
#   Loading B[0][1] (Bank 1, Addr 0) with 00f3
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[2][1] (Bank 1, Addr 2) with 6ba0
#   Loading B[3][1] (Bank 1, Addr 3) with 671c
#   Loading B[0][2] (Bank 2, Addr 0) with a35c
#   Loading B[1][2] (Bank 2, Addr 1) with da28
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[3][2] (Bank 2, Addr 3) with ba64
#   Loading B[0][3] (Bank 3, Addr 0) with aa65
#   Loading B[1][3] (Bank 3, Addr 1) with eaa8
#   Loading B[2][3] (Bank 3, Addr 2) with 90d1
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @15835000 Simulating controller signals to execute multiplication...
# @15855000: Starting input feeding sequence...
# @15896000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15906000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @16185000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual 0, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual 1, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual 0, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual 1, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual 0, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual 1, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual 0, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual 1, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual 0, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual 0, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual 0, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual 1, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual 0, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual 1, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual 0, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual 1, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @16356000 Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @16356000 Matrix Partition
# ===================================================
# @16356000 Matrix partition ended! 
# @16356000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 0, Addr 1) with 9a37
#   Loading A[0][2] (Bank 0, Addr 2) with 3e85
#   Loading A[0][3] (Bank 0, Addr 3) with ac60
#   Loading A[1][0] (Bank 1, Addr 0) with e7d1
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 1, Addr 2) with 83c8
#   Loading A[1][3] (Bank 1, Addr 3) with 5c5f
#   Loading A[2][0] (Bank 2, Addr 0) with 03a8
#   Loading A[2][1] (Bank 2, Addr 1) with cb14
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 2, Addr 3) with 3852
#   Loading A[3][0] (Bank 3, Addr 0) with 97d0
#   Loading A[3][1] (Bank 3, Addr 1) with 916b
#   Loading A[3][2] (Bank 3, Addr 2) with ead0
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[1][0] (Bank 0, Addr 1) with 5d1a
#   Loading B[2][0] (Bank 0, Addr 2) with 3375
#   Loading B[3][0] (Bank 0, Addr 3) with db9d
#   Loading B[0][1] (Bank 1, Addr 0) with ad8e
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[2][1] (Bank 1, Addr 2) with 6107
#   Loading B[3][1] (Bank 1, Addr 3) with 492a
#   Loading B[0][2] (Bank 2, Addr 0) with 9a34
#   Loading B[1][2] (Bank 2, Addr 1) with 9ffd
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[3][2] (Bank 2, Addr 3) with 66cd
#   Loading B[0][3] (Bank 3, Addr 0) with 7f8e
#   Loading B[1][3] (Bank 3, Addr 1) with 6841
#   Loading B[2][3] (Bank 3, Addr 2) with 6583
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @16695000 Simulating controller signals to execute multiplication...
# @16715000: Starting input feeding sequence...
# @16756000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @17045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual 0, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual 0, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual 0, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual 0, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual 1, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual 1, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual 0, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual 1, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual 0, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual 1, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual 0, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual 0, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual 1, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual 1, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual 0, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual 1, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @17216000 Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @17216000 Matrix Partition
# ===================================================
# @17216000 Matrix partition ended! 
# @17216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 0, Addr 1) with 6b9d
#   Loading A[0][2] (Bank 0, Addr 2) with 8dec
#   Loading A[0][3] (Bank 0, Addr 3) with 3fce
#   Loading A[1][0] (Bank 1, Addr 0) with 3fa9
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 1, Addr 2) with e147
#   Loading A[1][3] (Bank 1, Addr 3) with 23f2
#   Loading A[2][0] (Bank 2, Addr 0) with 6ddd
#   Loading A[2][1] (Bank 2, Addr 1) with aafa
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 2, Addr 3) with 7c98
#   Loading A[3][0] (Bank 3, Addr 0) with d7cf
#   Loading A[3][1] (Bank 3, Addr 1) with d2a3
#   Loading A[3][2] (Bank 3, Addr 2) with 1b9c
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[1][0] (Bank 0, Addr 1) with 1532
#   Loading B[2][0] (Bank 0, Addr 2) with 9a2e
#   Loading B[3][0] (Bank 0, Addr 3) with 72d3
#   Loading B[0][1] (Bank 1, Addr 0) with 08ee
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[2][1] (Bank 1, Addr 2) with 67b5
#   Loading B[3][1] (Bank 1, Addr 3) with 030b
#   Loading B[0][2] (Bank 2, Addr 0) with 33d2
#   Loading B[1][2] (Bank 2, Addr 1) with b4e2
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[3][2] (Bank 2, Addr 3) with 9c52
#   Loading B[0][3] (Bank 3, Addr 0) with 6b1f
#   Loading B[1][3] (Bank 3, Addr 1) with 4267
#   Loading B[2][3] (Bank 3, Addr 2) with 197e
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @17555000 Simulating controller signals to execute multiplication...
# @17575000: Starting input feeding sequence...
# @17616000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17626000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @17905000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual 0, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual 0, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual 0, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual 1, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual 1, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual 0, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual 0, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual 1, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual 0, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual 0, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual 0, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual 1, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual 1, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual 0, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual 0, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual 1, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @18076000 Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @18076000 Matrix Partition
# ===================================================
# @18076000 Matrix partition ended! 
# @18076000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 0, Addr 1) with 570d
#   Loading A[0][2] (Bank 0, Addr 2) with be24
#   Loading A[0][3] (Bank 0, Addr 3) with 766e
#   Loading A[1][0] (Bank 1, Addr 0) with 7631
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 1, Addr 2) with 3dab
#   Loading A[1][3] (Bank 1, Addr 3) with 5e6d
#   Loading A[2][0] (Bank 2, Addr 0) with 08e8
#   Loading A[2][1] (Bank 2, Addr 1) with 0b94
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 2, Addr 3) with bd75
#   Loading A[3][0] (Bank 3, Addr 0) with d98c
#   Loading A[3][1] (Bank 3, Addr 1) with a1d8
#   Loading A[3][2] (Bank 3, Addr 2) with b4a5
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[1][0] (Bank 0, Addr 1) with ccbb
#   Loading B[2][0] (Bank 0, Addr 2) with 56b7
#   Loading B[3][0] (Bank 0, Addr 3) with 11fc
#   Loading B[0][1] (Bank 1, Addr 0) with 536a
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[2][1] (Bank 1, Addr 2) with f0d1
#   Loading B[3][1] (Bank 1, Addr 3) with 1be3
#   Loading B[0][2] (Bank 2, Addr 0) with 8a59
#   Loading B[1][2] (Bank 2, Addr 1) with 5dd6
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[3][2] (Bank 2, Addr 3) with 54d6
#   Loading B[0][3] (Bank 3, Addr 0) with 3372
#   Loading B[1][3] (Bank 3, Addr 1) with 9215
#   Loading B[2][3] (Bank 3, Addr 2) with 21d0
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @18415000 Simulating controller signals to execute multiplication...
# @18435000: Starting input feeding sequence...
# @18476000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @18765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual 0, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual 0, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual 0, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual 0, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual 0, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual 0, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual 0, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual 1, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual 0, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual 0, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual 0, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual 0, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual 0, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual 0, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual 1, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual 1, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @18936000 Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @18936000 Matrix Partition
# ===================================================
# @18936000 Matrix partition ended! 
# @18936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 0, Addr 1) with 893b
#   Loading A[0][2] (Bank 0, Addr 2) with 192d
#   Loading A[0][3] (Bank 0, Addr 3) with 783f
#   Loading A[1][0] (Bank 1, Addr 0) with 1713
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 1, Addr 2) with 4bfa
#   Loading A[1][3] (Bank 1, Addr 3) with 025b
#   Loading A[2][0] (Bank 2, Addr 0) with fc9d
#   Loading A[2][1] (Bank 2, Addr 1) with a562
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 2, Addr 3) with 5e47
#   Loading A[3][0] (Bank 3, Addr 0) with d833
#   Loading A[3][1] (Bank 3, Addr 1) with 4ca0
#   Loading A[3][2] (Bank 3, Addr 2) with 295a
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[1][0] (Bank 0, Addr 1) with d1a4
#   Loading B[2][0] (Bank 0, Addr 2) with cd53
#   Loading B[3][0] (Bank 0, Addr 3) with 1489
#   Loading B[0][1] (Bank 1, Addr 0) with f807
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[2][1] (Bank 1, Addr 2) with 0a61
#   Loading B[3][1] (Bank 1, Addr 3) with 7ec8
#   Loading B[0][2] (Bank 2, Addr 0) with 18a0
#   Loading B[1][2] (Bank 2, Addr 1) with b713
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[3][2] (Bank 2, Addr 3) with d878
#   Loading B[0][3] (Bank 3, Addr 0) with c97d
#   Loading B[1][3] (Bank 3, Addr 1) with e42e
#   Loading B[2][3] (Bank 3, Addr 2) with cd4b
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @19275000 Simulating controller signals to execute multiplication...
# @19295000: Starting input feeding sequence...
# @19336000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @19625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual 0, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual 1, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual 0, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual 1, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual 0, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual 1, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual 1, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual 1, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual 0, Expected 16bea50ee
# Test Case 22 FAIL: C[2][1] mismatch! Actual 0, Expected 1b4a3f648
# Test Case 22 FAIL: C[2][2] mismatch! Actual 0, Expected 17ed8a09a
# Test Case 22 FAIL: C[2][3] mismatch! Actual 1, Expected 227590bcd
# Test Case 22 FAIL: C[3][0] mismatch! Actual 0, Expected 0906811ac
# Test Case 22 FAIL: C[3][1] mismatch! Actual 1, Expected 127c3c8ff
# Test Case 22 FAIL: C[3][2] mismatch! Actual 0, Expected 08f952008
# Test Case 22 FAIL: C[3][3] mismatch! Actual 1, Expected 1206c5ac1
# Test Case 22 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @19796000 Starting Test Case 23 of 100
# ===================================================
# Reading test case 23:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @19796000 Matrix Partition
# ===================================================
# @19796000 Matrix partition ended! 
# @19796000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9208
#   Loading A[0][1] (Bank 0, Addr 1) with 1893
#   Loading A[0][2] (Bank 0, Addr 2) with 68d0
#   Loading A[0][3] (Bank 0, Addr 3) with 5427
#   Loading A[1][0] (Bank 1, Addr 0) with 8d91
#   Loading A[1][1] (Bank 1, Addr 1) with e01e
#   Loading A[1][2] (Bank 1, Addr 2) with ec47
#   Loading A[1][3] (Bank 1, Addr 3) with b764
#   Loading A[2][0] (Bank 2, Addr 0) with 0f91
#   Loading A[2][1] (Bank 2, Addr 1) with 7421
#   Loading A[2][2] (Bank 2, Addr 2) with 6ef2
#   Loading A[2][3] (Bank 2, Addr 3) with bc95
#   Loading A[3][0] (Bank 3, Addr 0) with 4324
#   Loading A[3][1] (Bank 3, Addr 1) with 0c24
#   Loading A[3][2] (Bank 3, Addr 2) with 26a8
#   Loading A[3][3] (Bank 3, Addr 3) with 5dea
#   Loading B[0][0] (Bank 0, Addr 0) with 128b
#   Loading B[1][0] (Bank 0, Addr 1) with efbc
#   Loading B[2][0] (Bank 0, Addr 2) with d9d0
#   Loading B[3][0] (Bank 0, Addr 3) with b124
#   Loading B[0][1] (Bank 1, Addr 0) with eb07
#   Loading B[1][1] (Bank 1, Addr 1) with db1c
#   Loading B[2][1] (Bank 1, Addr 2) with 7a26
#   Loading B[3][1] (Bank 1, Addr 3) with cd33
#   Loading B[0][2] (Bank 2, Addr 0) with ba48
#   Loading B[1][2] (Bank 2, Addr 1) with 7aba
#   Loading B[2][2] (Bank 2, Addr 2) with 39df
#   Loading B[3][2] (Bank 2, Addr 3) with 6a50
#   Loading B[0][3] (Bank 3, Addr 0) with 9e00
#   Loading B[1][3] (Bank 3, Addr 1) with 1968
#   Loading B[2][3] (Bank 3, Addr 2) with 6ed6
#   Loading B[3][3] (Bank 3, Addr 3) with 0583
# Matrix loading complete.
# @20135000 Simulating controller signals to execute multiplication...
# @20155000: Starting input feeding sequence...
# @20196000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @20485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 23...
# Test Case 23 FAIL: C[0][0] mismatch! Actual 0, Expected 0b4ff68c8
# Test Case 23 FAIL: C[0][1] mismatch! Actual 0, Expected 1109074f1
# Test Case 23 FAIL: C[0][2] mismatch! Actual 0, Expected 0b0aeda6e
# Test Case 23 FAIL: C[0][3] mismatch! Actual 0, Expected 08bc2178d
# Test Case 23 FAIL: C[1][0] mismatch! Actual 1, Expected 2240fbe83
# Test Case 23 FAIL: C[1][1] mismatch! Actual 1, Expected 24586acb5
# Test Case 23 FAIL: C[1][2] mismatch! Actual 0, Expected 15406a4ad
# Test Case 23 FAIL: C[1][3] mismatch! Actual 1, Expected 0d7dc49b6
# Test Case 23 FAIL: C[2][0] mismatch! Actual 0, Expected 14ec38d8b
# Test Case 23 FAIL: C[2][1] mismatch! Actual 0, Expected 13dc8252e
# Test Case 23 FAIL: C[2][2] mismatch! Actual 0, Expected 0aa64fc20
# Test Case 23 FAIL: C[2][3] mismatch! Actual 0, Expected 0493a07f3
# Test Case 23 FAIL: C[3][0] mismatch! Actual 1, Expected 0721b5264
# Test Case 23 FAIL: C[3][1] mismatch! Actual 1, Expected 0a5c0e67a
# Test Case 23 FAIL: C[3][2] mismatch! Actual 0, Expected 0666a55c0
# Test Case 23 FAIL: C[3][3] mismatch! Actual 1, Expected 03d66cbce
# Test Case 23 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @20656000 Starting Test Case 24 of 100
# ===================================================
# Reading test case 24:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20656000 Matrix Partition
# ===================================================
# @20656000 Matrix partition ended! 
# @20656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0891
#   Loading A[0][1] (Bank 0, Addr 1) with c03d
#   Loading A[0][2] (Bank 0, Addr 2) with a224
#   Loading A[0][3] (Bank 0, Addr 3) with c965
#   Loading A[1][0] (Bank 1, Addr 0) with 3d27
#   Loading A[1][1] (Bank 1, Addr 1) with bbba
#   Loading A[1][2] (Bank 1, Addr 2) with b475
#   Loading A[1][3] (Bank 1, Addr 3) with 0efe
#   Loading A[2][0] (Bank 2, Addr 0) with d5c0
#   Loading A[2][1] (Bank 2, Addr 1) with e629
#   Loading A[2][2] (Bank 2, Addr 2) with 71ee
#   Loading A[2][3] (Bank 2, Addr 3) with e79e
#   Loading A[3][0] (Bank 3, Addr 0) with 7093
#   Loading A[3][1] (Bank 3, Addr 1) with a341
#   Loading A[3][2] (Bank 3, Addr 2) with cd06
#   Loading A[3][3] (Bank 3, Addr 3) with d9c1
#   Loading B[0][0] (Bank 0, Addr 0) with b3fa
#   Loading B[1][0] (Bank 0, Addr 1) with ffef
#   Loading B[2][0] (Bank 0, Addr 2) with a1be
#   Loading B[3][0] (Bank 0, Addr 3) with 41fd
#   Loading B[0][1] (Bank 1, Addr 0) with 3827
#   Loading B[1][1] (Bank 1, Addr 1) with dc10
#   Loading B[2][1] (Bank 1, Addr 2) with 17d2
#   Loading B[3][1] (Bank 1, Addr 3) with 200a
#   Loading B[0][2] (Bank 2, Addr 0) with 9810
#   Loading B[1][2] (Bank 2, Addr 1) with 923e
#   Loading B[2][2] (Bank 2, Addr 2) with 81fb
#   Loading B[3][2] (Bank 2, Addr 3) with bc64
#   Loading B[0][3] (Bank 3, Addr 0) with 97ce
#   Loading B[1][3] (Bank 3, Addr 1) with 3828
#   Loading B[2][3] (Bank 3, Addr 2) with 4261
#   Loading B[3][3] (Bank 3, Addr 3) with c89a
# Matrix loading complete.
# @20995000 Simulating controller signals to execute multiplication...
# @21015000: Starting input feeding sequence...
# @21056000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @21345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 24...
# Test Case 24 FAIL: C[0][0] mismatch! Actual 0, Expected 16090a516
# Test Case 24 FAIL: C[0][1] mismatch! Actual 0, Expected 0cf6c3161
# Test Case 24 FAIL: C[0][2] mismatch! Actual 0, Expected 1596fee96
# Test Case 24 FAIL: C[0][3] mismatch! Actual 0, Expected 0f71a939c
# Test Case 24 FAIL: C[1][0] mismatch! Actual 0, Expected 15c8c5898
# Test Case 24 FAIL: C[1][1] mismatch! Actual 1, Expected 0c1744d77
# Test Case 24 FAIL: C[1][2] mismatch! Actual 0, Expected 0f638cc6b
# Test Case 24 FAIL: C[1][3] mismatch! Actual 0, Expected 087fb3a93
# Test Case 24 FAIL: C[2][0] mismatch! Actual 0, Expected 2000ef691
# Test Case 24 FAIL: C[2][1] mismatch! Actual 0, Expected 11c52d238
# Test Case 24 FAIL: C[2][2] mismatch! Actual 0, Expected 1e6bda000
# Test Case 24 FAIL: C[2][3] mismatch! Actual 0, Expected 184467b22
# Test Case 24 FAIL: C[3][0] mismatch! Actual 0, Expected 1ac05066e
# Test Case 24 FAIL: C[3][1] mismatch! Actual 1, Expected 0d35bb8eb
# Test Case 24 FAIL: C[3][2] mismatch! Actual 0, Expected 1a878c334
# Test Case 24 FAIL: C[3][3] mismatch! Actual 0, Expected 1465c06d2
# Test Case 24 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @21516000 Starting Test Case 25 of 100
# ===================================================
# Reading test case 25:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @21516000 Matrix Partition
# ===================================================
# @21516000 Matrix partition ended! 
# @21516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d286
#   Loading A[0][1] (Bank 0, Addr 1) with 6b83
#   Loading A[0][2] (Bank 0, Addr 2) with 50a4
#   Loading A[0][3] (Bank 0, Addr 3) with bef9
#   Loading A[1][0] (Bank 1, Addr 0) with 4abb
#   Loading A[1][1] (Bank 1, Addr 1) with 0021
#   Loading A[1][2] (Bank 1, Addr 2) with fed1
#   Loading A[1][3] (Bank 1, Addr 3) with b753
#   Loading A[2][0] (Bank 2, Addr 0) with 7dc0
#   Loading A[2][1] (Bank 2, Addr 1) with 60e7
#   Loading A[2][2] (Bank 2, Addr 2) with c6a9
#   Loading A[2][3] (Bank 2, Addr 3) with a8ee
#   Loading A[3][0] (Bank 3, Addr 0) with bdd5
#   Loading A[3][1] (Bank 3, Addr 1) with 9c2b
#   Loading A[3][2] (Bank 3, Addr 2) with 5739
#   Loading A[3][3] (Bank 3, Addr 3) with a16b
#   Loading B[0][0] (Bank 0, Addr 0) with 704d
#   Loading B[1][0] (Bank 0, Addr 1) with 78c2
#   Loading B[2][0] (Bank 0, Addr 2) with d2b2
#   Loading B[3][0] (Bank 0, Addr 3) with 03d4
#   Loading B[0][1] (Bank 1, Addr 0) with 8ab4
#   Loading B[1][1] (Bank 1, Addr 1) with 376c
#   Loading B[2][1] (Bank 1, Addr 2) with c525
#   Loading B[3][1] (Bank 1, Addr 3) with 6cff
#   Loading B[0][2] (Bank 2, Addr 0) with 1bfa
#   Loading B[1][2] (Bank 2, Addr 1) with ced8
#   Loading B[2][2] (Bank 2, Addr 2) with 038b
#   Loading B[3][2] (Bank 2, Addr 3) with 63f3
#   Loading B[0][3] (Bank 3, Addr 0) with 354a
#   Loading B[1][3] (Bank 3, Addr 1) with 78de
#   Loading B[2][3] (Bank 3, Addr 2) with 6129
#   Loading B[3][3] (Bank 3, Addr 3) with 1a9d
# Matrix loading complete.
# @21855000 Simulating controller signals to execute multiplication...
# @21875000: Starting input feeding sequence...
# @21916000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21926000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @22205000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 25...
# Test Case 25 FAIL: C[0][0] mismatch! Actual 0, Expected 0d44a7ed0
# Test Case 25 FAIL: C[0][1] mismatch! Actual 1, Expected 118bfe437
# Test Case 25 FAIL: C[0][2] mismatch! Actual 0, Expected 0b98d1fcb
# Test Case 25 FAIL: C[0][3] mismatch! Actual 0, Expected 0910ab34f
# Test Case 25 FAIL: C[1][0] mismatch! Actual 0, Expected 0f54e444f
# Test Case 25 FAIL: C[1][1] mismatch! Actual 1, Expected 13acdc74a
# Test Case 25 FAIL: C[1][2] mismatch! Actual 0, Expected 0535f48ba
# Test Case 25 FAIL: C[1][3] mismatch! Actual 0, Expected 08362c20c
# Test Case 25 FAIL: C[2][0] mismatch! Actual 0, Expected 10ae6fc68
# Test Case 25 FAIL: C[2][1] mismatch! Actual 1, Expected 13a05ddf3
# Test Case 25 FAIL: C[2][2] mismatch! Actual 0, Expected 0a0bdef15
# Test Case 25 FAIL: C[2][3] mismatch! Actual 0, Expected 0a4e309d9
# Test Case 25 FAIL: C[3][0] mismatch! Actual 0, Expected 0e7241ee5
# Test Case 25 FAIL: C[3][1] mismatch! Actual 1, Expected 1108ed0ba
# Test Case 25 FAIL: C[3][2] mismatch! Actual 0, Expected 0d327d7ce
# Test Case 25 FAIL: C[3][3] mismatch! Actual 0, Expected 0a321fb9c
# Test Case 25 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @22376000 Starting Test Case 26 of 100
# ===================================================
# Reading test case 26:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @22376000 Matrix Partition
# ===================================================
# @22376000 Matrix partition ended! 
# @22376000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4b67
#   Loading A[0][1] (Bank 0, Addr 1) with edf7
#   Loading A[0][2] (Bank 0, Addr 2) with c431
#   Loading A[0][3] (Bank 0, Addr 3) with 0830
#   Loading A[1][0] (Bank 1, Addr 0) with fb4b
#   Loading A[1][1] (Bank 1, Addr 1) with c739
#   Loading A[1][2] (Bank 1, Addr 2) with e51a
#   Loading A[1][3] (Bank 1, Addr 3) with a15d
#   Loading A[2][0] (Bank 2, Addr 0) with 6f40
#   Loading A[2][1] (Bank 2, Addr 1) with 656e
#   Loading A[2][2] (Bank 2, Addr 2) with 6f39
#   Loading A[2][3] (Bank 2, Addr 3) with 6583
#   Loading A[3][0] (Bank 3, Addr 0) with ce69
#   Loading A[3][1] (Bank 3, Addr 1) with 5112
#   Loading A[3][2] (Bank 3, Addr 2) with 8c92
#   Loading A[3][3] (Bank 3, Addr 3) with a0c0
#   Loading B[0][0] (Bank 0, Addr 0) with 93d8
#   Loading B[1][0] (Bank 0, Addr 1) with ba68
#   Loading B[2][0] (Bank 0, Addr 2) with bffa
#   Loading B[3][0] (Bank 0, Addr 3) with e942
#   Loading B[0][1] (Bank 1, Addr 0) with a69c
#   Loading B[1][1] (Bank 1, Addr 1) with 5ccb
#   Loading B[2][1] (Bank 1, Addr 2) with ecfd
#   Loading B[3][1] (Bank 1, Addr 3) with e35f
#   Loading B[0][2] (Bank 2, Addr 0) with 0fef
#   Loading B[1][2] (Bank 2, Addr 1) with 4394
#   Loading B[2][2] (Bank 2, Addr 2) with c7b5
#   Loading B[3][2] (Bank 2, Addr 3) with dcd0
#   Loading B[0][3] (Bank 3, Addr 0) with ab35
#   Loading B[1][3] (Bank 3, Addr 1) with a636
#   Loading B[2][3] (Bank 3, Addr 2) with 366f
#   Loading B[3][3] (Bank 3, Addr 3) with 251d
# Matrix loading complete.
# @22715000 Simulating controller signals to execute multiplication...
# @22735000: Starting input feeding sequence...
# @22776000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @22786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @23065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 26...
# Test Case 26 FAIL: C[0][0] mismatch! Actual 0, Expected 17367d97a
# Test Case 26 FAIL: C[0][1] mismatch! Actual 0, Expected 14438ddde
# Test Case 26 FAIL: C[0][2] mismatch! Actual 0, Expected 0e39f5a9a
# Test Case 26 FAIL: C[0][3] mismatch! Actual 1, Expected 0f7d50a1c
# Test Case 26 FAIL: C[1][0] mismatch! Actual 0, Expected 26105d1ce
# Test Case 26 FAIL: C[1][1] mismatch! Actual 0, Expected 24f29f51c
# Test Case 26 FAIL: C[1][2] mismatch! Actual 0, Expected 1822350eb
# Test Case 26 FAIL: C[1][3] mismatch! Actual 1, Expected 17183a65c
# Test Case 26 FAIL: C[2][0] mismatch! Actual 0, Expected 13a014a20
# Test Case 26 FAIL: C[2][1] mismatch! Actual 0, Expected 12e4a8d2c
# Test Case 26 FAIL: C[2][2] mismatch! Actual 0, Expected 0d0060b15
# Test Case 26 FAIL: C[2][3] mismatch! Actual 1, Expected 0b29f3002
# Test Case 26 FAIL: C[3][0] mismatch! Actual 0, Expected 1ae1edcfc
# Test Case 26 FAIL: C[3][1] mismatch! Actual 0, Expected 1b4a00acc
# Test Case 26 FAIL: C[3][2] mismatch! Actual 0, Expected 11a8feca9
# Test Case 26 FAIL: C[3][3] mismatch! Actual 1, Expected 0f3df5997
# Test Case 26 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @23236000 Starting Test Case 27 of 100
# ===================================================
# Reading test case 27:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @23236000 Matrix Partition
# ===================================================
# @23236000 Matrix partition ended! 
# @23236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ea13
#   Loading A[0][1] (Bank 0, Addr 1) with f2c9
#   Loading A[0][2] (Bank 0, Addr 2) with a606
#   Loading A[0][3] (Bank 0, Addr 3) with fa15
#   Loading A[1][0] (Bank 1, Addr 0) with a7a7
#   Loading A[1][1] (Bank 1, Addr 1) with f549
#   Loading A[1][2] (Bank 1, Addr 2) with ec08
#   Loading A[1][3] (Bank 1, Addr 3) with 89a7
#   Loading A[2][0] (Bank 2, Addr 0) with 6691
#   Loading A[2][1] (Bank 2, Addr 1) with b522
#   Loading A[2][2] (Bank 2, Addr 2) with de49
#   Loading A[2][3] (Bank 2, Addr 3) with 0e94
#   Loading A[3][0] (Bank 3, Addr 0) with ff78
#   Loading A[3][1] (Bank 3, Addr 1) with c682
#   Loading A[3][2] (Bank 3, Addr 2) with 68b2
#   Loading A[3][3] (Bank 3, Addr 3) with 13e4
#   Loading B[0][0] (Bank 0, Addr 0) with fb22
#   Loading B[1][0] (Bank 0, Addr 1) with 5c4a
#   Loading B[2][0] (Bank 0, Addr 2) with 3353
#   Loading B[3][0] (Bank 0, Addr 3) with bee6
#   Loading B[0][1] (Bank 1, Addr 0) with 6717
#   Loading B[1][1] (Bank 1, Addr 1) with 64ea
#   Loading B[2][1] (Bank 1, Addr 2) with 7950
#   Loading B[3][1] (Bank 1, Addr 3) with ba4b
#   Loading B[0][2] (Bank 2, Addr 0) with 8224
#   Loading B[1][2] (Bank 2, Addr 1) with db47
#   Loading B[2][2] (Bank 2, Addr 2) with f60f
#   Loading B[3][2] (Bank 2, Addr 3) with 23da
#   Loading B[0][3] (Bank 3, Addr 0) with 3ac7
#   Loading B[1][3] (Bank 3, Addr 1) with 9839
#   Loading B[2][3] (Bank 3, Addr 2) with 5d81
#   Loading B[3][3] (Bank 3, Addr 3) with 3efe
# Matrix loading complete.
# @23575000 Simulating controller signals to execute multiplication...
# @23595000: Starting input feeding sequence...
# @23636000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @23646000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @23925000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 27...
# Test Case 27 FAIL: C[0][0] mismatch! Actual 0, Expected 218eb6c70
# Test Case 27 FAIL: C[0][1] mismatch! Actual 0, Expected 1c2a05a76
# Test Case 27 FAIL: C[0][2] mismatch! Actual 0, Expected 2098d2ca7
# Test Case 27 FAIL: C[0][3] mismatch! Actual 0, Expected 14048b762
# Test Case 27 FAIL: C[1][0] mismatch! Actual 0, Expected 192dbe0ea
# Test Case 27 FAIL: C[1][1] mismatch! Actual 0, Expected 178392e28
# Test Case 27 FAIL: C[1][2] mismatch! Actual 1, Expected 21d786d69
# Test Case 27 FAIL: C[1][3] mismatch! Actual 1, Expected 1306cfbcc
# Test Case 27 FAIL: C[2][0] mismatch! Actual 0, Expected 0dd59ebb9
# Test Case 27 FAIL: C[2][1] mismatch! Actual 1, Expected 0e4a62c47
# Test Case 27 FAIL: C[2][2] mismatch! Actual 0, Expected 1a6fc3321
# Test Case 27 FAIL: C[2][3] mismatch! Actual 0, Expected 0d807efea
# Test Case 27 FAIL: C[3][0] mismatch! Actual 0, Expected 165ff2e12
# Test Case 27 FAIL: C[3][1] mismatch! Actual 0, Expected 0f536cc08
# Test Case 27 FAIL: C[3][2] mismatch! Actual 0, Expected 193516b84
# Test Case 27 FAIL: C[3][3] mismatch! Actual 1, Expected 0dbd38924
# Test Case 27 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @24096000 Starting Test Case 28 of 100
# ===================================================
# Reading test case 28:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @24096000 Matrix Partition
# ===================================================
# @24096000 Matrix partition ended! 
# @24096000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1e91
#   Loading A[0][1] (Bank 0, Addr 1) with b7c1
#   Loading A[0][2] (Bank 0, Addr 2) with e329
#   Loading A[0][3] (Bank 0, Addr 3) with b375
#   Loading A[1][0] (Bank 1, Addr 0) with 3f88
#   Loading A[1][1] (Bank 1, Addr 1) with 15f0
#   Loading A[1][2] (Bank 1, Addr 2) with bc5a
#   Loading A[1][3] (Bank 1, Addr 3) with 90d7
#   Loading A[2][0] (Bank 2, Addr 0) with f97b
#   Loading A[2][1] (Bank 2, Addr 1) with 154f
#   Loading A[2][2] (Bank 2, Addr 2) with 8564
#   Loading A[2][3] (Bank 2, Addr 3) with cca5
#   Loading A[3][0] (Bank 3, Addr 0) with 3be4
#   Loading A[3][1] (Bank 3, Addr 1) with 4e31
#   Loading A[3][2] (Bank 3, Addr 2) with cdbf
#   Loading A[3][3] (Bank 3, Addr 3) with 70bc
#   Loading B[0][0] (Bank 0, Addr 0) with 92ad
#   Loading B[1][0] (Bank 0, Addr 1) with ebb9
#   Loading B[2][0] (Bank 0, Addr 2) with aeb9
#   Loading B[3][0] (Bank 0, Addr 3) with 76dd
#   Loading B[0][1] (Bank 1, Addr 0) with 8315
#   Loading B[1][1] (Bank 1, Addr 1) with d2b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2ab4
#   Loading B[3][1] (Bank 1, Addr 3) with d793
#   Loading B[0][2] (Bank 2, Addr 0) with fe78
#   Loading B[1][2] (Bank 2, Addr 1) with 1535
#   Loading B[2][2] (Bank 2, Addr 2) with c2ff
#   Loading B[3][2] (Bank 2, Addr 3) with c111
#   Loading B[0][3] (Bank 3, Addr 0) with 3853
#   Loading B[1][3] (Bank 3, Addr 1) with ee92
#   Loading B[2][3] (Bank 3, Addr 2) with bcbd
#   Loading B[3][3] (Bank 3, Addr 3) with b248
# Matrix loading complete.
# @24435000 Simulating controller signals to execute multiplication...
# @24455000: Starting input feeding sequence...
# @24496000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @24506000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @24785000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 28...
# Test Case 28 FAIL: C[0][0] mismatch! Actual 0, Expected 1a9133018
# Test Case 28 FAIL: C[0][1] mismatch! Actual 0, Expected 163e4d559
# Test Case 28 FAIL: C[0][2] mismatch! Actual 0, Expected 161f98989
# Test Case 28 FAIL: C[0][3] mismatch! Actual 0, Expected 1d66b7f42
# Test Case 28 FAIL: C[1][0] mismatch! Actual 0, Expected 0fc6715fd
# Test Case 28 FAIL: C[1][1] mismatch! Actual 0, Expected 0cbf8c8d5
# Test Case 28 FAIL: C[1][2] mismatch! Actual 0, Expected 13dab795d
# Test Case 28 FAIL: C[1][3] mismatch! Actual 0, Expected 112275ce2
# Test Case 28 FAIL: C[2][0] mismatch! Actual 0, Expected 15c9ebeeb
# Test Case 28 FAIL: C[2][1] mismatch! Actual 0, Expected 153dc39c5
# Test Case 28 FAIL: C[2][2] mismatch! Actual 0, Expected 1f9b18294
# Test Case 28 FAIL: C[2][3] mismatch! Actual 0, Expected 13b9b972b
# Test Case 28 FAIL: C[3][0] mismatch! Actual 0, Expected 12b1478d0
# Test Case 28 FAIL: C[3][1] mismatch! Actual 0, Expected 0e04577d5
# Test Case 28 FAIL: C[3][2] mismatch! Actual 0, Expected 133bf67c2
# Test Case 28 FAIL: C[3][3] mismatch! Actual 0, Expected 13c3e07c1
# Test Case 28 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @24956000 Starting Test Case 29 of 100
# ===================================================
# Reading test case 29:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @24956000 Matrix Partition
# ===================================================
# @24956000 Matrix partition ended! 
# @24956000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c9e5
#   Loading A[0][1] (Bank 0, Addr 1) with d983
#   Loading A[0][2] (Bank 0, Addr 2) with f3d3
#   Loading A[0][3] (Bank 0, Addr 3) with 65ce
#   Loading A[1][0] (Bank 1, Addr 0) with 4e3c
#   Loading A[1][1] (Bank 1, Addr 1) with 0341
#   Loading A[1][2] (Bank 1, Addr 2) with f92f
#   Loading A[1][3] (Bank 1, Addr 3) with aadf
#   Loading A[2][0] (Bank 2, Addr 0) with 79a5
#   Loading A[2][1] (Bank 2, Addr 1) with 60be
#   Loading A[2][2] (Bank 2, Addr 2) with cbd0
#   Loading A[2][3] (Bank 2, Addr 3) with 7d67
#   Loading A[3][0] (Bank 3, Addr 0) with 65aa
#   Loading A[3][1] (Bank 3, Addr 1) with 4d12
#   Loading A[3][2] (Bank 3, Addr 2) with b614
#   Loading A[3][3] (Bank 3, Addr 3) with 3c29
#   Loading B[0][0] (Bank 0, Addr 0) with 5655
#   Loading B[1][0] (Bank 0, Addr 1) with 210c
#   Loading B[2][0] (Bank 0, Addr 2) with 879e
#   Loading B[3][0] (Bank 0, Addr 3) with 4cc8
#   Loading B[0][1] (Bank 1, Addr 0) with d7e2
#   Loading B[1][1] (Bank 1, Addr 1) with 43da
#   Loading B[2][1] (Bank 1, Addr 2) with 624f
#   Loading B[3][1] (Bank 1, Addr 3) with fa98
#   Loading B[0][2] (Bank 2, Addr 0) with c5d3
#   Loading B[1][2] (Bank 2, Addr 1) with a4f3
#   Loading B[2][2] (Bank 2, Addr 2) with 6502
#   Loading B[3][2] (Bank 2, Addr 3) with 8a45
#   Loading B[0][3] (Bank 3, Addr 0) with 44ae
#   Loading B[1][3] (Bank 3, Addr 1) with 5adf
#   Loading B[2][3] (Bank 3, Addr 2) with 0085
#   Loading B[3][3] (Bank 3, Addr 3) with fac0
# Matrix loading complete.
# @25295000 Simulating controller signals to execute multiplication...
# @25315000: Starting input feeding sequence...
# @25356000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @25366000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @25645000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 29...
# Test Case 29 FAIL: C[0][0] mismatch! Actual 0, Expected 0ffdd7e57
# Test Case 29 FAIL: C[0][1] mismatch! Actual 0, Expected 1a531b425
# Test Case 29 FAIL: C[0][2] mismatch! Actual 0, Expected 1bf5aa744
# Test Case 29 FAIL: C[0][3] mismatch! Actual 0, Expected 0e795c7e2
# Test Case 29 FAIL: C[1][0] mismatch! Actual 0, Expected 0d20ef032
# Test Case 29 FAIL: C[1][1] mismatch! Actual 0, Expected 149ca5b3b
# Test Case 29 FAIL: C[1][2] mismatch! Actual 0, Expected 0fd2923a0
# Test Case 29 FAIL: C[1][3] mismatch! Actual 0, Expected 0be042f12
# Test Case 29 FAIL: C[2][0] mismatch! Actual 0, Expected 0c717df89
# Test Case 29 FAIL: C[2][1] mismatch! Actual 0, Expected 1493ea2ce
# Test Case 29 FAIL: C[2][2] mismatch! Actual 0, Expected 1307bc2bc
# Test Case 29 FAIL: C[2][3] mismatch! Actual 0, Expected 0be3819f8
# Test Case 29 FAIL: C[3][0] mismatch! Actual 0, Expected 09ebbe4aa
# Test Case 29 FAIL: C[3][1] mismatch! Actual 0, Expected 0eaf877ec
# Test Case 29 FAIL: C[3][2] mismatch! Actual 0, Expected 0e88dee69
# Test Case 29 FAIL: C[3][3] mismatch! Actual 0, Expected 071ed795e
# Test Case 29 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @25816000 Starting Test Case 30 of 100
# ===================================================
# Reading test case 30:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @25816000 Matrix Partition
# ===================================================
# @25816000 Matrix partition ended! 
# @25816000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9e98
#   Loading A[0][1] (Bank 0, Addr 1) with fe26
#   Loading A[0][2] (Bank 0, Addr 2) with 0d18
#   Loading A[0][3] (Bank 0, Addr 3) with c8ba
#   Loading A[1][0] (Bank 1, Addr 0) with 50b7
#   Loading A[1][1] (Bank 1, Addr 1) with 5a22
#   Loading A[1][2] (Bank 1, Addr 2) with a344
#   Loading A[1][3] (Bank 1, Addr 3) with 3efd
#   Loading A[2][0] (Bank 2, Addr 0) with 62e8
#   Loading A[2][1] (Bank 2, Addr 1) with 6f92
#   Loading A[2][2] (Bank 2, Addr 2) with b340
#   Loading A[2][3] (Bank 2, Addr 3) with 4a76
#   Loading A[3][0] (Bank 3, Addr 0) with 23d1
#   Loading A[3][1] (Bank 3, Addr 1) with bfab
#   Loading A[3][2] (Bank 3, Addr 2) with e993
#   Loading A[3][3] (Bank 3, Addr 3) with bd50
#   Loading B[0][0] (Bank 0, Addr 0) with 3535
#   Loading B[1][0] (Bank 0, Addr 1) with 52ce
#   Loading B[2][0] (Bank 0, Addr 2) with 6839
#   Loading B[3][0] (Bank 0, Addr 3) with bac0
#   Loading B[0][1] (Bank 1, Addr 0) with 1a57
#   Loading B[1][1] (Bank 1, Addr 1) with ce8d
#   Loading B[2][1] (Bank 1, Addr 2) with a2d4
#   Loading B[3][1] (Bank 1, Addr 3) with 7c88
#   Loading B[0][2] (Bank 2, Addr 0) with a837
#   Loading B[1][2] (Bank 2, Addr 1) with af32
#   Loading B[2][2] (Bank 2, Addr 2) with 9133
#   Loading B[3][2] (Bank 2, Addr 3) with a542
#   Loading B[0][3] (Bank 3, Addr 0) with ee65
#   Loading B[1][3] (Bank 3, Addr 1) with 9466
#   Loading B[2][3] (Bank 3, Addr 2) with 1305
#   Loading B[3][3] (Bank 3, Addr 3) with 0ec3
# Matrix loading complete.
# @26155000 Simulating controller signals to execute multiplication...
# @26175000: Starting input feeding sequence...
# @26216000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @26226000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @26505000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 30...
# Test Case 30 FAIL: C[0][0] mismatch! Actual 0, Expected 10aed55e4
# Test Case 30 FAIL: C[0][1] mismatch! Actual 1, Expected 14758a746
# Test Case 30 FAIL: C[0][2] mismatch! Actual 0, Expected 19f2445d0
# Test Case 30 FAIL: C[0][3] mismatch! Actual 1, Expected 1338f3842
# Test Case 30 FAIL: C[1][0] mismatch! Actual 1, Expected 09e590e23
# Test Case 30 FAIL: C[1][1] mismatch! Actual 1, Expected 0d78343a3
# Test Case 30 FAIL: C[1][2] mismatch! Actual 1, Expected 0f7fba0bb
# Test Case 30 FAIL: C[1][3] mismatch! Actual 1, Expected 08f2c98ca
# Test Case 30 FAIL: C[2][0] mismatch! Actual 0, Expected 0b7f08b44
# Test Case 30 FAIL: C[2][1] mismatch! Actual 0, Expected 0fa6dc3f2
# Test Case 30 FAIL: C[2][2] mismatch! Actual 0, Expected 123144e88
# Test Case 30 FAIL: C[2][3] mismatch! Actual 1, Expected 0ae63fdd6
# Test Case 30 FAIL: C[3][0] mismatch! Actual 1, Expected 12ea2869a
# Test Case 30 FAIL: C[3][1] mismatch! Actual 1, Expected 18efc5772
# Test Case 30 FAIL: C[3][2] mismatch! Actual 1, Expected 199645836
# Test Case 30 FAIL: C[3][3] mismatch! Actual 1, Expected 0acbab666
# Test Case 30 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @26676000 Starting Test Case 31 of 100
# ===================================================
# Reading test case 31:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @26676000 Matrix Partition
# ===================================================
# @26676000 Matrix partition ended! 
# @26676000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with df93
#   Loading A[0][1] (Bank 0, Addr 1) with 0421
#   Loading A[0][2] (Bank 0, Addr 2) with 3edf
#   Loading A[0][3] (Bank 0, Addr 3) with 7a26
#   Loading A[1][0] (Bank 1, Addr 0) with 3c60
#   Loading A[1][1] (Bank 1, Addr 1) with b00c
#   Loading A[1][2] (Bank 1, Addr 2) with 0d06
#   Loading A[1][3] (Bank 1, Addr 3) with 93e5
#   Loading A[2][0] (Bank 2, Addr 0) with fb24
#   Loading A[2][1] (Bank 2, Addr 1) with 89ba
#   Loading A[2][2] (Bank 2, Addr 2) with 95b0
#   Loading A[2][3] (Bank 2, Addr 3) with dc24
#   Loading A[3][0] (Bank 3, Addr 0) with 47f5
#   Loading A[3][1] (Bank 3, Addr 1) with 3dcd
#   Loading A[3][2] (Bank 3, Addr 2) with 6e5f
#   Loading A[3][3] (Bank 3, Addr 3) with 065f
#   Loading B[0][0] (Bank 0, Addr 0) with ae9a
#   Loading B[1][0] (Bank 0, Addr 1) with 5411
#   Loading B[2][0] (Bank 0, Addr 2) with 7bd3
#   Loading B[3][0] (Bank 0, Addr 3) with b060
#   Loading B[0][1] (Bank 1, Addr 0) with db85
#   Loading B[1][1] (Bank 1, Addr 1) with 2a73
#   Loading B[2][1] (Bank 1, Addr 2) with 005d
#   Loading B[3][1] (Bank 1, Addr 3) with 07af
#   Loading B[0][2] (Bank 2, Addr 0) with 15e9
#   Loading B[1][2] (Bank 2, Addr 1) with 60cd
#   Loading B[2][2] (Bank 2, Addr 2) with 003a
#   Loading B[3][2] (Bank 2, Addr 3) with b60f
#   Loading B[0][3] (Bank 3, Addr 0) with 459d
#   Loading B[1][3] (Bank 3, Addr 1) with f507
#   Loading B[2][3] (Bank 3, Addr 2) with fbc2
#   Loading B[3][3] (Bank 3, Addr 3) with b133
# Matrix loading complete.
# @27015000 Simulating controller signals to execute multiplication...
# @27035000: Starting input feeding sequence...
# @27076000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @27086000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @27365000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 31...
# Test Case 31 FAIL: C[0][0] mismatch! Actual 0, Expected 10c6867ac
# Test Case 31 FAIL: C[0][1] mismatch! Actual 0, Expected 0c4278e2f
# Test Case 31 FAIL: C[0][2] mismatch! Actual 0, Expected 06b9ea4f8
# Test Case 31 FAIL: C[0][3] mismatch! Actual 0, Expected 0d320539e
# Test Case 31 FAIL: C[1][0] mismatch! Actual 0, Expected 0cf2eb65e
# Test Case 31 FAIL: C[1][1] mismatch! Actual 0, Expected 0556ba2fd
# Test Case 31 FAIL: C[1][2] mismatch! Actual 0, Expected 0b0ecb8c3
# Test Case 31 FAIL: C[1][3] mismatch! Actual 0, Expected 12c18bf5f
# Test Case 31 FAIL: C[2][0] mismatch! Actual 0, Expected 1b895f692
# Test Case 31 FAIL: C[2][1] mismatch! Actual 0, Expected 0f50281ce
# Test Case 31 FAIL: C[2][2] mismatch! Actual 0, Expected 0e642f9b2
# Test Case 31 FAIL: C[2][3] mismatch! Actual 0, Expected 1f3b33db6
# Test Case 31 FAIL: C[3][0] mismatch! Actual 0, Expected 07f257eec
# Test Case 31 FAIL: C[3][1] mismatch! Actual 0, Expected 0484c6ad4
# Test Case 31 FAIL: C[3][2] mismatch! Actual 0, Expected 02227df3d
# Test Case 31 FAIL: C[3][3] mismatch! Actual 0, Expected 0bfabc8c7
# Test Case 31 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @27536000 Starting Test Case 32 of 100
# ===================================================
# Reading test case 32:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @27536000 Matrix Partition
# ===================================================
# @27536000 Matrix partition ended! 
# @27536000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 178d
#   Loading A[0][1] (Bank 0, Addr 1) with 8d6f
#   Loading A[0][2] (Bank 0, Addr 2) with 0a4b
#   Loading A[0][3] (Bank 0, Addr 3) with 625e
#   Loading A[1][0] (Bank 1, Addr 0) with dc28
#   Loading A[1][1] (Bank 1, Addr 1) with 8ef1
#   Loading A[1][2] (Bank 1, Addr 2) with 86b7
#   Loading A[1][3] (Bank 1, Addr 3) with 2508
#   Loading A[2][0] (Bank 2, Addr 0) with e7a3
#   Loading A[2][1] (Bank 2, Addr 1) with 7c0c
#   Loading A[2][2] (Bank 2, Addr 2) with 74e0
#   Loading A[2][3] (Bank 2, Addr 3) with f6cc
#   Loading A[3][0] (Bank 3, Addr 0) with 94ed
#   Loading A[3][1] (Bank 3, Addr 1) with e841
#   Loading A[3][2] (Bank 3, Addr 2) with af23
#   Loading A[3][3] (Bank 3, Addr 3) with c632
#   Loading B[0][0] (Bank 0, Addr 0) with d285
#   Loading B[1][0] (Bank 0, Addr 1) with 1ab6
#   Loading B[2][0] (Bank 0, Addr 2) with 2601
#   Loading B[3][0] (Bank 0, Addr 3) with 4a9e
#   Loading B[0][1] (Bank 1, Addr 0) with 0e98
#   Loading B[1][1] (Bank 1, Addr 1) with ffb2
#   Loading B[2][1] (Bank 1, Addr 2) with ca2d
#   Loading B[3][1] (Bank 1, Addr 3) with d48c
#   Loading B[0][2] (Bank 2, Addr 0) with 9863
#   Loading B[1][2] (Bank 2, Addr 1) with ddda
#   Loading B[2][2] (Bank 2, Addr 2) with 2e88
#   Loading B[3][2] (Bank 2, Addr 3) with 5016
#   Loading B[0][3] (Bank 3, Addr 0) with b2f4
#   Loading B[1][3] (Bank 3, Addr 1) with b763
#   Loading B[2][3] (Bank 3, Addr 2) with c4b6
#   Loading B[3][3] (Bank 3, Addr 3) with ec61
# Matrix loading complete.
# @27875000 Simulating controller signals to execute multiplication...
# @27895000: Starting input feeding sequence...
# @27936000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @27946000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @28225000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 32...
# Test Case 32 FAIL: C[0][0] mismatch! Actual 0, Expected 04052c77a
# Test Case 32 FAIL: C[0][1] mismatch! Actual 1, Expected 0e8683a7d
# Test Case 32 FAIL: C[0][2] mismatch! Actual 0, Expected 0a93adcf9
# Test Case 32 FAIL: C[0][3] mismatch! Actual 1, Expected 0d8843241
# Test Case 32 FAIL: C[1][0] mismatch! Actual 0, Expected 0e2c025c5
# Test Case 32 FAIL: C[1][1] mismatch! Actual 1, Expected 124754edd
# Test Case 32 FAIL: C[1][2] mismatch! Actual 0, Expected 122fecb9a
# Test Case 32 FAIL: C[1][3] mismatch! Actual 1, Expected 18a007e75
# Test Case 32 FAIL: C[2][0] mismatch! Actual 0, Expected 124b674ff
# Test Case 32 FAIL: C[2][1] mismatch! Actual 1, Expected 1b24fda10
# Test Case 32 FAIL: C[2][2] mismatch! Actual 0, Expected 157d5a6c9
# Test Case 32 FAIL: C[2][3] mismatch! Actual 1, Expected 23878d48c
# Test Case 32 FAIL: C[3][0] mismatch! Actual 0, Expected 0e6782956
# Test Case 32 FAIL: C[3][1] mismatch! Actual 1, Expected 21f55d169
# Test Case 32 FAIL: C[3][2] mismatch! Actual 0, Expected 17fc230e5
# Test Case 32 FAIL: C[3][3] mismatch! Actual 1, Expected 24c0f83db
# Test Case 32 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @28396000 Starting Test Case 33 of 100
# ===================================================
# Reading test case 33:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @28396000 Matrix Partition
# ===================================================
# @28396000 Matrix partition ended! 
# @28396000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e0f0
#   Loading A[0][1] (Bank 0, Addr 1) with d0d5
#   Loading A[0][2] (Bank 0, Addr 2) with a840
#   Loading A[0][3] (Bank 0, Addr 3) with 8330
#   Loading A[1][0] (Bank 1, Addr 0) with 413c
#   Loading A[1][1] (Bank 1, Addr 1) with 41ba
#   Loading A[1][2] (Bank 1, Addr 2) with e296
#   Loading A[1][3] (Bank 1, Addr 3) with b007
#   Loading A[2][0] (Bank 2, Addr 0) with dce4
#   Loading A[2][1] (Bank 2, Addr 1) with 2be9
#   Loading A[2][2] (Bank 2, Addr 2) with 5824
#   Loading A[2][3] (Bank 2, Addr 3) with 55f1
#   Loading A[3][0] (Bank 3, Addr 0) with cad0
#   Loading A[3][1] (Bank 3, Addr 1) with b487
#   Loading A[3][2] (Bank 3, Addr 2) with 2fb7
#   Loading A[3][3] (Bank 3, Addr 3) with 4ec0
#   Loading B[0][0] (Bank 0, Addr 0) with 761d
#   Loading B[1][0] (Bank 0, Addr 1) with 586e
#   Loading B[2][0] (Bank 0, Addr 2) with 9721
#   Loading B[3][0] (Bank 0, Addr 3) with 1ced
#   Loading B[0][1] (Bank 1, Addr 0) with abed
#   Loading B[1][1] (Bank 1, Addr 1) with bfb2
#   Loading B[2][1] (Bank 1, Addr 2) with 0209
#   Loading B[3][1] (Bank 1, Addr 3) with f0b7
#   Loading B[0][2] (Bank 2, Addr 0) with e640
#   Loading B[1][2] (Bank 2, Addr 1) with 50d6
#   Loading B[2][2] (Bank 2, Addr 2) with dae6
#   Loading B[3][2] (Bank 2, Addr 3) with b82a
#   Loading B[0][3] (Bank 3, Addr 0) with 475d
#   Loading B[1][3] (Bank 3, Addr 1) with 54c5
#   Loading B[2][3] (Bank 3, Addr 2) with 7407
#   Loading B[3][3] (Bank 3, Addr 3) with deb0
# Matrix loading complete.
# @28735000 Simulating controller signals to execute multiplication...
# @28755000: Starting input feeding sequence...
# @28796000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @28806000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @29085000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 33...
# Test Case 33 FAIL: C[0][0] mismatch! Actual 0, Expected 122113266
# Test Case 33 FAIL: C[0][1] mismatch! Actual 0, Expected 1b021deda
# Test Case 33 FAIL: C[0][2] mismatch! Actual 0, Expected 1fa7ead6e
# Test Case 33 FAIL: C[0][3] mismatch! Actual 0, Expected 1423a49d9
# Test Case 33 FAIL: C[1][0] mismatch! Actual 1, Expected 0ce74a389
# Test Case 33 FAIL: C[1][1] mismatch! Actual 0, Expected 104587a27
# Test Case 33 FAIL: C[1][2] mismatch! Actual 1, Expected 18fce8066
# Test Case 33 FAIL: C[1][3] mismatch! Actual 0, Expected 127c433d8
# Test Case 33 FAIL: C[2][0] mismatch! Actual 0, Expected 0b2d398b3
# Test Case 33 FAIL: C[2][1] mismatch! Actual 1, Expected 106bceaa1
# Test Case 33 FAIL: C[2][2] mismatch! Actual 0, Expected 15dbabfa8
# Test Case 33 FAIL: C[2][3] mismatch! Actual 0, Expected 0bed285cd
# Test Case 33 FAIL: C[3][0] mismatch! Actual 1, Expected 0c0ffd2e9
# Test Case 33 FAIL: C[3][1] mismatch! Actual 0, Expected 159d0581d
# Test Case 33 FAIL: C[3][2] mismatch! Actual 0, Expected 150de4cc4
# Test Case 33 FAIL: C[3][3] mismatch! Actual 0, Expected 0ce717374
# Test Case 33 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @29256000 Starting Test Case 34 of 100
# ===================================================
# Reading test case 34:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @29256000 Matrix Partition
# ===================================================
# @29256000 Matrix partition ended! 
# @29256000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b766
#   Loading A[0][1] (Bank 0, Addr 1) with 2e80
#   Loading A[0][2] (Bank 0, Addr 2) with 973c
#   Loading A[0][3] (Bank 0, Addr 3) with b7e5
#   Loading A[1][0] (Bank 1, Addr 0) with f32d
#   Loading A[1][1] (Bank 1, Addr 1) with 9b10
#   Loading A[1][2] (Bank 1, Addr 2) with 079e
#   Loading A[1][3] (Bank 1, Addr 3) with a40a
#   Loading A[2][0] (Bank 2, Addr 0) with f082
#   Loading A[2][1] (Bank 2, Addr 1) with 43bb
#   Loading A[2][2] (Bank 2, Addr 2) with 3b93
#   Loading A[2][3] (Bank 2, Addr 3) with 1ebd
#   Loading A[3][0] (Bank 3, Addr 0) with 4565
#   Loading A[3][1] (Bank 3, Addr 1) with 6030
#   Loading A[3][2] (Bank 3, Addr 2) with d371
#   Loading A[3][3] (Bank 3, Addr 3) with 2e5b
#   Loading B[0][0] (Bank 0, Addr 0) with 25e3
#   Loading B[1][0] (Bank 0, Addr 1) with 8f04
#   Loading B[2][0] (Bank 0, Addr 2) with 82f5
#   Loading B[3][0] (Bank 0, Addr 3) with 66fc
#   Loading B[0][1] (Bank 1, Addr 0) with 3c5f
#   Loading B[1][1] (Bank 1, Addr 1) with e70c
#   Loading B[2][1] (Bank 1, Addr 2) with a36c
#   Loading B[3][1] (Bank 1, Addr 3) with 2025
#   Loading B[0][2] (Bank 2, Addr 0) with 6771
#   Loading B[1][2] (Bank 2, Addr 1) with 9756
#   Loading B[2][2] (Bank 2, Addr 2) with 6a91
#   Loading B[3][2] (Bank 2, Addr 3) with 1042
#   Loading B[0][3] (Bank 3, Addr 0) with 29ac
#   Loading B[1][3] (Bank 3, Addr 1) with 0633
#   Loading B[2][3] (Bank 3, Addr 2) with 6b26
#   Loading B[3][3] (Bank 3, Addr 3) with d08f
# Matrix loading complete.
# @29595000 Simulating controller signals to execute multiplication...
# @29615000: Starting input feeding sequence...
# @29656000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @29666000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @29945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 34...
# Test Case 34 FAIL: C[0][0] mismatch! Actual 0, Expected 0cc760f4a
# Test Case 34 FAIL: C[0][1] mismatch! Actual 0, Expected 0ccd9da43
# Test Case 34 FAIL: C[0][2] mismatch! Actual 0, Expected 0b03a570c
# Test Case 34 FAIL: C[0][3] mismatch! Actual 1, Expected 0f41821db
# Test Case 34 FAIL: C[1][0] mismatch! Actual 1, Expected 0c0807a35
# Test Case 34 FAIL: C[1][1] mismatch! Actual 1, Expected 0dec1448d
# Test Case 34 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb83a04f
# Test Case 34 FAIL: C[1][3] mismatch! Actual 0, Expected 0b42ac876
# Test Case 34 FAIL: C[2][0] mismatch! Actual 0, Expected 07445caed
# Test Case 34 FAIL: C[2][1] mismatch! Actual 0, Expected 09fbc6e57
# Test Case 34 FAIL: C[2][2] mismatch! Actual 0, Expected 0a3f8de31
# Test Case 34 FAIL: C[2][3] mismatch! Actual 1, Expected 05ac44dfe
# Test Case 34 FAIL: C[3][0] mismatch! Actual 1, Expected 0bed11308
# Test Case 34 FAIL: C[3][1] mismatch! Actual 1, Expected 0f3f9788e
# Test Case 34 FAIL: C[3][2] mismatch! Actual 1, Expected 0afdd152c
# Test Case 34 FAIL: C[3][3] mismatch! Actual 0, Expected 08be38907
# Test Case 34 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @30116000 Starting Test Case 35 of 100
# ===================================================
# Reading test case 35:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @30116000 Matrix Partition
# ===================================================
# @30116000 Matrix partition ended! 
# @30116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9380
#   Loading A[0][1] (Bank 0, Addr 1) with 16ff
#   Loading A[0][2] (Bank 0, Addr 2) with 7809
#   Loading A[0][3] (Bank 0, Addr 3) with c39d
#   Loading A[1][0] (Bank 1, Addr 0) with 5b89
#   Loading A[1][1] (Bank 1, Addr 1) with 2861
#   Loading A[1][2] (Bank 1, Addr 2) with 00dc
#   Loading A[1][3] (Bank 1, Addr 3) with 185a
#   Loading A[2][0] (Bank 2, Addr 0) with e57e
#   Loading A[2][1] (Bank 2, Addr 1) with 7b2e
#   Loading A[2][2] (Bank 2, Addr 2) with bc11
#   Loading A[2][3] (Bank 2, Addr 3) with 4357
#   Loading A[3][0] (Bank 3, Addr 0) with 5958
#   Loading A[3][1] (Bank 3, Addr 1) with 71e8
#   Loading A[3][2] (Bank 3, Addr 2) with 65c8
#   Loading A[3][3] (Bank 3, Addr 3) with af4f
#   Loading B[0][0] (Bank 0, Addr 0) with cf3b
#   Loading B[1][0] (Bank 0, Addr 1) with c3b0
#   Loading B[2][0] (Bank 0, Addr 2) with 07fc
#   Loading B[3][0] (Bank 0, Addr 3) with a6a3
#   Loading B[0][1] (Bank 1, Addr 0) with 142c
#   Loading B[1][1] (Bank 1, Addr 1) with 9c18
#   Loading B[2][1] (Bank 1, Addr 2) with 54a8
#   Loading B[3][1] (Bank 1, Addr 3) with f4bd
#   Loading B[0][2] (Bank 2, Addr 0) with 567c
#   Loading B[1][2] (Bank 2, Addr 1) with 3f27
#   Loading B[2][2] (Bank 2, Addr 2) with 1f78
#   Loading B[3][2] (Bank 2, Addr 3) with 2884
#   Loading B[0][3] (Bank 3, Addr 0) with 0d2e
#   Loading B[1][3] (Bank 3, Addr 1) with 259e
#   Loading B[2][3] (Bank 3, Addr 2) with cae3
#   Loading B[3][3] (Bank 3, Addr 3) with 0109
# Matrix loading complete.
# @30455000 Simulating controller signals to execute multiplication...
# @30475000: Starting input feeding sequence...
# @30516000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @30526000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @30805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 35...
# Test Case 35 FAIL: C[0][0] mismatch! Actual 0, Expected 10c0d4da3
# Test Case 35 FAIL: C[0][1] mismatch! Actual 0, Expected 0fc58aeb9
# Test Case 35 FAIL: C[0][2] mismatch! Actual 0, Expected 065377405
# Test Case 35 FAIL: C[0][3] mismatch! Actual 0, Expected 06ae514e2
# Test Case 35 FAIL: C[1][0] mismatch! Actual 1, Expected 078d73f21
# Test Case 35 FAIL: C[1][1] mismatch! Actual 1, Expected 03765d776
# Test Case 35 FAIL: C[1][2] mismatch! Actual 1, Expected 02cd80bab
# Test Case 35 FAIL: C[1][3] mismatch! Actual 0, Expected 00b6ce8ba
# Test Case 35 FAIL: C[2][0] mismatch! Actual 0, Expected 149a161cb
# Test Case 35 FAIL: C[2][1] mismatch! Actual 1, Expected 0dbc2805b
# Test Case 35 FAIL: C[2][2] mismatch! Actual 0, Expected 08db11ade
# Test Case 35 FAIL: C[2][3] mismatch! Actual 0, Expected 0b33c312a
# Test Case 35 FAIL: C[3][0] mismatch! Actual 1, Expected 114ae48f5
# Test Case 35 FAIL: C[3][1] mismatch! Actual 1, Expected 115bf6d73
# Test Case 35 FAIL: C[3][2] mismatch! Actual 0, Expected 06289f374
# Test Case 35 FAIL: C[3][3] mismatch! Actual 0, Expected 066b5e41f
# Test Case 35 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @30976000 Starting Test Case 36 of 100
# ===================================================
# Reading test case 36:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @30976000 Matrix Partition
# ===================================================
# @30976000 Matrix partition ended! 
# @30976000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with fc12
#   Loading A[0][1] (Bank 0, Addr 1) with 9f38
#   Loading A[0][2] (Bank 0, Addr 2) with e82d
#   Loading A[0][3] (Bank 0, Addr 3) with 6504
#   Loading A[1][0] (Bank 1, Addr 0) with 0026
#   Loading A[1][1] (Bank 1, Addr 1) with 8db9
#   Loading A[1][2] (Bank 1, Addr 2) with 6bdc
#   Loading A[1][3] (Bank 1, Addr 3) with e88d
#   Loading A[2][0] (Bank 2, Addr 0) with 55e6
#   Loading A[2][1] (Bank 2, Addr 1) with 81c6
#   Loading A[2][2] (Bank 2, Addr 2) with 7e46
#   Loading A[2][3] (Bank 2, Addr 3) with 455d
#   Loading A[3][0] (Bank 3, Addr 0) with 99cb
#   Loading A[3][1] (Bank 3, Addr 1) with f8d3
#   Loading A[3][2] (Bank 3, Addr 2) with 88d0
#   Loading A[3][3] (Bank 3, Addr 3) with 854a
#   Loading B[0][0] (Bank 0, Addr 0) with 5d5a
#   Loading B[1][0] (Bank 0, Addr 1) with 1edd
#   Loading B[2][0] (Bank 0, Addr 2) with 3800
#   Loading B[3][0] (Bank 0, Addr 3) with a1c1
#   Loading B[0][1] (Bank 1, Addr 0) with d381
#   Loading B[1][1] (Bank 1, Addr 1) with 0b18
#   Loading B[2][1] (Bank 1, Addr 2) with 6f0a
#   Loading B[3][1] (Bank 1, Addr 3) with 9474
#   Loading B[0][2] (Bank 2, Addr 0) with ba4a
#   Loading B[1][2] (Bank 2, Addr 1) with cd4e
#   Loading B[2][2] (Bank 2, Addr 2) with 174a
#   Loading B[3][2] (Bank 2, Addr 3) with 1927
#   Loading B[0][3] (Bank 3, Addr 0) with dcd3
#   Loading B[1][3] (Bank 3, Addr 1) with e166
#   Loading B[2][3] (Bank 3, Addr 2) with 826a
#   Loading B[3][3] (Bank 3, Addr 3) with 4401
# Matrix loading complete.
# @31315000 Simulating controller signals to execute multiplication...
# @31335000: Starting input feeding sequence...
# @31376000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @31386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @31665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 36...
# Test Case 36 FAIL: C[0][0] mismatch! Actual 0, Expected 0e1baafb0
# Test Case 36 FAIL: C[0][1] mismatch! Actual 1, Expected 17670dae4
# Test Case 36 FAIL: C[0][2] mismatch! Actual 0, Expected 1562a3be2
# Test Case 36 FAIL: C[0][3] mismatch! Actual 1, Expected 1f6bb54cc
# Test Case 36 FAIL: C[1][0] mismatch! Actual 0, Expected 0bbac015e
# Test Case 36 FAIL: C[1][1] mismatch! Actual 1, Expected 0bbe71ffa
# Test Case 36 FAIL: C[1][2] mismatch! Actual 0, Expected 0926d1e6d
# Test Case 36 FAIL: C[1][3] mismatch! Actual 1, Expected 0f1a195ad
# Test Case 36 FAIL: C[2][0] mismatch! Actual 0, Expected 0766b14e7
# Test Case 36 FAIL: C[2][1] mismatch! Actual 0, Expected 0ab960256
# Test Case 36 FAIL: C[2][2] mismatch! Actual 0, Expected 0b8e27937
# Test Case 36 FAIL: C[2][3] mismatch! Actual 1, Expected 10f1bfdcf
# Test Case 36 FAIL: C[3][0] mismatch! Actual 0, Expected 0c839df4f
# Test Case 36 FAIL: C[3][1] mismatch! Actual 1, Expected 1127aeabb
# Test Case 36 FAIL: C[3][2] mismatch! Actual 0, Expected 151017e5e
# Test Case 36 FAIL: C[3][3] mismatch! Actual 1, Expected 1c8d840cd
# Test Case 36 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @31836000 Starting Test Case 37 of 100
# ===================================================
# Reading test case 37:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @31836000 Matrix Partition
# ===================================================
# @31836000 Matrix partition ended! 
# @31836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 46eb
#   Loading A[0][1] (Bank 0, Addr 1) with b455
#   Loading A[0][2] (Bank 0, Addr 2) with dc29
#   Loading A[0][3] (Bank 0, Addr 3) with 674e
#   Loading A[1][0] (Bank 1, Addr 0) with 5d28
#   Loading A[1][1] (Bank 1, Addr 1) with 376b
#   Loading A[1][2] (Bank 1, Addr 2) with 5378
#   Loading A[1][3] (Bank 1, Addr 3) with 06b7
#   Loading A[2][0] (Bank 2, Addr 0) with a251
#   Loading A[2][1] (Bank 2, Addr 1) with 0c9a
#   Loading A[2][2] (Bank 2, Addr 2) with bd77
#   Loading A[2][3] (Bank 2, Addr 3) with 7572
#   Loading A[3][0] (Bank 3, Addr 0) with d060
#   Loading A[3][1] (Bank 3, Addr 1) with f04c
#   Loading A[3][2] (Bank 3, Addr 2) with 2e86
#   Loading A[3][3] (Bank 3, Addr 3) with 64cf
#   Loading B[0][0] (Bank 0, Addr 0) with 6cba
#   Loading B[1][0] (Bank 0, Addr 1) with fe28
#   Loading B[2][0] (Bank 0, Addr 2) with 350a
#   Loading B[3][0] (Bank 0, Addr 3) with e4d2
#   Loading B[0][1] (Bank 1, Addr 0) with 2b96
#   Loading B[1][1] (Bank 1, Addr 1) with a278
#   Loading B[2][1] (Bank 1, Addr 2) with b2d3
#   Loading B[3][1] (Bank 1, Addr 3) with f7eb
#   Loading B[0][2] (Bank 2, Addr 0) with 061c
#   Loading B[1][2] (Bank 2, Addr 1) with f49d
#   Loading B[2][2] (Bank 2, Addr 2) with 18a3
#   Loading B[3][2] (Bank 2, Addr 3) with f927
#   Loading B[0][3] (Bank 3, Addr 0) with 2251
#   Loading B[1][3] (Bank 3, Addr 1) with 9bc5
#   Loading B[2][3] (Bank 3, Addr 2) with 0716
#   Loading B[3][3] (Bank 3, Addr 3) with 0d33
# Matrix loading complete.
# @32175000 Simulating controller signals to execute multiplication...
# @32195000: Starting input feeding sequence...
# @32236000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @32246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @32525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 37...
# Test Case 37 FAIL: C[0][0] mismatch! Actual 0, Expected 15b1a7a9c
# Test Case 37 FAIL: C[0][1] mismatch! Actual 0, Expected 17c5a66ef
# Test Case 37 FAIL: C[0][2] mismatch! Actual 0, Expected 127bb80d2
# Test Case 37 FAIL: C[0][3] mismatch! Actual 0, Expected 082a777d4
# Test Case 37 FAIL: C[1][0] mismatch! Actual 0, Expected 075e0fa96
# Test Case 37 FAIL: C[1][1] mismatch! Actual 1, Expected 073d6f47d
# Test Case 37 FAIL: C[1][2] mismatch! Actual 0, Expected 045be8348
# Test Case 37 FAIL: C[1][3] mismatch! Actual 1, Expected 030dd4dc4
# Test Case 37 FAIL: C[2][0] mismatch! Actual 0, Expected 0e1adc814
# Test Case 37 FAIL: C[2][1] mismatch! Actual 1, Expected 119b7c761
# Test Case 37 FAIL: C[2][2] mismatch! Actual 0, Expected 09473ba71
# Test Case 37 FAIL: C[2][3] mismatch! Actual 0, Expected 028b9c713
# Test Case 37 FAIL: C[3][0] mismatch! Actual 0, Expected 1aacf76aa
# Test Case 37 FAIL: C[3][1] mismatch! Actual 1, Expected 13e1abb57
# Test Case 37 FAIL: C[3][2] mismatch! Actual 0, Expected 1512bbaf7
# Test Case 37 FAIL: C[3][3] mismatch! Actual 1, Expected 0b4a1de9d
# Test Case 37 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @32696000 Starting Test Case 38 of 100
# ===================================================
# Reading test case 38:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @32696000 Matrix Partition
# ===================================================
# @32696000 Matrix partition ended! 
# @32696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 61f6
#   Loading A[0][1] (Bank 0, Addr 1) with 4d00
#   Loading A[0][2] (Bank 0, Addr 2) with f696
#   Loading A[0][3] (Bank 0, Addr 3) with 9d74
#   Loading A[1][0] (Bank 1, Addr 0) with 7fd6
#   Loading A[1][1] (Bank 1, Addr 1) with 81ee
#   Loading A[1][2] (Bank 1, Addr 2) with 2430
#   Loading A[1][3] (Bank 1, Addr 3) with e3ec
#   Loading A[2][0] (Bank 2, Addr 0) with fe58
#   Loading A[2][1] (Bank 2, Addr 1) with 4672
#   Loading A[2][2] (Bank 2, Addr 2) with 1d1d
#   Loading A[2][3] (Bank 2, Addr 3) with 7099
#   Loading A[3][0] (Bank 3, Addr 0) with 65f5
#   Loading A[3][1] (Bank 3, Addr 1) with f806
#   Loading A[3][2] (Bank 3, Addr 2) with 6641
#   Loading A[3][3] (Bank 3, Addr 3) with 9b90
#   Loading B[0][0] (Bank 0, Addr 0) with ad76
#   Loading B[1][0] (Bank 0, Addr 1) with b97f
#   Loading B[2][0] (Bank 0, Addr 2) with b22e
#   Loading B[3][0] (Bank 0, Addr 3) with 0a85
#   Loading B[0][1] (Bank 1, Addr 0) with 5356
#   Loading B[1][1] (Bank 1, Addr 1) with 1adb
#   Loading B[2][1] (Bank 1, Addr 2) with 970b
#   Loading B[3][1] (Bank 1, Addr 3) with e375
#   Loading B[0][2] (Bank 2, Addr 0) with 4564
#   Loading B[1][2] (Bank 2, Addr 1) with 8545
#   Loading B[2][2] (Bank 2, Addr 2) with 527b
#   Loading B[3][2] (Bank 2, Addr 3) with ec05
#   Loading B[0][3] (Bank 3, Addr 0) with 4aff
#   Loading B[1][3] (Bank 3, Addr 1) with 239a
#   Loading B[2][3] (Bank 3, Addr 2) with 8f34
#   Loading B[3][3] (Bank 3, Addr 3) with e27a
# Matrix loading complete.
# @33035000 Simulating controller signals to execute multiplication...
# @33055000: Starting input feeding sequence...
# @33096000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @33106000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @33385000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 38...
# Test Case 38 FAIL: C[0][0] mismatch! Actual 0, Expected 12c44889c
# Test Case 38 FAIL: C[0][1] mismatch! Actual 0, Expected 1455a6e1a
# Test Case 38 FAIL: C[0][2] mismatch! Actual 0, Expected 1233fdc6e
# Test Case 38 FAIL: C[0][3] mismatch! Actual 0, Expected 13ca353ca
# Test Case 38 FAIL: C[1][0] mismatch! Actual 0, Expected 0d7517ff2
# Test Case 38 FAIL: C[1][1] mismatch! Actual 0, Expected 1171af36a
# Test Case 38 FAIL: C[1][2] mismatch! Actual 0, Expected 144150f6a
# Test Case 38 FAIL: C[1][3] mismatch! Actual 1, Expected 11566058e
# Test Case 38 FAIL: C[2][0] mismatch! Actual 0, Expected 0f845e7d1
# Test Case 38 FAIL: C[2][1] mismatch! Actual 0, Expected 0cf684d42
# Test Case 38 FAIL: C[2][2] mismatch! Actual 0, Expected 0dacdcf06
# Test Case 38 FAIL: C[2][3] mismatch! Actual 0, Expected 0c834980a
# Test Case 38 FAIL: C[3][0] mismatch! Actual 0, Expected 1465cf466
# Test Case 38 FAIL: C[3][1] mismatch! Actual 0, Expected 101c1fd0b
# Test Case 38 FAIL: C[3][2] mismatch! Actual 0, Expected 14d1e915d
# Test Case 38 FAIL: C[3][3] mismatch! Actual 1, Expected 1032ebd7b
# Test Case 38 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @33556000 Starting Test Case 39 of 100
# ===================================================
# Reading test case 39:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @33556000 Matrix Partition
# ===================================================
# @33556000 Matrix partition ended! 
# @33556000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d8a6
#   Loading A[0][1] (Bank 0, Addr 1) with ea63
#   Loading A[0][2] (Bank 0, Addr 2) with 958b
#   Loading A[0][3] (Bank 0, Addr 3) with 383b
#   Loading A[1][0] (Bank 1, Addr 0) with 090c
#   Loading A[1][1] (Bank 1, Addr 1) with ab5b
#   Loading A[1][2] (Bank 1, Addr 2) with fa87
#   Loading A[1][3] (Bank 1, Addr 3) with 0a9e
#   Loading A[2][0] (Bank 2, Addr 0) with b379
#   Loading A[2][1] (Bank 2, Addr 1) with 1bea
#   Loading A[2][2] (Bank 2, Addr 2) with 1f4f
#   Loading A[2][3] (Bank 2, Addr 3) with 09ac
#   Loading A[3][0] (Bank 3, Addr 0) with 4b1a
#   Loading A[3][1] (Bank 3, Addr 1) with 5107
#   Loading A[3][2] (Bank 3, Addr 2) with a88e
#   Loading A[3][3] (Bank 3, Addr 3) with 1d85
#   Loading B[0][0] (Bank 0, Addr 0) with 922e
#   Loading B[1][0] (Bank 0, Addr 1) with d095
#   Loading B[2][0] (Bank 0, Addr 2) with 6e95
#   Loading B[3][0] (Bank 0, Addr 3) with 00b9
#   Loading B[0][1] (Bank 1, Addr 0) with 754c
#   Loading B[1][1] (Bank 1, Addr 1) with 6a4d
#   Loading B[2][1] (Bank 1, Addr 2) with 4a94
#   Loading B[3][1] (Bank 1, Addr 3) with 0520
#   Loading B[0][2] (Bank 2, Addr 0) with aefe
#   Loading B[1][2] (Bank 2, Addr 1) with ba4c
#   Loading B[2][2] (Bank 2, Addr 2) with 2d67
#   Loading B[3][2] (Bank 2, Addr 3) with e8e6
#   Loading B[0][3] (Bank 3, Addr 0) with 2d98
#   Loading B[1][3] (Bank 3, Addr 1) with 9f77
#   Loading B[2][3] (Bank 3, Addr 2) with 15ea
#   Loading B[3][3] (Bank 3, Addr 3) with 1838
# Matrix loading complete.
# @33895000 Simulating controller signals to execute multiplication...
# @33915000: Starting input feeding sequence...
# @33956000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @33966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @34245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 39...
# Test Case 39 FAIL: C[0][0] mismatch! Actual 0, Expected 17b6fdbfd
# Test Case 39 FAIL: C[0][1] mismatch! Actual 0, Expected 0f1487dcb
# Test Case 39 FAIL: C[0][2] mismatch! Actual 0, Expected 18c56e307
# Test Case 39 FAIL: C[0][3] mismatch! Actual 0, Expected 0cab52e8b
# Test Case 39 FAIL: C[1][0] mismatch! Actual 0, Expected 0fd07a2e0
# Test Case 39 FAIL: C[1][1] mismatch! Actual 0, Expected 0947ea9bb
# Test Case 39 FAIL: C[1][2] mismatch! Actual 0, Expected 0b8f96031
# Test Case 39 FAIL: C[1][3] mismatch! Actual 1, Expected 082ccdc63
# Test Case 39 FAIL: C[2][0] mismatch! Actual 0, Expected 08ac6c937
# Test Case 39 FAIL: C[2][1] mismatch! Actual 0, Expected 067235f7a
# Test Case 39 FAIL: C[2][2] mismatch! Actual 0, Expected 09d58a9d7
# Test Case 39 FAIL: C[2][3] mismatch! Actual 0, Expected 034f27b74
# Test Case 39 FAIL: C[3][0] mismatch! Actual 0, Expected 0b5cb9f82
# Test Case 39 FAIL: C[3][1] mismatch! Actual 0, Expected 075c03a8b
# Test Case 39 FAIL: C[3][2] mismatch! Actual 0, Expected 0a70d2880
# Test Case 39 FAIL: C[3][3] mismatch! Actual 1, Expected 05111d195
# Test Case 39 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @34416000 Starting Test Case 40 of 100
# ===================================================
# Reading test case 40:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @34416000 Matrix Partition
# ===================================================
# @34416000 Matrix partition ended! 
# @34416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4282
#   Loading A[0][1] (Bank 0, Addr 1) with 38e5
#   Loading A[0][2] (Bank 0, Addr 2) with 81d1
#   Loading A[0][3] (Bank 0, Addr 3) with 4ce1
#   Loading A[1][0] (Bank 1, Addr 0) with 151e
#   Loading A[1][1] (Bank 1, Addr 1) with dc9a
#   Loading A[1][2] (Bank 1, Addr 2) with 2dd1
#   Loading A[1][3] (Bank 1, Addr 3) with 7822
#   Loading A[2][0] (Bank 2, Addr 0) with cfcd
#   Loading A[2][1] (Bank 2, Addr 1) with ea7c
#   Loading A[2][2] (Bank 2, Addr 2) with ca09
#   Loading A[2][3] (Bank 2, Addr 3) with 9997
#   Loading A[3][0] (Bank 3, Addr 0) with ed34
#   Loading A[3][1] (Bank 3, Addr 1) with c0f2
#   Loading A[3][2] (Bank 3, Addr 2) with d529
#   Loading A[3][3] (Bank 3, Addr 3) with 6200
#   Loading B[0][0] (Bank 0, Addr 0) with 4e89
#   Loading B[1][0] (Bank 0, Addr 1) with e690
#   Loading B[2][0] (Bank 0, Addr 2) with 5096
#   Loading B[3][0] (Bank 0, Addr 3) with dec3
#   Loading B[0][1] (Bank 1, Addr 0) with 02c3
#   Loading B[1][1] (Bank 1, Addr 1) with d186
#   Loading B[2][1] (Bank 1, Addr 2) with ae45
#   Loading B[3][1] (Bank 1, Addr 3) with 085c
#   Loading B[0][2] (Bank 2, Addr 0) with 491a
#   Loading B[1][2] (Bank 2, Addr 1) with a4e0
#   Loading B[2][2] (Bank 2, Addr 2) with c54e
#   Loading B[3][2] (Bank 2, Addr 3) with f98b
#   Loading B[0][3] (Bank 3, Addr 0) with d16c
#   Loading B[1][3] (Bank 3, Addr 1) with 6897
#   Loading B[2][3] (Bank 3, Addr 2) with f4fa
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @34755000 Simulating controller signals to execute multiplication...
# @34775000: Starting input feeding sequence...
# @34816000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @34826000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @35105000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 40...
# Test Case 40 FAIL: C[0][0] mismatch! Actual 0, Expected 0b368003b
# Test Case 40 FAIL: C[0][1] mismatch! Actual 0, Expected 08a2a1e15
# Test Case 40 FAIL: C[0][2] mismatch! Actual 0, Expected 0e6a0496d
# Test Case 40 FAIL: C[0][3] mismatch! Actual 0, Expected 0d8e333a0
# Test Case 40 FAIL: C[1][0] mismatch! Actual 0, Expected 1441e0a0a
# Test Case 40 FAIL: C[1][1] mismatch! Actual 0, Expected 0d7e42803
# Test Case 40 FAIL: C[1][2] mismatch! Actual 0, Expected 12c8578f0
# Test Case 40 FAIL: C[1][3] mismatch! Actual 0, Expected 0aeb352ee
# Test Case 40 FAIL: C[2][0] mismatch! Actual 0, Expected 1d82e19c0
# Test Case 40 FAIL: C[2][1] mismatch! Actual 0, Expected 150b458c0
# Test Case 40 FAIL: C[2][2] mismatch! Actual 0, Expected 203c8ec0d
# Test Case 40 FAIL: C[2][3] mismatch! Actual 0, Expected 1e91d1577
# Test Case 40 FAIL: C[3][0] mismatch! Actual 0, Expected 18eeb18fa
# Test Case 40 FAIL: C[3][1] mismatch! Actual 0, Expected 134c83155
# Test Case 40 FAIL: C[3][2] mismatch! Actual 0, Expected 1c3d07c86
# Test Case 40 FAIL: C[3][3] mismatch! Actual 0, Expected 1effcf8b8
# Test Case 40 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @35276000 Starting Test Case 41 of 100
# ===================================================
# Reading test case 41:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @35276000 Matrix Partition
# ===================================================
# @35276000 Matrix partition ended! 
# @35276000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 48ef
#   Loading A[0][1] (Bank 0, Addr 1) with 3d53
#   Loading A[0][2] (Bank 0, Addr 2) with 9daa
#   Loading A[0][3] (Bank 0, Addr 3) with 9c3a
#   Loading A[1][0] (Bank 1, Addr 0) with 78f0
#   Loading A[1][1] (Bank 1, Addr 1) with 43fe
#   Loading A[1][2] (Bank 1, Addr 2) with 7b4e
#   Loading A[1][3] (Bank 1, Addr 3) with 5b5a
#   Loading A[2][0] (Bank 2, Addr 0) with d4a8
#   Loading A[2][1] (Bank 2, Addr 1) with df3b
#   Loading A[2][2] (Bank 2, Addr 2) with dd70
#   Loading A[2][3] (Bank 2, Addr 3) with b76f
#   Loading A[3][0] (Bank 3, Addr 0) with d4d0
#   Loading A[3][1] (Bank 3, Addr 1) with 587e
#   Loading A[3][2] (Bank 3, Addr 2) with f12c
#   Loading A[3][3] (Bank 3, Addr 3) with 7d86
#   Loading B[0][0] (Bank 0, Addr 0) with 58cc
#   Loading B[1][0] (Bank 0, Addr 1) with b973
#   Loading B[2][0] (Bank 0, Addr 2) with 810f
#   Loading B[3][0] (Bank 0, Addr 3) with 8b27
#   Loading B[0][1] (Bank 1, Addr 0) with 100b
#   Loading B[1][1] (Bank 1, Addr 1) with 2216
#   Loading B[2][1] (Bank 1, Addr 2) with 37cd
#   Loading B[3][1] (Bank 1, Addr 3) with b8ae
#   Loading B[0][2] (Bank 2, Addr 0) with cb0b
#   Loading B[1][2] (Bank 2, Addr 1) with 3272
#   Loading B[2][2] (Bank 2, Addr 2) with a1a9
#   Loading B[3][2] (Bank 2, Addr 3) with ba8e
#   Loading B[0][3] (Bank 3, Addr 0) with ecf2
#   Loading B[1][3] (Bank 3, Addr 1) with e7f2
#   Loading B[2][3] (Bank 3, Addr 2) with e870
#   Loading B[3][3] (Bank 3, Addr 3) with d3ad
# Matrix loading complete.
# @35615000 Simulating controller signals to execute multiplication...
# @35635000: Starting input feeding sequence...
# @35676000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @35686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @35965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 41...
# Test Case 41 FAIL: C[0][0] mismatch! Actual 0, Expected 0ea1fff89
# Test Case 41 FAIL: C[0][1] mismatch! Actual 0, Expected 09fce03f5
# Test Case 41 FAIL: C[0][2] mismatch! Actual 0, Expected 11b56f7a1
# Test Case 41 FAIL: C[0][3] mismatch! Actual 0, Expected 18b658ef6
# Test Case 41 FAIL: C[1][0] mismatch! Actual 0, Expected 0cb0548a2
# Test Case 41 FAIL: C[1][1] mismatch! Actual 0, Expected 06d690cc6
# Test Case 41 FAIL: C[1][2] mismatch! Actual 0, Expected 0fdc0e9d6
# Test Case 41 FAIL: C[1][3] mismatch! Actual 0, Expected 1690796ee
# Test Case 41 FAIL: C[2][0] mismatch! Actual 0, Expected 1bed0c0da
# Test Case 41 FAIL: C[2][1] mismatch! Actual 0, Expected 0dfa5806c
# Test Case 41 FAIL: C[2][2] mismatch! Actual 0, Expected 1e6294e00
# Test Case 41 FAIL: C[2][3] mismatch! Actual 0, Expected 2efcffd99
# Test Case 41 FAIL: C[3][0] mismatch! Actual 0, Expected 147bc1358
# Test Case 41 FAIL: C[3][1] mismatch! Actual 0, Expected 0a83db114
# Test Case 41 FAIL: C[3][2] mismatch! Actual 0, Expected 1adfef76c
# Test Case 41 FAIL: C[3][3] mismatch! Actual 0, Expected 257e9ee8a
# Test Case 41 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @36136000 Starting Test Case 42 of 100
# ===================================================
# Reading test case 42:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @36136000 Matrix Partition
# ===================================================
# @36136000 Matrix partition ended! 
# @36136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dd7f
#   Loading A[0][1] (Bank 0, Addr 1) with 993f
#   Loading A[0][2] (Bank 0, Addr 2) with 975f
#   Loading A[0][3] (Bank 0, Addr 3) with 5212
#   Loading A[1][0] (Bank 1, Addr 0) with 611f
#   Loading A[1][1] (Bank 1, Addr 1) with 0f4e
#   Loading A[1][2] (Bank 1, Addr 2) with a713
#   Loading A[1][3] (Bank 1, Addr 3) with f07e
#   Loading A[2][0] (Bank 2, Addr 0) with d8fb
#   Loading A[2][1] (Bank 2, Addr 1) with bc91
#   Loading A[2][2] (Bank 2, Addr 2) with bec6
#   Loading A[2][3] (Bank 2, Addr 3) with 0aa9
#   Loading A[3][0] (Bank 3, Addr 0) with 13b4
#   Loading A[3][1] (Bank 3, Addr 1) with a272
#   Loading A[3][2] (Bank 3, Addr 2) with dfc8
#   Loading A[3][3] (Bank 3, Addr 3) with e1dc
#   Loading B[0][0] (Bank 0, Addr 0) with 4869
#   Loading B[1][0] (Bank 0, Addr 1) with 05e1
#   Loading B[2][0] (Bank 0, Addr 2) with ef03
#   Loading B[3][0] (Bank 0, Addr 3) with b8af
#   Loading B[0][1] (Bank 1, Addr 0) with cd56
#   Loading B[1][1] (Bank 1, Addr 1) with a0a8
#   Loading B[2][1] (Bank 1, Addr 2) with 0c8a
#   Loading B[3][1] (Bank 1, Addr 3) with 5047
#   Loading B[0][2] (Bank 2, Addr 0) with 3902
#   Loading B[1][2] (Bank 2, Addr 1) with a60d
#   Loading B[2][2] (Bank 2, Addr 2) with c7bd
#   Loading B[3][2] (Bank 2, Addr 3) with 7503
#   Loading B[0][3] (Bank 3, Addr 0) with 77d7
#   Loading B[1][3] (Bank 3, Addr 1) with 12d3
#   Loading B[2][3] (Bank 3, Addr 2) with c6c1
#   Loading B[3][3] (Bank 3, Addr 3) with 0821
# Matrix loading complete.
# @36475000 Simulating controller signals to execute multiplication...
# @36495000: Starting input feeding sequence...
# @36536000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @36546000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @36825000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 42...
# Test Case 42 FAIL: C[0][0] mismatch! Actual 0, Expected 10ab3fde1
# Test Case 42 FAIL: C[0][1] mismatch! Actual 0, Expected 132fb7d36
# Test Case 42 FAIL: C[0][2] mismatch! Actual 0, Expected 130576e8a
# Test Case 42 FAIL: C[0][3] mismatch! Actual 0, Expected 0eb158887
# Test Case 42 FAIL: C[1][0] mismatch! Actual 0, Expected 1654e2fa0
# Test Case 42 FAIL: C[1][1] mismatch! Actual 0, Expected 0ab1a45ca
# Test Case 42 FAIL: C[1][2] mismatch! Actual 0, Expected 10fd589b5
# Test Case 42 FAIL: C[1][3] mismatch! Actual 0, Expected 0b7f0aae4
# Test Case 42 FAIL: C[2][0] mismatch! Actual 0, Expected 0fb81ff3d
# Test Case 42 FAIL: C[2][1] mismatch! Actual 0, Expected 131102615
# Test Case 42 FAIL: C[2][2] mismatch! Actual 0, Expected 144594d7c
# Test Case 42 FAIL: C[2][3] mismatch! Actual 0, Expected 107e4245f
# Test Case 42 FAIL: C[3][0] mismatch! Actual 0, Expected 17d2c91c2
# Test Case 42 FAIL: C[3][1] mismatch! Actual 0, Expected 0c789031c
# Test Case 42 FAIL: C[3][2] mismatch! Actual 0, Expected 18397476e
# Test Case 42 FAIL: C[3][3] mismatch! Actual 0, Expected 0ca148346
# Test Case 42 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @36996000 Starting Test Case 43 of 100
# ===================================================
# Reading test case 43:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @36996000 Matrix Partition
# ===================================================
# @36996000 Matrix partition ended! 
# @36996000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bc9b
#   Loading A[0][1] (Bank 0, Addr 1) with 1077
#   Loading A[0][2] (Bank 0, Addr 2) with e766
#   Loading A[0][3] (Bank 0, Addr 3) with a943
#   Loading A[1][0] (Bank 1, Addr 0) with 8357
#   Loading A[1][1] (Bank 1, Addr 1) with 5b43
#   Loading A[1][2] (Bank 1, Addr 2) with a657
#   Loading A[1][3] (Bank 1, Addr 3) with d744
#   Loading A[2][0] (Bank 2, Addr 0) with 4ead
#   Loading A[2][1] (Bank 2, Addr 1) with fe94
#   Loading A[2][2] (Bank 2, Addr 2) with eee6
#   Loading A[2][3] (Bank 2, Addr 3) with a466
#   Loading A[3][0] (Bank 3, Addr 0) with 3e83
#   Loading A[3][1] (Bank 3, Addr 1) with 9251
#   Loading A[3][2] (Bank 3, Addr 2) with 5926
#   Loading A[3][3] (Bank 3, Addr 3) with b99f
#   Loading B[0][0] (Bank 0, Addr 0) with 20fd
#   Loading B[1][0] (Bank 0, Addr 1) with 3b5e
#   Loading B[2][0] (Bank 0, Addr 2) with 34d3
#   Loading B[3][0] (Bank 0, Addr 3) with 4043
#   Loading B[0][1] (Bank 1, Addr 0) with 526c
#   Loading B[1][1] (Bank 1, Addr 1) with fe4f
#   Loading B[2][1] (Bank 1, Addr 2) with 7aa3
#   Loading B[3][1] (Bank 1, Addr 3) with b6da
#   Loading B[0][2] (Bank 2, Addr 0) with 0e3f
#   Loading B[1][2] (Bank 2, Addr 1) with 6048
#   Loading B[2][2] (Bank 2, Addr 2) with 9cc1
#   Loading B[3][2] (Bank 2, Addr 3) with 8055
#   Loading B[0][3] (Bank 3, Addr 0) with 18e7
#   Loading B[1][3] (Bank 3, Addr 1) with 92bb
#   Loading B[2][3] (Bank 3, Addr 2) with 3e84
#   Loading B[3][3] (Bank 3, Addr 3) with a020
# Matrix loading complete.
# @37335000 Simulating controller signals to execute multiplication...
# @37355000: Starting input feeding sequence...
# @37396000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @37406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @37685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 43...
# Test Case 43 FAIL: C[0][0] mismatch! Actual 0, Expected 0765bbb7c
# Test Case 43 FAIL: C[0][1] mismatch! Actual 0, Expected 134d4151d
# Test Case 43 FAIL: C[0][2] mismatch! Actual 0, Expected 0f33a74c2
# Test Case 43 FAIL: C[0][3] mismatch! Actual 0, Expected 0be29a9c2
# Test Case 43 FAIL: C[1][0] mismatch! Actual 1, Expected 07e72bd16
# Test Case 43 FAIL: C[1][1] mismatch! Actual 0, Expected 16e62f1ae
# Test Case 43 FAIL: C[1][2] mismatch! Actual 0, Expected 0fb65c46c
# Test Case 43 FAIL: C[1][3] mismatch! Actual 1, Expected 0f059cace
# Test Case 43 FAIL: C[2][0] mismatch! Actual 0, Expected 09fbd1d95
# Test Case 43 FAIL: C[2][1] mismatch! Actual 0, Expected 1fe183df6
# Test Case 43 FAIL: C[2][2] mismatch! Actual 0, Expected 148d1c577
# Test Case 43 FAIL: C[2][3] mismatch! Actual 0, Expected 13abcc38f
# Test Case 43 FAIL: C[3][0] mismatch! Actual 1, Expected 06afa1324
# Test Case 43 FAIL: C[3][1] mismatch! Actual 0, Expected 154c3d4db
# Test Case 43 FAIL: C[3][2] mismatch! Actual 1, Expected 0ce259276
# Test Case 43 FAIL: C[3][3] mismatch! Actual 1, Expected 0e3d182d8
# Test Case 43 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @37856000 Starting Test Case 44 of 100
# ===================================================
# Reading test case 44:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @37856000 Matrix Partition
# ===================================================
# @37856000 Matrix partition ended! 
# @37856000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a228
#   Loading A[0][1] (Bank 0, Addr 1) with 70d0
#   Loading A[0][2] (Bank 0, Addr 2) with ddb4
#   Loading A[0][3] (Bank 0, Addr 3) with 14fb
#   Loading A[1][0] (Bank 1, Addr 0) with 1831
#   Loading A[1][1] (Bank 1, Addr 1) with c865
#   Loading A[1][2] (Bank 1, Addr 2) with 7382
#   Loading A[1][3] (Bank 1, Addr 3) with 91b9
#   Loading A[2][0] (Bank 2, Addr 0) with 9573
#   Loading A[2][1] (Bank 2, Addr 1) with ba18
#   Loading A[2][2] (Bank 2, Addr 2) with f870
#   Loading A[2][3] (Bank 2, Addr 3) with 38d8
#   Loading A[3][0] (Bank 3, Addr 0) with d2c6
#   Loading A[3][1] (Bank 3, Addr 1) with 333d
#   Loading A[3][2] (Bank 3, Addr 2) with ca77
#   Loading A[3][3] (Bank 3, Addr 3) with 4269
#   Loading B[0][0] (Bank 0, Addr 0) with b9ea
#   Loading B[1][0] (Bank 0, Addr 1) with 1a37
#   Loading B[2][0] (Bank 0, Addr 2) with 60da
#   Loading B[3][0] (Bank 0, Addr 3) with c509
#   Loading B[0][1] (Bank 1, Addr 0) with e480
#   Loading B[1][1] (Bank 1, Addr 1) with bc9a
#   Loading B[2][1] (Bank 1, Addr 2) with 2c73
#   Loading B[3][1] (Bank 1, Addr 3) with b00f
#   Loading B[0][2] (Bank 2, Addr 0) with caff
#   Loading B[1][2] (Bank 2, Addr 1) with af78
#   Loading B[2][2] (Bank 2, Addr 2) with 6744
#   Loading B[3][2] (Bank 2, Addr 3) with 63b9
#   Loading B[0][3] (Bank 3, Addr 0) with 0093
#   Loading B[1][3] (Bank 3, Addr 1) with 3c58
#   Loading B[2][3] (Bank 3, Addr 2) with f610
#   Loading B[3][3] (Bank 3, Addr 3) with 5187
# Matrix loading complete.
# @38195000 Simulating controller signals to execute multiplication...
# @38215000: Starting input feeding sequence...
# @38256000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @38266000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @38545000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 44...
# Test Case 44 FAIL: C[0][0] mismatch! Actual 0, Expected 0e556ac5b
# Test Case 44 FAIL: C[0][1] mismatch! Actual 0, Expected 118c5a3b1
# Test Case 44 FAIL: C[0][2] mismatch! Actual 0, Expected 12f82b18b
# Test Case 44 FAIL: C[0][3] mismatch! Actual 0, Expected 0f6bbf315
# Test Case 44 FAIL: C[1][0] mismatch! Actual 0, Expected 0c1f26eb2
# Test Case 44 FAIL: C[1][1] mismatch! Actual 0, Expected 121806a7f
# Test Case 44 FAIL: C[1][2] mismatch! Actual 1, Expected 103e59360
# Test Case 44 FAIL: C[1][3] mismatch! Actual 1, Expected 0ccb8f88a
# Test Case 44 FAIL: C[2][0] mismatch! Actual 0, Expected 10954e83e
# Test Case 44 FAIL: C[2][1] mismatch! Actual 0, Expected 160b966e8
# Test Case 44 FAIL: C[2][2] mismatch! Actual 0, Expected 1706ae8a5
# Test Case 44 FAIL: C[2][3] mismatch! Actual 0, Expected 12d18e231
# Test Case 44 FAIL: C[3][0] mismatch! Actual 0, Expected 11e071f1e
# Test Case 44 FAIL: C[3][1] mismatch! Actual 0, Expected 132b4d54e
# Test Case 44 FAIL: C[3][2] mismatch! Actual 1, Expected 135cb284f
# Test Case 44 FAIL: C[3][3] mismatch! Actual 1, Expected 0e44e3079
# Test Case 44 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @38716000 Starting Test Case 45 of 100
# ===================================================
# Reading test case 45:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @38716000 Matrix Partition
# ===================================================
# @38716000 Matrix partition ended! 
# @38716000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 18c5
#   Loading A[0][1] (Bank 0, Addr 1) with 56e8
#   Loading A[0][2] (Bank 0, Addr 2) with 0fad
#   Loading A[0][3] (Bank 0, Addr 3) with 710b
#   Loading A[1][0] (Bank 1, Addr 0) with bb55
#   Loading A[1][1] (Bank 1, Addr 1) with 46c3
#   Loading A[1][2] (Bank 1, Addr 2) with 6723
#   Loading A[1][3] (Bank 1, Addr 3) with cb20
#   Loading A[2][0] (Bank 2, Addr 0) with a59a
#   Loading A[2][1] (Bank 2, Addr 1) with 3ade
#   Loading A[2][2] (Bank 2, Addr 2) with 62a8
#   Loading A[2][3] (Bank 2, Addr 3) with dba6
#   Loading A[3][0] (Bank 3, Addr 0) with 0631
#   Loading A[3][1] (Bank 3, Addr 1) with f3e7
#   Loading A[3][2] (Bank 3, Addr 2) with 84fd
#   Loading A[3][3] (Bank 3, Addr 3) with 1ff2
#   Loading B[0][0] (Bank 0, Addr 0) with 85e1
#   Loading B[1][0] (Bank 0, Addr 1) with 8d10
#   Loading B[2][0] (Bank 0, Addr 2) with e6f4
#   Loading B[3][0] (Bank 0, Addr 3) with d5a3
#   Loading B[0][1] (Bank 1, Addr 0) with 93ee
#   Loading B[1][1] (Bank 1, Addr 1) with e6a3
#   Loading B[2][1] (Bank 1, Addr 2) with 3812
#   Loading B[3][1] (Bank 1, Addr 3) with 8599
#   Loading B[0][2] (Bank 2, Addr 0) with adb6
#   Loading B[1][2] (Bank 2, Addr 1) with fbad
#   Loading B[2][2] (Bank 2, Addr 2) with 3a0e
#   Loading B[3][2] (Bank 2, Addr 3) with c6d6
#   Loading B[0][3] (Bank 3, Addr 0) with 3601
#   Loading B[1][3] (Bank 3, Addr 1) with ef37
#   Loading B[2][3] (Bank 3, Addr 2) with 1ca3
#   Loading B[3][3] (Bank 3, Addr 3) with 1fa3
# Matrix loading complete.
# @39055000 Simulating controller signals to execute multiplication...
# @39075000: Starting input feeding sequence...
# @39116000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @39126000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @39405000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 45...
# Test Case 45 FAIL: C[0][0] mismatch! Actual 0, Expected 0a951d48a
# Test Case 45 FAIL: C[0][1] mismatch! Actual 0, Expected 09b09249b
# Test Case 45 FAIL: C[0][2] mismatch! Actual 0, Expected 0c199fe7e
# Test Case 45 FAIL: C[0][3] mismatch! Actual 0, Expected 0662820c5
# Test Case 45 FAIL: C[1][0] mismatch! Actual 1, Expected 18f8456a1
# Test Case 45 FAIL: C[1][1] mismatch! Actual 0, Expected 12c9826c5
# Test Case 45 FAIL: C[1][2] mismatch! Actual 1, Expected 179d6c0df
# Test Case 45 FAIL: C[1][3] mismatch! Actual 1, Expected 08e479ee3
# Test Case 45 FAIL: C[2][0] mismatch! Actual 0, Expected 18758730c
# Test Case 45 FAIL: C[2][1] mismatch! Actual 0, Expected 11cf6868c
# Test Case 45 FAIL: C[2][2] mismatch! Actual 0, Expected 16b37b576
# Test Case 45 FAIL: C[2][3] mismatch! Actual 0, Expected 0801f2ef6
# Test Case 45 FAIL: C[3][0] mismatch! Actual 1, Expected 11c451fbb
# Test Case 45 FAIL: C[3][1] mismatch! Actual 0, Expected 10d1d3e0f
# Test Case 45 FAIL: C[3][2] mismatch! Actual 0, Expected 12af44c13
# Test Case 45 FAIL: C[3][3] mismatch! Actual 1, Expected 0f80a69ff
# Test Case 45 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @39576000 Starting Test Case 46 of 100
# ===================================================
# Reading test case 46:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @39576000 Matrix Partition
# ===================================================
# @39576000 Matrix partition ended! 
# @39576000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b04d
#   Loading A[0][1] (Bank 0, Addr 1) with 3c77
#   Loading A[0][2] (Bank 0, Addr 2) with 8cf2
#   Loading A[0][3] (Bank 0, Addr 3) with da75
#   Loading A[1][0] (Bank 1, Addr 0) with a6b7
#   Loading A[1][1] (Bank 1, Addr 1) with 7150
#   Loading A[1][2] (Bank 1, Addr 2) with 993b
#   Loading A[1][3] (Bank 1, Addr 3) with 8cc0
#   Loading A[2][0] (Bank 2, Addr 0) with 0ebb
#   Loading A[2][1] (Bank 2, Addr 1) with 12f7
#   Loading A[2][2] (Bank 2, Addr 2) with 49cb
#   Loading A[2][3] (Bank 2, Addr 3) with 2b37
#   Loading A[3][0] (Bank 3, Addr 0) with 75f5
#   Loading A[3][1] (Bank 3, Addr 1) with 5703
#   Loading A[3][2] (Bank 3, Addr 2) with 2279
#   Loading A[3][3] (Bank 3, Addr 3) with 6f22
#   Loading B[0][0] (Bank 0, Addr 0) with 2ad4
#   Loading B[1][0] (Bank 0, Addr 1) with 38d8
#   Loading B[2][0] (Bank 0, Addr 2) with f6e6
#   Loading B[3][0] (Bank 0, Addr 3) with 8330
#   Loading B[0][1] (Bank 1, Addr 0) with 1fb4
#   Loading B[1][1] (Bank 1, Addr 1) with 5a3b
#   Loading B[2][1] (Bank 1, Addr 2) with 7588
#   Loading B[3][1] (Bank 1, Addr 3) with dfea
#   Loading B[0][2] (Bank 2, Addr 0) with 43c7
#   Loading B[1][2] (Bank 2, Addr 1) with f9fa
#   Loading B[2][2] (Bank 2, Addr 2) with c1b9
#   Loading B[3][2] (Bank 2, Addr 3) with dcb7
#   Loading B[0][3] (Bank 3, Addr 0) with a03d
#   Loading B[1][3] (Bank 3, Addr 1) with 0b80
#   Loading B[2][3] (Bank 3, Addr 2) with 49d6
#   Loading B[3][3] (Bank 3, Addr 3) with 1ae4
# Matrix loading complete.
# @39915000 Simulating controller signals to execute multiplication...
# @39935000: Starting input feeding sequence...
# @39976000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @39986000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @40265000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 46...
# Test Case 46 FAIL: C[0][0] mismatch! Actual 0, Expected 122cdb088
# Test Case 46 FAIL: C[0][1] mismatch! Actual 0, Expected 12aee2313
# Test Case 46 FAIL: C[0][2] mismatch! Actual 0, Expected 190b90096
# Test Case 46 FAIL: C[0][3] mismatch! Actual 0, Expected 0b0aac159
# Test Case 46 FAIL: C[1][0] mismatch! Actual 0, Expected 110f6320e
# Test Case 46 FAIL: C[1][1] mismatch! Actual 0, Expected 0fe0ae4f4
# Test Case 46 FAIL: C[1][2] mismatch! Actual 0, Expected 18816c944
# Test Case 46 FAIL: C[1][3] mismatch! Actual 0, Expected 0a86bf6ed
# Test Case 46 FAIL: C[2][0] mismatch! Actual 0, Expected 063fd86f6
# Test Case 46 FAIL: C[2][1] mismatch! Actual 0, Expected 0502f9987
# Test Case 46 FAIL: C[2][2] mismatch! Actual 0, Expected 07384af97
# Test Case 46 FAIL: C[2][3] mismatch! Actual 0, Expected 023e520bd
# Test Case 46 FAIL: C[3][0] mismatch! Actual 0, Expected 081406e82
# Test Case 46 FAIL: C[3][1] mismatch! Actual 0, Expected 09e4e8751
# Test Case 46 FAIL: C[3][2] mismatch! Actual 0, Expected 0ee188020
# Test Case 46 FAIL: C[3][3] mismatch! Actual 0, Expected 0635b9e4f
# Test Case 46 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @40436000 Starting Test Case 47 of 100
# ===================================================
# Reading test case 47:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @40436000 Matrix Partition
# ===================================================
# @40436000 Matrix partition ended! 
# @40436000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 82ca
#   Loading A[0][1] (Bank 0, Addr 1) with f1d3
#   Loading A[0][2] (Bank 0, Addr 2) with 60b5
#   Loading A[0][3] (Bank 0, Addr 3) with 267f
#   Loading A[1][0] (Bank 1, Addr 0) with 5957
#   Loading A[1][1] (Bank 1, Addr 1) with 9025
#   Loading A[1][2] (Bank 1, Addr 2) with d689
#   Loading A[1][3] (Bank 1, Addr 3) with 9c34
#   Loading A[2][0] (Bank 2, Addr 0) with b9ae
#   Loading A[2][1] (Bank 2, Addr 1) with c062
#   Loading A[2][2] (Bank 2, Addr 2) with f593
#   Loading A[2][3] (Bank 2, Addr 3) with 89d7
#   Loading A[3][0] (Bank 3, Addr 0) with 5921
#   Loading A[3][1] (Bank 3, Addr 1) with b0b9
#   Loading A[3][2] (Bank 3, Addr 2) with f32c
#   Loading A[3][3] (Bank 3, Addr 3) with e2b1
#   Loading B[0][0] (Bank 0, Addr 0) with a894
#   Loading B[1][0] (Bank 0, Addr 1) with 3931
#   Loading B[2][0] (Bank 0, Addr 2) with 472b
#   Loading B[3][0] (Bank 0, Addr 3) with fb30
#   Loading B[0][1] (Bank 1, Addr 0) with bffb
#   Loading B[1][1] (Bank 1, Addr 1) with 919b
#   Loading B[2][1] (Bank 1, Addr 2) with 41db
#   Loading B[3][1] (Bank 1, Addr 3) with 68ee
#   Loading B[0][2] (Bank 2, Addr 0) with cd28
#   Loading B[1][2] (Bank 2, Addr 1) with 2d2f
#   Loading B[2][2] (Bank 2, Addr 2) with 25ce
#   Loading B[3][2] (Bank 2, Addr 3) with b99d
#   Loading B[0][3] (Bank 3, Addr 0) with b14d
#   Loading B[1][3] (Bank 3, Addr 1) with 6fd5
#   Loading B[2][3] (Bank 3, Addr 2) with 173c
#   Loading B[3][3] (Bank 3, Addr 3) with 28b7
# Matrix loading complete.
# @40775000 Simulating controller signals to execute multiplication...
# @40795000: Starting input feeding sequence...
# @40836000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @40846000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @41125000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 47...
# Test Case 47 FAIL: C[0][0] mismatch! Actual 0, Expected 0ccce9f62
# Test Case 47 FAIL: C[0][1] mismatch! Actual 1, Expected 11447f1b8
# Test Case 47 FAIL: C[0][2] mismatch! Actual 0, Expected 0bdb00bd6
# Test Case 47 FAIL: C[0][3] mismatch! Actual 0, Expected 0d31efc86
# Test Case 47 FAIL: C[1][0] mismatch! Actual 0, Expected 12ff0e024
# Test Case 47 FAIL: C[1][1] mismatch! Actual 1, Expected 10c32653f
# Test Case 47 FAIL: C[1][2] mismatch! Actual 0, Expected 0f1f96785
# Test Case 47 FAIL: C[1][3] mismatch! Actual 0, Expected 0a928603c
# Test Case 47 FAIL: C[2][0] mismatch! Actual 0, Expected 170c4d75b
# Test Case 47 FAIL: C[2][1] mismatch! Actual 1, Expected 17056c293
# Test Case 47 FAIL: C[2][2] mismatch! Actual 0, Expected 13ef6a853
# Test Case 47 FAIL: C[2][3] mismatch! Actual 0, Expected 100d99b05
# Test Case 47 FAIL: C[3][0] mismatch! Actual 0, Expected 184344c11
# Test Case 47 FAIL: C[3][1] mismatch! Actual 1, Expected 142d3a690
# Test Case 47 FAIL: C[3][2] mismatch! Actual 0, Expected 12ee44a14
# Test Case 47 FAIL: C[3][3] mismatch! Actual 0, Expected 0c50d87b1
# Test Case 47 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @41296000 Starting Test Case 48 of 100
# ===================================================
# Reading test case 48:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @41296000 Matrix Partition
# ===================================================
# @41296000 Matrix partition ended! 
# @41296000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f1df
#   Loading A[0][1] (Bank 0, Addr 1) with 11e7
#   Loading A[0][2] (Bank 0, Addr 2) with cd43
#   Loading A[0][3] (Bank 0, Addr 3) with 0ba5
#   Loading A[1][0] (Bank 1, Addr 0) with 90bd
#   Loading A[1][1] (Bank 1, Addr 1) with b223
#   Loading A[1][2] (Bank 1, Addr 2) with 6737
#   Loading A[1][3] (Bank 1, Addr 3) with f096
#   Loading A[2][0] (Bank 2, Addr 0) with 4302
#   Loading A[2][1] (Bank 2, Addr 1) with f8b1
#   Loading A[2][2] (Bank 2, Addr 2) with 3a8c
#   Loading A[2][3] (Bank 2, Addr 3) with e494
#   Loading A[3][0] (Bank 3, Addr 0) with ba76
#   Loading A[3][1] (Bank 3, Addr 1) with 2a4b
#   Loading A[3][2] (Bank 3, Addr 2) with b39b
#   Loading A[3][3] (Bank 3, Addr 3) with 717f
#   Loading B[0][0] (Bank 0, Addr 0) with 4392
#   Loading B[1][0] (Bank 0, Addr 1) with fbab
#   Loading B[2][0] (Bank 0, Addr 2) with b216
#   Loading B[3][0] (Bank 0, Addr 3) with a272
#   Loading B[0][1] (Bank 1, Addr 0) with 89f2
#   Loading B[1][1] (Bank 1, Addr 1) with fecf
#   Loading B[2][1] (Bank 1, Addr 2) with 0c44
#   Loading B[3][1] (Bank 1, Addr 3) with 15ee
#   Loading B[0][2] (Bank 2, Addr 0) with 0d70
#   Loading B[1][2] (Bank 2, Addr 1) with cc96
#   Loading B[2][2] (Bank 2, Addr 2) with 4685
#   Loading B[3][2] (Bank 2, Addr 3) with 492d
#   Loading B[0][3] (Bank 3, Addr 0) with ed4c
#   Loading B[1][3] (Bank 3, Addr 1) with 11eb
#   Loading B[2][3] (Bank 3, Addr 2) with 6839
#   Loading B[3][3] (Bank 3, Addr 3) with aa23
# Matrix loading complete.
# @41635000 Simulating controller signals to execute multiplication...
# @41655000: Starting input feeding sequence...
# @41696000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @41706000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @41985000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 48...
# Test Case 48 FAIL: C[0][0] mismatch! Actual 0, Expected 0e79e93b7
# Test Case 48 FAIL: C[0][1] mismatch! Actual 0, Expected 09efbadc9
# Test Case 48 FAIL: C[0][2] mismatch! Actual 0, Expected 056dfc4ba
# Test Case 48 FAIL: C[0][3] mismatch! Actual 0, Expected 13cc21cbb
# Test Case 48 FAIL: C[1][0] mismatch! Actual 0, Expected 1b5ca7cb1
# Test Case 48 FAIL: C[1][1] mismatch! Actual 1, Expected 118dab407
# Test Case 48 FAIL: C[1][2] mismatch! Actual 0, Expected 0f728ea23
# Test Case 48 FAIL: C[1][3] mismatch! Actual 1, Expected 15c8b9dfe
# Test Case 48 FAIL: C[2][0] mismatch! Actual 0, Expected 1bff1384f
# Test Case 48 FAIL: C[2][1] mismatch! Actual 1, Expected 13206e1cb
# Test Case 48 FAIL: C[2][2] mismatch! Actual 0, Expected 11bba4356
# Test Case 48 FAIL: C[2][3] mismatch! Actual 0, Expected 0ff443b7b
# Test Case 48 FAIL: C[3][0] mismatch! Actual 0, Expected 11fc12045
# Test Case 48 FAIL: C[3][1] mismatch! Actual 1, Expected 0a0e5ee6f
# Test Case 48 FAIL: C[3][2] mismatch! Actual 0, Expected 07d80f96c
# Test Case 48 FAIL: C[3][3] mismatch! Actual 1, Expected 1445936c1
# Test Case 48 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @42156000 Starting Test Case 49 of 100
# ===================================================
# Reading test case 49:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @42156000 Matrix Partition
# ===================================================
# @42156000 Matrix partition ended! 
# @42156000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6446
#   Loading A[0][1] (Bank 0, Addr 1) with ac39
#   Loading A[0][2] (Bank 0, Addr 2) with fc34
#   Loading A[0][3] (Bank 0, Addr 3) with c555
#   Loading A[1][0] (Bank 1, Addr 0) with 2351
#   Loading A[1][1] (Bank 1, Addr 1) with d8db
#   Loading A[1][2] (Bank 1, Addr 2) with 40c3
#   Loading A[1][3] (Bank 1, Addr 3) with 8ecf
#   Loading A[2][0] (Bank 2, Addr 0) with bb07
#   Loading A[2][1] (Bank 2, Addr 1) with 9e06
#   Loading A[2][2] (Bank 2, Addr 2) with ccfa
#   Loading A[2][3] (Bank 2, Addr 3) with 997f
#   Loading A[3][0] (Bank 3, Addr 0) with 20da
#   Loading A[3][1] (Bank 3, Addr 1) with af80
#   Loading A[3][2] (Bank 3, Addr 2) with edf9
#   Loading A[3][3] (Bank 3, Addr 3) with 7a22
#   Loading B[0][0] (Bank 0, Addr 0) with 8669
#   Loading B[1][0] (Bank 0, Addr 1) with adae
#   Loading B[2][0] (Bank 0, Addr 2) with 1ecf
#   Loading B[3][0] (Bank 0, Addr 3) with 6db2
#   Loading B[0][1] (Bank 1, Addr 0) with 71ea
#   Loading B[1][1] (Bank 1, Addr 1) with 1804
#   Loading B[2][1] (Bank 1, Addr 2) with 68a1
#   Loading B[3][1] (Bank 1, Addr 3) with 0263
#   Loading B[0][2] (Bank 2, Addr 0) with 0f15
#   Loading B[1][2] (Bank 2, Addr 1) with b1db
#   Loading B[2][2] (Bank 2, Addr 2) with 0be5
#   Loading B[3][2] (Bank 2, Addr 3) with fa93
#   Loading B[0][3] (Bank 3, Addr 0) with d489
#   Loading B[1][3] (Bank 3, Addr 1) with 1956
#   Loading B[2][3] (Bank 3, Addr 2) with dc47
#   Loading B[3][3] (Bank 3, Addr 3) with d339
# Matrix loading complete.
# @42495000 Simulating controller signals to execute multiplication...
# @42515000: Starting input feeding sequence...
# @42556000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @42566000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @42845000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 49...
# Test Case 49 FAIL: C[0][0] mismatch! Actual 0, Expected 11c65c49a
# Test Case 49 FAIL: C[0][1] mismatch! Actual 0, Expected 0a5b14d73
# Test Case 49 FAIL: C[0][2] mismatch! Actual 0, Expected 14a6d39d4
# Test Case 49 FAIL: C[0][3] mismatch! Actual 0, Expected 1e01eaef5
# Test Case 49 FAIL: C[1][0] mismatch! Actual 0, Expected 0eaa6ecae
# Test Case 49 FAIL: C[1][1] mismatch! Actual 0, Expected 03fdbbf26
# Test Case 49 FAIL: C[1][2] mismatch! Actual 0, Expected 12788094a
# Test Case 49 FAIL: C[1][3] mismatch! Actual 0, Expected 0e0562a17
# Test Case 49 FAIL: C[2][0] mismatch! Actual 0, Expected 127d8ad67
# Test Case 49 FAIL: C[2][1] mismatch! Actual 0, Expected 0b740e6d5
# Test Case 49 FAIL: C[2][2] mismatch! Actual 0, Expected 118925944
# Test Case 49 FAIL: C[2][3] mismatch! Actual 0, Expected 1d9ef1a60
# Test Case 49 FAIL: C[3][0] mismatch! Actual 0, Expected 0d9495e65
# Test Case 49 FAIL: C[3][1] mismatch! Actual 0, Expected 0817b5003
# Test Case 49 FAIL: C[3][2] mismatch! Actual 0, Expected 0fe7702a5
# Test Case 49 FAIL: C[3][3] mismatch! Actual 0, Expected 15e2dc54b
# Test Case 49 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @43016000 Starting Test Case 50 of 100
# ===================================================
# Reading test case 50:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_50/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @43016000 Matrix Partition
# ===================================================
# @43016000 Matrix partition ended! 
# @43016000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with caeb
#   Loading A[0][1] (Bank 0, Addr 1) with 8ac3
#   Loading A[0][2] (Bank 0, Addr 2) with 7464
#   Loading A[0][3] (Bank 0, Addr 3) with 7a69
#   Loading A[1][0] (Bank 1, Addr 0) with d63d
#   Loading A[1][1] (Bank 1, Addr 1) with 2636
#   Loading A[1][2] (Bank 1, Addr 2) with fe33
#   Loading A[1][3] (Bank 1, Addr 3) with 2a45
#   Loading A[2][0] (Bank 2, Addr 0) with 7b56
#   Loading A[2][1] (Bank 2, Addr 1) with bbe5
#   Loading A[2][2] (Bank 2, Addr 2) with e5a7
#   Loading A[2][3] (Bank 2, Addr 3) with b91d
#   Loading A[3][0] (Bank 3, Addr 0) with aaac
#   Loading A[3][1] (Bank 3, Addr 1) with 5543
#   Loading A[3][2] (Bank 3, Addr 2) with 28e2
#   Loading A[3][3] (Bank 3, Addr 3) with a838
#   Loading B[0][0] (Bank 0, Addr 0) with a718
#   Loading B[1][0] (Bank 0, Addr 1) with 94ae
#   Loading B[2][0] (Bank 0, Addr 2) with 3e3c
#   Loading B[3][0] (Bank 0, Addr 3) with 5f77
#   Loading B[0][1] (Bank 1, Addr 0) with 2c15
#   Loading B[1][1] (Bank 1, Addr 1) with ffac
#   Loading B[2][1] (Bank 1, Addr 2) with cab9
#   Loading B[3][1] (Bank 1, Addr 3) with 8fb6
#   Loading B[0][2] (Bank 2, Addr 0) with 9eaa
#   Loading B[1][2] (Bank 2, Addr 1) with 89a9
#   Loading B[2][2] (Bank 2, Addr 2) with 76b1
#   Loading B[3][2] (Bank 2, Addr 3) with efad
#   Loading B[0][3] (Bank 3, Addr 0) with 0f2e
#   Loading B[1][3] (Bank 3, Addr 1) with 7d0e
#   Loading B[2][3] (Bank 3, Addr 2) with 8517
#   Loading B[3][3] (Bank 3, Addr 3) with f6c1
# Matrix loading complete.
# @43355000 Simulating controller signals to execute multiplication...
# @43375000: Starting input feeding sequence...
# @43416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @43426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @43705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 50...
# Test Case 50 FAIL: C[0][0] mismatch! Actual 0, Expected 11efabcd1
# Test Case 50 FAIL: C[0][1] mismatch! Actual 0, Expected 14e693335
# Test Case 50 FAIL: C[0][2] mismatch! Actual 0, Expected 170f310e2
# Test Case 50 FAIL: C[0][3] mismatch! Actual 0, Expected 10250a109
# Test Case 50 FAIL: C[1][0] mismatch! Actual 0, Expected 0ef964073
# Test Case 50 FAIL: C[1][1] mismatch! Actual 0, Expected 12c140e32
# Test Case 50 FAIL: C[1][2] mismatch! Actual 0, Expected 136c2490c
# Test Case 50 FAIL: C[1][3] mismatch! Actual 0, Expected 0cc440884
# Test Case 50 FAIL: C[2][0] mismatch! Actual 0, Expected 13a7cd855
# Test Case 50 FAIL: C[2][1] mismatch! Actual 0, Expected 1eeaac837
# Test Case 50 FAIL: C[2][2] mismatch! Actual 0, Expected 1c9438059
# Test Case 50 FAIL: C[2][3] mismatch! Actual 0, Expected 18ceb1cd8
# Test Case 50 FAIL: C[3][0] mismatch! Actual 0, Expected 0e9962eaa
# Test Case 50 FAIL: C[3][1] mismatch! Actual 0, Expected 0f1595542
# Test Case 50 FAIL: C[3][2] mismatch! Actual 0, Expected 14813088d
# Test Case 50 FAIL: C[3][3] mismatch! Actual 0, Expected 0eb2ad818
# Test Case 50 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @43876000 Starting Test Case 51 of 100
# ===================================================
# Reading test case 51:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_51/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @43876000 Matrix Partition
# ===================================================
# @43876000 Matrix partition ended! 
# @43876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b94a
#   Loading A[0][1] (Bank 0, Addr 1) with 65c8
#   Loading A[0][2] (Bank 0, Addr 2) with 2dec
#   Loading A[0][3] (Bank 0, Addr 3) with 6b4e
#   Loading A[1][0] (Bank 1, Addr 0) with aaca
#   Loading A[1][1] (Bank 1, Addr 1) with e1d0
#   Loading A[1][2] (Bank 1, Addr 2) with ff83
#   Loading A[1][3] (Bank 1, Addr 3) with 6af9
#   Loading A[2][0] (Bank 2, Addr 0) with 02d1
#   Loading A[2][1] (Bank 2, Addr 1) with 4a3e
#   Loading A[2][2] (Bank 2, Addr 2) with 2067
#   Loading A[2][3] (Bank 2, Addr 3) with 244c
#   Loading A[3][0] (Bank 3, Addr 0) with 87a3
#   Loading A[3][1] (Bank 3, Addr 1) with ca6d
#   Loading A[3][2] (Bank 3, Addr 2) with 0323
#   Loading A[3][3] (Bank 3, Addr 3) with 37a9
#   Loading B[0][0] (Bank 0, Addr 0) with a0dd
#   Loading B[1][0] (Bank 0, Addr 1) with 48c5
#   Loading B[2][0] (Bank 0, Addr 2) with f5c6
#   Loading B[3][0] (Bank 0, Addr 3) with 6c69
#   Loading B[0][1] (Bank 1, Addr 0) with 4c0f
#   Loading B[1][1] (Bank 1, Addr 1) with d24a
#   Loading B[2][1] (Bank 1, Addr 2) with b3e8
#   Loading B[3][1] (Bank 1, Addr 3) with d834
#   Loading B[0][2] (Bank 2, Addr 0) with 9956
#   Loading B[1][2] (Bank 2, Addr 1) with 0690
#   Loading B[2][2] (Bank 2, Addr 2) with 8108
#   Loading B[3][2] (Bank 2, Addr 3) with 5131
#   Loading B[0][3] (Bank 3, Addr 0) with 082c
#   Loading B[1][3] (Bank 3, Addr 1) with 8ba3
#   Loading B[2][3] (Bank 3, Addr 2) with 0cf6
#   Loading B[3][3] (Bank 3, Addr 3) with 21ac
# Matrix loading complete.
# @44215000 Simulating controller signals to execute multiplication...
# @44235000: Starting input feeding sequence...
# @44276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @44286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @44565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 51...
# Test Case 51 FAIL: C[0][0] mismatch! Actual 0, Expected 0eae41350
# Test Case 51 FAIL: C[0][1] mismatch! Actual 0, Expected 1058d8cde
# Test Case 51 FAIL: C[0][2] mismatch! Actual 0, Expected 0aac4fcaa
# Test Case 51 FAIL: C[0][3] mismatch! Actual 0, Expected 04ddee640
# Test Case 51 FAIL: C[1][0] mismatch! Actual 1, Expected 1ce1cdfe5
# Test Case 51 FAIL: C[1][1] mismatch! Actual 1, Expected 1fa23da42
# Test Case 51 FAIL: C[1][2] mismatch! Actual 0, Expected 10ecc409d
# Test Case 51 FAIL: C[1][3] mismatch! Actual 0, Expected 09ba10656
# Test Case 51 FAIL: C[2][0] mismatch! Actual 0, Expected 0455a35f9
# Test Case 51 FAIL: C[2][1] mismatch! Actual 0, Expected 0733f69f3
# Test Case 51 FAIL: C[2][2] mismatch! Actual 0, Expected 01f6efada
# Test Case 51 FAIL: C[2][3] mismatch! Actual 0, Expected 02f001970
# Test Case 51 FAIL: C[3][0] mismatch! Actual 1, Expected 0a95a71fb
# Test Case 51 FAIL: C[3][1] mismatch! Actual 1, Expected 0ffca7b1b
# Test Case 51 FAIL: C[3][2] mismatch! Actual 0, Expected 069aa4383
# Test Case 51 FAIL: C[3][3] mismatch! Actual 0, Expected 07a395099
# Test Case 51 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @44736000 Starting Test Case 52 of 100
# ===================================================
# Reading test case 52:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_52/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @44736000 Matrix Partition
# ===================================================
# @44736000 Matrix partition ended! 
# @44736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 70f2
#   Loading A[0][1] (Bank 0, Addr 1) with 764d
#   Loading A[0][2] (Bank 0, Addr 2) with ba25
#   Loading A[0][3] (Bank 0, Addr 3) with 055a
#   Loading A[1][0] (Bank 1, Addr 0) with 7b1e
#   Loading A[1][1] (Bank 1, Addr 1) with f3bf
#   Loading A[1][2] (Bank 1, Addr 2) with fbdc
#   Loading A[1][3] (Bank 1, Addr 3) with 8483
#   Loading A[2][0] (Bank 2, Addr 0) with 9b94
#   Loading A[2][1] (Bank 2, Addr 1) with bf10
#   Loading A[2][2] (Bank 2, Addr 2) with a986
#   Loading A[2][3] (Bank 2, Addr 3) with 8d57
#   Loading A[3][0] (Bank 3, Addr 0) with ed32
#   Loading A[3][1] (Bank 3, Addr 1) with 3c11
#   Loading A[3][2] (Bank 3, Addr 2) with b2fe
#   Loading A[3][3] (Bank 3, Addr 3) with 34b4
#   Loading B[0][0] (Bank 0, Addr 0) with 6bf5
#   Loading B[1][0] (Bank 0, Addr 1) with 3832
#   Loading B[2][0] (Bank 0, Addr 2) with 243d
#   Loading B[3][0] (Bank 0, Addr 3) with b1da
#   Loading B[0][1] (Bank 1, Addr 0) with cc1b
#   Loading B[1][1] (Bank 1, Addr 1) with bd08
#   Loading B[2][1] (Bank 1, Addr 2) with 8a65
#   Loading B[3][1] (Bank 1, Addr 3) with 82a8
#   Loading B[0][2] (Bank 2, Addr 0) with a477
#   Loading B[1][2] (Bank 2, Addr 1) with dce4
#   Loading B[2][2] (Bank 2, Addr 2) with 699d
#   Loading B[3][2] (Bank 2, Addr 3) with 437e
#   Loading B[0][3] (Bank 3, Addr 0) with ad22
#   Loading B[1][3] (Bank 3, Addr 1) with 7128
#   Loading B[2][3] (Bank 3, Addr 2) with 3fde
#   Loading B[3][3] (Bank 3, Addr 3) with e961
# Matrix loading complete.
# @45075000 Simulating controller signals to execute multiplication...
# @45095000: Starting input feeding sequence...
# @45136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @45146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @45425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 52...
# Test Case 52 FAIL: C[0][0] mismatch! Actual 0, Expected 067aa8819
# Test Case 52 FAIL: C[0][1] mismatch! Actual 0, Expected 118c3e697
# Test Case 52 FAIL: C[0][2] mismatch! Actual 0, Expected 0fcd7970f
# Test Case 52 FAIL: C[0][3] mismatch! Actual 0, Expected 0b3fe7b5c
# Test Case 52 FAIL: C[1][0] mismatch! Actual 1, Expected 0e9231efe
# Test Case 52 FAIL: C[1][1] mismatch! Actual 1, Expected 1e1edf6e6
# Test Case 52 FAIL: C[1][2] mismatch! Actual 0, Expected 1ac40e074
# Test Case 52 FAIL: C[1][3] mismatch! Actual 0, Expected 176a4023f
# Test Case 52 FAIL: C[2][0] mismatch! Actual 0, Expected 0e5bd51c8
# Test Case 52 FAIL: C[2][1] mismatch! Actual 0, Expected 1ace72e12
# Test Case 52 FAIL: C[2][2] mismatch! Actual 0, Expected 174024f0c
# Test Case 52 FAIL: C[2][3] mismatch! Actual 0, Expected 168d05153
# Test Case 52 FAIL: C[3][0] mismatch! Actual 1, Expected 0af2a0dfa
# Test Case 52 FAIL: C[3][1] mismatch! Actual 1, Expected 16520d224
# Test Case 52 FAIL: C[3][2] mismatch! Actual 1, Expected 123f365c0
# Test Case 52 FAIL: C[3][3] mismatch! Actual 0, Expected 117aab4c4
# Test Case 52 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @45596000 Starting Test Case 53 of 100
# ===================================================
# Reading test case 53:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_53/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @45596000 Matrix Partition
# ===================================================
# @45596000 Matrix partition ended! 
# @45596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8957
#   Loading A[0][1] (Bank 0, Addr 1) with ded0
#   Loading A[0][2] (Bank 0, Addr 2) with 8306
#   Loading A[0][3] (Bank 0, Addr 3) with a73d
#   Loading A[1][0] (Bank 1, Addr 0) with b6d0
#   Loading A[1][1] (Bank 1, Addr 1) with 78fc
#   Loading A[1][2] (Bank 1, Addr 2) with 7d28
#   Loading A[1][3] (Bank 1, Addr 3) with 5afc
#   Loading A[2][0] (Bank 2, Addr 0) with 99f8
#   Loading A[2][1] (Bank 2, Addr 1) with f6dd
#   Loading A[2][2] (Bank 2, Addr 2) with c68e
#   Loading A[2][3] (Bank 2, Addr 3) with 8bd4
#   Loading A[3][0] (Bank 3, Addr 0) with f302
#   Loading A[3][1] (Bank 3, Addr 1) with e583
#   Loading A[3][2] (Bank 3, Addr 2) with 9371
#   Loading A[3][3] (Bank 3, Addr 3) with d1f4
#   Loading B[0][0] (Bank 0, Addr 0) with 59f9
#   Loading B[1][0] (Bank 0, Addr 1) with 1848
#   Loading B[2][0] (Bank 0, Addr 2) with 002e
#   Loading B[3][0] (Bank 0, Addr 3) with 8646
#   Loading B[0][1] (Bank 1, Addr 0) with 6d34
#   Loading B[1][1] (Bank 1, Addr 1) with 0b16
#   Loading B[2][1] (Bank 1, Addr 2) with 0d23
#   Loading B[3][1] (Bank 1, Addr 3) with dbe7
#   Loading B[0][2] (Bank 2, Addr 0) with c07f
#   Loading B[1][2] (Bank 2, Addr 1) with 9fd0
#   Loading B[2][2] (Bank 2, Addr 2) with 35a8
#   Loading B[3][2] (Bank 2, Addr 3) with ca02
#   Loading B[0][3] (Bank 3, Addr 0) with aef4
#   Loading B[1][3] (Bank 3, Addr 1) with e219
#   Loading B[2][3] (Bank 3, Addr 2) with 0a28
#   Loading B[3][3] (Bank 3, Addr 3) with 8ae0
# Matrix loading complete.
# @45935000 Simulating controller signals to execute multiplication...
# @45955000: Starting input feeding sequence...
# @45996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @46006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @46285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 53...
# Test Case 53 FAIL: C[0][0] mismatch! Actual 0, Expected 09d3632e1
# Test Case 53 FAIL: C[0][1] mismatch! Actual 0, Expected 0da9d5569
# Test Case 53 FAIL: C[0][2] mismatch! Actual 0, Expected 191cb4593
# Test Case 53 FAIL: C[0][3] mismatch! Actual 0, Expected 18291578c
# Test Case 53 FAIL: C[1][0] mismatch! Actual 0, Expected 07b890d48
# Test Case 53 FAIL: C[1][1] mismatch! Actual 0, Expected 0a7ccbdc4
# Test Case 53 FAIL: C[1][2] mismatch! Actual 0, Expected 137047a28
# Test Case 53 FAIL: C[1][3] mismatch! Actual 0, Expected 11e1c799c
# Test Case 53 FAIL: C[2][0] mismatch! Actual 0, Expected 0970201dc
# Test Case 53 FAIL: C[2][1] mismatch! Actual 0, Expected 0ceab7814
# Test Case 53 FAIL: C[2][2] mismatch! Actual 0, Expected 1a5d64b70
# Test Case 53 FAIL: C[2][3] mismatch! Actual 0, Expected 196fbb9a5
# Test Case 53 FAIL: C[3][0] mismatch! Actual 0, Expected 0d96682d0
# Test Case 53 FAIL: C[3][1] mismatch! Actual 0, Expected 12d83a549
# Test Case 53 FAIL: C[3][2] mismatch! Actual 0, Expected 20a94387e
# Test Case 53 FAIL: C[3][3] mismatch! Actual 0, Expected 1e885badb
# Test Case 53 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @46456000 Starting Test Case 54 of 100
# ===================================================
# Reading test case 54:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_54/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @46456000 Matrix Partition
# ===================================================
# @46456000 Matrix partition ended! 
# @46456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d78c
#   Loading A[0][1] (Bank 0, Addr 1) with d9a7
#   Loading A[0][2] (Bank 0, Addr 2) with 5693
#   Loading A[0][3] (Bank 0, Addr 3) with 2365
#   Loading A[1][0] (Bank 1, Addr 0) with 966f
#   Loading A[1][1] (Bank 1, Addr 1) with 9831
#   Loading A[1][2] (Bank 1, Addr 2) with 9ed2
#   Loading A[1][3] (Bank 1, Addr 3) with f00f
#   Loading A[2][0] (Bank 2, Addr 0) with 34be
#   Loading A[2][1] (Bank 2, Addr 1) with 0ad9
#   Loading A[2][2] (Bank 2, Addr 2) with 7cb4
#   Loading A[2][3] (Bank 2, Addr 3) with 3235
#   Loading A[3][0] (Bank 3, Addr 0) with 9a2a
#   Loading A[3][1] (Bank 3, Addr 1) with f72e
#   Loading A[3][2] (Bank 3, Addr 2) with f1e3
#   Loading A[3][3] (Bank 3, Addr 3) with 07ac
#   Loading B[0][0] (Bank 0, Addr 0) with 66c4
#   Loading B[1][0] (Bank 0, Addr 1) with 699d
#   Loading B[2][0] (Bank 0, Addr 2) with 2ed4
#   Loading B[3][0] (Bank 0, Addr 3) with ab8b
#   Loading B[0][1] (Bank 1, Addr 0) with 218b
#   Loading B[1][1] (Bank 1, Addr 1) with 307d
#   Loading B[2][1] (Bank 1, Addr 2) with 50db
#   Loading B[3][1] (Bank 1, Addr 3) with 8236
#   Loading B[0][2] (Bank 2, Addr 0) with 0130
#   Loading B[1][2] (Bank 2, Addr 1) with ea3d
#   Loading B[2][2] (Bank 2, Addr 2) with 321a
#   Loading B[3][2] (Bank 2, Addr 3) with 374b
#   Loading B[0][3] (Bank 3, Addr 0) with 4a74
#   Loading B[1][3] (Bank 3, Addr 1) with 40c6
#   Loading B[2][3] (Bank 3, Addr 2) with 8fa7
#   Loading B[3][3] (Bank 3, Addr 3) with d81e
# Matrix loading complete.
# @46795000 Simulating controller signals to execute multiplication...
# @46815000: Starting input feeding sequence...
# @46856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @46866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @47145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 54...
# Test Case 54 FAIL: C[0][0] mismatch! Actual 0, Expected 0d7df942e
# Test Case 54 FAIL: C[0][1] mismatch! Actual 0, Expected 072d06c9e
# Test Case 54 FAIL: C[0][2] mismatch! Actual 0, Expected 0e0bd0b90
# Test Case 54 FAIL: C[0][3] mismatch! Actual 0, Expected 0c4382f55
# Test Case 54 FAIL: C[1][0] mismatch! Actual 0, Expected 139167516
# Test Case 54 FAIL: C[1][1] mismatch! Actual 0, Expected 0dccd3c02
# Test Case 54 FAIL: C[1][2] mismatch! Actual 0, Expected 0dee26436
# Test Case 54 FAIL: C[1][3] mismatch! Actual 0, Expected 17609e8f2
# Test Case 54 FAIL: C[2][0] mismatch! Actual 0, Expected 0521a0464
# Test Case 54 FAIL: C[2][1] mismatch! Actual 0, Expected 049e38c49
# Test Case 54 FAIL: C[2][2] mismatch! Actual 0, Expected 02d6b7c24
# Test Case 54 FAIL: C[2][3] mismatch! Actual 0, Expected 08271f590
# Test Case 54 FAIL: C[3][0] mismatch! Actual 0, Expected 0d53f61be
# Test Case 54 FAIL: C[3][1] mismatch! Actual 0, Expected 0935143bd
# Test Case 54 FAIL: C[3][2] mismatch! Actual 0, Expected 113e11e48
# Test Case 54 FAIL: C[3][3] mismatch! Actual 0, Expected 0f9964ad9
# Test Case 54 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @47316000 Starting Test Case 55 of 100
# ===================================================
# Reading test case 55:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_55/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @47316000 Matrix Partition
# ===================================================
# @47316000 Matrix partition ended! 
# @47316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with af76
#   Loading A[0][1] (Bank 0, Addr 1) with fc16
#   Loading A[0][2] (Bank 0, Addr 2) with 02a3
#   Loading A[0][3] (Bank 0, Addr 3) with 5b6d
#   Loading A[1][0] (Bank 1, Addr 0) with 4a33
#   Loading A[1][1] (Bank 1, Addr 1) with f8b1
#   Loading A[1][2] (Bank 1, Addr 2) with 51ac
#   Loading A[1][3] (Bank 1, Addr 3) with ec6a
#   Loading A[2][0] (Bank 2, Addr 0) with 62c6
#   Loading A[2][1] (Bank 2, Addr 1) with efdc
#   Loading A[2][2] (Bank 2, Addr 2) with d0ae
#   Loading A[2][3] (Bank 2, Addr 3) with 6d7d
#   Loading A[3][0] (Bank 3, Addr 0) with d55f
#   Loading A[3][1] (Bank 3, Addr 1) with 6ece
#   Loading A[3][2] (Bank 3, Addr 2) with 54bc
#   Loading A[3][3] (Bank 3, Addr 3) with 186d
#   Loading B[0][0] (Bank 0, Addr 0) with 7963
#   Loading B[1][0] (Bank 0, Addr 1) with 7415
#   Loading B[2][0] (Bank 0, Addr 2) with f774
#   Loading B[3][0] (Bank 0, Addr 3) with 32c3
#   Loading B[0][1] (Bank 1, Addr 0) with 5e72
#   Loading B[1][1] (Bank 1, Addr 1) with f36e
#   Loading B[2][1] (Bank 1, Addr 2) with 4fc5
#   Loading B[3][1] (Bank 1, Addr 3) with 5197
#   Loading B[0][2] (Bank 2, Addr 0) with 78f9
#   Loading B[1][2] (Bank 2, Addr 1) with 066c
#   Loading B[2][2] (Bank 2, Addr 2) with 5e04
#   Loading B[3][2] (Bank 2, Addr 3) with e384
#   Loading B[0][3] (Bank 3, Addr 0) with e043
#   Loading B[1][3] (Bank 3, Addr 1) with 09a4
#   Loading B[2][3] (Bank 3, Addr 2) with 31b6
#   Loading B[3][3] (Bank 3, Addr 3) with f20d
# Matrix loading complete.
# @47655000 Simulating controller signals to execute multiplication...
# @47675000: Starting input feeding sequence...
# @47716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @47726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @48005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 55...
# Test Case 55 FAIL: C[0][0] mismatch! Actual 0, Expected 0da2eab53
# Test Case 55 FAIL: C[0][1] mismatch! Actual 1, Expected 14e6668ba
# Test Case 55 FAIL: C[0][2] mismatch! Actual 0, Expected 0ab7586ce
# Test Case 55 FAIL: C[0][3] mismatch! Actual 1, Expected 0fa283165
# Test Case 55 FAIL: C[1][0] mismatch! Actual 1, Expected 111c625ec
# Test Case 55 FAIL: C[1][1] mismatch! Actual 0, Expected 16ca68da6
# Test Case 55 FAIL: C[1][2] mismatch! Actual 0, Expected 11967779f
# Test Case 55 FAIL: C[1][3] mismatch! Actual 1, Expected 139c1c767
# Test Case 55 FAIL: C[2][0] mismatch! Actual 0, Expected 17b0566ad
# Test Case 55 FAIL: C[2][1] mismatch! Actual 0, Expected 16c70fe55
# Test Case 55 FAIL: C[2][2] mismatch! Actual 0, Expected 0e2a2ad92
# Test Case 55 FAIL: C[2][3] mismatch! Actual 1, Expected 0ef9ae1cf
# Test Case 55 FAIL: C[3][0] mismatch! Actual 1, Expected 0ee2a87da
# Test Case 55 FAIL: C[3][1] mismatch! Actual 0, Expected 0da452ac9
# Test Case 55 FAIL: C[3][2] mismatch! Actual 1, Expected 09c6f3e73
# Test Case 55 FAIL: C[3][3] mismatch! Actual 1, Expected 0e6a3b306
# Test Case 55 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @48176000 Starting Test Case 56 of 100
# ===================================================
# Reading test case 56:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_56/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @48176000 Matrix Partition
# ===================================================
# @48176000 Matrix partition ended! 
# @48176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 26b6
#   Loading A[0][1] (Bank 0, Addr 1) with f6ae
#   Loading A[0][2] (Bank 0, Addr 2) with 77e0
#   Loading A[0][3] (Bank 0, Addr 3) with a144
#   Loading A[1][0] (Bank 1, Addr 0) with 1485
#   Loading A[1][1] (Bank 1, Addr 1) with 3867
#   Loading A[1][2] (Bank 1, Addr 2) with 597e
#   Loading A[1][3] (Bank 1, Addr 3) with 2b89
#   Loading A[2][0] (Bank 2, Addr 0) with 3466
#   Loading A[2][1] (Bank 2, Addr 1) with ce86
#   Loading A[2][2] (Bank 2, Addr 2) with a185
#   Loading A[2][3] (Bank 2, Addr 3) with 03b1
#   Loading A[3][0] (Bank 3, Addr 0) with 3474
#   Loading A[3][1] (Bank 3, Addr 1) with 2baf
#   Loading A[3][2] (Bank 3, Addr 2) with fe3c
#   Loading A[3][3] (Bank 3, Addr 3) with 0ce8
#   Loading B[0][0] (Bank 0, Addr 0) with 9c53
#   Loading B[1][0] (Bank 0, Addr 1) with 5977
#   Loading B[2][0] (Bank 0, Addr 2) with 6f16
#   Loading B[3][0] (Bank 0, Addr 3) with 168b
#   Loading B[0][1] (Bank 1, Addr 0) with 75ae
#   Loading B[1][1] (Bank 1, Addr 1) with 4d84
#   Loading B[2][1] (Bank 1, Addr 2) with 4e4c
#   Loading B[3][1] (Bank 1, Addr 3) with b14b
#   Loading B[0][2] (Bank 2, Addr 0) with 9d35
#   Loading B[1][2] (Bank 2, Addr 1) with abf2
#   Loading B[2][2] (Bank 2, Addr 2) with e697
#   Loading B[3][2] (Bank 2, Addr 3) with 6c9c
#   Loading B[0][3] (Bank 3, Addr 0) with 5b8f
#   Loading B[1][3] (Bank 3, Addr 1) with b174
#   Loading B[2][3] (Bank 3, Addr 2) with 0a13
#   Loading B[3][3] (Bank 3, Addr 3) with 5e4a
# Matrix loading complete.
# @48515000 Simulating controller signals to execute multiplication...
# @48535000: Starting input feeding sequence...
# @48576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @48586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @48865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 56...
# Test Case 56 FAIL: C[0][0] mismatch! Actual 0, Expected 0b0107310
# Test Case 56 FAIL: C[0][1] mismatch! Actual 0, Expected 0f0d61ed8
# Test Case 56 FAIL: C[0][2] mismatch! Actual 0, Expected 16dd9f6ba
# Test Case 56 FAIL: C[0][3] mismatch! Actual 0, Expected 0f8f3a1ca
# Test Case 56 FAIL: C[1][0] mismatch! Actual 1, Expected 04ae87637
# Test Case 56 FAIL: C[1][1] mismatch! Actual 0, Expected 054083b0d
# Test Case 56 FAIL: C[1][2] mismatch! Actual 1, Expected 095903fb5
# Test Case 56 FAIL: C[1][3] mismatch! Actual 1, Expected 041fdf6eb
# Test Case 56 FAIL: C[2][0] mismatch! Actual 0, Expected 0ae957ee5
# Test Case 56 FAIL: C[2][1] mismatch! Actual 0, Expected 08a93f5c3
# Test Case 56 FAIL: C[2][2] mismatch! Actual 0, Expected 13df1d319
# Test Case 56 FAIL: C[2][3] mismatch! Actual 0, Expected 0a99cffbb
# Test Case 56 FAIL: C[3][0] mismatch! Actual 1, Expected 09ec0a615
# Test Case 56 FAIL: C[3][1] mismatch! Actual 0, Expected 07c08c5dc
# Test Case 56 FAIL: C[3][2] mismatch! Actual 1, Expected 12806cb36
# Test Case 56 FAIL: C[3][3] mismatch! Actual 1, Expected 03fcc749c
# Test Case 56 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @49036000 Starting Test Case 57 of 100
# ===================================================
# Reading test case 57:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_57/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @49036000 Matrix Partition
# ===================================================
# @49036000 Matrix partition ended! 
# @49036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 004c
#   Loading A[0][1] (Bank 0, Addr 1) with 570d
#   Loading A[0][2] (Bank 0, Addr 2) with 72a5
#   Loading A[0][3] (Bank 0, Addr 3) with 6352
#   Loading A[1][0] (Bank 1, Addr 0) with 5741
#   Loading A[1][1] (Bank 1, Addr 1) with 78a8
#   Loading A[1][2] (Bank 1, Addr 2) with e5e0
#   Loading A[1][3] (Bank 1, Addr 3) with 3fb9
#   Loading A[2][0] (Bank 2, Addr 0) with b626
#   Loading A[2][1] (Bank 2, Addr 1) with 9528
#   Loading A[2][2] (Bank 2, Addr 2) with 1511
#   Loading A[2][3] (Bank 2, Addr 3) with 6fd8
#   Loading A[3][0] (Bank 3, Addr 0) with c6e1
#   Loading A[3][1] (Bank 3, Addr 1) with dcce
#   Loading A[3][2] (Bank 3, Addr 2) with b2d2
#   Loading A[3][3] (Bank 3, Addr 3) with 4a1a
#   Loading B[0][0] (Bank 0, Addr 0) with 783c
#   Loading B[1][0] (Bank 0, Addr 1) with 0b2d
#   Loading B[2][0] (Bank 0, Addr 2) with a4ed
#   Loading B[3][0] (Bank 0, Addr 3) with 8e5c
#   Loading B[0][1] (Bank 1, Addr 0) with e8fd
#   Loading B[1][1] (Bank 1, Addr 1) with 00be
#   Loading B[2][1] (Bank 1, Addr 2) with de57
#   Loading B[3][1] (Bank 1, Addr 3) with 2e90
#   Loading B[0][2] (Bank 2, Addr 0) with 83a8
#   Loading B[1][2] (Bank 2, Addr 1) with 90bd
#   Loading B[2][2] (Bank 2, Addr 2) with 8036
#   Loading B[3][2] (Bank 2, Addr 3) with a6a4
#   Loading B[0][3] (Bank 3, Addr 0) with ef22
#   Loading B[1][3] (Bank 3, Addr 1) with e62f
#   Loading B[2][3] (Bank 3, Addr 2) with fd16
#   Loading B[3][3] (Bank 3, Addr 3) with a430
# Matrix loading complete.
# @49375000 Simulating controller signals to execute multiplication...
# @49395000: Starting input feeding sequence...
# @49436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @49446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @49725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 57...
# Test Case 57 FAIL: C[0][0] mismatch! Actual 0, Expected 085079252
# Test Case 57 FAIL: C[0][1] mismatch! Actual 1, Expected 076286cf5
# Test Case 57 FAIL: C[0][2] mismatch! Actual 0, Expected 0ab7025cf
# Test Case 57 FAIL: C[0][3] mismatch! Actual 1, Expected 0ff96ba09
# Test Case 57 FAIL: C[1][0] mismatch! Actual 0, Expected 0e5c72da0
# Test Case 57 FAIL: C[1][1] mismatch! Actual 1, Expected 12300251d
# Test Case 57 FAIL: C[1][2] mismatch! Actual 1, Expected 10db25f74
# Test Case 57 FAIL: C[1][3] mismatch! Actual 0, Expected 1ca1ef46a
# Test Case 57 FAIL: C[2][0] mismatch! Actual 0, Expected 0a7d3d74d
# Test Case 57 FAIL: C[2][1] mismatch! Actual 0, Expected 0ccd8c785
# Test Case 57 FAIL: C[2][2] mismatch! Actual 0, Expected 1055c416e
# Test Case 57 FAIL: C[2][3] mismatch! Actual 1, Expected 18cd1f25a
# Test Case 57 FAIL: C[3][0] mismatch! Actual 0, Expected 10374e0b4
# Test Case 57 FAIL: C[3][1] mismatch! Actual 1, Expected 15e6d913f
# Test Case 57 FAIL: C[3][2] mismatch! Actual 0, Expected 16ce997b2
# Test Case 57 FAIL: C[3][3] mismatch! Actual 0, Expected 2609f8ba0
# Test Case 57 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @49896000 Starting Test Case 58 of 100
# ===================================================
# Reading test case 58:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_58/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @49896000 Matrix Partition
# ===================================================
# @49896000 Matrix partition ended! 
# @49896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00f1
#   Loading A[0][1] (Bank 0, Addr 1) with e300
#   Loading A[0][2] (Bank 0, Addr 2) with 1ca8
#   Loading A[0][3] (Bank 0, Addr 3) with 4641
#   Loading A[1][0] (Bank 1, Addr 0) with 44e6
#   Loading A[1][1] (Bank 1, Addr 1) with 8e7c
#   Loading A[1][2] (Bank 1, Addr 2) with d4ee
#   Loading A[1][3] (Bank 1, Addr 3) with c339
#   Loading A[2][0] (Bank 2, Addr 0) with 1f50
#   Loading A[2][1] (Bank 2, Addr 1) with 0b71
#   Loading A[2][2] (Bank 2, Addr 2) with 810e
#   Loading A[2][3] (Bank 2, Addr 3) with c97d
#   Loading A[3][0] (Bank 3, Addr 0) with f9d8
#   Loading A[3][1] (Bank 3, Addr 1) with 84e0
#   Loading A[3][2] (Bank 3, Addr 2) with 2c2e
#   Loading A[3][3] (Bank 3, Addr 3) with 7aeb
#   Loading B[0][0] (Bank 0, Addr 0) with 9e8b
#   Loading B[1][0] (Bank 0, Addr 1) with b9d2
#   Loading B[2][0] (Bank 0, Addr 2) with 68b3
#   Loading B[3][0] (Bank 0, Addr 3) with 0581
#   Loading B[0][1] (Bank 1, Addr 0) with 85a2
#   Loading B[1][1] (Bank 1, Addr 1) with e7ee
#   Loading B[2][1] (Bank 1, Addr 2) with 1c90
#   Loading B[3][1] (Bank 1, Addr 3) with 0b11
#   Loading B[0][2] (Bank 2, Addr 0) with 931b
#   Loading B[1][2] (Bank 2, Addr 1) with b486
#   Loading B[2][2] (Bank 2, Addr 2) with 7bb7
#   Loading B[3][2] (Bank 2, Addr 3) with b5fb
#   Loading B[0][3] (Bank 3, Addr 0) with 254e
#   Loading B[1][3] (Bank 3, Addr 1) with 6f70
#   Loading B[2][3] (Bank 3, Addr 2) with 3018
#   Loading B[3][3] (Bank 3, Addr 3) with 7ae2
# Matrix loading complete.
# @50235000 Simulating controller signals to execute multiplication...
# @50255000: Starting input feeding sequence...
# @50296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @50306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @50585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 58...
# Test Case 58 FAIL: C[0][0] mismatch! Actual 0, Expected 0b2956c14
# Test Case 58 FAIL: C[0][1] mismatch! Actual 0, Expected 0d461cb53
# Test Case 58 FAIL: C[0][2] mismatch! Actual 0, Expected 0e067593e
# Test Case 58 FAIL: C[0][3] mismatch! Actual 0, Expected 08a0e9d90
# Test Case 58 FAIL: C[1][0] mismatch! Actual 1, Expected 0ed5fe9bd
# Test Case 58 FAIL: C[1][1] mismatch! Actual 1, Expected 0c53faa7d
# Test Case 58 FAIL: C[1][2] mismatch! Actual 0, Expected 17dbe612f
# Test Case 58 FAIL: C[1][3] mismatch! Actual 0, Expected 0cdc66ef6
# Test Case 58 FAIL: C[2][0] mismatch! Actual 0, Expected 054cf51e9
# Test Case 58 FAIL: C[2][1] mismatch! Actual 1, Expected 031d1dadb
# Test Case 58 FAIL: C[2][2] mismatch! Actual 0, Expected 0e7a89827
# Test Case 58 FAIL: C[2][3] mismatch! Actual 0, Expected 08281467a
# Test Case 58 FAIL: C[3][0] mismatch! Actual 1, Expected 10fe3f39d
# Test Case 58 FAIL: C[3][1] mismatch! Actual 1, Expected 1050b1f6b
# Test Case 58 FAIL: C[3][2] mismatch! Actual 1, Expected 159fec953
# Test Case 58 FAIL: C[3][3] mismatch! Actual 0, Expected 0a18cdf96
# Test Case 58 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @50756000 Starting Test Case 59 of 100
# ===================================================
# Reading test case 59:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_59/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @50756000 Matrix Partition
# ===================================================
# @50756000 Matrix partition ended! 
# @50756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b8a6
#   Loading A[0][1] (Bank 0, Addr 1) with 57af
#   Loading A[0][2] (Bank 0, Addr 2) with 2fe5
#   Loading A[0][3] (Bank 0, Addr 3) with a548
#   Loading A[1][0] (Bank 1, Addr 0) with f372
#   Loading A[1][1] (Bank 1, Addr 1) with 7994
#   Loading A[1][2] (Bank 1, Addr 2) with 0596
#   Loading A[1][3] (Bank 1, Addr 3) with 6564
#   Loading A[2][0] (Bank 2, Addr 0) with fb67
#   Loading A[2][1] (Bank 2, Addr 1) with dc16
#   Loading A[2][2] (Bank 2, Addr 2) with 938e
#   Loading A[2][3] (Bank 2, Addr 3) with 2b6c
#   Loading A[3][0] (Bank 3, Addr 0) with 45fe
#   Loading A[3][1] (Bank 3, Addr 1) with d9ec
#   Loading A[3][2] (Bank 3, Addr 2) with 2bc9
#   Loading A[3][3] (Bank 3, Addr 3) with 9894
#   Loading B[0][0] (Bank 0, Addr 0) with 66ea
#   Loading B[1][0] (Bank 0, Addr 1) with 24d0
#   Loading B[2][0] (Bank 0, Addr 2) with f6a0
#   Loading B[3][0] (Bank 0, Addr 3) with 8578
#   Loading B[0][1] (Bank 1, Addr 0) with 6340
#   Loading B[1][1] (Bank 1, Addr 1) with 0b72
#   Loading B[2][1] (Bank 1, Addr 2) with 6771
#   Loading B[3][1] (Bank 1, Addr 3) with 0e4d
#   Loading B[0][2] (Bank 2, Addr 0) with aaa0
#   Loading B[1][2] (Bank 2, Addr 1) with c69b
#   Loading B[2][2] (Bank 2, Addr 2) with 93db
#   Loading B[3][2] (Bank 2, Addr 3) with f46f
#   Loading B[0][3] (Bank 3, Addr 0) with 8280
#   Loading B[1][3] (Bank 3, Addr 1) with 5d67
#   Loading B[2][3] (Bank 3, Addr 2) with da0e
#   Loading B[3][3] (Bank 3, Addr 3) with ffc1
# Matrix loading complete.
# @51095000 Simulating controller signals to execute multiplication...
# @51115000: Starting input feeding sequence...
# @51156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @51166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @51445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 59...
# Test Case 59 FAIL: C[0][0] mismatch! Actual 0, Expected 0db26a4cc
# Test Case 59 FAIL: C[0][1] mismatch! Actual 0, Expected 06817da2b
# Test Case 59 FAIL: C[0][2] mismatch! Actual 0, Expected 17891d6d4
# Test Case 59 FAIL: C[0][3] mismatch! Actual 0, Expected 14c096d37
# Test Case 59 FAIL: C[1][0] mismatch! Actual 0, Expected 0ad97a714
# Test Case 59 FAIL: C[1][1] mismatch! Actual 0, Expected 06bbd3ab2
# Test Case 59 FAIL: C[1][2] mismatch! Actual 0, Expected 1649d1f8a
# Test Case 59 FAIL: C[1][3] mismatch! Actual 0, Expected 112826224
# Test Case 59 FAIL: C[2][0] mismatch! Actual 0, Expected 12980e366
# Test Case 59 FAIL: C[2][1] mismatch! Actual 0, Expected 0a95addb6
# Test Case 59 FAIL: C[2][2] mismatch! Actual 0, Expected 1d0fc5400
# Test Case 59 FAIL: C[2][3] mismatch! Actual 0, Expected 17984da8a
# Test Case 59 FAIL: C[3][0] mismatch! Actual 0, Expected 0b5345aec
# Test Case 59 FAIL: C[3][1] mismatch! Actual 0, Expected 03f1817d5
# Test Case 59 FAIL: C[3][2] mismatch! Actual 0, Expected 182affcc3
# Test Case 59 FAIL: C[3][3] mismatch! Actual 0, Expected 130ea6786
# Test Case 59 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @51616000 Starting Test Case 60 of 100
# ===================================================
# Reading test case 60:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_60/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @51616000 Matrix Partition
# ===================================================
# @51616000 Matrix partition ended! 
# @51616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2794
#   Loading A[0][1] (Bank 0, Addr 1) with 8aee
#   Loading A[0][2] (Bank 0, Addr 2) with 0d49
#   Loading A[0][3] (Bank 0, Addr 3) with 942a
#   Loading A[1][0] (Bank 1, Addr 0) with 49e8
#   Loading A[1][1] (Bank 1, Addr 1) with 436e
#   Loading A[1][2] (Bank 1, Addr 2) with e22c
#   Loading A[1][3] (Bank 1, Addr 3) with a2b4
#   Loading A[2][0] (Bank 2, Addr 0) with befa
#   Loading A[2][1] (Bank 2, Addr 1) with 75f0
#   Loading A[2][2] (Bank 2, Addr 2) with e210
#   Loading A[2][3] (Bank 2, Addr 3) with 8194
#   Loading A[3][0] (Bank 3, Addr 0) with 1159
#   Loading A[3][1] (Bank 3, Addr 1) with f082
#   Loading A[3][2] (Bank 3, Addr 2) with 564c
#   Loading A[3][3] (Bank 3, Addr 3) with b8be
#   Loading B[0][0] (Bank 0, Addr 0) with 1788
#   Loading B[1][0] (Bank 0, Addr 1) with ea3e
#   Loading B[2][0] (Bank 0, Addr 2) with a0bd
#   Loading B[3][0] (Bank 0, Addr 3) with ba7d
#   Loading B[0][1] (Bank 1, Addr 0) with 0c4d
#   Loading B[1][1] (Bank 1, Addr 1) with 420b
#   Loading B[2][1] (Bank 1, Addr 2) with 77dc
#   Loading B[3][1] (Bank 1, Addr 3) with dc4a
#   Loading B[0][2] (Bank 2, Addr 0) with 3499
#   Loading B[1][2] (Bank 2, Addr 1) with 192b
#   Loading B[2][2] (Bank 2, Addr 2) with 9b4b
#   Loading B[3][2] (Bank 2, Addr 3) with 8152
#   Loading B[0][3] (Bank 3, Addr 0) with 8353
#   Loading B[1][3] (Bank 3, Addr 1) with c596
#   Loading B[2][3] (Bank 3, Addr 2) with 37f8
#   Loading B[3][3] (Bank 3, Addr 3) with 7716
# Matrix loading complete.
# @51955000 Simulating controller signals to execute multiplication...
# @51975000: Starting input feeding sequence...
# @52016000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @52026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @52305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 60...
# Test Case 60 FAIL: C[0][0] mismatch! Actual 0, Expected 0f708cfab
# Test Case 60 FAIL: C[0][1] mismatch! Actual 1, Expected 0ab75719e
# Test Case 60 FAIL: C[0][2] mismatch! Actual 0, Expected 068b20245
# Test Case 60 FAIL: C[0][3] mismatch! Actual 1, Expected 0c75bedc4
# Test Case 60 FAIL: C[1][0] mismatch! Actual 0, Expected 14906b044
# Test Case 60 FAIL: C[1][1] mismatch! Actual 1, Expected 10ad8e65a
# Test Case 60 FAIL: C[1][2] mismatch! Actual 0, Expected 0f13415ae
# Test Case 60 FAIL: C[1][3] mismatch! Actual 1, Expected 0d7170cc4
# Test Case 60 FAIL: C[2][0] mismatch! Actual 0, Expected 169cd8e04
# Test Case 60 FAIL: C[2][1] mismatch! Actual 0, Expected 100f2750a
# Test Case 60 FAIL: C[2][2] mismatch! Actual 0, Expected 0fd6c2ad2
# Test Case 60 FAIL: C[2][3] mismatch! Actual 1, Expected 12ab201e6
# Test Case 60 FAIL: C[3][0] mismatch! Actual 0, Expected 19a6cc0a6
# Test Case 60 FAIL: C[3][1] mismatch! Actual 1, Expected 106416997
# Test Case 60 FAIL: C[3][2] mismatch! Actual 1, Expected 0ace1c127
# Test Case 60 FAIL: C[3][3] mismatch! Actual 1, Expected 12b5540fb
# Test Case 60 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @52476000 Starting Test Case 61 of 100
# ===================================================
# Reading test case 61:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_61/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @52476000 Matrix Partition
# ===================================================
# @52476000 Matrix partition ended! 
# @52476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 54f1
#   Loading A[0][1] (Bank 0, Addr 1) with 7a1f
#   Loading A[0][2] (Bank 0, Addr 2) with c02b
#   Loading A[0][3] (Bank 0, Addr 3) with f72f
#   Loading A[1][0] (Bank 1, Addr 0) with a6ae
#   Loading A[1][1] (Bank 1, Addr 1) with fac6
#   Loading A[1][2] (Bank 1, Addr 2) with 3749
#   Loading A[1][3] (Bank 1, Addr 3) with 89e8
#   Loading A[2][0] (Bank 2, Addr 0) with 4b05
#   Loading A[2][1] (Bank 2, Addr 1) with 00cf
#   Loading A[2][2] (Bank 2, Addr 2) with fc04
#   Loading A[2][3] (Bank 2, Addr 3) with fc6d
#   Loading A[3][0] (Bank 3, Addr 0) with 8099
#   Loading A[3][1] (Bank 3, Addr 1) with 7ac5
#   Loading A[3][2] (Bank 3, Addr 2) with 2395
#   Loading A[3][3] (Bank 3, Addr 3) with 8241
#   Loading B[0][0] (Bank 0, Addr 0) with 8521
#   Loading B[1][0] (Bank 0, Addr 1) with 8afb
#   Loading B[2][0] (Bank 0, Addr 2) with d0c5
#   Loading B[3][0] (Bank 0, Addr 3) with 2cac
#   Loading B[0][1] (Bank 1, Addr 0) with aaad
#   Loading B[1][1] (Bank 1, Addr 1) with 1bf1
#   Loading B[2][1] (Bank 1, Addr 2) with 3ec4
#   Loading B[3][1] (Bank 1, Addr 3) with e547
#   Loading B[0][2] (Bank 2, Addr 0) with aeed
#   Loading B[1][2] (Bank 2, Addr 1) with 0bd0
#   Loading B[2][2] (Bank 2, Addr 2) with 4109
#   Loading B[3][2] (Bank 2, Addr 3) with 97b3
#   Loading B[0][3] (Bank 3, Addr 0) with cec1
#   Loading B[1][3] (Bank 3, Addr 1) with 0e90
#   Loading B[2][3] (Bank 3, Addr 2) with 0bea
#   Loading B[3][3] (Bank 3, Addr 3) with 7be9
# Matrix loading complete.
# @52815000 Simulating controller signals to execute multiplication...
# @52835000: Starting input feeding sequence...
# @52876000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @52886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @53165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 61...
# Test Case 61 FAIL: C[0][0] mismatch! Actual 0, Expected 136519321
# Test Case 61 FAIL: C[0][1] mismatch! Actual 0, Expected 15274d101
# Test Case 61 FAIL: C[0][2] mismatch! Actual 0, Expected 102f83aad
# Test Case 61 FAIL: C[0][3] mismatch! Actual 0, Expected 0cc226a36
# Test Case 61 FAIL: C[1][0] mismatch! Actual 0, Expected 123f8e19d
# Test Case 61 FAIL: C[1][1] mismatch! Actual 0, Expected 1138fef38
# Test Case 61 FAIL: C[1][2] mismatch! Actual 0, Expected 0dd3a95bf
# Test Case 61 FAIL: C[1][3] mismatch! Actual 0, Expected 0da343870
# Test Case 61 FAIL: C[2][0] mismatch! Actual 0, Expected 1210529ea
# Test Case 61 FAIL: C[2][1] mismatch! Actual 0, Expected 151f80a8b
# Test Case 61 FAIL: C[2][2] mismatch! Actual 0, Expected 108e7122c
# Test Case 61 FAIL: C[2][3] mismatch! Actual 0, Expected 0c28b0112
# Test Case 61 FAIL: C[3][0] mismatch! Actual 0, Expected 0b945c335
# Test Case 61 FAIL: C[3][1] mismatch! Actual 0, Expected 0e08474f5
# Test Case 61 FAIL: C[3][2] mismatch! Actual 0, Expected 0b3c2c265
# Test Case 61 FAIL: C[3][3] mismatch! Actual 0, Expected 0af8b9b84
# Test Case 61 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @53336000 Starting Test Case 62 of 100
# ===================================================
# Reading test case 62:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_62/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @53336000 Matrix Partition
# ===================================================
# @53336000 Matrix partition ended! 
# @53336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 455b
#   Loading A[0][1] (Bank 0, Addr 1) with 15f9
#   Loading A[0][2] (Bank 0, Addr 2) with f09f
#   Loading A[0][3] (Bank 0, Addr 3) with 860e
#   Loading A[1][0] (Bank 1, Addr 0) with 2ca8
#   Loading A[1][1] (Bank 1, Addr 1) with defa
#   Loading A[1][2] (Bank 1, Addr 2) with 0f24
#   Loading A[1][3] (Bank 1, Addr 3) with ad72
#   Loading A[2][0] (Bank 2, Addr 0) with a907
#   Loading A[2][1] (Bank 2, Addr 1) with 8dbd
#   Loading A[2][2] (Bank 2, Addr 2) with 7f9a
#   Loading A[2][3] (Bank 2, Addr 3) with bc40
#   Loading A[3][0] (Bank 3, Addr 0) with 9ff4
#   Loading A[3][1] (Bank 3, Addr 1) with 728d
#   Loading A[3][2] (Bank 3, Addr 2) with e091
#   Loading A[3][3] (Bank 3, Addr 3) with 7f97
#   Loading B[0][0] (Bank 0, Addr 0) with 8e56
#   Loading B[1][0] (Bank 0, Addr 1) with 4db3
#   Loading B[2][0] (Bank 0, Addr 2) with 0a68
#   Loading B[3][0] (Bank 0, Addr 3) with ddb4
#   Loading B[0][1] (Bank 1, Addr 0) with f539
#   Loading B[1][1] (Bank 1, Addr 1) with 6272
#   Loading B[2][1] (Bank 1, Addr 2) with 1c48
#   Loading B[3][1] (Bank 1, Addr 3) with 0320
#   Loading B[0][2] (Bank 2, Addr 0) with c0f3
#   Loading B[1][2] (Bank 2, Addr 1) with 76d7
#   Loading B[2][2] (Bank 2, Addr 2) with 7b11
#   Loading B[3][2] (Bank 2, Addr 3) with a1dc
#   Loading B[0][3] (Bank 3, Addr 0) with 4bfa
#   Loading B[1][3] (Bank 3, Addr 1) with 187b
#   Loading B[2][3] (Bank 3, Addr 2) with 9b09
#   Loading B[3][3] (Bank 3, Addr 3) with ab7f
# Matrix loading complete.
# @53675000 Simulating controller signals to execute multiplication...
# @53695000: Starting input feeding sequence...
# @53736000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @53746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @54025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 62...
# Test Case 62 FAIL: C[0][0] mismatch! Actual 0, Expected 0ab1b571d
# Test Case 62 FAIL: C[0][1] mismatch! Actual 0, Expected 0671a9f9d
# Test Case 62 FAIL: C[0][2] mismatch! Actual 0, Expected 106e7b117
# Test Case 62 FAIL: C[0][3] mismatch! Actual 0, Expected 10235e00a
# Test Case 62 FAIL: C[1][0] mismatch! Actual 0, Expected 0f3543806
# Test Case 62 FAIL: C[1][1] mismatch! Actual 1, Expected 0844fef1c
# Test Case 62 FAIL: C[1][2] mismatch! Actual 1, Expected 0fe1bf0ca
# Test Case 62 FAIL: C[1][3] mismatch! Actual 1, Expected 09fefec00
# Test Case 62 FAIL: C[2][0] mismatch! Actual 0, Expected 131371611
# Test Case 62 FAIL: C[2][1] mismatch! Actual 0, Expected 0e8cfd109
# Test Case 62 FAIL: C[2][2] mismatch! Actual 0, Expected 1758f579a
# Test Case 62 FAIL: C[2][3] mismatch! Actual 0, Expected 10b1acdcf
# Test Case 62 FAIL: C[3][0] mismatch! Actual 0, Expected 0f3538ba3
# Test Case 62 FAIL: C[3][1] mismatch! Actual 1, Expected 0dfa2dac6
# Test Case 62 FAIL: C[3][2] mismatch! Actual 1, Expected 16a5c386c
# Test Case 62 FAIL: C[3][3] mismatch! Actual 1, Expected 117e5cb09
# Test Case 62 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @54196000 Starting Test Case 63 of 100
# ===================================================
# Reading test case 63:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_63/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @54196000 Matrix Partition
# ===================================================
# @54196000 Matrix partition ended! 
# @54196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 649b
#   Loading A[0][1] (Bank 0, Addr 1) with 8952
#   Loading A[0][2] (Bank 0, Addr 2) with c897
#   Loading A[0][3] (Bank 0, Addr 3) with 28d9
#   Loading A[1][0] (Bank 1, Addr 0) with fd2e
#   Loading A[1][1] (Bank 1, Addr 1) with ae97
#   Loading A[1][2] (Bank 1, Addr 2) with befb
#   Loading A[1][3] (Bank 1, Addr 3) with 477c
#   Loading A[2][0] (Bank 2, Addr 0) with 6f15
#   Loading A[2][1] (Bank 2, Addr 1) with d0b5
#   Loading A[2][2] (Bank 2, Addr 2) with cf95
#   Loading A[2][3] (Bank 2, Addr 3) with 1931
#   Loading A[3][0] (Bank 3, Addr 0) with 6619
#   Loading A[3][1] (Bank 3, Addr 1) with ccc0
#   Loading A[3][2] (Bank 3, Addr 2) with 7a10
#   Loading A[3][3] (Bank 3, Addr 3) with 0a4a
#   Loading B[0][0] (Bank 0, Addr 0) with ead2
#   Loading B[1][0] (Bank 0, Addr 1) with d169
#   Loading B[2][0] (Bank 0, Addr 2) with 59c0
#   Loading B[3][0] (Bank 0, Addr 3) with 0074
#   Loading B[0][1] (Bank 1, Addr 0) with 22b6
#   Loading B[1][1] (Bank 1, Addr 1) with 2e22
#   Loading B[2][1] (Bank 1, Addr 2) with 5871
#   Loading B[3][1] (Bank 1, Addr 3) with 86df
#   Loading B[0][2] (Bank 2, Addr 0) with b96e
#   Loading B[1][2] (Bank 2, Addr 1) with c38d
#   Loading B[2][2] (Bank 2, Addr 2) with 5179
#   Loading B[3][2] (Bank 2, Addr 3) with a568
#   Loading B[0][3] (Bank 3, Addr 0) with 43b0
#   Loading B[1][3] (Bank 3, Addr 1) with 969d
#   Loading B[2][3] (Bank 3, Addr 2) with 6722
#   Loading B[3][3] (Bank 3, Addr 3) with 98ce
# Matrix loading complete.
# @54535000 Simulating controller signals to execute multiplication...
# @54555000: Starting input feeding sequence...
# @54596000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @54606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
quit -sim
# End time: 14:46:00 on May 16,2025, Elapsed time: 0:16:18
# Errors: 0, Warnings: 32
# Compile of datapath.v was successful.
# Compile of datapath_tb.v was successful.
# 2 compiles, 0 failed with no errors.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 14:46:19 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/a_bram_gen[3]/a_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual x, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual x, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual x, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual x, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual x, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual x, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual x, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual x, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual x, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual x, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual x, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual x, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual x, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual x, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual x, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 1, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 1, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 1, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 1, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 0, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 0, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 0, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 1, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 1, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 0, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 1, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 0, Addr 1) with 5d17
#   Loading A[0][2] (Bank 0, Addr 2) with 546c
#   Loading A[0][3] (Bank 0, Addr 3) with 9b65
#   Loading A[1][0] (Bank 1, Addr 0) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 1, Addr 2) with ab63
#   Loading A[1][3] (Bank 1, Addr 3) with 151f
#   Loading A[2][0] (Bank 2, Addr 0) with d2a1
#   Loading A[2][1] (Bank 2, Addr 1) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 2, Addr 3) with 2d93
#   Loading A[3][0] (Bank 3, Addr 0) with 5dc4
#   Loading A[3][1] (Bank 3, Addr 1) with 7b97
#   Loading A[3][2] (Bank 3, Addr 2) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[1][0] (Bank 0, Addr 1) with bfbe
#   Loading B[2][0] (Bank 0, Addr 2) with 588e
#   Loading B[3][0] (Bank 0, Addr 3) with d7f2
#   Loading B[0][1] (Bank 1, Addr 0) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[2][1] (Bank 1, Addr 2) with 7d34
#   Loading B[3][1] (Bank 1, Addr 3) with 450d
#   Loading B[0][2] (Bank 2, Addr 0) with bb59
#   Loading B[1][2] (Bank 2, Addr 1) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[3][2] (Bank 2, Addr 3) with 7124
#   Loading B[0][3] (Bank 3, Addr 0) with 45ee
#   Loading B[1][3] (Bank 3, Addr 1) with f9ff
#   Loading B[2][3] (Bank 3, Addr 2) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 1, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 1, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 1, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 0, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 0, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 1, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 0, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3456000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3456000 Matrix Partition
# ===================================================
# @3456000 Matrix partition ended! 
# @3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 0, Addr 1) with 140c
#   Loading A[0][2] (Bank 0, Addr 2) with 1bbe
#   Loading A[0][3] (Bank 0, Addr 3) with e39e
#   Loading A[1][0] (Bank 1, Addr 0) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 1, Addr 2) with be4d
#   Loading A[1][3] (Bank 1, Addr 3) with 968b
#   Loading A[2][0] (Bank 2, Addr 0) with 8db5
#   Loading A[2][1] (Bank 2, Addr 1) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 2, Addr 3) with 39b3
#   Loading A[3][0] (Bank 3, Addr 0) with 5ef7
#   Loading A[3][1] (Bank 3, Addr 1) with 47ee
#   Loading A[3][2] (Bank 3, Addr 2) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[1][0] (Bank 0, Addr 1) with 5d49
#   Loading B[2][0] (Bank 0, Addr 2) with 21d2
#   Loading B[3][0] (Bank 0, Addr 3) with be24
#   Loading B[0][1] (Bank 1, Addr 0) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[2][1] (Bank 1, Addr 2) with 61c6
#   Loading B[3][1] (Bank 1, Addr 3) with d9cf
#   Loading B[0][2] (Bank 2, Addr 0) with 521e
#   Loading B[1][2] (Bank 2, Addr 1) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[3][2] (Bank 2, Addr 3) with 1b34
#   Loading B[0][3] (Bank 3, Addr 0) with c582
#   Loading B[1][3] (Bank 3, Addr 1) with d7ad
#   Loading B[2][3] (Bank 3, Addr 2) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual 1, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual 0, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual 1, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual 1, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual 1, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual 0, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual 0, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual 0, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual 0, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual 0, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual 0, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual 0, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 0, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4316000 Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4316000 Matrix Partition
# ===================================================
# @4316000 Matrix partition ended! 
# @4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 0, Addr 1) with 8e22
#   Loading A[0][2] (Bank 0, Addr 2) with ddbd
#   Loading A[0][3] (Bank 0, Addr 3) with 9bcd
#   Loading A[1][0] (Bank 1, Addr 0) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 1, Addr 2) with 8f25
#   Loading A[1][3] (Bank 1, Addr 3) with de61
#   Loading A[2][0] (Bank 2, Addr 0) with 5215
#   Loading A[2][1] (Bank 2, Addr 1) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 2, Addr 3) with 0d28
#   Loading A[3][0] (Bank 3, Addr 0) with 4ad1
#   Loading A[3][1] (Bank 3, Addr 1) with dfc6
#   Loading A[3][2] (Bank 3, Addr 2) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[1][0] (Bank 0, Addr 1) with e02c
#   Loading B[2][0] (Bank 0, Addr 2) with 5ba5
#   Loading B[3][0] (Bank 0, Addr 3) with 8bce
#   Loading B[0][1] (Bank 1, Addr 0) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[2][1] (Bank 1, Addr 2) with 7a69
#   Loading B[3][1] (Bank 1, Addr 3) with c8b3
#   Loading B[0][2] (Bank 2, Addr 0) with fde4
#   Loading B[1][2] (Bank 2, Addr 1) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[3][2] (Bank 2, Addr 3) with cf2b
#   Loading B[0][3] (Bank 3, Addr 0) with e7b5
#   Loading B[1][3] (Bank 3, Addr 1) with c1ce
#   Loading B[2][3] (Bank 3, Addr 2) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual 1, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual 0, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual 1, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual 0, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual 0, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual 0, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual 0, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual 0, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual 0, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual 0, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual 0, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual 0, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual 0, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual 0, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @5176000 Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @5176000 Matrix Partition
# ===================================================
# @5176000 Matrix partition ended! 
# @5176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 0, Addr 1) with d921
#   Loading A[0][2] (Bank 0, Addr 2) with 3320
#   Loading A[0][3] (Bank 0, Addr 3) with 57f2
#   Loading A[1][0] (Bank 1, Addr 0) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 1, Addr 2) with ed08
#   Loading A[1][3] (Bank 1, Addr 3) with 693c
#   Loading A[2][0] (Bank 2, Addr 0) with 75be
#   Loading A[2][1] (Bank 2, Addr 1) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 2, Addr 3) with dd13
#   Loading A[3][0] (Bank 3, Addr 0) with 09fa
#   Loading A[3][1] (Bank 3, Addr 1) with a3a1
#   Loading A[3][2] (Bank 3, Addr 2) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[1][0] (Bank 0, Addr 1) with c25b
#   Loading B[2][0] (Bank 0, Addr 2) with 1e50
#   Loading B[3][0] (Bank 0, Addr 3) with bc35
#   Loading B[0][1] (Bank 1, Addr 0) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[2][1] (Bank 1, Addr 2) with 1d83
#   Loading B[3][1] (Bank 1, Addr 3) with 9534
#   Loading B[0][2] (Bank 2, Addr 0) with be9b
#   Loading B[1][2] (Bank 2, Addr 1) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[3][2] (Bank 2, Addr 3) with 2c78
#   Loading B[0][3] (Bank 3, Addr 0) with fed7
#   Loading B[1][3] (Bank 3, Addr 1) with 2578
#   Loading B[2][3] (Bank 3, Addr 2) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @5515000 Simulating controller signals to execute multiplication...
# @5535000: Starting input feeding sequence...
# @5576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual 0, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual 0, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual 0, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual 1, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual 0, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual 1, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual 0, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual 0, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual 0, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual 0, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual 0, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual 0, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual 0, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual 0, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual 0, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6036000 Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6036000 Matrix Partition
# ===================================================
# @6036000 Matrix partition ended! 
# @6036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 0, Addr 1) with db20
#   Loading A[0][2] (Bank 0, Addr 2) with 18c1
#   Loading A[0][3] (Bank 0, Addr 3) with 51dd
#   Loading A[1][0] (Bank 1, Addr 0) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 1, Addr 2) with e208
#   Loading A[1][3] (Bank 1, Addr 3) with add1
#   Loading A[2][0] (Bank 2, Addr 0) with 1cec
#   Loading A[2][1] (Bank 2, Addr 1) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 2, Addr 3) with 50c1
#   Loading A[3][0] (Bank 3, Addr 0) with 7745
#   Loading A[3][1] (Bank 3, Addr 1) with 41d8
#   Loading A[3][2] (Bank 3, Addr 2) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[1][0] (Bank 0, Addr 1) with 5fb9
#   Loading B[2][0] (Bank 0, Addr 2) with 5e5d
#   Loading B[3][0] (Bank 0, Addr 3) with 1a01
#   Loading B[0][1] (Bank 1, Addr 0) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[2][1] (Bank 1, Addr 2) with 6cd8
#   Loading B[3][1] (Bank 1, Addr 3) with 7cb2
#   Loading B[0][2] (Bank 2, Addr 0) with cc0b
#   Loading B[1][2] (Bank 2, Addr 1) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[3][2] (Bank 2, Addr 3) with 7177
#   Loading B[0][3] (Bank 3, Addr 0) with b481
#   Loading B[1][3] (Bank 3, Addr 1) with dd2b
#   Loading B[2][3] (Bank 3, Addr 2) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @6375000 Simulating controller signals to execute multiplication...
# @6395000: Starting input feeding sequence...
# @6436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @6725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual 1, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual 0, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual 1, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual 1, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual 0, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual 0, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual 0, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual 0, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual 0, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual 0, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual 0, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual 0, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual 0, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual 0, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual 0, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6896000 Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6896000 Matrix Partition
# ===================================================
# @6896000 Matrix partition ended! 
# @6896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 0, Addr 1) with 125d
#   Loading A[0][2] (Bank 0, Addr 2) with 3382
#   Loading A[0][3] (Bank 0, Addr 3) with ee9b
#   Loading A[1][0] (Bank 1, Addr 0) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 1, Addr 2) with 2c62
#   Loading A[1][3] (Bank 1, Addr 3) with 94e6
#   Loading A[2][0] (Bank 2, Addr 0) with a82f
#   Loading A[2][1] (Bank 2, Addr 1) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 2, Addr 3) with ba8e
#   Loading A[3][0] (Bank 3, Addr 0) with 4f36
#   Loading A[3][1] (Bank 3, Addr 1) with 9e41
#   Loading A[3][2] (Bank 3, Addr 2) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[1][0] (Bank 0, Addr 1) with 51bf
#   Loading B[2][0] (Bank 0, Addr 2) with cd18
#   Loading B[3][0] (Bank 0, Addr 3) with edaf
#   Loading B[0][1] (Bank 1, Addr 0) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[2][1] (Bank 1, Addr 2) with 79a4
#   Loading B[3][1] (Bank 1, Addr 3) with 00e6
#   Loading B[0][2] (Bank 2, Addr 0) with e7c7
#   Loading B[1][2] (Bank 2, Addr 1) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[3][2] (Bank 2, Addr 3) with 27b4
#   Loading B[0][3] (Bank 3, Addr 0) with b184
#   Loading B[1][3] (Bank 3, Addr 1) with 9e83
#   Loading B[2][3] (Bank 3, Addr 2) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @7235000 Simulating controller signals to execute multiplication...
# @7255000: Starting input feeding sequence...
# @7296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @7585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual 0, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual 0, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual 0, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual 0, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual 1, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual 0, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual 0, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual 0, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual 0, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual 0, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual 0, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual 0, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual 0, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual 0, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual 0, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @7756000 Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @7756000 Matrix Partition
# ===================================================
# @7756000 Matrix partition ended! 
# @7756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 0, Addr 1) with c82b
#   Loading A[0][2] (Bank 0, Addr 2) with 899a
#   Loading A[0][3] (Bank 0, Addr 3) with 206a
#   Loading A[1][0] (Bank 1, Addr 0) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 1, Addr 2) with 72c1
#   Loading A[1][3] (Bank 1, Addr 3) with 7480
#   Loading A[2][0] (Bank 2, Addr 0) with 2548
#   Loading A[2][1] (Bank 2, Addr 1) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 2, Addr 3) with dfd9
#   Loading A[3][0] (Bank 3, Addr 0) with d73d
#   Loading A[3][1] (Bank 3, Addr 1) with 78be
#   Loading A[3][2] (Bank 3, Addr 2) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[1][0] (Bank 0, Addr 1) with 9650
#   Loading B[2][0] (Bank 0, Addr 2) with 5b34
#   Loading B[3][0] (Bank 0, Addr 3) with 86e4
#   Loading B[0][1] (Bank 1, Addr 0) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[2][1] (Bank 1, Addr 2) with 840d
#   Loading B[3][1] (Bank 1, Addr 3) with cd63
#   Loading B[0][2] (Bank 2, Addr 0) with 7173
#   Loading B[1][2] (Bank 2, Addr 1) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[3][2] (Bank 2, Addr 3) with 3f7c
#   Loading B[0][3] (Bank 3, Addr 0) with 971c
#   Loading B[1][3] (Bank 3, Addr 1) with 69ab
#   Loading B[2][3] (Bank 3, Addr 2) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @8095000 Simulating controller signals to execute multiplication...
# @8115000: Starting input feeding sequence...
# @8156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @8445000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 9...
# Test Case 9 FAIL: C[0][0] mismatch! Actual 0, Expected 14fdca8d6
# Test Case 9 FAIL: C[0][1] mismatch! Actual 0, Expected 0d0fe4e97
# Test Case 9 FAIL: C[0][2] mismatch! Actual 0, Expected 0df480431
# Test Case 9 FAIL: C[0][3] mismatch! Actual 1, Expected 0f02fd117
# Test Case 9 FAIL: C[1][0] mismatch! Actual 0, Expected 1976eb01e
# Test Case 9 FAIL: C[1][1] mismatch! Actual 1, Expected 0e149a992
# Test Case 9 FAIL: C[1][2] mismatch! Actual 1, Expected 1531dc671
# Test Case 9 FAIL: C[1][3] mismatch! Actual 0, Expected 1596eeab7
# Test Case 9 FAIL: C[2][0] mismatch! Actual 0, Expected 109406106
# Test Case 9 FAIL: C[2][1] mismatch! Actual 0, Expected 0736c5bab
# Test Case 9 FAIL: C[2][2] mismatch! Actual 0, Expected 10b44c94b
# Test Case 9 FAIL: C[2][3] mismatch! Actual 0, Expected 0d4828a25
# Test Case 9 FAIL: C[3][0] mismatch! Actual 0, Expected 0fc79cedd
# Test Case 9 FAIL: C[3][1] mismatch! Actual 0, Expected 068c37e65
# Test Case 9 FAIL: C[3][2] mismatch! Actual 0, Expected 136d2cb00
# Test Case 9 FAIL: C[3][3] mismatch! Actual 0, Expected 0d311a9b0
# Test Case 9 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @8616000 Starting Test Case 10 of 100
# ===================================================
# Reading test case 10:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_10/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @8616000 Matrix Partition
# ===================================================
# @8616000 Matrix partition ended! 
# @8616000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 7961
#   Loading A[0][1] (Bank 0, Addr 1) with f4b7
#   Loading A[0][2] (Bank 0, Addr 2) with 9958
#   Loading A[0][3] (Bank 0, Addr 3) with 3783
#   Loading A[1][0] (Bank 1, Addr 0) with 4f35
#   Loading A[1][1] (Bank 1, Addr 1) with 5e88
#   Loading A[1][2] (Bank 1, Addr 2) with 97e5
#   Loading A[1][3] (Bank 1, Addr 3) with adc1
#   Loading A[2][0] (Bank 2, Addr 0) with c07b
#   Loading A[2][1] (Bank 2, Addr 1) with 3428
#   Loading A[2][2] (Bank 2, Addr 2) with 4fa5
#   Loading A[2][3] (Bank 2, Addr 3) with 49be
#   Loading A[3][0] (Bank 3, Addr 0) with ed1a
#   Loading A[3][1] (Bank 3, Addr 1) with 1fc0
#   Loading A[3][2] (Bank 3, Addr 2) with a3a5
#   Loading A[3][3] (Bank 3, Addr 3) with b472
#   Loading B[0][0] (Bank 0, Addr 0) with 88c5
#   Loading B[1][0] (Bank 0, Addr 1) with 9e42
#   Loading B[2][0] (Bank 0, Addr 2) with 102e
#   Loading B[3][0] (Bank 0, Addr 3) with 4d56
#   Loading B[0][1] (Bank 1, Addr 0) with f066
#   Loading B[1][1] (Bank 1, Addr 1) with cf12
#   Loading B[2][1] (Bank 1, Addr 2) with 349b
#   Loading B[3][1] (Bank 1, Addr 3) with 936a
#   Loading B[0][2] (Bank 2, Addr 0) with 6b9d
#   Loading B[1][2] (Bank 2, Addr 1) with 5cb2
#   Loading B[2][2] (Bank 2, Addr 2) with 6e7c
#   Loading B[3][2] (Bank 2, Addr 3) with d4d6
#   Loading B[0][3] (Bank 3, Addr 0) with 331f
#   Loading B[1][3] (Bank 3, Addr 1) with eea5
#   Loading B[2][3] (Bank 3, Addr 2) with e930
#   Loading B[3][3] (Bank 3, Addr 3) with c71e
# Matrix loading complete.
# @8955000 Simulating controller signals to execute multiplication...
# @8975000: Starting input feeding sequence...
# @9016000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9026000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @9305000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 10...
# Test Case 10 FAIL: C[0][0] mismatch! Actual 0, Expected 10b7c8758
# Test Case 10 FAIL: C[0][1] mismatch! Actual 0, Expected 1add39d04
# Test Case 10 FAIL: C[0][2] mismatch! Actual 0, Expected 142fdccf9
# Test Case 10 FAIL: C[0][3] mismatch! Actual 0, Expected 1aab8f066
# Test Case 10 FAIL: C[1][0] mismatch! Actual 0, Expected 0f7c67fcb
# Test Case 10 FAIL: C[1][1] mismatch! Actual 0, Expected 1143a414e
# Test Case 10 FAIL: C[1][2] mismatch! Actual 0, Expected 056526c9a
# Test Case 10 FAIL: C[1][3] mismatch! Actual 0, Expected 0c46b2eba
# Test Case 10 FAIL: C[2][0] mismatch! Actual 0, Expected 122b87522
# Test Case 10 FAIL: C[2][1] mismatch! Actual 0, Expected 18f0c3ddd
# Test Case 10 FAIL: C[2][2] mismatch! Actual 0, Expected 0e056df53
# Test Case 10 FAIL: C[2][3] mismatch! Actual 1, Expected 1474a07a6
# Test Case 10 FAIL: C[3][0] mismatch! Actual 0, Expected 103daae09
# Test Case 10 FAIL: C[3][1] mismatch! Actual 0, Expected 171c647ee
# Test Case 10 FAIL: C[3][2] mismatch! Actual 0, Expected 0eb6784cd
# Test Case 10 FAIL: C[3][3] mismatch! Actual 0, Expected 13e7b921c
# Test Case 10 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @9476000 Starting Test Case 11 of 100
# ===================================================
# Reading test case 11:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_11/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @9476000 Matrix Partition
# ===================================================
# @9476000 Matrix partition ended! 
# @9476000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ce8c
#   Loading A[0][1] (Bank 0, Addr 1) with d6ef
#   Loading A[0][2] (Bank 0, Addr 2) with c404
#   Loading A[0][3] (Bank 0, Addr 3) with 01bb
#   Loading A[1][0] (Bank 1, Addr 0) with 81c6
#   Loading A[1][1] (Bank 1, Addr 1) with b5f3
#   Loading A[1][2] (Bank 1, Addr 2) with c12c
#   Loading A[1][3] (Bank 1, Addr 3) with 0ebc
#   Loading A[2][0] (Bank 2, Addr 0) with d516
#   Loading A[2][1] (Bank 2, Addr 1) with 1aab
#   Loading A[2][2] (Bank 2, Addr 2) with c2d7
#   Loading A[2][3] (Bank 2, Addr 3) with 7627
#   Loading A[3][0] (Bank 3, Addr 0) with 914f
#   Loading A[3][1] (Bank 3, Addr 1) with 74e9
#   Loading A[3][2] (Bank 3, Addr 2) with 9391
#   Loading A[3][3] (Bank 3, Addr 3) with 213a
#   Loading B[0][0] (Bank 0, Addr 0) with 9694
#   Loading B[1][0] (Bank 0, Addr 1) with 85bd
#   Loading B[2][0] (Bank 0, Addr 2) with 62b9
#   Loading B[3][0] (Bank 0, Addr 3) with 6c8d
#   Loading B[0][1] (Bank 1, Addr 0) with 6f79
#   Loading B[1][1] (Bank 1, Addr 1) with 5a45
#   Loading B[2][1] (Bank 1, Addr 2) with 0221
#   Loading B[3][1] (Bank 1, Addr 3) with 6e52
#   Loading B[0][2] (Bank 2, Addr 0) with 1187
#   Loading B[1][2] (Bank 2, Addr 1) with 81fe
#   Loading B[2][2] (Bank 2, Addr 2) with 609d
#   Loading B[3][2] (Bank 2, Addr 3) with 2ca1
#   Loading B[0][3] (Bank 3, Addr 0) with 63c9
#   Loading B[1][3] (Bank 3, Addr 1) with ba30
#   Loading B[2][3] (Bank 3, Addr 2) with f2f8
#   Loading B[3][3] (Bank 3, Addr 3) with 2d38
# Matrix loading complete.
# @9815000 Simulating controller signals to execute multiplication...
# @9835000: Starting input feeding sequence...
# @9876000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @9886000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @10165000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 11...
# Test Case 11 FAIL: C[0][0] mismatch! Actual 0, Expected 0f93a1a27
# Test Case 11 FAIL: C[0][1] mismatch! Actual 1, Expected 16f8bf65e
# Test Case 11 FAIL: C[0][2] mismatch! Actual 0, Expected 12b0f82b8
# Test Case 11 FAIL: C[0][3] mismatch! Actual 0, Expected 0ce51efa6
# Test Case 11 FAIL: C[1][0] mismatch! Actual 1, Expected 0fd0bfa25
# Test Case 11 FAIL: C[1][1] mismatch! Actual 0, Expected 11303284c
# Test Case 11 FAIL: C[1][2] mismatch! Actual 0, Expected 0cd6c29a1
# Test Case 11 FAIL: C[1][3] mismatch! Actual 0, Expected 0c2d898fc
# Test Case 11 FAIL: C[2][0] mismatch! Actual 0, Expected 10e450256
# Test Case 11 FAIL: C[2][1] mismatch! Actual 1, Expected 178c70152
# Test Case 11 FAIL: C[2][2] mismatch! Actual 0, Expected 122c891e3
# Test Case 11 FAIL: C[2][3] mismatch! Actual 0, Expected 0e264b03b
# Test Case 11 FAIL: C[3][0] mismatch! Actual 0, Expected 01c797713
# Test Case 11 FAIL: C[3][1] mismatch! Actual 0, Expected 05a42bf4d
# Test Case 11 FAIL: C[3][2] mismatch! Actual 0, Expected 04cea4e7a
# Test Case 11 FAIL: C[3][3] mismatch! Actual 0, Expected 0218cd16e
# Test Case 11 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @10336000 Starting Test Case 12 of 100
# ===================================================
# Reading test case 12:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_12/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @10336000 Matrix Partition
# ===================================================
# @10336000 Matrix partition ended! 
# @10336000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9098
#   Loading A[0][1] (Bank 0, Addr 1) with d8e3
#   Loading A[0][2] (Bank 0, Addr 2) with 571c
#   Loading A[0][3] (Bank 0, Addr 3) with f89a
#   Loading A[1][0] (Bank 1, Addr 0) with 631f
#   Loading A[1][1] (Bank 1, Addr 1) with c7b8
#   Loading A[1][2] (Bank 1, Addr 2) with e541
#   Loading A[1][3] (Bank 1, Addr 3) with 3d63
#   Loading A[2][0] (Bank 2, Addr 0) with fb5d
#   Loading A[2][1] (Bank 2, Addr 1) with d628
#   Loading A[2][2] (Bank 2, Addr 2) with e065
#   Loading A[2][3] (Bank 2, Addr 3) with 8519
#   Loading A[3][0] (Bank 3, Addr 0) with 291a
#   Loading A[3][1] (Bank 3, Addr 1) with 62db
#   Loading A[3][2] (Bank 3, Addr 2) with 8283
#   Loading A[3][3] (Bank 3, Addr 3) with 47ce
#   Loading B[0][0] (Bank 0, Addr 0) with f4a0
#   Loading B[1][0] (Bank 0, Addr 1) with 7394
#   Loading B[2][0] (Bank 0, Addr 2) with cf66
#   Loading B[3][0] (Bank 0, Addr 3) with 66e1
#   Loading B[0][1] (Bank 1, Addr 0) with 816e
#   Loading B[1][1] (Bank 1, Addr 1) with a6da
#   Loading B[2][1] (Bank 1, Addr 2) with 27c3
#   Loading B[3][1] (Bank 1, Addr 3) with 633e
#   Loading B[0][2] (Bank 2, Addr 0) with fc9d
#   Loading B[1][2] (Bank 2, Addr 1) with 3349
#   Loading B[2][2] (Bank 2, Addr 2) with 63f3
#   Loading B[3][2] (Bank 2, Addr 3) with d7e1
#   Loading B[0][3] (Bank 3, Addr 0) with 8db6
#   Loading B[1][3] (Bank 3, Addr 1) with afc5
#   Loading B[2][3] (Bank 3, Addr 2) with fdde
#   Loading B[3][3] (Bank 3, Addr 3) with af27
# Matrix loading complete.
# @10675000 Simulating controller signals to execute multiplication...
# @10695000: Starting input feeding sequence...
# @10736000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @10746000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11025000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 12...
# Test Case 12 FAIL: C[0][0] mismatch! Actual 0, Expected 1cb12b3d7
# Test Case 12 FAIL: C[0][1] mismatch! Actual 0, Expected 0d075fdcd
# Test Case 12 FAIL: C[0][2] mismatch! Actual 0, Expected 10f6fa500
# Test Case 12 FAIL: C[0][3] mismatch! Actual 0, Expected 1509fb4cd
# Test Case 12 FAIL: C[1][0] mismatch! Actual 0, Expected 23e45102a
# Test Case 12 FAIL: C[1][1] mismatch! Actual 1, Expected 152dd8fdb
# Test Case 12 FAIL: C[1][2] mismatch! Actual 0, Expected 18460097c
# Test Case 12 FAIL: C[1][3] mismatch! Actual 1, Expected 19cd02d98
# Test Case 12 FAIL: C[2][0] mismatch! Actual 0, Expected 1ecd15e81
# Test Case 12 FAIL: C[2][1] mismatch! Actual 1, Expected 1434f6726
# Test Case 12 FAIL: C[2][2] mismatch! Actual 0, Expected 143369424
# Test Case 12 FAIL: C[2][3] mismatch! Actual 1, Expected 19266db14
# Test Case 12 FAIL: C[3][0] mismatch! Actual 0, Expected 1b7ad2a93
# Test Case 12 FAIL: C[3][1] mismatch! Actual 0, Expected 0e43661fd
# Test Case 12 FAIL: C[3][2] mismatch! Actual 0, Expected 14e1c4724
# Test Case 12 FAIL: C[3][3] mismatch! Actual 0, Expected 11d11beaf
# Test Case 12 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @11196000 Starting Test Case 13 of 100
# ===================================================
# Reading test case 13:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_13/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @11196000 Matrix Partition
# ===================================================
# @11196000 Matrix partition ended! 
# @11196000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f3cc
#   Loading A[0][1] (Bank 0, Addr 1) with caae
#   Loading A[0][2] (Bank 0, Addr 2) with 4aa0
#   Loading A[0][3] (Bank 0, Addr 3) with 5063
#   Loading A[1][0] (Bank 1, Addr 0) with cfa5
#   Loading A[1][1] (Bank 1, Addr 1) with 127e
#   Loading A[1][2] (Bank 1, Addr 2) with aba7
#   Loading A[1][3] (Bank 1, Addr 3) with e4c4
#   Loading A[2][0] (Bank 2, Addr 0) with 35d7
#   Loading A[2][1] (Bank 2, Addr 1) with d007
#   Loading A[2][2] (Bank 2, Addr 2) with ac26
#   Loading A[2][3] (Bank 2, Addr 3) with 1918
#   Loading A[3][0] (Bank 3, Addr 0) with 3226
#   Loading A[3][1] (Bank 3, Addr 1) with e0b5
#   Loading A[3][2] (Bank 3, Addr 2) with d8e8
#   Loading A[3][3] (Bank 3, Addr 3) with fe83
#   Loading B[0][0] (Bank 0, Addr 0) with 6b45
#   Loading B[1][0] (Bank 0, Addr 1) with 9b9b
#   Loading B[2][0] (Bank 0, Addr 2) with bf62
#   Loading B[3][0] (Bank 0, Addr 3) with 1242
#   Loading B[0][1] (Bank 1, Addr 0) with 22d7
#   Loading B[1][1] (Bank 1, Addr 1) with 4c6a
#   Loading B[2][1] (Bank 1, Addr 2) with 10fa
#   Loading B[3][1] (Bank 1, Addr 3) with 32d2
#   Loading B[0][2] (Bank 2, Addr 0) with 54ea
#   Loading B[1][2] (Bank 2, Addr 1) with af63
#   Loading B[2][2] (Bank 2, Addr 2) with d5ef
#   Loading B[3][2] (Bank 2, Addr 3) with e163
#   Loading B[0][3] (Bank 3, Addr 0) with 5845
#   Loading B[1][3] (Bank 3, Addr 1) with 49da
#   Loading B[2][3] (Bank 3, Addr 2) with 0cd4
#   Loading B[3][3] (Bank 3, Addr 3) with 3cc3
# Matrix loading complete.
# @11535000 Simulating controller signals to execute multiplication...
# @11555000: Starting input feeding sequence...
# @11596000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @11606000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @11885000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 13...
# Test Case 13 FAIL: C[0][0] mismatch! Actual 0, Expected 0a5909e53
# Test Case 13 FAIL: C[0][1] mismatch! Actual 0, Expected 105856c57
# Test Case 13 FAIL: C[0][2] mismatch! Actual 0, Expected 0f389156b
# Test Case 13 FAIL: C[0][3] mismatch! Actual 0, Expected 075e9a609
# Test Case 13 FAIL: C[1][0] mismatch! Actual 0, Expected 0e9ecd9e7
# Test Case 13 FAIL: C[1][1] mismatch! Actual 1, Expected 1500f545d
# Test Case 13 FAIL: C[1][2] mismatch! Actual 0, Expected 151d9f315
# Test Case 13 FAIL: C[1][3] mismatch! Actual 0, Expected 0fe9c73cc
# Test Case 13 FAIL: C[2][0] mismatch! Actual 0, Expected 0ba855da5
# Test Case 13 FAIL: C[2][1] mismatch! Actual 1, Expected 1151c2048
# Test Case 13 FAIL: C[2][2] mismatch! Actual 0, Expected 0dde6d7f0
# Test Case 13 FAIL: C[2][3] mismatch! Actual 0, Expected 0f2717ba8
# Test Case 13 FAIL: C[3][0] mismatch! Actual 1, Expected 0a0e5a58a
# Test Case 13 FAIL: C[3][1] mismatch! Actual 0, Expected 0cfc2b8ef
# Test Case 13 FAIL: C[3][2] mismatch! Actual 0, Expected 06cfd9832
# Test Case 13 FAIL: C[3][3] mismatch! Actual 1, Expected 085a5fe5f
# Test Case 13 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12056000 Starting Test Case 14 of 100
# ===================================================
# Reading test case 14:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_14/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12056000 Matrix Partition
# ===================================================
# @12056000 Matrix partition ended! 
# @12056000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 5518
#   Loading A[0][1] (Bank 0, Addr 1) with fe9b
#   Loading A[0][2] (Bank 0, Addr 2) with 40aa
#   Loading A[0][3] (Bank 0, Addr 3) with 45f8
#   Loading A[1][0] (Bank 1, Addr 0) with 5f94
#   Loading A[1][1] (Bank 1, Addr 1) with 2b19
#   Loading A[1][2] (Bank 1, Addr 2) with b2a2
#   Loading A[1][3] (Bank 1, Addr 3) with 273c
#   Loading A[2][0] (Bank 2, Addr 0) with f3ef
#   Loading A[2][1] (Bank 2, Addr 1) with dcac
#   Loading A[2][2] (Bank 2, Addr 2) with c19a
#   Loading A[2][3] (Bank 2, Addr 3) with 0e89
#   Loading A[3][0] (Bank 3, Addr 0) with 94bd
#   Loading A[3][1] (Bank 3, Addr 1) with 3447
#   Loading A[3][2] (Bank 3, Addr 2) with 8790
#   Loading A[3][3] (Bank 3, Addr 3) with 1fe0
#   Loading B[0][0] (Bank 0, Addr 0) with 24bb
#   Loading B[1][0] (Bank 0, Addr 1) with ca2d
#   Loading B[2][0] (Bank 0, Addr 2) with d4c0
#   Loading B[3][0] (Bank 0, Addr 3) with 67b6
#   Loading B[0][1] (Bank 1, Addr 0) with e1a3
#   Loading B[1][1] (Bank 1, Addr 1) with 4a83
#   Loading B[2][1] (Bank 1, Addr 2) with 2bd6
#   Loading B[3][1] (Bank 1, Addr 3) with 686f
#   Loading B[0][2] (Bank 2, Addr 0) with 2dcd
#   Loading B[1][2] (Bank 2, Addr 1) with c8f0
#   Loading B[2][2] (Bank 2, Addr 2) with 80c2
#   Loading B[3][2] (Bank 2, Addr 3) with a59a
#   Loading B[0][3] (Bank 3, Addr 0) with 1c01
#   Loading B[1][3] (Bank 3, Addr 1) with 225d
#   Loading B[2][3] (Bank 3, Addr 2) with f781
#   Loading B[3][3] (Bank 3, Addr 3) with 7d61
# Matrix loading complete.
# @12395000 Simulating controller signals to execute multiplication...
# @12415000: Starting input feeding sequence...
# @12456000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @12466000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @12745000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 14...
# Test Case 14 FAIL: C[0][0] mismatch! Actual 0, Expected 09c5d11e4
# Test Case 14 FAIL: C[0][1] mismatch! Actual 1, Expected 1327420ad
# Test Case 14 FAIL: C[0][2] mismatch! Actual 0, Expected 161931d13
# Test Case 14 FAIL: C[0][3] mismatch! Actual 0, Expected 1301b259f
# Test Case 14 FAIL: C[1][0] mismatch! Actual 0, Expected 077b71b27
# Test Case 14 FAIL: C[1][1] mismatch! Actual 1, Expected 189d80415
# Test Case 14 FAIL: C[1][2] mismatch! Actual 0, Expected 17c809d45
# Test Case 14 FAIL: C[1][3] mismatch! Actual 0, Expected 121144c68
# Test Case 14 FAIL: C[2][0] mismatch! Actual 0, Expected 0d830a536
# Test Case 14 FAIL: C[2][1] mismatch! Actual 0, Expected 11137ee78
# Test Case 14 FAIL: C[2][2] mismatch! Actual 0, Expected 138c3c730
# Test Case 14 FAIL: C[2][3] mismatch! Actual 0, Expected 122b3094e
# Test Case 14 FAIL: C[3][0] mismatch! Actual 1, Expected 032b50bf1
# Test Case 14 FAIL: C[3][1] mismatch! Actual 0, Expected 0525d651c
# Test Case 14 FAIL: C[3][2] mismatch! Actual 1, Expected 066fe6dda
# Test Case 14 FAIL: C[3][3] mismatch! Actual 1, Expected 0455d689e
# Test Case 14 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @12916000 Starting Test Case 15 of 100
# ===================================================
# Reading test case 15:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_15/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @12916000 Matrix Partition
# ===================================================
# @12916000 Matrix partition ended! 
# @12916000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 8013
#   Loading A[0][1] (Bank 0, Addr 1) with b874
#   Loading A[0][2] (Bank 0, Addr 2) with ee81
#   Loading A[0][3] (Bank 0, Addr 3) with 5230
#   Loading A[1][0] (Bank 1, Addr 0) with 9337
#   Loading A[1][1] (Bank 1, Addr 1) with 02e3
#   Loading A[1][2] (Bank 1, Addr 2) with c2d9
#   Loading A[1][3] (Bank 1, Addr 3) with efe6
#   Loading A[2][0] (Bank 2, Addr 0) with fc98
#   Loading A[2][1] (Bank 2, Addr 1) with b2d2
#   Loading A[2][2] (Bank 2, Addr 2) with a055
#   Loading A[2][3] (Bank 2, Addr 3) with 22a3
#   Loading A[3][0] (Bank 3, Addr 0) with 9b31
#   Loading A[3][1] (Bank 3, Addr 1) with cba8
#   Loading A[3][2] (Bank 3, Addr 2) with 3993
#   Loading A[3][3] (Bank 3, Addr 3) with 1b9a
#   Loading B[0][0] (Bank 0, Addr 0) with e445
#   Loading B[1][0] (Bank 0, Addr 1) with 8101
#   Loading B[2][0] (Bank 0, Addr 2) with 5149
#   Loading B[3][0] (Bank 0, Addr 3) with a956
#   Loading B[0][1] (Bank 1, Addr 0) with b46f
#   Loading B[1][1] (Bank 1, Addr 1) with 3297
#   Loading B[2][1] (Bank 1, Addr 2) with 0255
#   Loading B[3][1] (Bank 1, Addr 3) with b8f4
#   Loading B[0][2] (Bank 2, Addr 0) with 439f
#   Loading B[1][2] (Bank 2, Addr 1) with 976c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a25
#   Loading B[3][2] (Bank 2, Addr 3) with c6a5
#   Loading B[0][3] (Bank 3, Addr 0) with 23bf
#   Loading B[1][3] (Bank 3, Addr 1) with 97fb
#   Loading B[2][3] (Bank 3, Addr 2) with 5077
#   Loading B[3][3] (Bank 3, Addr 3) with c9a5
# Matrix loading complete.
# @13255000 Simulating controller signals to execute multiplication...
# @13275000: Starting input feeding sequence...
# @13316000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @13326000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @13605000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 15...
# Test Case 15 FAIL: C[0][0] mismatch! Actual 0, Expected 1325a18ef
# Test Case 15 FAIL: C[0][1] mismatch! Actual 0, Expected 14f2beeaf
# Test Case 15 FAIL: C[0][2] mismatch! Actual 0, Expected 0c384bd6d
# Test Case 15 FAIL: C[0][3] mismatch! Actual 0, Expected 1fd51475b
# Test Case 15 FAIL: C[1][0] mismatch! Actual 1, Expected 0f22dd477
# Test Case 15 FAIL: C[1][1] mismatch! Actual 1, Expected 140324aa9
# Test Case 15 FAIL: C[1][2] mismatch! Actual 1, Expected 0c4bfffe5
# Test Case 15 FAIL: C[1][3] mismatch! Actual 1, Expected 1a7444bf6
# Test Case 15 FAIL: C[2][0] mismatch! Actual 0, Expected 190641e54
# Test Case 15 FAIL: C[2][1] mismatch! Actual 0, Expected 11fb52e7d
# Test Case 15 FAIL: C[2][2] mismatch! Actual 0, Expected 0a2144974
# Test Case 15 FAIL: C[2][3] mismatch! Actual 0, Expected 1d44b92b2
# Test Case 15 FAIL: C[3][0] mismatch! Actual 0, Expected 0ff5f75cd
# Test Case 15 FAIL: C[3][1] mismatch! Actual 0, Expected 07db2969c
# Test Case 15 FAIL: C[3][2] mismatch! Actual 0, Expected 033518733
# Test Case 15 FAIL: C[3][3] mismatch! Actual 0, Expected 1144d5ca9
# Test Case 15 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @13776000 Starting Test Case 16 of 100
# ===================================================
# Reading test case 16:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_16/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @13776000 Matrix Partition
# ===================================================
# @13776000 Matrix partition ended! 
# @13776000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bf38
#   Loading A[0][1] (Bank 0, Addr 1) with 0cc3
#   Loading A[0][2] (Bank 0, Addr 2) with 2d23
#   Loading A[0][3] (Bank 0, Addr 3) with c654
#   Loading A[1][0] (Bank 1, Addr 0) with efa7
#   Loading A[1][1] (Bank 1, Addr 1) with fb14
#   Loading A[1][2] (Bank 1, Addr 2) with e87e
#   Loading A[1][3] (Bank 1, Addr 3) with 6d0d
#   Loading A[2][0] (Bank 2, Addr 0) with a8cf
#   Loading A[2][1] (Bank 2, Addr 1) with 0908
#   Loading A[2][2] (Bank 2, Addr 2) with a07d
#   Loading A[2][3] (Bank 2, Addr 3) with f0ac
#   Loading A[3][0] (Bank 3, Addr 0) with a4d5
#   Loading A[3][1] (Bank 3, Addr 1) with 337b
#   Loading A[3][2] (Bank 3, Addr 2) with 4cab
#   Loading A[3][3] (Bank 3, Addr 3) with d6f5
#   Loading B[0][0] (Bank 0, Addr 0) with 3932
#   Loading B[1][0] (Bank 0, Addr 1) with 4d8a
#   Loading B[2][0] (Bank 0, Addr 2) with a034
#   Loading B[3][0] (Bank 0, Addr 3) with 87c4
#   Loading B[0][1] (Bank 1, Addr 0) with 9bba
#   Loading B[1][1] (Bank 1, Addr 1) with b864
#   Loading B[2][1] (Bank 1, Addr 2) with 9314
#   Loading B[3][1] (Bank 1, Addr 3) with 8d52
#   Loading B[0][2] (Bank 2, Addr 0) with c81e
#   Loading B[1][2] (Bank 2, Addr 1) with 6323
#   Loading B[2][2] (Bank 2, Addr 2) with dbfe
#   Loading B[3][2] (Bank 2, Addr 3) with f3c1
#   Loading B[0][3] (Bank 3, Addr 0) with 2fb6
#   Loading B[1][3] (Bank 3, Addr 1) with be17
#   Loading B[2][3] (Bank 3, Addr 2) with 6636
#   Loading B[3][3] (Bank 3, Addr 3) with 4425
# Matrix loading complete.
# @14115000 Simulating controller signals to execute multiplication...
# @14135000: Starting input feeding sequence...
# @14176000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @14186000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @14465000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 16...
# Test Case 16 FAIL: C[0][0] mismatch! Actual 0, Expected 15f2ed7f6
# Test Case 16 FAIL: C[0][1] mismatch! Actual 0, Expected 1a24c97dc
# Test Case 16 FAIL: C[0][2] mismatch! Actual 0, Expected 1d439aabc
# Test Case 16 FAIL: C[0][3] mismatch! Actual 0, Expected 1b650d536
# Test Case 16 FAIL: C[1][0] mismatch! Actual 0, Expected 0ac3cef00
# Test Case 16 FAIL: C[1][1] mismatch! Actual 1, Expected 0e26f3a13
# Test Case 16 FAIL: C[1][2] mismatch! Actual 1, Expected 0b48d3d0e
# Test Case 16 FAIL: C[1][3] mismatch! Actual 1, Expected 0a7ac8e83
# Test Case 16 FAIL: C[2][0] mismatch! Actual 0, Expected 123412e9a
# Test Case 16 FAIL: C[2][1] mismatch! Actual 0, Expected 12c35528a
# Test Case 16 FAIL: C[2][2] mismatch! Actual 0, Expected 14a58080c
# Test Case 16 FAIL: C[2][3] mismatch! Actual 0, Expected 14580081c
# Test Case 16 FAIL: C[3][0] mismatch! Actual 0, Expected 152d7ec30
# Test Case 16 FAIL: C[3][1] mismatch! Actual 1, Expected 1876eafe3
# Test Case 16 FAIL: C[3][2] mismatch! Actual 0, Expected 1df68a96a
# Test Case 16 FAIL: C[3][3] mismatch! Actual 1, Expected 1c3c2168f
# Test Case 16 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @14636000 Starting Test Case 17 of 100
# ===================================================
# Reading test case 17:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_17/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @14636000 Matrix Partition
# ===================================================
# @14636000 Matrix partition ended! 
# @14636000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6c77
#   Loading A[0][1] (Bank 0, Addr 1) with 33ae
#   Loading A[0][2] (Bank 0, Addr 2) with 1949
#   Loading A[0][3] (Bank 0, Addr 3) with c2ac
#   Loading A[1][0] (Bank 1, Addr 0) with 74ca
#   Loading A[1][1] (Bank 1, Addr 1) with a4bb
#   Loading A[1][2] (Bank 1, Addr 2) with 5b33
#   Loading A[1][3] (Bank 1, Addr 3) with 086c
#   Loading A[2][0] (Bank 2, Addr 0) with 1549
#   Loading A[2][1] (Bank 2, Addr 1) with 602f
#   Loading A[2][2] (Bank 2, Addr 2) with 3fad
#   Loading A[2][3] (Bank 2, Addr 3) with bc83
#   Loading A[3][0] (Bank 3, Addr 0) with a3b9
#   Loading A[3][1] (Bank 3, Addr 1) with bfbe
#   Loading A[3][2] (Bank 3, Addr 2) with 0884
#   Loading A[3][3] (Bank 3, Addr 3) with e608
#   Loading B[0][0] (Bank 0, Addr 0) with 2b55
#   Loading B[1][0] (Bank 0, Addr 1) with 4904
#   Loading B[2][0] (Bank 0, Addr 2) with 8a0c
#   Loading B[3][0] (Bank 0, Addr 3) with b0ba
#   Loading B[0][1] (Bank 1, Addr 0) with 4193
#   Loading B[1][1] (Bank 1, Addr 1) with 858f
#   Loading B[2][1] (Bank 1, Addr 2) with b102
#   Loading B[3][1] (Bank 1, Addr 3) with 0e75
#   Loading B[0][2] (Bank 2, Addr 0) with c8a1
#   Loading B[1][2] (Bank 2, Addr 1) with b09f
#   Loading B[2][2] (Bank 2, Addr 2) with 8bb1
#   Loading B[3][2] (Bank 2, Addr 3) with 4b2b
#   Loading B[0][3] (Bank 3, Addr 0) with b8e2
#   Loading B[1][3] (Bank 3, Addr 1) with a481
#   Loading B[2][3] (Bank 3, Addr 2) with 2498
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @14975000 Simulating controller signals to execute multiplication...
# @14995000: Starting input feeding sequence...
# @15036000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15046000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @15325000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 17...
# Test Case 17 FAIL: C[0][0] mismatch! Actual 0, Expected 0b73246bc
# Test Case 17 FAIL: C[0][1] mismatch! Actual 0, Expected 0d3c23c42
# Test Case 17 FAIL: C[0][2] mismatch! Actual 0, Expected 0ae426379
# Test Case 17 FAIL: C[0][3] mismatch! Actual 0, Expected 077aff06e
# Test Case 17 FAIL: C[1][0] mismatch! Actual 0, Expected 108cc8072
# Test Case 17 FAIL: C[1][1] mismatch! Actual 1, Expected 12240fc1c
# Test Case 17 FAIL: C[1][2] mismatch! Actual 0, Expected 0dda962ed
# Test Case 17 FAIL: C[1][3] mismatch! Actual 1, Expected 06ea7fa12
# Test Case 17 FAIL: C[2][0] mismatch! Actual 0, Expected 053b191db
# Test Case 17 FAIL: C[2][1] mismatch! Actual 0, Expected 06831fd98
# Test Case 17 FAIL: C[2][2] mismatch! Actual 0, Expected 070a816cf
# Test Case 17 FAIL: C[2][3] mismatch! Actual 0, Expected 02af705d4
# Test Case 17 FAIL: C[3][0] mismatch! Actual 0, Expected 15cf98293
# Test Case 17 FAIL: C[3][1] mismatch! Actual 1, Expected 151cb1669
# Test Case 17 FAIL: C[3][2] mismatch! Actual 0, Expected 0f68bc13b
# Test Case 17 FAIL: C[3][3] mismatch! Actual 1, Expected 0eb208f2d
# Test Case 17 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @15496000 Starting Test Case 18 of 100
# ===================================================
# Reading test case 18:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_18/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @15496000 Matrix Partition
# ===================================================
# @15496000 Matrix partition ended! 
# @15496000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with cd6b
#   Loading A[0][1] (Bank 0, Addr 1) with 4374
#   Loading A[0][2] (Bank 0, Addr 2) with d8de
#   Loading A[0][3] (Bank 0, Addr 3) with 0bcd
#   Loading A[1][0] (Bank 1, Addr 0) with ebff
#   Loading A[1][1] (Bank 1, Addr 1) with d76a
#   Loading A[1][2] (Bank 1, Addr 2) with 5315
#   Loading A[1][3] (Bank 1, Addr 3) with 377a
#   Loading A[2][0] (Bank 2, Addr 0) with 881b
#   Loading A[2][1] (Bank 2, Addr 1) with 3ecf
#   Loading A[2][2] (Bank 2, Addr 2) with 6bf9
#   Loading A[2][3] (Bank 2, Addr 3) with 5223
#   Loading A[3][0] (Bank 3, Addr 0) with 87cd
#   Loading A[3][1] (Bank 3, Addr 1) with 2a6f
#   Loading A[3][2] (Bank 3, Addr 2) with c889
#   Loading A[3][3] (Bank 3, Addr 3) with f832
#   Loading B[0][0] (Bank 0, Addr 0) with dcf0
#   Loading B[1][0] (Bank 0, Addr 1) with 00f3
#   Loading B[2][0] (Bank 0, Addr 2) with a35c
#   Loading B[3][0] (Bank 0, Addr 3) with aa65
#   Loading B[0][1] (Bank 1, Addr 0) with 222b
#   Loading B[1][1] (Bank 1, Addr 1) with df2f
#   Loading B[2][1] (Bank 1, Addr 2) with da28
#   Loading B[3][1] (Bank 1, Addr 3) with eaa8
#   Loading B[0][2] (Bank 2, Addr 0) with ff56
#   Loading B[1][2] (Bank 2, Addr 1) with 6ba0
#   Loading B[2][2] (Bank 2, Addr 2) with 3e1f
#   Loading B[3][2] (Bank 2, Addr 3) with 90d1
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc4
#   Loading B[1][3] (Bank 3, Addr 1) with 671c
#   Loading B[2][3] (Bank 3, Addr 2) with ba64
#   Loading B[3][3] (Bank 3, Addr 3) with a2ab
# Matrix loading complete.
# @15835000 Simulating controller signals to execute multiplication...
# @15855000: Starting input feeding sequence...
# @15896000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @15906000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @16185000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 18...
# Test Case 18 FAIL: C[0][0] mismatch! Actual 0, Expected 15ec6702b
# Test Case 18 FAIL: C[0][1] mismatch! Actual 1, Expected 13e6c20ae
# Test Case 18 FAIL: C[0][2] mismatch! Actual 0, Expected 1d017fca5
# Test Case 18 FAIL: C[0][3] mismatch! Actual 0, Expected 20454cc89
# Test Case 18 FAIL: C[1][0] mismatch! Actual 0, Expected 0978fbc14
# Test Case 18 FAIL: C[1][1] mismatch! Actual 0, Expected 0e78bfd16
# Test Case 18 FAIL: C[1][2] mismatch! Actual 0, Expected 110bffcad
# Test Case 18 FAIL: C[1][3] mismatch! Actual 1, Expected 130d83378
# Test Case 18 FAIL: C[2][0] mismatch! Actual 0, Expected 13b298f31
# Test Case 18 FAIL: C[2][1] mismatch! Actual 0, Expected 0c7660331
# Test Case 18 FAIL: C[2][2] mismatch! Actual 0, Expected 17d6567bb
# Test Case 18 FAIL: C[2][3] mismatch! Actual 0, Expected 199018f2a
# Test Case 18 FAIL: C[3][0] mismatch! Actual 0, Expected 06eeb62b8
# Test Case 18 FAIL: C[3][1] mismatch! Actual 0, Expected 0b6e7e355
# Test Case 18 FAIL: C[3][2] mismatch! Actual 0, Expected 0ff720781
# Test Case 18 FAIL: C[3][3] mismatch! Actual 0, Expected 106e0e1ea
# Test Case 18 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @16356000 Starting Test Case 19 of 100
# ===================================================
# Reading test case 19:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_19/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @16356000 Matrix Partition
# ===================================================
# @16356000 Matrix partition ended! 
# @16356000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4ee
#   Loading A[0][1] (Bank 0, Addr 1) with e7d1
#   Loading A[0][2] (Bank 0, Addr 2) with 03a8
#   Loading A[0][3] (Bank 0, Addr 3) with 97d0
#   Loading A[1][0] (Bank 1, Addr 0) with 9a37
#   Loading A[1][1] (Bank 1, Addr 1) with 8aca
#   Loading A[1][2] (Bank 1, Addr 2) with cb14
#   Loading A[1][3] (Bank 1, Addr 3) with 916b
#   Loading A[2][0] (Bank 2, Addr 0) with 3e85
#   Loading A[2][1] (Bank 2, Addr 1) with 83c8
#   Loading A[2][2] (Bank 2, Addr 2) with 94f6
#   Loading A[2][3] (Bank 2, Addr 3) with ead0
#   Loading A[3][0] (Bank 3, Addr 0) with ac60
#   Loading A[3][1] (Bank 3, Addr 1) with 5c5f
#   Loading A[3][2] (Bank 3, Addr 2) with 3852
#   Loading A[3][3] (Bank 3, Addr 3) with ba7a
#   Loading B[0][0] (Bank 0, Addr 0) with fe77
#   Loading B[1][0] (Bank 0, Addr 1) with ad8e
#   Loading B[2][0] (Bank 0, Addr 2) with 9a34
#   Loading B[3][0] (Bank 0, Addr 3) with 7f8e
#   Loading B[0][1] (Bank 1, Addr 0) with 5d1a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ae
#   Loading B[2][1] (Bank 1, Addr 2) with 9ffd
#   Loading B[3][1] (Bank 1, Addr 3) with 6841
#   Loading B[0][2] (Bank 2, Addr 0) with 3375
#   Loading B[1][2] (Bank 2, Addr 1) with 6107
#   Loading B[2][2] (Bank 2, Addr 2) with 4420
#   Loading B[3][2] (Bank 2, Addr 3) with 6583
#   Loading B[0][3] (Bank 3, Addr 0) with db9d
#   Loading B[1][3] (Bank 3, Addr 1) with 492a
#   Loading B[2][3] (Bank 3, Addr 2) with 66cd
#   Loading B[3][3] (Bank 3, Addr 3) with 121b
# Matrix loading complete.
# @16695000 Simulating controller signals to execute multiplication...
# @16715000: Starting input feeding sequence...
# @16756000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @16766000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @17045000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 19...
# Test Case 19 FAIL: C[0][0] mismatch! Actual 0, Expected 19c463be1
# Test Case 19 FAIL: C[0][1] mismatch! Actual 0, Expected 10b1e21c9
# Test Case 19 FAIL: C[0][2] mismatch! Actual 0, Expected 12cdb2b33
# Test Case 19 FAIL: C[0][3] mismatch! Actual 0, Expected 0c5e8332a
# Test Case 19 FAIL: C[1][0] mismatch! Actual 0, Expected 182a19856
# Test Case 19 FAIL: C[1][1] mismatch! Actual 0, Expected 12016b148
# Test Case 19 FAIL: C[1][2] mismatch! Actual 0, Expected 12a88db29
# Test Case 19 FAIL: C[1][3] mismatch! Actual 0, Expected 0e6d05595
# Test Case 19 FAIL: C[2][0] mismatch! Actual 0, Expected 09bbf0dd8
# Test Case 19 FAIL: C[2][1] mismatch! Actual 0, Expected 09ae64ef6
# Test Case 19 FAIL: C[2][2] mismatch! Actual 0, Expected 0bf5fa94e
# Test Case 19 FAIL: C[2][3] mismatch! Actual 0, Expected 093930bcc
# Test Case 19 FAIL: C[3][0] mismatch! Actual 0, Expected 19af51170
# Test Case 19 FAIL: C[3][1] mismatch! Actual 0, Expected 12e6705ce
# Test Case 19 FAIL: C[3][2] mismatch! Actual 0, Expected 13fb1abb1
# Test Case 19 FAIL: C[3][3] mismatch! Actual 0, Expected 0f12940d9
# Test Case 19 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @17216000 Starting Test Case 20 of 100
# ===================================================
# Reading test case 20:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_20/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @17216000 Matrix Partition
# ===================================================
# @17216000 Matrix partition ended! 
# @17216000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 3bf9
#   Loading A[0][1] (Bank 0, Addr 1) with 3fa9
#   Loading A[0][2] (Bank 0, Addr 2) with 6ddd
#   Loading A[0][3] (Bank 0, Addr 3) with d7cf
#   Loading A[1][0] (Bank 1, Addr 0) with 6b9d
#   Loading A[1][1] (Bank 1, Addr 1) with 0e33
#   Loading A[1][2] (Bank 1, Addr 2) with aafa
#   Loading A[1][3] (Bank 1, Addr 3) with d2a3
#   Loading A[2][0] (Bank 2, Addr 0) with 8dec
#   Loading A[2][1] (Bank 2, Addr 1) with e147
#   Loading A[2][2] (Bank 2, Addr 2) with 7f94
#   Loading A[2][3] (Bank 2, Addr 3) with 1b9c
#   Loading A[3][0] (Bank 3, Addr 0) with 3fce
#   Loading A[3][1] (Bank 3, Addr 1) with 23f2
#   Loading A[3][2] (Bank 3, Addr 2) with 7c98
#   Loading A[3][3] (Bank 3, Addr 3) with b54a
#   Loading B[0][0] (Bank 0, Addr 0) with b233
#   Loading B[1][0] (Bank 0, Addr 1) with 08ee
#   Loading B[2][0] (Bank 0, Addr 2) with 33d2
#   Loading B[3][0] (Bank 0, Addr 3) with 6b1f
#   Loading B[0][1] (Bank 1, Addr 0) with 1532
#   Loading B[1][1] (Bank 1, Addr 1) with 4f2e
#   Loading B[2][1] (Bank 1, Addr 2) with b4e2
#   Loading B[3][1] (Bank 1, Addr 3) with 4267
#   Loading B[0][2] (Bank 2, Addr 0) with 9a2e
#   Loading B[1][2] (Bank 2, Addr 1) with 67b5
#   Loading B[2][2] (Bank 2, Addr 2) with a2dc
#   Loading B[3][2] (Bank 2, Addr 3) with 197e
#   Loading B[0][3] (Bank 3, Addr 0) with 72d3
#   Loading B[1][3] (Bank 3, Addr 1) with 030b
#   Loading B[2][3] (Bank 3, Addr 2) with 9c52
#   Loading B[3][3] (Bank 3, Addr 3) with 0246
# Matrix loading complete.
# @17555000 Simulating controller signals to execute multiplication...
# @17575000: Starting input feeding sequence...
# @17616000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @17626000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @17905000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 20...
# Test Case 20 FAIL: C[0][0] mismatch! Actual 0, Expected 0a4bfc577
# Test Case 20 FAIL: C[0][1] mismatch! Actual 0, Expected 05da0c66a
# Test Case 20 FAIL: C[0][2] mismatch! Actual 0, Expected 0d96c78a8
# Test Case 20 FAIL: C[0][3] mismatch! Actual 0, Expected 043b510ce
# Test Case 20 FAIL: C[1][0] mismatch! Actual 1, Expected 0c549bad9
# Test Case 20 FAIL: C[1][1] mismatch! Actual 0, Expected 0624cfae1
# Test Case 20 FAIL: C[1][2] mismatch! Actual 1, Expected 0bc2ecb30
# Test Case 20 FAIL: C[1][3] mismatch! Actual 1, Expected 03512bd1a
# Test Case 20 FAIL: C[2][0] mismatch! Actual 0, Expected 0df59c9bb
# Test Case 20 FAIL: C[2][1] mismatch! Actual 0, Expected 06de0cc8e
# Test Case 20 FAIL: C[2][2] mismatch! Actual 0, Expected 12c49b2de
# Test Case 20 FAIL: C[2][3] mismatch! Actual 0, Expected 068216bc1
# Test Case 20 FAIL: C[3][0] mismatch! Actual 0, Expected 1099a9d19
# Test Case 20 FAIL: C[3][1] mismatch! Actual 0, Expected 056043236
# Test Case 20 FAIL: C[3][2] mismatch! Actual 0, Expected 140c77078
# Test Case 20 FAIL: C[3][3] mismatch! Actual 0, Expected 0954c65aa
# Test Case 20 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @18076000 Starting Test Case 21 of 100
# ===================================================
# Reading test case 21:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_21/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @18076000 Matrix Partition
# ===================================================
# @18076000 Matrix partition ended! 
# @18076000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 2b46
#   Loading A[0][1] (Bank 0, Addr 1) with 7631
#   Loading A[0][2] (Bank 0, Addr 2) with 08e8
#   Loading A[0][3] (Bank 0, Addr 3) with d98c
#   Loading A[1][0] (Bank 1, Addr 0) with 570d
#   Loading A[1][1] (Bank 1, Addr 1) with b31d
#   Loading A[1][2] (Bank 1, Addr 2) with 0b94
#   Loading A[1][3] (Bank 1, Addr 3) with a1d8
#   Loading A[2][0] (Bank 2, Addr 0) with be24
#   Loading A[2][1] (Bank 2, Addr 1) with 3dab
#   Loading A[2][2] (Bank 2, Addr 2) with d581
#   Loading A[2][3] (Bank 2, Addr 3) with b4a5
#   Loading A[3][0] (Bank 3, Addr 0) with 766e
#   Loading A[3][1] (Bank 3, Addr 1) with 5e6d
#   Loading A[3][2] (Bank 3, Addr 2) with bd75
#   Loading A[3][3] (Bank 3, Addr 3) with 5d35
#   Loading B[0][0] (Bank 0, Addr 0) with e204
#   Loading B[1][0] (Bank 0, Addr 1) with 536a
#   Loading B[2][0] (Bank 0, Addr 2) with 8a59
#   Loading B[3][0] (Bank 0, Addr 3) with 3372
#   Loading B[0][1] (Bank 1, Addr 0) with ccbb
#   Loading B[1][1] (Bank 1, Addr 1) with c153
#   Loading B[2][1] (Bank 1, Addr 2) with 5dd6
#   Loading B[3][1] (Bank 1, Addr 3) with 9215
#   Loading B[0][2] (Bank 2, Addr 0) with 56b7
#   Loading B[1][2] (Bank 2, Addr 1) with f0d1
#   Loading B[2][2] (Bank 2, Addr 2) with c2dc
#   Loading B[3][2] (Bank 2, Addr 3) with 21d0
#   Loading B[0][3] (Bank 3, Addr 0) with 11fc
#   Loading B[1][3] (Bank 3, Addr 1) with 1be3
#   Loading B[2][3] (Bank 3, Addr 2) with 54d6
#   Loading B[3][3] (Bank 3, Addr 3) with bf29
# Matrix loading complete.
# @18415000 Simulating controller signals to execute multiplication...
# @18435000: Starting input feeding sequence...
# @18476000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @18486000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @18765000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 21...
# Test Case 21 FAIL: C[0][0] mismatch! Actual 0, Expected 0b48c519b
# Test Case 21 FAIL: C[0][1] mismatch! Actual 0, Expected 10f9a3c21
# Test Case 21 FAIL: C[0][2] mismatch! Actual 0, Expected 0ef450c18
# Test Case 21 FAIL: C[0][3] mismatch! Actual 0, Expected 0abeaf01b
# Test Case 21 FAIL: C[1][0] mismatch! Actual 0, Expected 1131cc47c
# Test Case 21 FAIL: C[1][1] mismatch! Actual 1, Expected 0f211a4f3
# Test Case 21 FAIL: C[1][2] mismatch! Actual 0, Expected 0cfc20c59
# Test Case 21 FAIL: C[1][3] mismatch! Actual 1, Expected 0cc9d3898
# Test Case 21 FAIL: C[2][0] mismatch! Actual 0, Expected 066c0921f
# Test Case 21 FAIL: C[2][1] mismatch! Actual 0, Expected 0e91fd11c
# Test Case 21 FAIL: C[2][2] mismatch! Actual 0, Expected 0ea5a9b0a
# Test Case 21 FAIL: C[2][3] mismatch! Actual 1, Expected 0b2114701
# Test Case 21 FAIL: C[3][0] mismatch! Actual 0, Expected 1853c2c17
# Test Case 21 FAIL: C[3][1] mismatch! Actual 1, Expected 1753030b4
# Test Case 21 FAIL: C[3][2] mismatch! Actual 0, Expected 159477256
# Test Case 21 FAIL: C[3][3] mismatch! Actual 1, Expected 0e587be9d
# Test Case 21 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @18936000 Starting Test Case 22 of 100
# ===================================================
# Reading test case 22:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_22/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @18936000 Matrix Partition
# ===================================================
# @18936000 Matrix partition ended! 
# @18936000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dc52
#   Loading A[0][1] (Bank 0, Addr 1) with 1713
#   Loading A[0][2] (Bank 0, Addr 2) with fc9d
#   Loading A[0][3] (Bank 0, Addr 3) with d833
#   Loading A[1][0] (Bank 1, Addr 0) with 893b
#   Loading A[1][1] (Bank 1, Addr 1) with 362e
#   Loading A[1][2] (Bank 1, Addr 2) with a562
#   Loading A[1][3] (Bank 1, Addr 3) with 4ca0
#   Loading A[2][0] (Bank 2, Addr 0) with 192d
#   Loading A[2][1] (Bank 2, Addr 1) with 4bfa
#   Loading A[2][2] (Bank 2, Addr 2) with d1d3
#   Loading A[2][3] (Bank 2, Addr 3) with 295a
#   Loading A[3][0] (Bank 3, Addr 0) with 783f
#   Loading A[3][1] (Bank 3, Addr 1) with 025b
#   Loading A[3][2] (Bank 3, Addr 2) with 5e47
#   Loading A[3][3] (Bank 3, Addr 3) with 2afc
#   Loading B[0][0] (Bank 0, Addr 0) with 3556
#   Loading B[1][0] (Bank 0, Addr 1) with f807
#   Loading B[2][0] (Bank 0, Addr 2) with 18a0
#   Loading B[3][0] (Bank 0, Addr 3) with c97d
#   Loading B[0][1] (Bank 1, Addr 0) with d1a4
#   Loading B[1][1] (Bank 1, Addr 1) with d399
#   Loading B[2][1] (Bank 1, Addr 2) with b713
#   Loading B[3][1] (Bank 1, Addr 3) with e42e
#   Loading B[0][2] (Bank 2, Addr 0) with cd53
#   Loading B[1][2] (Bank 2, Addr 1) with 0a61
#   Loading B[2][2] (Bank 2, Addr 2) with c3e4
#   Loading B[3][2] (Bank 2, Addr 3) with cd4b
#   Loading B[0][3] (Bank 3, Addr 0) with 1489
#   Loading B[1][3] (Bank 3, Addr 1) with 7ec8
#   Loading B[2][3] (Bank 3, Addr 2) with d878
#   Loading B[3][3] (Bank 3, Addr 3) with 6411
# Matrix loading complete.
# @19275000 Simulating controller signals to execute multiplication...
# @19295000: Starting input feeding sequence...
# @19336000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @19346000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @19625000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 22...
# Test Case 22 FAIL: C[0][0] mismatch! Actual 0, Expected 0bc1e8aa6
# Test Case 22 FAIL: C[0][1] mismatch! Actual 1, Expected 183755ac6
# Test Case 22 FAIL: C[0][2] mismatch! Actual 0, Expected 0f045f83d
# Test Case 22 FAIL: C[0][3] mismatch! Actual 0, Expected 16aea2c02
# Test Case 22 FAIL: C[1][0] mismatch! Actual 0, Expected 06e4d259b
# Test Case 22 FAIL: C[1][1] mismatch! Actual 1, Expected 0476283d5
# Test Case 22 FAIL: C[1][2] mismatch! Actual 0, Expected 06518169a
# Test Case 22 FAIL: C[1][3] mismatch! Actual 0, Expected 0804d0bd4
# Test Case 22 FAIL: C[2][0] mismatch! Actual 0, Expected 16bea50ee
# Test Case 22 FAIL: C[2][1] mismatch! Actual 1, Expected 1b4a3f648
# Test Case 22 FAIL: C[2][2] mismatch! Actual 0, Expected 17ed8a09a
# Test Case 22 FAIL: C[2][3] mismatch! Actual 0, Expected 227590bcd
# Test Case 22 FAIL: C[3][0] mismatch! Actual 1, Expected 0906811ac
# Test Case 22 FAIL: C[3][1] mismatch! Actual 1, Expected 127c3c8ff
# Test Case 22 FAIL: C[3][2] mismatch! Actual 0, Expected 08f952008
# Test Case 22 FAIL: C[3][3] mismatch! Actual 1, Expected 1206c5ac1
# Test Case 22 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @19796000 Starting Test Case 23 of 100
# ===================================================
# Reading test case 23:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_23/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @19796000 Matrix Partition
# ===================================================
# @19796000 Matrix partition ended! 
# @19796000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9208
#   Loading A[0][1] (Bank 0, Addr 1) with 8d91
#   Loading A[0][2] (Bank 0, Addr 2) with 0f91
#   Loading A[0][3] (Bank 0, Addr 3) with 4324
#   Loading A[1][0] (Bank 1, Addr 0) with 1893
#   Loading A[1][1] (Bank 1, Addr 1) with e01e
#   Loading A[1][2] (Bank 1, Addr 2) with 7421
#   Loading A[1][3] (Bank 1, Addr 3) with 0c24
#   Loading A[2][0] (Bank 2, Addr 0) with 68d0
#   Loading A[2][1] (Bank 2, Addr 1) with ec47
#   Loading A[2][2] (Bank 2, Addr 2) with 6ef2
#   Loading A[2][3] (Bank 2, Addr 3) with 26a8
#   Loading A[3][0] (Bank 3, Addr 0) with 5427
#   Loading A[3][1] (Bank 3, Addr 1) with b764
#   Loading A[3][2] (Bank 3, Addr 2) with bc95
#   Loading A[3][3] (Bank 3, Addr 3) with 5dea
#   Loading B[0][0] (Bank 0, Addr 0) with 128b
#   Loading B[1][0] (Bank 0, Addr 1) with eb07
#   Loading B[2][0] (Bank 0, Addr 2) with ba48
#   Loading B[3][0] (Bank 0, Addr 3) with 9e00
#   Loading B[0][1] (Bank 1, Addr 0) with efbc
#   Loading B[1][1] (Bank 1, Addr 1) with db1c
#   Loading B[2][1] (Bank 1, Addr 2) with 7aba
#   Loading B[3][1] (Bank 1, Addr 3) with 1968
#   Loading B[0][2] (Bank 2, Addr 0) with d9d0
#   Loading B[1][2] (Bank 2, Addr 1) with 7a26
#   Loading B[2][2] (Bank 2, Addr 2) with 39df
#   Loading B[3][2] (Bank 2, Addr 3) with 6ed6
#   Loading B[0][3] (Bank 3, Addr 0) with b124
#   Loading B[1][3] (Bank 3, Addr 1) with cd33
#   Loading B[2][3] (Bank 3, Addr 2) with 6a50
#   Loading B[3][3] (Bank 3, Addr 3) with 0583
# Matrix loading complete.
# @20135000 Simulating controller signals to execute multiplication...
# @20155000: Starting input feeding sequence...
# @20196000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @20206000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @20485000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 23...
# Test Case 23 FAIL: C[0][0] mismatch! Actual 0, Expected 0b4ff68c8
# Test Case 23 FAIL: C[0][1] mismatch! Actual 1, Expected 1109074f1
# Test Case 23 FAIL: C[0][2] mismatch! Actual 0, Expected 0b0aeda6e
# Test Case 23 FAIL: C[0][3] mismatch! Actual 0, Expected 08bc2178d
# Test Case 23 FAIL: C[1][0] mismatch! Actual 0, Expected 2240fbe83
# Test Case 23 FAIL: C[1][1] mismatch! Actual 0, Expected 24586acb5
# Test Case 23 FAIL: C[1][2] mismatch! Actual 0, Expected 15406a4ad
# Test Case 23 FAIL: C[1][3] mismatch! Actual 1, Expected 0d7dc49b6
# Test Case 23 FAIL: C[2][0] mismatch! Actual 0, Expected 14ec38d8b
# Test Case 23 FAIL: C[2][1] mismatch! Actual 1, Expected 13dc8252e
# Test Case 23 FAIL: C[2][2] mismatch! Actual 0, Expected 0aa64fc20
# Test Case 23 FAIL: C[2][3] mismatch! Actual 0, Expected 0493a07f3
# Test Case 23 FAIL: C[3][0] mismatch! Actual 0, Expected 0721b5264
# Test Case 23 FAIL: C[3][1] mismatch! Actual 0, Expected 0a5c0e67a
# Test Case 23 FAIL: C[3][2] mismatch! Actual 0, Expected 0666a55c0
# Test Case 23 FAIL: C[3][3] mismatch! Actual 0, Expected 03d66cbce
# Test Case 23 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @20656000 Starting Test Case 24 of 100
# ===================================================
# Reading test case 24:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_24/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20656000 Matrix Partition
# ===================================================
# @20656000 Matrix partition ended! 
# @20656000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 0891
#   Loading A[0][1] (Bank 0, Addr 1) with 3d27
#   Loading A[0][2] (Bank 0, Addr 2) with d5c0
#   Loading A[0][3] (Bank 0, Addr 3) with 7093
#   Loading A[1][0] (Bank 1, Addr 0) with c03d
#   Loading A[1][1] (Bank 1, Addr 1) with bbba
#   Loading A[1][2] (Bank 1, Addr 2) with e629
#   Loading A[1][3] (Bank 1, Addr 3) with a341
#   Loading A[2][0] (Bank 2, Addr 0) with a224
#   Loading A[2][1] (Bank 2, Addr 1) with b475
#   Loading A[2][2] (Bank 2, Addr 2) with 71ee
#   Loading A[2][3] (Bank 2, Addr 3) with cd06
#   Loading A[3][0] (Bank 3, Addr 0) with c965
#   Loading A[3][1] (Bank 3, Addr 1) with 0efe
#   Loading A[3][2] (Bank 3, Addr 2) with e79e
#   Loading A[3][3] (Bank 3, Addr 3) with d9c1
#   Loading B[0][0] (Bank 0, Addr 0) with b3fa
#   Loading B[1][0] (Bank 0, Addr 1) with 3827
#   Loading B[2][0] (Bank 0, Addr 2) with 9810
#   Loading B[3][0] (Bank 0, Addr 3) with 97ce
#   Loading B[0][1] (Bank 1, Addr 0) with ffef
#   Loading B[1][1] (Bank 1, Addr 1) with dc10
#   Loading B[2][1] (Bank 1, Addr 2) with 923e
#   Loading B[3][1] (Bank 1, Addr 3) with 3828
#   Loading B[0][2] (Bank 2, Addr 0) with a1be
#   Loading B[1][2] (Bank 2, Addr 1) with 17d2
#   Loading B[2][2] (Bank 2, Addr 2) with 81fb
#   Loading B[3][2] (Bank 2, Addr 3) with 4261
#   Loading B[0][3] (Bank 3, Addr 0) with 41fd
#   Loading B[1][3] (Bank 3, Addr 1) with 200a
#   Loading B[2][3] (Bank 3, Addr 2) with bc64
#   Loading B[3][3] (Bank 3, Addr 3) with c89a
# Matrix loading complete.
# @20995000 Simulating controller signals to execute multiplication...
# @21015000: Starting input feeding sequence...
# @21056000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21066000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @21345000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 24...
# Test Case 24 FAIL: C[0][0] mismatch! Actual 0, Expected 16090a516
# Test Case 24 FAIL: C[0][1] mismatch! Actual 1, Expected 0cf6c3161
# Test Case 24 FAIL: C[0][2] mismatch! Actual 0, Expected 1596fee96
# Test Case 24 FAIL: C[0][3] mismatch! Actual 1, Expected 0f71a939c
# Test Case 24 FAIL: C[1][0] mismatch! Actual 0, Expected 15c8c5898
# Test Case 24 FAIL: C[1][1] mismatch! Actual 0, Expected 0c1744d77
# Test Case 24 FAIL: C[1][2] mismatch! Actual 0, Expected 0f638cc6b
# Test Case 24 FAIL: C[1][3] mismatch! Actual 0, Expected 087fb3a93
# Test Case 24 FAIL: C[2][0] mismatch! Actual 0, Expected 2000ef691
# Test Case 24 FAIL: C[2][1] mismatch! Actual 1, Expected 11c52d238
# Test Case 24 FAIL: C[2][2] mismatch! Actual 0, Expected 1e6bda000
# Test Case 24 FAIL: C[2][3] mismatch! Actual 0, Expected 184467b22
# Test Case 24 FAIL: C[3][0] mismatch! Actual 1, Expected 1ac05066e
# Test Case 24 FAIL: C[3][1] mismatch! Actual 0, Expected 0d35bb8eb
# Test Case 24 FAIL: C[3][2] mismatch! Actual 0, Expected 1a878c334
# Test Case 24 FAIL: C[3][3] mismatch! Actual 0, Expected 1465c06d2
# Test Case 24 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @21516000 Starting Test Case 25 of 100
# ===================================================
# Reading test case 25:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_25/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @21516000 Matrix Partition
# ===================================================
# @21516000 Matrix partition ended! 
# @21516000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d286
#   Loading A[0][1] (Bank 0, Addr 1) with 4abb
#   Loading A[0][2] (Bank 0, Addr 2) with 7dc0
#   Loading A[0][3] (Bank 0, Addr 3) with bdd5
#   Loading A[1][0] (Bank 1, Addr 0) with 6b83
#   Loading A[1][1] (Bank 1, Addr 1) with 0021
#   Loading A[1][2] (Bank 1, Addr 2) with 60e7
#   Loading A[1][3] (Bank 1, Addr 3) with 9c2b
#   Loading A[2][0] (Bank 2, Addr 0) with 50a4
#   Loading A[2][1] (Bank 2, Addr 1) with fed1
#   Loading A[2][2] (Bank 2, Addr 2) with c6a9
#   Loading A[2][3] (Bank 2, Addr 3) with 5739
#   Loading A[3][0] (Bank 3, Addr 0) with bef9
#   Loading A[3][1] (Bank 3, Addr 1) with b753
#   Loading A[3][2] (Bank 3, Addr 2) with a8ee
#   Loading A[3][3] (Bank 3, Addr 3) with a16b
#   Loading B[0][0] (Bank 0, Addr 0) with 704d
#   Loading B[1][0] (Bank 0, Addr 1) with 8ab4
#   Loading B[2][0] (Bank 0, Addr 2) with 1bfa
#   Loading B[3][0] (Bank 0, Addr 3) with 354a
#   Loading B[0][1] (Bank 1, Addr 0) with 78c2
#   Loading B[1][1] (Bank 1, Addr 1) with 376c
#   Loading B[2][1] (Bank 1, Addr 2) with ced8
#   Loading B[3][1] (Bank 1, Addr 3) with 78de
#   Loading B[0][2] (Bank 2, Addr 0) with d2b2
#   Loading B[1][2] (Bank 2, Addr 1) with c525
#   Loading B[2][2] (Bank 2, Addr 2) with 038b
#   Loading B[3][2] (Bank 2, Addr 3) with 6129
#   Loading B[0][3] (Bank 3, Addr 0) with 03d4
#   Loading B[1][3] (Bank 3, Addr 1) with 6cff
#   Loading B[2][3] (Bank 3, Addr 2) with 63f3
#   Loading B[3][3] (Bank 3, Addr 3) with 1a9d
# Matrix loading complete.
# @21855000 Simulating controller signals to execute multiplication...
# @21875000: Starting input feeding sequence...
# @21916000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @21926000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @22205000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 25...
# Test Case 25 FAIL: C[0][0] mismatch! Actual 0, Expected 0d44a7ed0
# Test Case 25 FAIL: C[0][1] mismatch! Actual 1, Expected 118bfe437
# Test Case 25 FAIL: C[0][2] mismatch! Actual 0, Expected 0b98d1fcb
# Test Case 25 FAIL: C[0][3] mismatch! Actual 1, Expected 0910ab34f
# Test Case 25 FAIL: C[1][0] mismatch! Actual 0, Expected 0f54e444f
# Test Case 25 FAIL: C[1][1] mismatch! Actual 1, Expected 13acdc74a
# Test Case 25 FAIL: C[1][2] mismatch! Actual 0, Expected 0535f48ba
# Test Case 25 FAIL: C[1][3] mismatch! Actual 1, Expected 08362c20c
# Test Case 25 FAIL: C[2][0] mismatch! Actual 0, Expected 10ae6fc68
# Test Case 25 FAIL: C[2][1] mismatch! Actual 0, Expected 13a05ddf3
# Test Case 25 FAIL: C[2][2] mismatch! Actual 0, Expected 0a0bdef15
# Test Case 25 FAIL: C[2][3] mismatch! Actual 0, Expected 0a4e309d9
# Test Case 25 FAIL: C[3][0] mismatch! Actual 0, Expected 0e7241ee5
# Test Case 25 FAIL: C[3][1] mismatch! Actual 1, Expected 1108ed0ba
# Test Case 25 FAIL: C[3][2] mismatch! Actual 0, Expected 0d327d7ce
# Test Case 25 FAIL: C[3][3] mismatch! Actual 1, Expected 0a321fb9c
# Test Case 25 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @22376000 Starting Test Case 26 of 100
# ===================================================
# Reading test case 26:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_26/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @22376000 Matrix Partition
# ===================================================
# @22376000 Matrix partition ended! 
# @22376000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4b67
#   Loading A[0][1] (Bank 0, Addr 1) with fb4b
#   Loading A[0][2] (Bank 0, Addr 2) with 6f40
#   Loading A[0][3] (Bank 0, Addr 3) with ce69
#   Loading A[1][0] (Bank 1, Addr 0) with edf7
#   Loading A[1][1] (Bank 1, Addr 1) with c739
#   Loading A[1][2] (Bank 1, Addr 2) with 656e
#   Loading A[1][3] (Bank 1, Addr 3) with 5112
#   Loading A[2][0] (Bank 2, Addr 0) with c431
#   Loading A[2][1] (Bank 2, Addr 1) with e51a
#   Loading A[2][2] (Bank 2, Addr 2) with 6f39
#   Loading A[2][3] (Bank 2, Addr 3) with 8c92
#   Loading A[3][0] (Bank 3, Addr 0) with 0830
#   Loading A[3][1] (Bank 3, Addr 1) with a15d
#   Loading A[3][2] (Bank 3, Addr 2) with 6583
#   Loading A[3][3] (Bank 3, Addr 3) with a0c0
#   Loading B[0][0] (Bank 0, Addr 0) with 93d8
#   Loading B[1][0] (Bank 0, Addr 1) with a69c
#   Loading B[2][0] (Bank 0, Addr 2) with 0fef
#   Loading B[3][0] (Bank 0, Addr 3) with ab35
#   Loading B[0][1] (Bank 1, Addr 0) with ba68
#   Loading B[1][1] (Bank 1, Addr 1) with 5ccb
#   Loading B[2][1] (Bank 1, Addr 2) with 4394
#   Loading B[3][1] (Bank 1, Addr 3) with a636
#   Loading B[0][2] (Bank 2, Addr 0) with bffa
#   Loading B[1][2] (Bank 2, Addr 1) with ecfd
#   Loading B[2][2] (Bank 2, Addr 2) with c7b5
#   Loading B[3][2] (Bank 2, Addr 3) with 366f
#   Loading B[0][3] (Bank 3, Addr 0) with e942
#   Loading B[1][3] (Bank 3, Addr 1) with e35f
#   Loading B[2][3] (Bank 3, Addr 2) with dcd0
#   Loading B[3][3] (Bank 3, Addr 3) with 251d
# Matrix loading complete.
# @22715000 Simulating controller signals to execute multiplication...
# @22735000: Starting input feeding sequence...
# @22776000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @22786000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @23065000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 26...
# Test Case 26 FAIL: C[0][0] mismatch! Actual 0, Expected 17367d97a
# Test Case 26 FAIL: C[0][1] mismatch! Actual 0, Expected 14438ddde
# Test Case 26 FAIL: C[0][2] mismatch! Actual 0, Expected 0e39f5a9a
# Test Case 26 FAIL: C[0][3] mismatch! Actual 0, Expected 0f7d50a1c
# Test Case 26 FAIL: C[1][0] mismatch! Actual 0, Expected 26105d1ce
# Test Case 26 FAIL: C[1][1] mismatch! Actual 0, Expected 24f29f51c
# Test Case 26 FAIL: C[1][2] mismatch! Actual 0, Expected 1822350eb
# Test Case 26 FAIL: C[1][3] mismatch! Actual 0, Expected 17183a65c
# Test Case 26 FAIL: C[2][0] mismatch! Actual 0, Expected 13a014a20
# Test Case 26 FAIL: C[2][1] mismatch! Actual 0, Expected 12e4a8d2c
# Test Case 26 FAIL: C[2][2] mismatch! Actual 0, Expected 0d0060b15
# Test Case 26 FAIL: C[2][3] mismatch! Actual 0, Expected 0b29f3002
# Test Case 26 FAIL: C[3][0] mismatch! Actual 0, Expected 1ae1edcfc
# Test Case 26 FAIL: C[3][1] mismatch! Actual 1, Expected 1b4a00acc
# Test Case 26 FAIL: C[3][2] mismatch! Actual 0, Expected 11a8feca9
# Test Case 26 FAIL: C[3][3] mismatch! Actual 1, Expected 0f3df5997
# Test Case 26 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @23236000 Starting Test Case 27 of 100
# ===================================================
# Reading test case 27:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_27/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @23236000 Matrix Partition
# ===================================================
# @23236000 Matrix partition ended! 
# @23236000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with ea13
#   Loading A[0][1] (Bank 0, Addr 1) with a7a7
#   Loading A[0][2] (Bank 0, Addr 2) with 6691
#   Loading A[0][3] (Bank 0, Addr 3) with ff78
#   Loading A[1][0] (Bank 1, Addr 0) with f2c9
#   Loading A[1][1] (Bank 1, Addr 1) with f549
#   Loading A[1][2] (Bank 1, Addr 2) with b522
#   Loading A[1][3] (Bank 1, Addr 3) with c682
#   Loading A[2][0] (Bank 2, Addr 0) with a606
#   Loading A[2][1] (Bank 2, Addr 1) with ec08
#   Loading A[2][2] (Bank 2, Addr 2) with de49
#   Loading A[2][3] (Bank 2, Addr 3) with 68b2
#   Loading A[3][0] (Bank 3, Addr 0) with fa15
#   Loading A[3][1] (Bank 3, Addr 1) with 89a7
#   Loading A[3][2] (Bank 3, Addr 2) with 0e94
#   Loading A[3][3] (Bank 3, Addr 3) with 13e4
#   Loading B[0][0] (Bank 0, Addr 0) with fb22
#   Loading B[1][0] (Bank 0, Addr 1) with 6717
#   Loading B[2][0] (Bank 0, Addr 2) with 8224
#   Loading B[3][0] (Bank 0, Addr 3) with 3ac7
#   Loading B[0][1] (Bank 1, Addr 0) with 5c4a
#   Loading B[1][1] (Bank 1, Addr 1) with 64ea
#   Loading B[2][1] (Bank 1, Addr 2) with db47
#   Loading B[3][1] (Bank 1, Addr 3) with 9839
#   Loading B[0][2] (Bank 2, Addr 0) with 3353
#   Loading B[1][2] (Bank 2, Addr 1) with 7950
#   Loading B[2][2] (Bank 2, Addr 2) with f60f
#   Loading B[3][2] (Bank 2, Addr 3) with 5d81
#   Loading B[0][3] (Bank 3, Addr 0) with bee6
#   Loading B[1][3] (Bank 3, Addr 1) with ba4b
#   Loading B[2][3] (Bank 3, Addr 2) with 23da
#   Loading B[3][3] (Bank 3, Addr 3) with 3efe
# Matrix loading complete.
# @23575000 Simulating controller signals to execute multiplication...
# @23595000: Starting input feeding sequence...
# @23636000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @23646000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @23925000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 27...
# Test Case 27 FAIL: C[0][0] mismatch! Actual 0, Expected 218eb6c70
# Test Case 27 FAIL: C[0][1] mismatch! Actual 0, Expected 1c2a05a76
# Test Case 27 FAIL: C[0][2] mismatch! Actual 0, Expected 2098d2ca7
# Test Case 27 FAIL: C[0][3] mismatch! Actual 1, Expected 14048b762
# Test Case 27 FAIL: C[1][0] mismatch! Actual 0, Expected 192dbe0ea
# Test Case 27 FAIL: C[1][1] mismatch! Actual 0, Expected 178392e28
# Test Case 27 FAIL: C[1][2] mismatch! Actual 0, Expected 21d786d69
# Test Case 27 FAIL: C[1][3] mismatch! Actual 1, Expected 1306cfbcc
# Test Case 27 FAIL: C[2][0] mismatch! Actual 0, Expected 0dd59ebb9
# Test Case 27 FAIL: C[2][1] mismatch! Actual 0, Expected 0e4a62c47
# Test Case 27 FAIL: C[2][2] mismatch! Actual 0, Expected 1a6fc3321
# Test Case 27 FAIL: C[2][3] mismatch! Actual 0, Expected 0d807efea
# Test Case 27 FAIL: C[3][0] mismatch! Actual 0, Expected 165ff2e12
# Test Case 27 FAIL: C[3][1] mismatch! Actual 0, Expected 0f536cc08
# Test Case 27 FAIL: C[3][2] mismatch! Actual 0, Expected 193516b84
# Test Case 27 FAIL: C[3][3] mismatch! Actual 0, Expected 0dbd38924
# Test Case 27 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @24096000 Starting Test Case 28 of 100
# ===================================================
# Reading test case 28:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_28/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @24096000 Matrix Partition
# ===================================================
# @24096000 Matrix partition ended! 
# @24096000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1e91
#   Loading A[0][1] (Bank 0, Addr 1) with 3f88
#   Loading A[0][2] (Bank 0, Addr 2) with f97b
#   Loading A[0][3] (Bank 0, Addr 3) with 3be4
#   Loading A[1][0] (Bank 1, Addr 0) with b7c1
#   Loading A[1][1] (Bank 1, Addr 1) with 15f0
#   Loading A[1][2] (Bank 1, Addr 2) with 154f
#   Loading A[1][3] (Bank 1, Addr 3) with 4e31
#   Loading A[2][0] (Bank 2, Addr 0) with e329
#   Loading A[2][1] (Bank 2, Addr 1) with bc5a
#   Loading A[2][2] (Bank 2, Addr 2) with 8564
#   Loading A[2][3] (Bank 2, Addr 3) with cdbf
#   Loading A[3][0] (Bank 3, Addr 0) with b375
#   Loading A[3][1] (Bank 3, Addr 1) with 90d7
#   Loading A[3][2] (Bank 3, Addr 2) with cca5
#   Loading A[3][3] (Bank 3, Addr 3) with 70bc
#   Loading B[0][0] (Bank 0, Addr 0) with 92ad
#   Loading B[1][0] (Bank 0, Addr 1) with 8315
#   Loading B[2][0] (Bank 0, Addr 2) with fe78
#   Loading B[3][0] (Bank 0, Addr 3) with 3853
#   Loading B[0][1] (Bank 1, Addr 0) with ebb9
#   Loading B[1][1] (Bank 1, Addr 1) with d2b1
#   Loading B[2][1] (Bank 1, Addr 2) with 1535
#   Loading B[3][1] (Bank 1, Addr 3) with ee92
#   Loading B[0][2] (Bank 2, Addr 0) with aeb9
#   Loading B[1][2] (Bank 2, Addr 1) with 2ab4
#   Loading B[2][2] (Bank 2, Addr 2) with c2ff
#   Loading B[3][2] (Bank 2, Addr 3) with bcbd
#   Loading B[0][3] (Bank 3, Addr 0) with 76dd
#   Loading B[1][3] (Bank 3, Addr 1) with d793
#   Loading B[2][3] (Bank 3, Addr 2) with c111
#   Loading B[3][3] (Bank 3, Addr 3) with b248
# Matrix loading complete.
# @24435000 Simulating controller signals to execute multiplication...
# @24455000: Starting input feeding sequence...
# @24496000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @24506000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @24785000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 28...
# Test Case 28 FAIL: C[0][0] mismatch! Actual 0, Expected 1a9133018
# Test Case 28 FAIL: C[0][1] mismatch! Actual 0, Expected 163e4d559
# Test Case 28 FAIL: C[0][2] mismatch! Actual 0, Expected 161f98989
# Test Case 28 FAIL: C[0][3] mismatch! Actual 0, Expected 1d66b7f42
# Test Case 28 FAIL: C[1][0] mismatch! Actual 0, Expected 0fc6715fd
# Test Case 28 FAIL: C[1][1] mismatch! Actual 0, Expected 0cbf8c8d5
# Test Case 28 FAIL: C[1][2] mismatch! Actual 0, Expected 13dab795d
# Test Case 28 FAIL: C[1][3] mismatch! Actual 0, Expected 112275ce2
# Test Case 28 FAIL: C[2][0] mismatch! Actual 0, Expected 15c9ebeeb
# Test Case 28 FAIL: C[2][1] mismatch! Actual 0, Expected 153dc39c5
# Test Case 28 FAIL: C[2][2] mismatch! Actual 0, Expected 1f9b18294
# Test Case 28 FAIL: C[2][3] mismatch! Actual 0, Expected 13b9b972b
# Test Case 28 FAIL: C[3][0] mismatch! Actual 0, Expected 12b1478d0
# Test Case 28 FAIL: C[3][1] mismatch! Actual 0, Expected 0e04577d5
# Test Case 28 FAIL: C[3][2] mismatch! Actual 0, Expected 133bf67c2
# Test Case 28 FAIL: C[3][3] mismatch! Actual 0, Expected 13c3e07c1
# Test Case 28 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @24956000 Starting Test Case 29 of 100
# ===================================================
# Reading test case 29:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_29/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @24956000 Matrix Partition
# ===================================================
# @24956000 Matrix partition ended! 
# @24956000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c9e5
#   Loading A[0][1] (Bank 0, Addr 1) with 4e3c
#   Loading A[0][2] (Bank 0, Addr 2) with 79a5
#   Loading A[0][3] (Bank 0, Addr 3) with 65aa
#   Loading A[1][0] (Bank 1, Addr 0) with d983
#   Loading A[1][1] (Bank 1, Addr 1) with 0341
#   Loading A[1][2] (Bank 1, Addr 2) with 60be
#   Loading A[1][3] (Bank 1, Addr 3) with 4d12
#   Loading A[2][0] (Bank 2, Addr 0) with f3d3
#   Loading A[2][1] (Bank 2, Addr 1) with f92f
#   Loading A[2][2] (Bank 2, Addr 2) with cbd0
#   Loading A[2][3] (Bank 2, Addr 3) with b614
#   Loading A[3][0] (Bank 3, Addr 0) with 65ce
#   Loading A[3][1] (Bank 3, Addr 1) with aadf
#   Loading A[3][2] (Bank 3, Addr 2) with 7d67
#   Loading A[3][3] (Bank 3, Addr 3) with 3c29
#   Loading B[0][0] (Bank 0, Addr 0) with 5655
#   Loading B[1][0] (Bank 0, Addr 1) with d7e2
#   Loading B[2][0] (Bank 0, Addr 2) with c5d3
#   Loading B[3][0] (Bank 0, Addr 3) with 44ae
#   Loading B[0][1] (Bank 1, Addr 0) with 210c
#   Loading B[1][1] (Bank 1, Addr 1) with 43da
#   Loading B[2][1] (Bank 1, Addr 2) with a4f3
#   Loading B[3][1] (Bank 1, Addr 3) with 5adf
#   Loading B[0][2] (Bank 2, Addr 0) with 879e
#   Loading B[1][2] (Bank 2, Addr 1) with 624f
#   Loading B[2][2] (Bank 2, Addr 2) with 6502
#   Loading B[3][2] (Bank 2, Addr 3) with 0085
#   Loading B[0][3] (Bank 3, Addr 0) with 4cc8
#   Loading B[1][3] (Bank 3, Addr 1) with fa98
#   Loading B[2][3] (Bank 3, Addr 2) with 8a45
#   Loading B[3][3] (Bank 3, Addr 3) with fac0
# Matrix loading complete.
# @25295000 Simulating controller signals to execute multiplication...
# @25315000: Starting input feeding sequence...
# @25356000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @25366000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @25645000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 29...
# Test Case 29 FAIL: C[0][0] mismatch! Actual 0, Expected 0ffdd7e57
# Test Case 29 FAIL: C[0][1] mismatch! Actual 0, Expected 1a531b425
# Test Case 29 FAIL: C[0][2] mismatch! Actual 0, Expected 1bf5aa744
# Test Case 29 FAIL: C[0][3] mismatch! Actual 0, Expected 0e795c7e2
# Test Case 29 FAIL: C[1][0] mismatch! Actual 0, Expected 0d20ef032
# Test Case 29 FAIL: C[1][1] mismatch! Actual 1, Expected 149ca5b3b
# Test Case 29 FAIL: C[1][2] mismatch! Actual 0, Expected 0fd2923a0
# Test Case 29 FAIL: C[1][3] mismatch! Actual 0, Expected 0be042f12
# Test Case 29 FAIL: C[2][0] mismatch! Actual 0, Expected 0c717df89
# Test Case 29 FAIL: C[2][1] mismatch! Actual 1, Expected 1493ea2ce
# Test Case 29 FAIL: C[2][2] mismatch! Actual 0, Expected 1307bc2bc
# Test Case 29 FAIL: C[2][3] mismatch! Actual 0, Expected 0be3819f8
# Test Case 29 FAIL: C[3][0] mismatch! Actual 0, Expected 09ebbe4aa
# Test Case 29 FAIL: C[3][1] mismatch! Actual 0, Expected 0eaf877ec
# Test Case 29 FAIL: C[3][2] mismatch! Actual 1, Expected 0e88dee69
# Test Case 29 FAIL: C[3][3] mismatch! Actual 0, Expected 071ed795e
# Test Case 29 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @25816000 Starting Test Case 30 of 100
# ===================================================
# Reading test case 30:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_30/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @25816000 Matrix Partition
# ===================================================
# @25816000 Matrix partition ended! 
# @25816000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9e98
#   Loading A[0][1] (Bank 0, Addr 1) with 50b7
#   Loading A[0][2] (Bank 0, Addr 2) with 62e8
#   Loading A[0][3] (Bank 0, Addr 3) with 23d1
#   Loading A[1][0] (Bank 1, Addr 0) with fe26
#   Loading A[1][1] (Bank 1, Addr 1) with 5a22
#   Loading A[1][2] (Bank 1, Addr 2) with 6f92
#   Loading A[1][3] (Bank 1, Addr 3) with bfab
#   Loading A[2][0] (Bank 2, Addr 0) with 0d18
#   Loading A[2][1] (Bank 2, Addr 1) with a344
#   Loading A[2][2] (Bank 2, Addr 2) with b340
#   Loading A[2][3] (Bank 2, Addr 3) with e993
#   Loading A[3][0] (Bank 3, Addr 0) with c8ba
#   Loading A[3][1] (Bank 3, Addr 1) with 3efd
#   Loading A[3][2] (Bank 3, Addr 2) with 4a76
#   Loading A[3][3] (Bank 3, Addr 3) with bd50
#   Loading B[0][0] (Bank 0, Addr 0) with 3535
#   Loading B[1][0] (Bank 0, Addr 1) with 1a57
#   Loading B[2][0] (Bank 0, Addr 2) with a837
#   Loading B[3][0] (Bank 0, Addr 3) with ee65
#   Loading B[0][1] (Bank 1, Addr 0) with 52ce
#   Loading B[1][1] (Bank 1, Addr 1) with ce8d
#   Loading B[2][1] (Bank 1, Addr 2) with af32
#   Loading B[3][1] (Bank 1, Addr 3) with 9466
#   Loading B[0][2] (Bank 2, Addr 0) with 6839
#   Loading B[1][2] (Bank 2, Addr 1) with a2d4
#   Loading B[2][2] (Bank 2, Addr 2) with 9133
#   Loading B[3][2] (Bank 2, Addr 3) with 1305
#   Loading B[0][3] (Bank 3, Addr 0) with bac0
#   Loading B[1][3] (Bank 3, Addr 1) with 7c88
#   Loading B[2][3] (Bank 3, Addr 2) with a542
#   Loading B[3][3] (Bank 3, Addr 3) with 0ec3
# Matrix loading complete.
# @26155000 Simulating controller signals to execute multiplication...
# @26175000: Starting input feeding sequence...
# @26216000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @26226000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @26505000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 30...
# Test Case 30 FAIL: C[0][0] mismatch! Actual 0, Expected 10aed55e4
# Test Case 30 FAIL: C[0][1] mismatch! Actual 0, Expected 14758a746
# Test Case 30 FAIL: C[0][2] mismatch! Actual 0, Expected 19f2445d0
# Test Case 30 FAIL: C[0][3] mismatch! Actual 0, Expected 1338f3842
# Test Case 30 FAIL: C[1][0] mismatch! Actual 0, Expected 09e590e23
# Test Case 30 FAIL: C[1][1] mismatch! Actual 0, Expected 0d78343a3
# Test Case 30 FAIL: C[1][2] mismatch! Actual 0, Expected 0f7fba0bb
# Test Case 30 FAIL: C[1][3] mismatch! Actual 1, Expected 08f2c98ca
# Test Case 30 FAIL: C[2][0] mismatch! Actual 0, Expected 0b7f08b44
# Test Case 30 FAIL: C[2][1] mismatch! Actual 0, Expected 0fa6dc3f2
# Test Case 30 FAIL: C[2][2] mismatch! Actual 0, Expected 123144e88
# Test Case 30 FAIL: C[2][3] mismatch! Actual 0, Expected 0ae63fdd6
# Test Case 30 FAIL: C[3][0] mismatch! Actual 0, Expected 12ea2869a
# Test Case 30 FAIL: C[3][1] mismatch! Actual 0, Expected 18efc5772
# Test Case 30 FAIL: C[3][2] mismatch! Actual 0, Expected 199645836
# Test Case 30 FAIL: C[3][3] mismatch! Actual 0, Expected 0acbab666
# Test Case 30 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @26676000 Starting Test Case 31 of 100
# ===================================================
# Reading test case 31:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_31/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @26676000 Matrix Partition
# ===================================================
# @26676000 Matrix partition ended! 
# @26676000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with df93
#   Loading A[0][1] (Bank 0, Addr 1) with 3c60
#   Loading A[0][2] (Bank 0, Addr 2) with fb24
#   Loading A[0][3] (Bank 0, Addr 3) with 47f5
#   Loading A[1][0] (Bank 1, Addr 0) with 0421
#   Loading A[1][1] (Bank 1, Addr 1) with b00c
#   Loading A[1][2] (Bank 1, Addr 2) with 89ba
#   Loading A[1][3] (Bank 1, Addr 3) with 3dcd
#   Loading A[2][0] (Bank 2, Addr 0) with 3edf
#   Loading A[2][1] (Bank 2, Addr 1) with 0d06
#   Loading A[2][2] (Bank 2, Addr 2) with 95b0
#   Loading A[2][3] (Bank 2, Addr 3) with 6e5f
#   Loading A[3][0] (Bank 3, Addr 0) with 7a26
#   Loading A[3][1] (Bank 3, Addr 1) with 93e5
#   Loading A[3][2] (Bank 3, Addr 2) with dc24
#   Loading A[3][3] (Bank 3, Addr 3) with 065f
#   Loading B[0][0] (Bank 0, Addr 0) with ae9a
#   Loading B[1][0] (Bank 0, Addr 1) with db85
#   Loading B[2][0] (Bank 0, Addr 2) with 15e9
#   Loading B[3][0] (Bank 0, Addr 3) with 459d
#   Loading B[0][1] (Bank 1, Addr 0) with 5411
#   Loading B[1][1] (Bank 1, Addr 1) with 2a73
#   Loading B[2][1] (Bank 1, Addr 2) with 60cd
#   Loading B[3][1] (Bank 1, Addr 3) with f507
#   Loading B[0][2] (Bank 2, Addr 0) with 7bd3
#   Loading B[1][2] (Bank 2, Addr 1) with 005d
#   Loading B[2][2] (Bank 2, Addr 2) with 003a
#   Loading B[3][2] (Bank 2, Addr 3) with fbc2
#   Loading B[0][3] (Bank 3, Addr 0) with b060
#   Loading B[1][3] (Bank 3, Addr 1) with 07af
#   Loading B[2][3] (Bank 3, Addr 2) with b60f
#   Loading B[3][3] (Bank 3, Addr 3) with b133
# Matrix loading complete.
# @27015000 Simulating controller signals to execute multiplication...
# @27035000: Starting input feeding sequence...
# @27076000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @27086000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @27365000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 31...
# Test Case 31 FAIL: C[0][0] mismatch! Actual 0, Expected 10c6867ac
# Test Case 31 FAIL: C[0][1] mismatch! Actual 0, Expected 0c4278e2f
# Test Case 31 FAIL: C[0][2] mismatch! Actual 0, Expected 06b9ea4f8
# Test Case 31 FAIL: C[0][3] mismatch! Actual 0, Expected 0d320539e
# Test Case 31 FAIL: C[1][0] mismatch! Actual 0, Expected 0cf2eb65e
# Test Case 31 FAIL: C[1][1] mismatch! Actual 1, Expected 0556ba2fd
# Test Case 31 FAIL: C[1][2] mismatch! Actual 0, Expected 0b0ecb8c3
# Test Case 31 FAIL: C[1][3] mismatch! Actual 0, Expected 12c18bf5f
# Test Case 31 FAIL: C[2][0] mismatch! Actual 0, Expected 1b895f692
# Test Case 31 FAIL: C[2][1] mismatch! Actual 0, Expected 0f50281ce
# Test Case 31 FAIL: C[2][2] mismatch! Actual 0, Expected 0e642f9b2
# Test Case 31 FAIL: C[2][3] mismatch! Actual 0, Expected 1f3b33db6
# Test Case 31 FAIL: C[3][0] mismatch! Actual 0, Expected 07f257eec
# Test Case 31 FAIL: C[3][1] mismatch! Actual 1, Expected 0484c6ad4
# Test Case 31 FAIL: C[3][2] mismatch! Actual 1, Expected 02227df3d
# Test Case 31 FAIL: C[3][3] mismatch! Actual 1, Expected 0bfabc8c7
# Test Case 31 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @27536000 Starting Test Case 32 of 100
# ===================================================
# Reading test case 32:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_32/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @27536000 Matrix Partition
# ===================================================
# @27536000 Matrix partition ended! 
# @27536000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 178d
#   Loading A[0][1] (Bank 0, Addr 1) with dc28
#   Loading A[0][2] (Bank 0, Addr 2) with e7a3
#   Loading A[0][3] (Bank 0, Addr 3) with 94ed
#   Loading A[1][0] (Bank 1, Addr 0) with 8d6f
#   Loading A[1][1] (Bank 1, Addr 1) with 8ef1
#   Loading A[1][2] (Bank 1, Addr 2) with 7c0c
#   Loading A[1][3] (Bank 1, Addr 3) with e841
#   Loading A[2][0] (Bank 2, Addr 0) with 0a4b
#   Loading A[2][1] (Bank 2, Addr 1) with 86b7
#   Loading A[2][2] (Bank 2, Addr 2) with 74e0
#   Loading A[2][3] (Bank 2, Addr 3) with af23
#   Loading A[3][0] (Bank 3, Addr 0) with 625e
#   Loading A[3][1] (Bank 3, Addr 1) with 2508
#   Loading A[3][2] (Bank 3, Addr 2) with f6cc
#   Loading A[3][3] (Bank 3, Addr 3) with c632
#   Loading B[0][0] (Bank 0, Addr 0) with d285
#   Loading B[1][0] (Bank 0, Addr 1) with 0e98
#   Loading B[2][0] (Bank 0, Addr 2) with 9863
#   Loading B[3][0] (Bank 0, Addr 3) with b2f4
#   Loading B[0][1] (Bank 1, Addr 0) with 1ab6
#   Loading B[1][1] (Bank 1, Addr 1) with ffb2
#   Loading B[2][1] (Bank 1, Addr 2) with ddda
#   Loading B[3][1] (Bank 1, Addr 3) with b763
#   Loading B[0][2] (Bank 2, Addr 0) with 2601
#   Loading B[1][2] (Bank 2, Addr 1) with ca2d
#   Loading B[2][2] (Bank 2, Addr 2) with 2e88
#   Loading B[3][2] (Bank 2, Addr 3) with c4b6
#   Loading B[0][3] (Bank 3, Addr 0) with 4a9e
#   Loading B[1][3] (Bank 3, Addr 1) with d48c
#   Loading B[2][3] (Bank 3, Addr 2) with 5016
#   Loading B[3][3] (Bank 3, Addr 3) with ec61
# Matrix loading complete.
# @27875000 Simulating controller signals to execute multiplication...
# @27895000: Starting input feeding sequence...
# @27936000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @27946000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @28225000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 32...
# Test Case 32 FAIL: C[0][0] mismatch! Actual 0, Expected 04052c77a
# Test Case 32 FAIL: C[0][1] mismatch! Actual 0, Expected 0e8683a7d
# Test Case 32 FAIL: C[0][2] mismatch! Actual 0, Expected 0a93adcf9
# Test Case 32 FAIL: C[0][3] mismatch! Actual 0, Expected 0d8843241
# Test Case 32 FAIL: C[1][0] mismatch! Actual 0, Expected 0e2c025c5
# Test Case 32 FAIL: C[1][1] mismatch! Actual 1, Expected 124754edd
# Test Case 32 FAIL: C[1][2] mismatch! Actual 1, Expected 122fecb9a
# Test Case 32 FAIL: C[1][3] mismatch! Actual 1, Expected 18a007e75
# Test Case 32 FAIL: C[2][0] mismatch! Actual 0, Expected 124b674ff
# Test Case 32 FAIL: C[2][1] mismatch! Actual 0, Expected 1b24fda10
# Test Case 32 FAIL: C[2][2] mismatch! Actual 0, Expected 157d5a6c9
# Test Case 32 FAIL: C[2][3] mismatch! Actual 0, Expected 23878d48c
# Test Case 32 FAIL: C[3][0] mismatch! Actual 0, Expected 0e6782956
# Test Case 32 FAIL: C[3][1] mismatch! Actual 1, Expected 21f55d169
# Test Case 32 FAIL: C[3][2] mismatch! Actual 0, Expected 17fc230e5
# Test Case 32 FAIL: C[3][3] mismatch! Actual 1, Expected 24c0f83db
# Test Case 32 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @28396000 Starting Test Case 33 of 100
# ===================================================
# Reading test case 33:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_33/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @28396000 Matrix Partition
# ===================================================
# @28396000 Matrix partition ended! 
# @28396000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e0f0
#   Loading A[0][1] (Bank 0, Addr 1) with 413c
#   Loading A[0][2] (Bank 0, Addr 2) with dce4
#   Loading A[0][3] (Bank 0, Addr 3) with cad0
#   Loading A[1][0] (Bank 1, Addr 0) with d0d5
#   Loading A[1][1] (Bank 1, Addr 1) with 41ba
#   Loading A[1][2] (Bank 1, Addr 2) with 2be9
#   Loading A[1][3] (Bank 1, Addr 3) with b487
#   Loading A[2][0] (Bank 2, Addr 0) with a840
#   Loading A[2][1] (Bank 2, Addr 1) with e296
#   Loading A[2][2] (Bank 2, Addr 2) with 5824
#   Loading A[2][3] (Bank 2, Addr 3) with 2fb7
#   Loading A[3][0] (Bank 3, Addr 0) with 8330
#   Loading A[3][1] (Bank 3, Addr 1) with b007
#   Loading A[3][2] (Bank 3, Addr 2) with 55f1
#   Loading A[3][3] (Bank 3, Addr 3) with 4ec0
#   Loading B[0][0] (Bank 0, Addr 0) with 761d
#   Loading B[1][0] (Bank 0, Addr 1) with abed
#   Loading B[2][0] (Bank 0, Addr 2) with e640
#   Loading B[3][0] (Bank 0, Addr 3) with 475d
#   Loading B[0][1] (Bank 1, Addr 0) with 586e
#   Loading B[1][1] (Bank 1, Addr 1) with bfb2
#   Loading B[2][1] (Bank 1, Addr 2) with 50d6
#   Loading B[3][1] (Bank 1, Addr 3) with 54c5
#   Loading B[0][2] (Bank 2, Addr 0) with 9721
#   Loading B[1][2] (Bank 2, Addr 1) with 0209
#   Loading B[2][2] (Bank 2, Addr 2) with dae6
#   Loading B[3][2] (Bank 2, Addr 3) with 7407
#   Loading B[0][3] (Bank 3, Addr 0) with 1ced
#   Loading B[1][3] (Bank 3, Addr 1) with f0b7
#   Loading B[2][3] (Bank 3, Addr 2) with b82a
#   Loading B[3][3] (Bank 3, Addr 3) with deb0
# Matrix loading complete.
# @28735000 Simulating controller signals to execute multiplication...
# @28755000: Starting input feeding sequence...
# @28796000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @28806000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @29085000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 33...
# Test Case 33 FAIL: C[0][0] mismatch! Actual 0, Expected 122113266
# Test Case 33 FAIL: C[0][1] mismatch! Actual 0, Expected 1b021deda
# Test Case 33 FAIL: C[0][2] mismatch! Actual 0, Expected 1fa7ead6e
# Test Case 33 FAIL: C[0][3] mismatch! Actual 0, Expected 1423a49d9
# Test Case 33 FAIL: C[1][0] mismatch! Actual 1, Expected 0ce74a389
# Test Case 33 FAIL: C[1][1] mismatch! Actual 1, Expected 104587a27
# Test Case 33 FAIL: C[1][2] mismatch! Actual 0, Expected 18fce8066
# Test Case 33 FAIL: C[1][3] mismatch! Actual 0, Expected 127c433d8
# Test Case 33 FAIL: C[2][0] mismatch! Actual 0, Expected 0b2d398b3
# Test Case 33 FAIL: C[2][1] mismatch! Actual 0, Expected 106bceaa1
# Test Case 33 FAIL: C[2][2] mismatch! Actual 0, Expected 15dbabfa8
# Test Case 33 FAIL: C[2][3] mismatch! Actual 1, Expected 0bed285cd
# Test Case 33 FAIL: C[3][0] mismatch! Actual 0, Expected 0c0ffd2e9
# Test Case 33 FAIL: C[3][1] mismatch! Actual 0, Expected 159d0581d
# Test Case 33 FAIL: C[3][2] mismatch! Actual 0, Expected 150de4cc4
# Test Case 33 FAIL: C[3][3] mismatch! Actual 0, Expected 0ce717374
# Test Case 33 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @29256000 Starting Test Case 34 of 100
# ===================================================
# Reading test case 34:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_34/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @29256000 Matrix Partition
# ===================================================
# @29256000 Matrix partition ended! 
# @29256000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b766
#   Loading A[0][1] (Bank 0, Addr 1) with f32d
#   Loading A[0][2] (Bank 0, Addr 2) with f082
#   Loading A[0][3] (Bank 0, Addr 3) with 4565
#   Loading A[1][0] (Bank 1, Addr 0) with 2e80
#   Loading A[1][1] (Bank 1, Addr 1) with 9b10
#   Loading A[1][2] (Bank 1, Addr 2) with 43bb
#   Loading A[1][3] (Bank 1, Addr 3) with 6030
#   Loading A[2][0] (Bank 2, Addr 0) with 973c
#   Loading A[2][1] (Bank 2, Addr 1) with 079e
#   Loading A[2][2] (Bank 2, Addr 2) with 3b93
#   Loading A[2][3] (Bank 2, Addr 3) with d371
#   Loading A[3][0] (Bank 3, Addr 0) with b7e5
#   Loading A[3][1] (Bank 3, Addr 1) with a40a
#   Loading A[3][2] (Bank 3, Addr 2) with 1ebd
#   Loading A[3][3] (Bank 3, Addr 3) with 2e5b
#   Loading B[0][0] (Bank 0, Addr 0) with 25e3
#   Loading B[1][0] (Bank 0, Addr 1) with 3c5f
#   Loading B[2][0] (Bank 0, Addr 2) with 6771
#   Loading B[3][0] (Bank 0, Addr 3) with 29ac
#   Loading B[0][1] (Bank 1, Addr 0) with 8f04
#   Loading B[1][1] (Bank 1, Addr 1) with e70c
#   Loading B[2][1] (Bank 1, Addr 2) with 9756
#   Loading B[3][1] (Bank 1, Addr 3) with 0633
#   Loading B[0][2] (Bank 2, Addr 0) with 82f5
#   Loading B[1][2] (Bank 2, Addr 1) with a36c
#   Loading B[2][2] (Bank 2, Addr 2) with 6a91
#   Loading B[3][2] (Bank 2, Addr 3) with 6b26
#   Loading B[0][3] (Bank 3, Addr 0) with 66fc
#   Loading B[1][3] (Bank 3, Addr 1) with 2025
#   Loading B[2][3] (Bank 3, Addr 2) with 1042
#   Loading B[3][3] (Bank 3, Addr 3) with d08f
# Matrix loading complete.
# @29595000 Simulating controller signals to execute multiplication...
# @29615000: Starting input feeding sequence...
# @29656000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @29666000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @29945000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 34...
# Test Case 34 FAIL: C[0][0] mismatch! Actual 0, Expected 0cc760f4a
# Test Case 34 FAIL: C[0][1] mismatch! Actual 0, Expected 0ccd9da43
# Test Case 34 FAIL: C[0][2] mismatch! Actual 0, Expected 0b03a570c
# Test Case 34 FAIL: C[0][3] mismatch! Actual 1, Expected 0f41821db
# Test Case 34 FAIL: C[1][0] mismatch! Actual 0, Expected 0c0807a35
# Test Case 34 FAIL: C[1][1] mismatch! Actual 1, Expected 0dec1448d
# Test Case 34 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb83a04f
# Test Case 34 FAIL: C[1][3] mismatch! Actual 0, Expected 0b42ac876
# Test Case 34 FAIL: C[2][0] mismatch! Actual 0, Expected 07445caed
# Test Case 34 FAIL: C[2][1] mismatch! Actual 0, Expected 09fbc6e57
# Test Case 34 FAIL: C[2][2] mismatch! Actual 0, Expected 0a3f8de31
# Test Case 34 FAIL: C[2][3] mismatch! Actual 1, Expected 05ac44dfe
# Test Case 34 FAIL: C[3][0] mismatch! Actual 0, Expected 0bed11308
# Test Case 34 FAIL: C[3][1] mismatch! Actual 1, Expected 0f3f9788e
# Test Case 34 FAIL: C[3][2] mismatch! Actual 0, Expected 0afdd152c
# Test Case 34 FAIL: C[3][3] mismatch! Actual 1, Expected 08be38907
# Test Case 34 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @30116000 Starting Test Case 35 of 100
# ===================================================
# Reading test case 35:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_35/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @30116000 Matrix Partition
# ===================================================
# @30116000 Matrix partition ended! 
# @30116000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 9380
#   Loading A[0][1] (Bank 0, Addr 1) with 5b89
#   Loading A[0][2] (Bank 0, Addr 2) with e57e
#   Loading A[0][3] (Bank 0, Addr 3) with 5958
#   Loading A[1][0] (Bank 1, Addr 0) with 16ff
#   Loading A[1][1] (Bank 1, Addr 1) with 2861
#   Loading A[1][2] (Bank 1, Addr 2) with 7b2e
#   Loading A[1][3] (Bank 1, Addr 3) with 71e8
#   Loading A[2][0] (Bank 2, Addr 0) with 7809
#   Loading A[2][1] (Bank 2, Addr 1) with 00dc
#   Loading A[2][2] (Bank 2, Addr 2) with bc11
#   Loading A[2][3] (Bank 2, Addr 3) with 65c8
#   Loading A[3][0] (Bank 3, Addr 0) with c39d
#   Loading A[3][1] (Bank 3, Addr 1) with 185a
#   Loading A[3][2] (Bank 3, Addr 2) with 4357
#   Loading A[3][3] (Bank 3, Addr 3) with af4f
#   Loading B[0][0] (Bank 0, Addr 0) with cf3b
#   Loading B[1][0] (Bank 0, Addr 1) with 142c
#   Loading B[2][0] (Bank 0, Addr 2) with 567c
#   Loading B[3][0] (Bank 0, Addr 3) with 0d2e
#   Loading B[0][1] (Bank 1, Addr 0) with c3b0
#   Loading B[1][1] (Bank 1, Addr 1) with 9c18
#   Loading B[2][1] (Bank 1, Addr 2) with 3f27
#   Loading B[3][1] (Bank 1, Addr 3) with 259e
#   Loading B[0][2] (Bank 2, Addr 0) with 07fc
#   Loading B[1][2] (Bank 2, Addr 1) with 54a8
#   Loading B[2][2] (Bank 2, Addr 2) with 1f78
#   Loading B[3][2] (Bank 2, Addr 3) with cae3
#   Loading B[0][3] (Bank 3, Addr 0) with a6a3
#   Loading B[1][3] (Bank 3, Addr 1) with f4bd
#   Loading B[2][3] (Bank 3, Addr 2) with 2884
#   Loading B[3][3] (Bank 3, Addr 3) with 0109
# Matrix loading complete.
# @30455000 Simulating controller signals to execute multiplication...
# @30475000: Starting input feeding sequence...
# @30516000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @30526000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @30805000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 35...
# Test Case 35 FAIL: C[0][0] mismatch! Actual 0, Expected 10c0d4da3
# Test Case 35 FAIL: C[0][1] mismatch! Actual 0, Expected 0fc58aeb9
# Test Case 35 FAIL: C[0][2] mismatch! Actual 0, Expected 065377405
# Test Case 35 FAIL: C[0][3] mismatch! Actual 0, Expected 06ae514e2
# Test Case 35 FAIL: C[1][0] mismatch! Actual 0, Expected 078d73f21
# Test Case 35 FAIL: C[1][1] mismatch! Actual 0, Expected 03765d776
# Test Case 35 FAIL: C[1][2] mismatch! Actual 0, Expected 02cd80bab
# Test Case 35 FAIL: C[1][3] mismatch! Actual 0, Expected 00b6ce8ba
# Test Case 35 FAIL: C[2][0] mismatch! Actual 0, Expected 149a161cb
# Test Case 35 FAIL: C[2][1] mismatch! Actual 0, Expected 0dbc2805b
# Test Case 35 FAIL: C[2][2] mismatch! Actual 0, Expected 08db11ade
# Test Case 35 FAIL: C[2][3] mismatch! Actual 0, Expected 0b33c312a
# Test Case 35 FAIL: C[3][0] mismatch! Actual 0, Expected 114ae48f5
# Test Case 35 FAIL: C[3][1] mismatch! Actual 0, Expected 115bf6d73
# Test Case 35 FAIL: C[3][2] mismatch! Actual 0, Expected 06289f374
# Test Case 35 FAIL: C[3][3] mismatch! Actual 0, Expected 066b5e41f
# Test Case 35 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @30976000 Starting Test Case 36 of 100
# ===================================================
# Reading test case 36:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_36/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @30976000 Matrix Partition
# ===================================================
# @30976000 Matrix partition ended! 
# @30976000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with fc12
#   Loading A[0][1] (Bank 0, Addr 1) with 0026
#   Loading A[0][2] (Bank 0, Addr 2) with 55e6
#   Loading A[0][3] (Bank 0, Addr 3) with 99cb
#   Loading A[1][0] (Bank 1, Addr 0) with 9f38
#   Loading A[1][1] (Bank 1, Addr 1) with 8db9
#   Loading A[1][2] (Bank 1, Addr 2) with 81c6
#   Loading A[1][3] (Bank 1, Addr 3) with f8d3
#   Loading A[2][0] (Bank 2, Addr 0) with e82d
#   Loading A[2][1] (Bank 2, Addr 1) with 6bdc
#   Loading A[2][2] (Bank 2, Addr 2) with 7e46
#   Loading A[2][3] (Bank 2, Addr 3) with 88d0
#   Loading A[3][0] (Bank 3, Addr 0) with 6504
#   Loading A[3][1] (Bank 3, Addr 1) with e88d
#   Loading A[3][2] (Bank 3, Addr 2) with 455d
#   Loading A[3][3] (Bank 3, Addr 3) with 854a
#   Loading B[0][0] (Bank 0, Addr 0) with 5d5a
#   Loading B[1][0] (Bank 0, Addr 1) with d381
#   Loading B[2][0] (Bank 0, Addr 2) with ba4a
#   Loading B[3][0] (Bank 0, Addr 3) with dcd3
#   Loading B[0][1] (Bank 1, Addr 0) with 1edd
#   Loading B[1][1] (Bank 1, Addr 1) with 0b18
#   Loading B[2][1] (Bank 1, Addr 2) with cd4e
#   Loading B[3][1] (Bank 1, Addr 3) with e166
#   Loading B[0][2] (Bank 2, Addr 0) with 3800
#   Loading B[1][2] (Bank 2, Addr 1) with 6f0a
#   Loading B[2][2] (Bank 2, Addr 2) with 174a
#   Loading B[3][2] (Bank 2, Addr 3) with 826a
#   Loading B[0][3] (Bank 3, Addr 0) with a1c1
#   Loading B[1][3] (Bank 3, Addr 1) with 9474
#   Loading B[2][3] (Bank 3, Addr 2) with 1927
#   Loading B[3][3] (Bank 3, Addr 3) with 4401
# Matrix loading complete.
# @31315000 Simulating controller signals to execute multiplication...
# @31335000: Starting input feeding sequence...
# @31376000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @31386000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @31665000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 36...
# Test Case 36 FAIL: C[0][0] mismatch! Actual 0, Expected 0e1baafb0
# Test Case 36 FAIL: C[0][1] mismatch! Actual 0, Expected 17670dae4
# Test Case 36 FAIL: C[0][2] mismatch! Actual 0, Expected 1562a3be2
# Test Case 36 FAIL: C[0][3] mismatch! Actual 0, Expected 1f6bb54cc
# Test Case 36 FAIL: C[1][0] mismatch! Actual 1, Expected 0bbac015e
# Test Case 36 FAIL: C[1][1] mismatch! Actual 0, Expected 0bbe71ffa
# Test Case 36 FAIL: C[1][2] mismatch! Actual 0, Expected 0926d1e6d
# Test Case 36 FAIL: C[1][3] mismatch! Actual 1, Expected 0f1a195ad
# Test Case 36 FAIL: C[2][0] mismatch! Actual 0, Expected 0766b14e7
# Test Case 36 FAIL: C[2][1] mismatch! Actual 1, Expected 0ab960256
# Test Case 36 FAIL: C[2][2] mismatch! Actual 0, Expected 0b8e27937
# Test Case 36 FAIL: C[2][3] mismatch! Actual 0, Expected 10f1bfdcf
# Test Case 36 FAIL: C[3][0] mismatch! Actual 1, Expected 0c839df4f
# Test Case 36 FAIL: C[3][1] mismatch! Actual 1, Expected 1127aeabb
# Test Case 36 FAIL: C[3][2] mismatch! Actual 1, Expected 151017e5e
# Test Case 36 FAIL: C[3][3] mismatch! Actual 1, Expected 1c8d840cd
# Test Case 36 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @31836000 Starting Test Case 37 of 100
# ===================================================
# Reading test case 37:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_37/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @31836000 Matrix Partition
# ===================================================
# @31836000 Matrix partition ended! 
# @31836000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 46eb
#   Loading A[0][1] (Bank 0, Addr 1) with 5d28
#   Loading A[0][2] (Bank 0, Addr 2) with a251
#   Loading A[0][3] (Bank 0, Addr 3) with d060
#   Loading A[1][0] (Bank 1, Addr 0) with b455
#   Loading A[1][1] (Bank 1, Addr 1) with 376b
#   Loading A[1][2] (Bank 1, Addr 2) with 0c9a
#   Loading A[1][3] (Bank 1, Addr 3) with f04c
#   Loading A[2][0] (Bank 2, Addr 0) with dc29
#   Loading A[2][1] (Bank 2, Addr 1) with 5378
#   Loading A[2][2] (Bank 2, Addr 2) with bd77
#   Loading A[2][3] (Bank 2, Addr 3) with 2e86
#   Loading A[3][0] (Bank 3, Addr 0) with 674e
#   Loading A[3][1] (Bank 3, Addr 1) with 06b7
#   Loading A[3][2] (Bank 3, Addr 2) with 7572
#   Loading A[3][3] (Bank 3, Addr 3) with 64cf
#   Loading B[0][0] (Bank 0, Addr 0) with 6cba
#   Loading B[1][0] (Bank 0, Addr 1) with 2b96
#   Loading B[2][0] (Bank 0, Addr 2) with 061c
#   Loading B[3][0] (Bank 0, Addr 3) with 2251
#   Loading B[0][1] (Bank 1, Addr 0) with fe28
#   Loading B[1][1] (Bank 1, Addr 1) with a278
#   Loading B[2][1] (Bank 1, Addr 2) with f49d
#   Loading B[3][1] (Bank 1, Addr 3) with 9bc5
#   Loading B[0][2] (Bank 2, Addr 0) with 350a
#   Loading B[1][2] (Bank 2, Addr 1) with b2d3
#   Loading B[2][2] (Bank 2, Addr 2) with 18a3
#   Loading B[3][2] (Bank 2, Addr 3) with 0716
#   Loading B[0][3] (Bank 3, Addr 0) with e4d2
#   Loading B[1][3] (Bank 3, Addr 1) with f7eb
#   Loading B[2][3] (Bank 3, Addr 2) with f927
#   Loading B[3][3] (Bank 3, Addr 3) with 0d33
# Matrix loading complete.
# @32175000 Simulating controller signals to execute multiplication...
# @32195000: Starting input feeding sequence...
# @32236000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @32246000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @32525000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 37...
# Test Case 37 FAIL: C[0][0] mismatch! Actual 0, Expected 15b1a7a9c
# Test Case 37 FAIL: C[0][1] mismatch! Actual 0, Expected 17c5a66ef
# Test Case 37 FAIL: C[0][2] mismatch! Actual 0, Expected 127bb80d2
# Test Case 37 FAIL: C[0][3] mismatch! Actual 0, Expected 082a777d4
# Test Case 37 FAIL: C[1][0] mismatch! Actual 0, Expected 075e0fa96
# Test Case 37 FAIL: C[1][1] mismatch! Actual 1, Expected 073d6f47d
# Test Case 37 FAIL: C[1][2] mismatch! Actual 0, Expected 045be8348
# Test Case 37 FAIL: C[1][3] mismatch! Actual 0, Expected 030dd4dc4
# Test Case 37 FAIL: C[2][0] mismatch! Actual 0, Expected 0e1adc814
# Test Case 37 FAIL: C[2][1] mismatch! Actual 1, Expected 119b7c761
# Test Case 37 FAIL: C[2][2] mismatch! Actual 0, Expected 09473ba71
# Test Case 37 FAIL: C[2][3] mismatch! Actual 0, Expected 028b9c713
# Test Case 37 FAIL: C[3][0] mismatch! Actual 0, Expected 1aacf76aa
# Test Case 37 FAIL: C[3][1] mismatch! Actual 1, Expected 13e1abb57
# Test Case 37 FAIL: C[3][2] mismatch! Actual 1, Expected 1512bbaf7
# Test Case 37 FAIL: C[3][3] mismatch! Actual 1, Expected 0b4a1de9d
# Test Case 37 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @32696000 Starting Test Case 38 of 100
# ===================================================
# Reading test case 38:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_38/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @32696000 Matrix Partition
# ===================================================
# @32696000 Matrix partition ended! 
# @32696000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 61f6
#   Loading A[0][1] (Bank 0, Addr 1) with 7fd6
#   Loading A[0][2] (Bank 0, Addr 2) with fe58
#   Loading A[0][3] (Bank 0, Addr 3) with 65f5
#   Loading A[1][0] (Bank 1, Addr 0) with 4d00
#   Loading A[1][1] (Bank 1, Addr 1) with 81ee
#   Loading A[1][2] (Bank 1, Addr 2) with 4672
#   Loading A[1][3] (Bank 1, Addr 3) with f806
#   Loading A[2][0] (Bank 2, Addr 0) with f696
#   Loading A[2][1] (Bank 2, Addr 1) with 2430
#   Loading A[2][2] (Bank 2, Addr 2) with 1d1d
#   Loading A[2][3] (Bank 2, Addr 3) with 6641
#   Loading A[3][0] (Bank 3, Addr 0) with 9d74
#   Loading A[3][1] (Bank 3, Addr 1) with e3ec
#   Loading A[3][2] (Bank 3, Addr 2) with 7099
#   Loading A[3][3] (Bank 3, Addr 3) with 9b90
#   Loading B[0][0] (Bank 0, Addr 0) with ad76
#   Loading B[1][0] (Bank 0, Addr 1) with 5356
#   Loading B[2][0] (Bank 0, Addr 2) with 4564
#   Loading B[3][0] (Bank 0, Addr 3) with 4aff
#   Loading B[0][1] (Bank 1, Addr 0) with b97f
#   Loading B[1][1] (Bank 1, Addr 1) with 1adb
#   Loading B[2][1] (Bank 1, Addr 2) with 8545
#   Loading B[3][1] (Bank 1, Addr 3) with 239a
#   Loading B[0][2] (Bank 2, Addr 0) with b22e
#   Loading B[1][2] (Bank 2, Addr 1) with 970b
#   Loading B[2][2] (Bank 2, Addr 2) with 527b
#   Loading B[3][2] (Bank 2, Addr 3) with 8f34
#   Loading B[0][3] (Bank 3, Addr 0) with 0a85
#   Loading B[1][3] (Bank 3, Addr 1) with e375
#   Loading B[2][3] (Bank 3, Addr 2) with ec05
#   Loading B[3][3] (Bank 3, Addr 3) with e27a
# Matrix loading complete.
# @33035000 Simulating controller signals to execute multiplication...
# @33055000: Starting input feeding sequence...
# @33096000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @33106000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @33385000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 38...
# Test Case 38 FAIL: C[0][0] mismatch! Actual 0, Expected 12c44889c
# Test Case 38 FAIL: C[0][1] mismatch! Actual 0, Expected 1455a6e1a
# Test Case 38 FAIL: C[0][2] mismatch! Actual 0, Expected 1233fdc6e
# Test Case 38 FAIL: C[0][3] mismatch! Actual 0, Expected 13ca353ca
# Test Case 38 FAIL: C[1][0] mismatch! Actual 1, Expected 0d7517ff2
# Test Case 38 FAIL: C[1][1] mismatch! Actual 1, Expected 1171af36a
# Test Case 38 FAIL: C[1][2] mismatch! Actual 1, Expected 144150f6a
# Test Case 38 FAIL: C[1][3] mismatch! Actual 1, Expected 11566058e
# Test Case 38 FAIL: C[2][0] mismatch! Actual 0, Expected 0f845e7d1
# Test Case 38 FAIL: C[2][1] mismatch! Actual 0, Expected 0cf684d42
# Test Case 38 FAIL: C[2][2] mismatch! Actual 0, Expected 0dacdcf06
# Test Case 38 FAIL: C[2][3] mismatch! Actual 1, Expected 0c834980a
# Test Case 38 FAIL: C[3][0] mismatch! Actual 1, Expected 1465cf466
# Test Case 38 FAIL: C[3][1] mismatch! Actual 1, Expected 101c1fd0b
# Test Case 38 FAIL: C[3][2] mismatch! Actual 1, Expected 14d1e915d
# Test Case 38 FAIL: C[3][3] mismatch! Actual 1, Expected 1032ebd7b
# Test Case 38 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @33556000 Starting Test Case 39 of 100
# ===================================================
# Reading test case 39:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_39/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @33556000 Matrix Partition
# ===================================================
# @33556000 Matrix partition ended! 
# @33556000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with d8a6
#   Loading A[0][1] (Bank 0, Addr 1) with 090c
#   Loading A[0][2] (Bank 0, Addr 2) with b379
#   Loading A[0][3] (Bank 0, Addr 3) with 4b1a
#   Loading A[1][0] (Bank 1, Addr 0) with ea63
#   Loading A[1][1] (Bank 1, Addr 1) with ab5b
#   Loading A[1][2] (Bank 1, Addr 2) with 1bea
#   Loading A[1][3] (Bank 1, Addr 3) with 5107
#   Loading A[2][0] (Bank 2, Addr 0) with 958b
#   Loading A[2][1] (Bank 2, Addr 1) with fa87
#   Loading A[2][2] (Bank 2, Addr 2) with 1f4f
#   Loading A[2][3] (Bank 2, Addr 3) with a88e
#   Loading A[3][0] (Bank 3, Addr 0) with 383b
#   Loading A[3][1] (Bank 3, Addr 1) with 0a9e
#   Loading A[3][2] (Bank 3, Addr 2) with 09ac
#   Loading A[3][3] (Bank 3, Addr 3) with 1d85
#   Loading B[0][0] (Bank 0, Addr 0) with 922e
#   Loading B[1][0] (Bank 0, Addr 1) with 754c
#   Loading B[2][0] (Bank 0, Addr 2) with aefe
#   Loading B[3][0] (Bank 0, Addr 3) with 2d98
#   Loading B[0][1] (Bank 1, Addr 0) with d095
#   Loading B[1][1] (Bank 1, Addr 1) with 6a4d
#   Loading B[2][1] (Bank 1, Addr 2) with ba4c
#   Loading B[3][1] (Bank 1, Addr 3) with 9f77
#   Loading B[0][2] (Bank 2, Addr 0) with 6e95
#   Loading B[1][2] (Bank 2, Addr 1) with 4a94
#   Loading B[2][2] (Bank 2, Addr 2) with 2d67
#   Loading B[3][2] (Bank 2, Addr 3) with 15ea
#   Loading B[0][3] (Bank 3, Addr 0) with 00b9
#   Loading B[1][3] (Bank 3, Addr 1) with 0520
#   Loading B[2][3] (Bank 3, Addr 2) with e8e6
#   Loading B[3][3] (Bank 3, Addr 3) with 1838
# Matrix loading complete.
# @33895000 Simulating controller signals to execute multiplication...
# @33915000: Starting input feeding sequence...
# @33956000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @33966000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @34245000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 39...
# Test Case 39 FAIL: C[0][0] mismatch! Actual 0, Expected 17b6fdbfd
# Test Case 39 FAIL: C[0][1] mismatch! Actual 1, Expected 0f1487dcb
# Test Case 39 FAIL: C[0][2] mismatch! Actual 0, Expected 18c56e307
# Test Case 39 FAIL: C[0][3] mismatch! Actual 0, Expected 0cab52e8b
# Test Case 39 FAIL: C[1][0] mismatch! Actual 0, Expected 0fd07a2e0
# Test Case 39 FAIL: C[1][1] mismatch! Actual 0, Expected 0947ea9bb
# Test Case 39 FAIL: C[1][2] mismatch! Actual 0, Expected 0b8f96031
# Test Case 39 FAIL: C[1][3] mismatch! Actual 0, Expected 082ccdc63
# Test Case 39 FAIL: C[2][0] mismatch! Actual 0, Expected 08ac6c937
# Test Case 39 FAIL: C[2][1] mismatch! Actual 1, Expected 067235f7a
# Test Case 39 FAIL: C[2][2] mismatch! Actual 0, Expected 09d58a9d7
# Test Case 39 FAIL: C[2][3] mismatch! Actual 0, Expected 034f27b74
# Test Case 39 FAIL: C[3][0] mismatch! Actual 1, Expected 0b5cb9f82
# Test Case 39 FAIL: C[3][1] mismatch! Actual 0, Expected 075c03a8b
# Test Case 39 FAIL: C[3][2] mismatch! Actual 0, Expected 0a70d2880
# Test Case 39 FAIL: C[3][3] mismatch! Actual 0, Expected 05111d195
# Test Case 39 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @34416000 Starting Test Case 40 of 100
# ===================================================
# Reading test case 40:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_40/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @34416000 Matrix Partition
# ===================================================
# @34416000 Matrix partition ended! 
# @34416000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 4282
#   Loading A[0][1] (Bank 0, Addr 1) with 151e
#   Loading A[0][2] (Bank 0, Addr 2) with cfcd
#   Loading A[0][3] (Bank 0, Addr 3) with ed34
#   Loading A[1][0] (Bank 1, Addr 0) with 38e5
#   Loading A[1][1] (Bank 1, Addr 1) with dc9a
#   Loading A[1][2] (Bank 1, Addr 2) with ea7c
#   Loading A[1][3] (Bank 1, Addr 3) with c0f2
#   Loading A[2][0] (Bank 2, Addr 0) with 81d1
#   Loading A[2][1] (Bank 2, Addr 1) with 2dd1
#   Loading A[2][2] (Bank 2, Addr 2) with ca09
#   Loading A[2][3] (Bank 2, Addr 3) with d529
#   Loading A[3][0] (Bank 3, Addr 0) with 4ce1
#   Loading A[3][1] (Bank 3, Addr 1) with 7822
#   Loading A[3][2] (Bank 3, Addr 2) with 9997
#   Loading A[3][3] (Bank 3, Addr 3) with 6200
#   Loading B[0][0] (Bank 0, Addr 0) with 4e89
#   Loading B[1][0] (Bank 0, Addr 1) with 02c3
#   Loading B[2][0] (Bank 0, Addr 2) with 491a
#   Loading B[3][0] (Bank 0, Addr 3) with d16c
#   Loading B[0][1] (Bank 1, Addr 0) with e690
#   Loading B[1][1] (Bank 1, Addr 1) with d186
#   Loading B[2][1] (Bank 1, Addr 2) with a4e0
#   Loading B[3][1] (Bank 1, Addr 3) with 6897
#   Loading B[0][2] (Bank 2, Addr 0) with 5096
#   Loading B[1][2] (Bank 2, Addr 1) with ae45
#   Loading B[2][2] (Bank 2, Addr 2) with c54e
#   Loading B[3][2] (Bank 2, Addr 3) with f4fa
#   Loading B[0][3] (Bank 3, Addr 0) with dec3
#   Loading B[1][3] (Bank 3, Addr 1) with 085c
#   Loading B[2][3] (Bank 3, Addr 2) with f98b
#   Loading B[3][3] (Bank 3, Addr 3) with 31fb
# Matrix loading complete.
# @34755000 Simulating controller signals to execute multiplication...
# @34775000: Starting input feeding sequence...
# @34816000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @34826000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @35105000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 40...
# Test Case 40 FAIL: C[0][0] mismatch! Actual 0, Expected 0b368003b
# Test Case 40 FAIL: C[0][1] mismatch! Actual 0, Expected 08a2a1e15
# Test Case 40 FAIL: C[0][2] mismatch! Actual 0, Expected 0e6a0496d
# Test Case 40 FAIL: C[0][3] mismatch! Actual 1, Expected 0d8e333a0
# Test Case 40 FAIL: C[1][0] mismatch! Actual 0, Expected 1441e0a0a
# Test Case 40 FAIL: C[1][1] mismatch! Actual 0, Expected 0d7e42803
# Test Case 40 FAIL: C[1][2] mismatch! Actual 0, Expected 12c8578f0
# Test Case 40 FAIL: C[1][3] mismatch! Actual 0, Expected 0aeb352ee
# Test Case 40 FAIL: C[2][0] mismatch! Actual 0, Expected 1d82e19c0
# Test Case 40 FAIL: C[2][1] mismatch! Actual 0, Expected 150b458c0
# Test Case 40 FAIL: C[2][2] mismatch! Actual 0, Expected 203c8ec0d
# Test Case 40 FAIL: C[2][3] mismatch! Actual 1, Expected 1e91d1577
# Test Case 40 FAIL: C[3][0] mismatch! Actual 1, Expected 18eeb18fa
# Test Case 40 FAIL: C[3][1] mismatch! Actual 0, Expected 134c83155
# Test Case 40 FAIL: C[3][2] mismatch! Actual 1, Expected 1c3d07c86
# Test Case 40 FAIL: C[3][3] mismatch! Actual 0, Expected 1effcf8b8
# Test Case 40 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @35276000 Starting Test Case 41 of 100
# ===================================================
# Reading test case 41:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_41/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @35276000 Matrix Partition
# ===================================================
# @35276000 Matrix partition ended! 
# @35276000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 48ef
#   Loading A[0][1] (Bank 0, Addr 1) with 78f0
#   Loading A[0][2] (Bank 0, Addr 2) with d4a8
#   Loading A[0][3] (Bank 0, Addr 3) with d4d0
#   Loading A[1][0] (Bank 1, Addr 0) with 3d53
#   Loading A[1][1] (Bank 1, Addr 1) with 43fe
#   Loading A[1][2] (Bank 1, Addr 2) with df3b
#   Loading A[1][3] (Bank 1, Addr 3) with 587e
#   Loading A[2][0] (Bank 2, Addr 0) with 9daa
#   Loading A[2][1] (Bank 2, Addr 1) with 7b4e
#   Loading A[2][2] (Bank 2, Addr 2) with dd70
#   Loading A[2][3] (Bank 2, Addr 3) with f12c
#   Loading A[3][0] (Bank 3, Addr 0) with 9c3a
#   Loading A[3][1] (Bank 3, Addr 1) with 5b5a
#   Loading A[3][2] (Bank 3, Addr 2) with b76f
#   Loading A[3][3] (Bank 3, Addr 3) with 7d86
#   Loading B[0][0] (Bank 0, Addr 0) with 58cc
#   Loading B[1][0] (Bank 0, Addr 1) with 100b
#   Loading B[2][0] (Bank 0, Addr 2) with cb0b
#   Loading B[3][0] (Bank 0, Addr 3) with ecf2
#   Loading B[0][1] (Bank 1, Addr 0) with b973
#   Loading B[1][1] (Bank 1, Addr 1) with 2216
#   Loading B[2][1] (Bank 1, Addr 2) with 3272
#   Loading B[3][1] (Bank 1, Addr 3) with e7f2
#   Loading B[0][2] (Bank 2, Addr 0) with 810f
#   Loading B[1][2] (Bank 2, Addr 1) with 37cd
#   Loading B[2][2] (Bank 2, Addr 2) with a1a9
#   Loading B[3][2] (Bank 2, Addr 3) with e870
#   Loading B[0][3] (Bank 3, Addr 0) with 8b27
#   Loading B[1][3] (Bank 3, Addr 1) with b8ae
#   Loading B[2][3] (Bank 3, Addr 2) with ba8e
#   Loading B[3][3] (Bank 3, Addr 3) with d3ad
# Matrix loading complete.
# @35615000 Simulating controller signals to execute multiplication...
# @35635000: Starting input feeding sequence...
# @35676000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @35686000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @35965000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 41...
# Test Case 41 FAIL: C[0][0] mismatch! Actual 0, Expected 0ea1fff89
# Test Case 41 FAIL: C[0][1] mismatch! Actual 0, Expected 09fce03f5
# Test Case 41 FAIL: C[0][2] mismatch! Actual 0, Expected 11b56f7a1
# Test Case 41 FAIL: C[0][3] mismatch! Actual 0, Expected 18b658ef6
# Test Case 41 FAIL: C[1][0] mismatch! Actual 0, Expected 0cb0548a2
# Test Case 41 FAIL: C[1][1] mismatch! Actual 0, Expected 06d690cc6
# Test Case 41 FAIL: C[1][2] mismatch! Actual 0, Expected 0fdc0e9d6
# Test Case 41 FAIL: C[1][3] mismatch! Actual 0, Expected 1690796ee
# Test Case 41 FAIL: C[2][0] mismatch! Actual 0, Expected 1bed0c0da
# Test Case 41 FAIL: C[2][1] mismatch! Actual 0, Expected 0dfa5806c
# Test Case 41 FAIL: C[2][2] mismatch! Actual 0, Expected 1e6294e00
# Test Case 41 FAIL: C[2][3] mismatch! Actual 0, Expected 2efcffd99
# Test Case 41 FAIL: C[3][0] mismatch! Actual 0, Expected 147bc1358
# Test Case 41 FAIL: C[3][1] mismatch! Actual 0, Expected 0a83db114
# Test Case 41 FAIL: C[3][2] mismatch! Actual 0, Expected 1adfef76c
# Test Case 41 FAIL: C[3][3] mismatch! Actual 0, Expected 257e9ee8a
# Test Case 41 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @36136000 Starting Test Case 42 of 100
# ===================================================
# Reading test case 42:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_42/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @36136000 Matrix Partition
# ===================================================
# @36136000 Matrix partition ended! 
# @36136000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with dd7f
#   Loading A[0][1] (Bank 0, Addr 1) with 611f
#   Loading A[0][2] (Bank 0, Addr 2) with d8fb
#   Loading A[0][3] (Bank 0, Addr 3) with 13b4
#   Loading A[1][0] (Bank 1, Addr 0) with 993f
#   Loading A[1][1] (Bank 1, Addr 1) with 0f4e
#   Loading A[1][2] (Bank 1, Addr 2) with bc91
#   Loading A[1][3] (Bank 1, Addr 3) with a272
#   Loading A[2][0] (Bank 2, Addr 0) with 975f
#   Loading A[2][1] (Bank 2, Addr 1) with a713
#   Loading A[2][2] (Bank 2, Addr 2) with bec6
#   Loading A[2][3] (Bank 2, Addr 3) with dfc8
#   Loading A[3][0] (Bank 3, Addr 0) with 5212
#   Loading A[3][1] (Bank 3, Addr 1) with f07e
#   Loading A[3][2] (Bank 3, Addr 2) with 0aa9
#   Loading A[3][3] (Bank 3, Addr 3) with e1dc
#   Loading B[0][0] (Bank 0, Addr 0) with 4869
#   Loading B[1][0] (Bank 0, Addr 1) with cd56
#   Loading B[2][0] (Bank 0, Addr 2) with 3902
#   Loading B[3][0] (Bank 0, Addr 3) with 77d7
#   Loading B[0][1] (Bank 1, Addr 0) with 05e1
#   Loading B[1][1] (Bank 1, Addr 1) with a0a8
#   Loading B[2][1] (Bank 1, Addr 2) with a60d
#   Loading B[3][1] (Bank 1, Addr 3) with 12d3
#   Loading B[0][2] (Bank 2, Addr 0) with ef03
#   Loading B[1][2] (Bank 2, Addr 1) with 0c8a
#   Loading B[2][2] (Bank 2, Addr 2) with c7bd
#   Loading B[3][2] (Bank 2, Addr 3) with c6c1
#   Loading B[0][3] (Bank 3, Addr 0) with b8af
#   Loading B[1][3] (Bank 3, Addr 1) with 5047
#   Loading B[2][3] (Bank 3, Addr 2) with 7503
#   Loading B[3][3] (Bank 3, Addr 3) with 0821
# Matrix loading complete.
# @36475000 Simulating controller signals to execute multiplication...
# @36495000: Starting input feeding sequence...
# @36536000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @36546000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @36825000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 42...
# Test Case 42 FAIL: C[0][0] mismatch! Actual 0, Expected 10ab3fde1
# Test Case 42 FAIL: C[0][1] mismatch! Actual 0, Expected 132fb7d36
# Test Case 42 FAIL: C[0][2] mismatch! Actual 0, Expected 130576e8a
# Test Case 42 FAIL: C[0][3] mismatch! Actual 0, Expected 0eb158887
# Test Case 42 FAIL: C[1][0] mismatch! Actual 0, Expected 1654e2fa0
# Test Case 42 FAIL: C[1][1] mismatch! Actual 0, Expected 0ab1a45ca
# Test Case 42 FAIL: C[1][2] mismatch! Actual 0, Expected 10fd589b5
# Test Case 42 FAIL: C[1][3] mismatch! Actual 0, Expected 0b7f0aae4
# Test Case 42 FAIL: C[2][0] mismatch! Actual 0, Expected 0fb81ff3d
# Test Case 42 FAIL: C[2][1] mismatch! Actual 1, Expected 131102615
# Test Case 42 FAIL: C[2][2] mismatch! Actual 0, Expected 144594d7c
# Test Case 42 FAIL: C[2][3] mismatch! Actual 0, Expected 107e4245f
# Test Case 42 FAIL: C[3][0] mismatch! Actual 0, Expected 17d2c91c2
# Test Case 42 FAIL: C[3][1] mismatch! Actual 0, Expected 0c789031c
# Test Case 42 FAIL: C[3][2] mismatch! Actual 0, Expected 18397476e
# Test Case 42 FAIL: C[3][3] mismatch! Actual 0, Expected 0ca148346
# Test Case 42 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @36996000 Starting Test Case 43 of 100
# ===================================================
# Reading test case 43:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_43/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @36996000 Matrix Partition
# ===================================================
# @36996000 Matrix partition ended! 
# @36996000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with bc9b
#   Loading A[0][1] (Bank 0, Addr 1) with 8357
#   Loading A[0][2] (Bank 0, Addr 2) with 4ead
#   Loading A[0][3] (Bank 0, Addr 3) with 3e83
#   Loading A[1][0] (Bank 1, Addr 0) with 1077
#   Loading A[1][1] (Bank 1, Addr 1) with 5b43
#   Loading A[1][2] (Bank 1, Addr 2) with fe94
#   Loading A[1][3] (Bank 1, Addr 3) with 9251
#   Loading A[2][0] (Bank 2, Addr 0) with e766
#   Loading A[2][1] (Bank 2, Addr 1) with a657
#   Loading A[2][2] (Bank 2, Addr 2) with eee6
#   Loading A[2][3] (Bank 2, Addr 3) with 5926
#   Loading A[3][0] (Bank 3, Addr 0) with a943
#   Loading A[3][1] (Bank 3, Addr 1) with d744
#   Loading A[3][2] (Bank 3, Addr 2) with a466
#   Loading A[3][3] (Bank 3, Addr 3) with b99f
#   Loading B[0][0] (Bank 0, Addr 0) with 20fd
#   Loading B[1][0] (Bank 0, Addr 1) with 526c
#   Loading B[2][0] (Bank 0, Addr 2) with 0e3f
#   Loading B[3][0] (Bank 0, Addr 3) with 18e7
#   Loading B[0][1] (Bank 1, Addr 0) with 3b5e
#   Loading B[1][1] (Bank 1, Addr 1) with fe4f
#   Loading B[2][1] (Bank 1, Addr 2) with 6048
#   Loading B[3][1] (Bank 1, Addr 3) with 92bb
#   Loading B[0][2] (Bank 2, Addr 0) with 34d3
#   Loading B[1][2] (Bank 2, Addr 1) with 7aa3
#   Loading B[2][2] (Bank 2, Addr 2) with 9cc1
#   Loading B[3][2] (Bank 2, Addr 3) with 3e84
#   Loading B[0][3] (Bank 3, Addr 0) with 4043
#   Loading B[1][3] (Bank 3, Addr 1) with b6da
#   Loading B[2][3] (Bank 3, Addr 2) with 8055
#   Loading B[3][3] (Bank 3, Addr 3) with a020
# Matrix loading complete.
# @37335000 Simulating controller signals to execute multiplication...
# @37355000: Starting input feeding sequence...
# @37396000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @37406000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @37685000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 43...
# Test Case 43 FAIL: C[0][0] mismatch! Actual 0, Expected 0765bbb7c
# Test Case 43 FAIL: C[0][1] mismatch! Actual 1, Expected 134d4151d
# Test Case 43 FAIL: C[0][2] mismatch! Actual 0, Expected 0f33a74c2
# Test Case 43 FAIL: C[0][3] mismatch! Actual 1, Expected 0be29a9c2
# Test Case 43 FAIL: C[1][0] mismatch! Actual 0, Expected 07e72bd16
# Test Case 43 FAIL: C[1][1] mismatch! Actual 0, Expected 16e62f1ae
# Test Case 43 FAIL: C[1][2] mismatch! Actual 0, Expected 0fb65c46c
# Test Case 43 FAIL: C[1][3] mismatch! Actual 0, Expected 0f059cace
# Test Case 43 FAIL: C[2][0] mismatch! Actual 0, Expected 09fbd1d95
# Test Case 43 FAIL: C[2][1] mismatch! Actual 1, Expected 1fe183df6
# Test Case 43 FAIL: C[2][2] mismatch! Actual 0, Expected 148d1c577
# Test Case 43 FAIL: C[2][3] mismatch! Actual 0, Expected 13abcc38f
# Test Case 43 FAIL: C[3][0] mismatch! Actual 1, Expected 06afa1324
# Test Case 43 FAIL: C[3][1] mismatch! Actual 0, Expected 154c3d4db
# Test Case 43 FAIL: C[3][2] mismatch! Actual 1, Expected 0ce259276
# Test Case 43 FAIL: C[3][3] mismatch! Actual 0, Expected 0e3d182d8
# Test Case 43 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @37856000 Starting Test Case 44 of 100
# ===================================================
# Reading test case 44:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_44/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @37856000 Matrix Partition
# ===================================================
# @37856000 Matrix partition ended! 
# @37856000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a228
#   Loading A[0][1] (Bank 0, Addr 1) with 1831
#   Loading A[0][2] (Bank 0, Addr 2) with 9573
#   Loading A[0][3] (Bank 0, Addr 3) with d2c6
#   Loading A[1][0] (Bank 1, Addr 0) with 70d0
#   Loading A[1][1] (Bank 1, Addr 1) with c865
#   Loading A[1][2] (Bank 1, Addr 2) with ba18
#   Loading A[1][3] (Bank 1, Addr 3) with 333d
#   Loading A[2][0] (Bank 2, Addr 0) with ddb4
#   Loading A[2][1] (Bank 2, Addr 1) with 7382
#   Loading A[2][2] (Bank 2, Addr 2) with f870
#   Loading A[2][3] (Bank 2, Addr 3) with ca77
#   Loading A[3][0] (Bank 3, Addr 0) with 14fb
#   Loading A[3][1] (Bank 3, Addr 1) with 91b9
#   Loading A[3][2] (Bank 3, Addr 2) with 38d8
#   Loading A[3][3] (Bank 3, Addr 3) with 4269
#   Loading B[0][0] (Bank 0, Addr 0) with b9ea
#   Loading B[1][0] (Bank 0, Addr 1) with e480
#   Loading B[2][0] (Bank 0, Addr 2) with caff
#   Loading B[3][0] (Bank 0, Addr 3) with 0093
#   Loading B[0][1] (Bank 1, Addr 0) with 1a37
#   Loading B[1][1] (Bank 1, Addr 1) with bc9a
#   Loading B[2][1] (Bank 1, Addr 2) with af78
#   Loading B[3][1] (Bank 1, Addr 3) with 3c58
#   Loading B[0][2] (Bank 2, Addr 0) with 60da
#   Loading B[1][2] (Bank 2, Addr 1) with 2c73
#   Loading B[2][2] (Bank 2, Addr 2) with 6744
#   Loading B[3][2] (Bank 2, Addr 3) with f610
#   Loading B[0][3] (Bank 3, Addr 0) with c509
#   Loading B[1][3] (Bank 3, Addr 1) with b00f
#   Loading B[2][3] (Bank 3, Addr 2) with 63b9
#   Loading B[3][3] (Bank 3, Addr 3) with 5187
# Matrix loading complete.
# @38195000 Simulating controller signals to execute multiplication...
# @38215000: Starting input feeding sequence...
# @38256000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @38266000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @38545000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 44...
# Test Case 44 FAIL: C[0][0] mismatch! Actual 0, Expected 0e556ac5b
# Test Case 44 FAIL: C[0][1] mismatch! Actual 1, Expected 118c5a3b1
# Test Case 44 FAIL: C[0][2] mismatch! Actual 0, Expected 12f82b18b
# Test Case 44 FAIL: C[0][3] mismatch! Actual 1, Expected 0f6bbf315
# Test Case 44 FAIL: C[1][0] mismatch! Actual 1, Expected 0c1f26eb2
# Test Case 44 FAIL: C[1][1] mismatch! Actual 1, Expected 121806a7f
# Test Case 44 FAIL: C[1][2] mismatch! Actual 1, Expected 103e59360
# Test Case 44 FAIL: C[1][3] mismatch! Actual 1, Expected 0ccb8f88a
# Test Case 44 FAIL: C[2][0] mismatch! Actual 0, Expected 10954e83e
# Test Case 44 FAIL: C[2][1] mismatch! Actual 0, Expected 160b966e8
# Test Case 44 FAIL: C[2][2] mismatch! Actual 0, Expected 1706ae8a5
# Test Case 44 FAIL: C[2][3] mismatch! Actual 0, Expected 12d18e231
# Test Case 44 FAIL: C[3][0] mismatch! Actual 0, Expected 11e071f1e
# Test Case 44 FAIL: C[3][1] mismatch! Actual 1, Expected 132b4d54e
# Test Case 44 FAIL: C[3][2] mismatch! Actual 0, Expected 135cb284f
# Test Case 44 FAIL: C[3][3] mismatch! Actual 1, Expected 0e44e3079
# Test Case 44 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @38716000 Starting Test Case 45 of 100
# ===================================================
# Reading test case 45:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_45/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @38716000 Matrix Partition
# ===================================================
# @38716000 Matrix partition ended! 
# @38716000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 18c5
#   Loading A[0][1] (Bank 0, Addr 1) with bb55
#   Loading A[0][2] (Bank 0, Addr 2) with a59a
#   Loading A[0][3] (Bank 0, Addr 3) with 0631
#   Loading A[1][0] (Bank 1, Addr 0) with 56e8
#   Loading A[1][1] (Bank 1, Addr 1) with 46c3
#   Loading A[1][2] (Bank 1, Addr 2) with 3ade
#   Loading A[1][3] (Bank 1, Addr 3) with f3e7
#   Loading A[2][0] (Bank 2, Addr 0) with 0fad
#   Loading A[2][1] (Bank 2, Addr 1) with 6723
#   Loading A[2][2] (Bank 2, Addr 2) with 62a8
#   Loading A[2][3] (Bank 2, Addr 3) with 84fd
#   Loading A[3][0] (Bank 3, Addr 0) with 710b
#   Loading A[3][1] (Bank 3, Addr 1) with cb20
#   Loading A[3][2] (Bank 3, Addr 2) with dba6
#   Loading A[3][3] (Bank 3, Addr 3) with 1ff2
#   Loading B[0][0] (Bank 0, Addr 0) with 85e1
#   Loading B[1][0] (Bank 0, Addr 1) with 93ee
#   Loading B[2][0] (Bank 0, Addr 2) with adb6
#   Loading B[3][0] (Bank 0, Addr 3) with 3601
#   Loading B[0][1] (Bank 1, Addr 0) with 8d10
#   Loading B[1][1] (Bank 1, Addr 1) with e6a3
#   Loading B[2][1] (Bank 1, Addr 2) with fbad
#   Loading B[3][1] (Bank 1, Addr 3) with ef37
#   Loading B[0][2] (Bank 2, Addr 0) with e6f4
#   Loading B[1][2] (Bank 2, Addr 1) with 3812
#   Loading B[2][2] (Bank 2, Addr 2) with 3a0e
#   Loading B[3][2] (Bank 2, Addr 3) with 1ca3
#   Loading B[0][3] (Bank 3, Addr 0) with d5a3
#   Loading B[1][3] (Bank 3, Addr 1) with 8599
#   Loading B[2][3] (Bank 3, Addr 2) with c6d6
#   Loading B[3][3] (Bank 3, Addr 3) with 1fa3
# Matrix loading complete.
# @39055000 Simulating controller signals to execute multiplication...
# @39075000: Starting input feeding sequence...
# @39116000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @39126000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @39405000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 45...
# Test Case 45 FAIL: C[0][0] mismatch! Actual 0, Expected 0a951d48a
# Test Case 45 FAIL: C[0][1] mismatch! Actual 0, Expected 09b09249b
# Test Case 45 FAIL: C[0][2] mismatch! Actual 0, Expected 0c199fe7e
# Test Case 45 FAIL: C[0][3] mismatch! Actual 0, Expected 0662820c5
# Test Case 45 FAIL: C[1][0] mismatch! Actual 1, Expected 18f8456a1
# Test Case 45 FAIL: C[1][1] mismatch! Actual 1, Expected 12c9826c5
# Test Case 45 FAIL: C[1][2] mismatch! Actual 1, Expected 179d6c0df
# Test Case 45 FAIL: C[1][3] mismatch! Actual 1, Expected 08e479ee3
# Test Case 45 FAIL: C[2][0] mismatch! Actual 0, Expected 18758730c
# Test Case 45 FAIL: C[2][1] mismatch! Actual 0, Expected 11cf6868c
# Test Case 45 FAIL: C[2][2] mismatch! Actual 0, Expected 16b37b576
# Test Case 45 FAIL: C[2][3] mismatch! Actual 0, Expected 0801f2ef6
# Test Case 45 FAIL: C[3][0] mismatch! Actual 1, Expected 11c451fbb
# Test Case 45 FAIL: C[3][1] mismatch! Actual 1, Expected 10d1d3e0f
# Test Case 45 FAIL: C[3][2] mismatch! Actual 0, Expected 12af44c13
# Test Case 45 FAIL: C[3][3] mismatch! Actual 1, Expected 0f80a69ff
# Test Case 45 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @39576000 Starting Test Case 46 of 100
# ===================================================
# Reading test case 46:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_46/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @39576000 Matrix Partition
# ===================================================
# @39576000 Matrix partition ended! 
# @39576000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with b04d
#   Loading A[0][1] (Bank 0, Addr 1) with a6b7
#   Loading A[0][2] (Bank 0, Addr 2) with 0ebb
#   Loading A[0][3] (Bank 0, Addr 3) with 75f5
#   Loading A[1][0] (Bank 1, Addr 0) with 3c77
#   Loading A[1][1] (Bank 1, Addr 1) with 7150
#   Loading A[1][2] (Bank 1, Addr 2) with 12f7
#   Loading A[1][3] (Bank 1, Addr 3) with 5703
#   Loading A[2][0] (Bank 2, Addr 0) with 8cf2
#   Loading A[2][1] (Bank 2, Addr 1) with 993b
#   Loading A[2][2] (Bank 2, Addr 2) with 49cb
#   Loading A[2][3] (Bank 2, Addr 3) with 2279
#   Loading A[3][0] (Bank 3, Addr 0) with da75
#   Loading A[3][1] (Bank 3, Addr 1) with 8cc0
#   Loading A[3][2] (Bank 3, Addr 2) with 2b37
#   Loading A[3][3] (Bank 3, Addr 3) with 6f22
#   Loading B[0][0] (Bank 0, Addr 0) with 2ad4
#   Loading B[1][0] (Bank 0, Addr 1) with 1fb4
#   Loading B[2][0] (Bank 0, Addr 2) with 43c7
#   Loading B[3][0] (Bank 0, Addr 3) with a03d
#   Loading B[0][1] (Bank 1, Addr 0) with 38d8
#   Loading B[1][1] (Bank 1, Addr 1) with 5a3b
#   Loading B[2][1] (Bank 1, Addr 2) with f9fa
#   Loading B[3][1] (Bank 1, Addr 3) with 0b80
#   Loading B[0][2] (Bank 2, Addr 0) with f6e6
#   Loading B[1][2] (Bank 2, Addr 1) with 7588
#   Loading B[2][2] (Bank 2, Addr 2) with c1b9
#   Loading B[3][2] (Bank 2, Addr 3) with 49d6
#   Loading B[0][3] (Bank 3, Addr 0) with 8330
#   Loading B[1][3] (Bank 3, Addr 1) with dfea
#   Loading B[2][3] (Bank 3, Addr 2) with dcb7
#   Loading B[3][3] (Bank 3, Addr 3) with 1ae4
# Matrix loading complete.
# @39915000 Simulating controller signals to execute multiplication...
# @39935000: Starting input feeding sequence...
# @39976000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @39986000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @40265000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 46...
# Test Case 46 FAIL: C[0][0] mismatch! Actual 0, Expected 122cdb088
# Test Case 46 FAIL: C[0][1] mismatch! Actual 1, Expected 12aee2313
# Test Case 46 FAIL: C[0][2] mismatch! Actual 0, Expected 190b90096
# Test Case 46 FAIL: C[0][3] mismatch! Actual 1, Expected 0b0aac159
# Test Case 46 FAIL: C[1][0] mismatch! Actual 0, Expected 110f6320e
# Test Case 46 FAIL: C[1][1] mismatch! Actual 0, Expected 0fe0ae4f4
# Test Case 46 FAIL: C[1][2] mismatch! Actual 0, Expected 18816c944
# Test Case 46 FAIL: C[1][3] mismatch! Actual 0, Expected 0a86bf6ed
# Test Case 46 FAIL: C[2][0] mismatch! Actual 0, Expected 063fd86f6
# Test Case 46 FAIL: C[2][1] mismatch! Actual 0, Expected 0502f9987
# Test Case 46 FAIL: C[2][2] mismatch! Actual 0, Expected 07384af97
# Test Case 46 FAIL: C[2][3] mismatch! Actual 1, Expected 023e520bd
# Test Case 46 FAIL: C[3][0] mismatch! Actual 0, Expected 081406e82
# Test Case 46 FAIL: C[3][1] mismatch! Actual 0, Expected 09e4e8751
# Test Case 46 FAIL: C[3][2] mismatch! Actual 0, Expected 0ee188020
# Test Case 46 FAIL: C[3][3] mismatch! Actual 0, Expected 0635b9e4f
# Test Case 46 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @40436000 Starting Test Case 47 of 100
# ===================================================
# Reading test case 47:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_47/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @40436000 Matrix Partition
# ===================================================
# @40436000 Matrix partition ended! 
# @40436000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 82ca
#   Loading A[0][1] (Bank 0, Addr 1) with 5957
#   Loading A[0][2] (Bank 0, Addr 2) with b9ae
#   Loading A[0][3] (Bank 0, Addr 3) with 5921
#   Loading A[1][0] (Bank 1, Addr 0) with f1d3
#   Loading A[1][1] (Bank 1, Addr 1) with 9025
#   Loading A[1][2] (Bank 1, Addr 2) with c062
#   Loading A[1][3] (Bank 1, Addr 3) with b0b9
#   Loading A[2][0] (Bank 2, Addr 0) with 60b5
#   Loading A[2][1] (Bank 2, Addr 1) with d689
#   Loading A[2][2] (Bank 2, Addr 2) with f593
#   Loading A[2][3] (Bank 2, Addr 3) with f32c
#   Loading A[3][0] (Bank 3, Addr 0) with 267f
#   Loading A[3][1] (Bank 3, Addr 1) with 9c34
#   Loading A[3][2] (Bank 3, Addr 2) with 89d7
#   Loading A[3][3] (Bank 3, Addr 3) with e2b1
#   Loading B[0][0] (Bank 0, Addr 0) with a894
#   Loading B[1][0] (Bank 0, Addr 1) with bffb
#   Loading B[2][0] (Bank 0, Addr 2) with cd28
#   Loading B[3][0] (Bank 0, Addr 3) with b14d
#   Loading B[0][1] (Bank 1, Addr 0) with 3931
#   Loading B[1][1] (Bank 1, Addr 1) with 919b
#   Loading B[2][1] (Bank 1, Addr 2) with 2d2f
#   Loading B[3][1] (Bank 1, Addr 3) with 6fd5
#   Loading B[0][2] (Bank 2, Addr 0) with 472b
#   Loading B[1][2] (Bank 2, Addr 1) with 41db
#   Loading B[2][2] (Bank 2, Addr 2) with 25ce
#   Loading B[3][2] (Bank 2, Addr 3) with 173c
#   Loading B[0][3] (Bank 3, Addr 0) with fb30
#   Loading B[1][3] (Bank 3, Addr 1) with 68ee
#   Loading B[2][3] (Bank 3, Addr 2) with b99d
#   Loading B[3][3] (Bank 3, Addr 3) with 28b7
# Matrix loading complete.
# @40775000 Simulating controller signals to execute multiplication...
# @40795000: Starting input feeding sequence...
# @40836000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @40846000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @41125000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 47...
# Test Case 47 FAIL: C[0][0] mismatch! Actual 0, Expected 0ccce9f62
# Test Case 47 FAIL: C[0][1] mismatch! Actual 0, Expected 11447f1b8
# Test Case 47 FAIL: C[0][2] mismatch! Actual 0, Expected 0bdb00bd6
# Test Case 47 FAIL: C[0][3] mismatch! Actual 1, Expected 0d31efc86
# Test Case 47 FAIL: C[1][0] mismatch! Actual 0, Expected 12ff0e024
# Test Case 47 FAIL: C[1][1] mismatch! Actual 0, Expected 10c32653f
# Test Case 47 FAIL: C[1][2] mismatch! Actual 0, Expected 0f1f96785
# Test Case 47 FAIL: C[1][3] mismatch! Actual 0, Expected 0a928603c
# Test Case 47 FAIL: C[2][0] mismatch! Actual 0, Expected 170c4d75b
# Test Case 47 FAIL: C[2][1] mismatch! Actual 0, Expected 17056c293
# Test Case 47 FAIL: C[2][2] mismatch! Actual 0, Expected 13ef6a853
# Test Case 47 FAIL: C[2][3] mismatch! Actual 1, Expected 100d99b05
# Test Case 47 FAIL: C[3][0] mismatch! Actual 0, Expected 184344c11
# Test Case 47 FAIL: C[3][1] mismatch! Actual 0, Expected 142d3a690
# Test Case 47 FAIL: C[3][2] mismatch! Actual 1, Expected 12ee44a14
# Test Case 47 FAIL: C[3][3] mismatch! Actual 1, Expected 0c50d87b1
# Test Case 47 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @41296000 Starting Test Case 48 of 100
# ===================================================
# Reading test case 48:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_48/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @41296000 Matrix Partition
# ===================================================
# @41296000 Matrix partition ended! 
# @41296000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f1df
#   Loading A[0][1] (Bank 0, Addr 1) with 90bd
#   Loading A[0][2] (Bank 0, Addr 2) with 4302
#   Loading A[0][3] (Bank 0, Addr 3) with ba76
#   Loading A[1][0] (Bank 1, Addr 0) with 11e7
#   Loading A[1][1] (Bank 1, Addr 1) with b223
#   Loading A[1][2] (Bank 1, Addr 2) with f8b1
#   Loading A[1][3] (Bank 1, Addr 3) with 2a4b
#   Loading A[2][0] (Bank 2, Addr 0) with cd43
#   Loading A[2][1] (Bank 2, Addr 1) with 6737
#   Loading A[2][2] (Bank 2, Addr 2) with 3a8c
#   Loading A[2][3] (Bank 2, Addr 3) with b39b
#   Loading A[3][0] (Bank 3, Addr 0) with 0ba5
#   Loading A[3][1] (Bank 3, Addr 1) with f096
#   Loading A[3][2] (Bank 3, Addr 2) with e494
#   Loading A[3][3] (Bank 3, Addr 3) with 717f
#   Loading B[0][0] (Bank 0, Addr 0) with 4392
#   Loading B[1][0] (Bank 0, Addr 1) with 89f2
#   Loading B[2][0] (Bank 0, Addr 2) with 0d70
#   Loading B[3][0] (Bank 0, Addr 3) with ed4c
#   Loading B[0][1] (Bank 1, Addr 0) with fbab
#   Loading B[1][1] (Bank 1, Addr 1) with fecf
#   Loading B[2][1] (Bank 1, Addr 2) with cc96
#   Loading B[3][1] (Bank 1, Addr 3) with 11eb
#   Loading B[0][2] (Bank 2, Addr 0) with b216
#   Loading B[1][2] (Bank 2, Addr 1) with 0c44
#   Loading B[2][2] (Bank 2, Addr 2) with 4685
#   Loading B[3][2] (Bank 2, Addr 3) with 6839
#   Loading B[0][3] (Bank 3, Addr 0) with a272
#   Loading B[1][3] (Bank 3, Addr 1) with 15ee
#   Loading B[2][3] (Bank 3, Addr 2) with 492d
#   Loading B[3][3] (Bank 3, Addr 3) with aa23
# Matrix loading complete.
# @41635000 Simulating controller signals to execute multiplication...
# @41655000: Starting input feeding sequence...
# @41696000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @41706000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @41985000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 48...
# Test Case 48 FAIL: C[0][0] mismatch! Actual 0, Expected 0e79e93b7
# Test Case 48 FAIL: C[0][1] mismatch! Actual 0, Expected 09efbadc9
# Test Case 48 FAIL: C[0][2] mismatch! Actual 0, Expected 056dfc4ba
# Test Case 48 FAIL: C[0][3] mismatch! Actual 0, Expected 13cc21cbb
# Test Case 48 FAIL: C[1][0] mismatch! Actual 0, Expected 1b5ca7cb1
# Test Case 48 FAIL: C[1][1] mismatch! Actual 0, Expected 118dab407
# Test Case 48 FAIL: C[1][2] mismatch! Actual 0, Expected 0f728ea23
# Test Case 48 FAIL: C[1][3] mismatch! Actual 0, Expected 15c8b9dfe
# Test Case 48 FAIL: C[2][0] mismatch! Actual 0, Expected 1bff1384f
# Test Case 48 FAIL: C[2][1] mismatch! Actual 0, Expected 13206e1cb
# Test Case 48 FAIL: C[2][2] mismatch! Actual 0, Expected 11bba4356
# Test Case 48 FAIL: C[2][3] mismatch! Actual 0, Expected 0ff443b7b
# Test Case 48 FAIL: C[3][0] mismatch! Actual 0, Expected 11fc12045
# Test Case 48 FAIL: C[3][1] mismatch! Actual 0, Expected 0a0e5ee6f
# Test Case 48 FAIL: C[3][2] mismatch! Actual 0, Expected 07d80f96c
# Test Case 48 FAIL: C[3][3] mismatch! Actual 0, Expected 1445936c1
# Test Case 48 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @42156000 Starting Test Case 49 of 100
# ===================================================
# Reading test case 49:                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/matrix_A.txt,                                                                             /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/matrix_B.txt, and                                                                           /home/lamar/Documents/git/matrix-multiplier/testcases/test_49/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @42156000 Matrix Partition
# ===================================================
# @42156000 Matrix partition ended! 
# @42156000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 6446
#   Loading A[0][1] (Bank 0, Addr 1) with 2351
#   Loading A[0][2] (Bank 0, Addr 2) with bb07
#   Loading A[0][3] (Bank 0, Addr 3) with 20da
#   Loading A[1][0] (Bank 1, Addr 0) with ac39
#   Loading A[1][1] (Bank 1, Addr 1) with d8db
#   Loading A[1][2] (Bank 1, Addr 2) with 9e06
#   Loading A[1][3] (Bank 1, Addr 3) with af80
#   Loading A[2][0] (Bank 2, Addr 0) with fc34
#   Loading A[2][1] (Bank 2, Addr 1) with 40c3
#   Loading A[2][2] (Bank 2, Addr 2) with ccfa
#   Loading A[2][3] (Bank 2, Addr 3) with edf9
#   Loading A[3][0] (Bank 3, Addr 0) with c555
#   Loading A[3][1] (Bank 3, Addr 1) with 8ecf
#   Loading A[3][2] (Bank 3, Addr 2) with 997f
#   Loading A[3][3] (Bank 3, Addr 3) with 7a22
#   Loading B[0][0] (Bank 0, Addr 0) with 8669
#   Loading B[1][0] (Bank 0, Addr 1) with 71ea
#   Loading B[2][0] (Bank 0, Addr 2) with 0f15
#   Loading B[3][0] (Bank 0, Addr 3) with d489
#   Loading B[0][1] (Bank 1, Addr 0) with adae
#   Loading B[1][1] (Bank 1, Addr 1) with 1804
#   Loading B[2][1] (Bank 1, Addr 2) with b1db
#   Loading B[3][1] (Bank 1, Addr 3) with 1956
#   Loading B[0][2] (Bank 2, Addr 0) with 1ecf
#   Loading B[1][2] (Bank 2, Addr 1) with 68a1
#   Loading B[2][2] (Bank 2, Addr 2) with 0be5
#   Loading B[3][2] (Bank 2, Addr 3) with dc47
#   Loading B[0][3] (Bank 3, Addr 0) with 6db2
#   Loading B[1][3] (Bank 3, Addr 1) with 0263
#   Loading B[2][3] (Bank 3, Addr 2) with fa93
#   Loading B[3][3] (Bank 3, Addr 3) with d339
# Matrix loading complete.
# @42495000 Simulating controller signals to execute multiplication...
# @42515000: Starting input feeding sequence...
# @42556000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @42566000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
quit -sim
# End time: 14:54:10 on May 16,2025, Elapsed time: 0:07:51
# Errors: 0, Warnings: 24
# Compile of datapath_tb.v was successful.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 14:54:21 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[3]/b_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 1, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 1, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 1, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 0, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 0, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 0, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 0, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 0, Addr 1) with 5d17
#   Loading A[0][2] (Bank 0, Addr 2) with 546c
#   Loading A[0][3] (Bank 0, Addr 3) with 9b65
#   Loading A[1][0] (Bank 1, Addr 0) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 1, Addr 2) with ab63
#   Loading A[1][3] (Bank 1, Addr 3) with 151f
#   Loading A[2][0] (Bank 2, Addr 0) with d2a1
#   Loading A[2][1] (Bank 2, Addr 1) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 2, Addr 3) with 2d93
#   Loading A[3][0] (Bank 3, Addr 0) with 5dc4
#   Loading A[3][1] (Bank 3, Addr 1) with 7b97
#   Loading A[3][2] (Bank 3, Addr 2) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[1][0] (Bank 0, Addr 1) with bfbe
#   Loading B[2][0] (Bank 0, Addr 2) with 588e
#   Loading B[3][0] (Bank 0, Addr 3) with d7f2
#   Loading B[0][1] (Bank 1, Addr 0) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[2][1] (Bank 1, Addr 2) with 7d34
#   Loading B[3][1] (Bank 1, Addr 3) with 450d
#   Loading B[0][2] (Bank 2, Addr 0) with bb59
#   Loading B[1][2] (Bank 2, Addr 1) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[3][2] (Bank 2, Addr 3) with 7124
#   Loading B[0][3] (Bank 3, Addr 0) with 45ee
#   Loading B[1][3] (Bank 3, Addr 1) with f9ff
#   Loading B[2][3] (Bank 3, Addr 2) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 0, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 0, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 0, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 1, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 0, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 0, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 1, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3456000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3456000 Matrix Partition
# ===================================================
# @3456000 Matrix partition ended! 
# @3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 0, Addr 1) with 140c
#   Loading A[0][2] (Bank 0, Addr 2) with 1bbe
#   Loading A[0][3] (Bank 0, Addr 3) with e39e
#   Loading A[1][0] (Bank 1, Addr 0) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 1, Addr 2) with be4d
#   Loading A[1][3] (Bank 1, Addr 3) with 968b
#   Loading A[2][0] (Bank 2, Addr 0) with 8db5
#   Loading A[2][1] (Bank 2, Addr 1) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 2, Addr 3) with 39b3
#   Loading A[3][0] (Bank 3, Addr 0) with 5ef7
#   Loading A[3][1] (Bank 3, Addr 1) with 47ee
#   Loading A[3][2] (Bank 3, Addr 2) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[1][0] (Bank 0, Addr 1) with 5d49
#   Loading B[2][0] (Bank 0, Addr 2) with 21d2
#   Loading B[3][0] (Bank 0, Addr 3) with be24
#   Loading B[0][1] (Bank 1, Addr 0) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[2][1] (Bank 1, Addr 2) with 61c6
#   Loading B[3][1] (Bank 1, Addr 3) with d9cf
#   Loading B[0][2] (Bank 2, Addr 0) with 521e
#   Loading B[1][2] (Bank 2, Addr 1) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[3][2] (Bank 2, Addr 3) with 1b34
#   Loading B[0][3] (Bank 3, Addr 0) with c582
#   Loading B[1][3] (Bank 3, Addr 1) with d7ad
#   Loading B[2][3] (Bank 3, Addr 2) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual 0, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual 0, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual 0, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual 0, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual 0, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual 0, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual 0, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual 0, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual 0, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual 0, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual 0, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual 0, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 1, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4316000 Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4316000 Matrix Partition
# ===================================================
# @4316000 Matrix partition ended! 
# @4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 0, Addr 1) with 8e22
#   Loading A[0][2] (Bank 0, Addr 2) with ddbd
#   Loading A[0][3] (Bank 0, Addr 3) with 9bcd
#   Loading A[1][0] (Bank 1, Addr 0) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 1, Addr 2) with 8f25
#   Loading A[1][3] (Bank 1, Addr 3) with de61
#   Loading A[2][0] (Bank 2, Addr 0) with 5215
#   Loading A[2][1] (Bank 2, Addr 1) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 2, Addr 3) with 0d28
#   Loading A[3][0] (Bank 3, Addr 0) with 4ad1
#   Loading A[3][1] (Bank 3, Addr 1) with dfc6
#   Loading A[3][2] (Bank 3, Addr 2) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[1][0] (Bank 0, Addr 1) with e02c
#   Loading B[2][0] (Bank 0, Addr 2) with 5ba5
#   Loading B[3][0] (Bank 0, Addr 3) with 8bce
#   Loading B[0][1] (Bank 1, Addr 0) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[2][1] (Bank 1, Addr 2) with 7a69
#   Loading B[3][1] (Bank 1, Addr 3) with c8b3
#   Loading B[0][2] (Bank 2, Addr 0) with fde4
#   Loading B[1][2] (Bank 2, Addr 1) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[3][2] (Bank 2, Addr 3) with cf2b
#   Loading B[0][3] (Bank 3, Addr 0) with e7b5
#   Loading B[1][3] (Bank 3, Addr 1) with c1ce
#   Loading B[2][3] (Bank 3, Addr 2) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual 0, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual 0, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual 0, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual 0, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual 0, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual 0, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual 0, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual 0, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual 0, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual 1, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual 0, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual 0, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual 0, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual 1, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @5176000 Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @5176000 Matrix Partition
# ===================================================
# @5176000 Matrix partition ended! 
# @5176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 0, Addr 1) with d921
#   Loading A[0][2] (Bank 0, Addr 2) with 3320
#   Loading A[0][3] (Bank 0, Addr 3) with 57f2
#   Loading A[1][0] (Bank 1, Addr 0) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 1, Addr 2) with ed08
#   Loading A[1][3] (Bank 1, Addr 3) with 693c
#   Loading A[2][0] (Bank 2, Addr 0) with 75be
#   Loading A[2][1] (Bank 2, Addr 1) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 2, Addr 3) with dd13
#   Loading A[3][0] (Bank 3, Addr 0) with 09fa
#   Loading A[3][1] (Bank 3, Addr 1) with a3a1
#   Loading A[3][2] (Bank 3, Addr 2) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[1][0] (Bank 0, Addr 1) with c25b
#   Loading B[2][0] (Bank 0, Addr 2) with 1e50
#   Loading B[3][0] (Bank 0, Addr 3) with bc35
#   Loading B[0][1] (Bank 1, Addr 0) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[2][1] (Bank 1, Addr 2) with 1d83
#   Loading B[3][1] (Bank 1, Addr 3) with 9534
#   Loading B[0][2] (Bank 2, Addr 0) with be9b
#   Loading B[1][2] (Bank 2, Addr 1) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[3][2] (Bank 2, Addr 3) with 2c78
#   Loading B[0][3] (Bank 3, Addr 0) with fed7
#   Loading B[1][3] (Bank 3, Addr 1) with 2578
#   Loading B[2][3] (Bank 3, Addr 2) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @5515000 Simulating controller signals to execute multiplication...
# @5535000: Starting input feeding sequence...
# @5576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5865000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 6...
# Test Case 6 FAIL: C[0][0] mismatch! Actual 0, Expected 0c483863b
# Test Case 6 FAIL: C[0][1] mismatch! Actual 0, Expected 05aaf5863
# Test Case 6 FAIL: C[0][2] mismatch! Actual 0, Expected 01f69c551
# Test Case 6 FAIL: C[0][3] mismatch! Actual 0, Expected 06d603b68
# Test Case 6 FAIL: C[1][0] mismatch! Actual 0, Expected 23404c3e9
# Test Case 6 FAIL: C[1][1] mismatch! Actual 0, Expected 12be1a3eb
# Test Case 6 FAIL: C[1][2] mismatch! Actual 0, Expected 05b605aa2
# Test Case 6 FAIL: C[1][3] mismatch! Actual 1, Expected 1ac716ab1
# Test Case 6 FAIL: C[2][0] mismatch! Actual 0, Expected 1930ed4f0
# Test Case 6 FAIL: C[2][1] mismatch! Actual 0, Expected 0a1e53d62
# Test Case 6 FAIL: C[2][2] mismatch! Actual 0, Expected 03edf9fa6
# Test Case 6 FAIL: C[2][3] mismatch! Actual 0, Expected 0e6c59d98
# Test Case 6 FAIL: C[3][0] mismatch! Actual 0, Expected 1c977a957
# Test Case 6 FAIL: C[3][1] mismatch! Actual 1, Expected 0d8cb0a37
# Test Case 6 FAIL: C[3][2] mismatch! Actual 0, Expected 0450fe1b1
# Test Case 6 FAIL: C[3][3] mismatch! Actual 0, Expected 11f20797a
# Test Case 6 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6036000 Starting Test Case 7 of 100
# ===================================================
# Reading test case 7:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_7/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6036000 Matrix Partition
# ===================================================
# @6036000 Matrix partition ended! 
# @6036000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with e7fc
#   Loading A[0][1] (Bank 0, Addr 1) with db20
#   Loading A[0][2] (Bank 0, Addr 2) with 18c1
#   Loading A[0][3] (Bank 0, Addr 3) with 51dd
#   Loading A[1][0] (Bank 1, Addr 0) with 797c
#   Loading A[1][1] (Bank 1, Addr 1) with 2c10
#   Loading A[1][2] (Bank 1, Addr 2) with e208
#   Loading A[1][3] (Bank 1, Addr 3) with add1
#   Loading A[2][0] (Bank 2, Addr 0) with 1cec
#   Loading A[2][1] (Bank 2, Addr 1) with 14b5
#   Loading A[2][2] (Bank 2, Addr 2) with f22b
#   Loading A[2][3] (Bank 2, Addr 3) with 50c1
#   Loading A[3][0] (Bank 3, Addr 0) with 7745
#   Loading A[3][1] (Bank 3, Addr 1) with 41d8
#   Loading A[3][2] (Bank 3, Addr 2) with 586a
#   Loading A[3][3] (Bank 3, Addr 3) with 088e
#   Loading B[0][0] (Bank 0, Addr 0) with 9ca4
#   Loading B[1][0] (Bank 0, Addr 1) with 5fb9
#   Loading B[2][0] (Bank 0, Addr 2) with 5e5d
#   Loading B[3][0] (Bank 0, Addr 3) with 1a01
#   Loading B[0][1] (Bank 1, Addr 0) with c4c9
#   Loading B[1][1] (Bank 1, Addr 1) with b367
#   Loading B[2][1] (Bank 1, Addr 2) with 6cd8
#   Loading B[3][1] (Bank 1, Addr 3) with 7cb2
#   Loading B[0][2] (Bank 2, Addr 0) with cc0b
#   Loading B[1][2] (Bank 2, Addr 1) with 64b0
#   Loading B[2][2] (Bank 2, Addr 2) with cd38
#   Loading B[3][2] (Bank 2, Addr 3) with 7177
#   Loading B[0][3] (Bank 3, Addr 0) with b481
#   Loading B[1][3] (Bank 3, Addr 1) with dd2b
#   Loading B[2][3] (Bank 3, Addr 2) with 79c4
#   Loading B[3][3] (Bank 3, Addr 3) with 8e07
# Matrix loading complete.
# @6375000 Simulating controller signals to execute multiplication...
# @6395000: Starting input feeding sequence...
# @6436000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @6446000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @6725000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 7...
# Test Case 7 FAIL: C[0][0] mismatch! Actual 0, Expected 1567a6bb5
# Test Case 7 FAIL: C[0][1] mismatch! Actual 0, Expected 11e4b69d7
# Test Case 7 FAIL: C[0][2] mismatch! Actual 0, Expected 0d913dca0
# Test Case 7 FAIL: C[0][3] mismatch! Actual 0, Expected 0a1ba2ecb
# Test Case 7 FAIL: C[1][0] mismatch! Actual 0, Expected 0e6e0e6af
# Test Case 7 FAIL: C[1][1] mismatch! Actual 0, Expected 0b1d79c48
# Test Case 7 FAIL: C[1][2] mismatch! Actual 0, Expected 0936c4218
# Test Case 7 FAIL: C[1][3] mismatch! Actual 0, Expected 0596da04b
# Test Case 7 FAIL: C[2][0] mismatch! Actual 0, Expected 1bc40d12f
# Test Case 7 FAIL: C[2][1] mismatch! Actual 0, Expected 15349b10f
# Test Case 7 FAIL: C[2][2] mismatch! Actual 0, Expected 15569266d
# Test Case 7 FAIL: C[2][3] mismatch! Actual 1, Expected 10cff8034
# Test Case 7 FAIL: C[3][0] mismatch! Actual 0, Expected 0fe190686
# Test Case 7 FAIL: C[3][1] mismatch! Actual 1, Expected 0bf922c56
# Test Case 7 FAIL: C[3][2] mismatch! Actual 1, Expected 0ace19991
# Test Case 7 FAIL: C[3][3] mismatch! Actual 0, Expected 0858495c8
# Test Case 7 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @6896000 Starting Test Case 8 of 100
# ===================================================
# Reading test case 8:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_8/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @6896000 Matrix Partition
# ===================================================
# @6896000 Matrix partition ended! 
# @6896000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 00c6
#   Loading A[0][1] (Bank 0, Addr 1) with 125d
#   Loading A[0][2] (Bank 0, Addr 2) with 3382
#   Loading A[0][3] (Bank 0, Addr 3) with ee9b
#   Loading A[1][0] (Bank 1, Addr 0) with ca13
#   Loading A[1][1] (Bank 1, Addr 1) with 1457
#   Loading A[1][2] (Bank 1, Addr 2) with 2c62
#   Loading A[1][3] (Bank 1, Addr 3) with 94e6
#   Loading A[2][0] (Bank 2, Addr 0) with a82f
#   Loading A[2][1] (Bank 2, Addr 1) with 49c1
#   Loading A[2][2] (Bank 2, Addr 2) with 2c99
#   Loading A[2][3] (Bank 2, Addr 3) with ba8e
#   Loading A[3][0] (Bank 3, Addr 0) with 4f36
#   Loading A[3][1] (Bank 3, Addr 1) with 9e41
#   Loading A[3][2] (Bank 3, Addr 2) with 9bf6
#   Loading A[3][3] (Bank 3, Addr 3) with 7620
#   Loading B[0][0] (Bank 0, Addr 0) with f7e0
#   Loading B[1][0] (Bank 0, Addr 1) with 51bf
#   Loading B[2][0] (Bank 0, Addr 2) with cd18
#   Loading B[3][0] (Bank 0, Addr 3) with edaf
#   Loading B[0][1] (Bank 1, Addr 0) with 7b7b
#   Loading B[1][1] (Bank 1, Addr 1) with 3220
#   Loading B[2][1] (Bank 1, Addr 2) with 79a4
#   Loading B[3][1] (Bank 1, Addr 3) with 00e6
#   Loading B[0][2] (Bank 2, Addr 0) with e7c7
#   Loading B[1][2] (Bank 2, Addr 1) with 63fe
#   Loading B[2][2] (Bank 2, Addr 2) with 0529
#   Loading B[3][2] (Bank 2, Addr 3) with 27b4
#   Loading B[0][3] (Bank 3, Addr 0) with b184
#   Loading B[1][3] (Bank 3, Addr 1) with 9e83
#   Loading B[2][3] (Bank 3, Addr 2) with d989
#   Loading B[3][3] (Bank 3, Addr 3) with 1720
# Matrix loading complete.
# @7235000 Simulating controller signals to execute multiplication...
# @7255000: Starting input feeding sequence...
# @7296000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @7306000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @7585000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 8...
# Test Case 8 FAIL: C[0][0] mismatch! Actual 0, Expected 1316a42c2
# Test Case 8 FAIL: C[0][1] mismatch! Actual 0, Expected 09a8d1a5e
# Test Case 8 FAIL: C[0][2] mismatch! Actual 0, Expected 0a7561429
# Test Case 8 FAIL: C[0][3] mismatch! Actual 0, Expected 022aa8d38
# Test Case 8 FAIL: C[1][0] mismatch! Actual 0, Expected 0cc1a65b8
# Test Case 8 FAIL: C[1][1] mismatch! Actual 0, Expected 088a49304
# Test Case 8 FAIL: C[1][2] mismatch! Actual 0, Expected 0a056b726
# Test Case 8 FAIL: C[1][3] mismatch! Actual 1, Expected 02adace91
# Test Case 8 FAIL: C[2][0] mismatch! Actual 0, Expected 0dbce239d
# Test Case 8 FAIL: C[2][1] mismatch! Actual 0, Expected 08b204dee
# Test Case 8 FAIL: C[2][2] mismatch! Actual 0, Expected 0c3c7cd1f
# Test Case 8 FAIL: C[2][3] mismatch! Actual 0, Expected 044fbb33e
# Test Case 8 FAIL: C[3][0] mismatch! Actual 0, Expected 229aa9004
# Test Case 8 FAIL: C[3][1] mismatch! Actual 1, Expected 0fb5acea9
# Test Case 8 FAIL: C[3][2] mismatch! Actual 0, Expected 16e0b94be
# Test Case 8 FAIL: C[3][3] mismatch! Actual 1, Expected 105a8d371
# Test Case 8 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @7756000 Starting Test Case 9 of 100
# ===================================================
# Reading test case 9:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_9/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @7756000 Matrix Partition
# ===================================================
# @7756000 Matrix partition ended! 
# @7756000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a4a2
#   Loading A[0][1] (Bank 0, Addr 1) with c82b
#   Loading A[0][2] (Bank 0, Addr 2) with 899a
#   Loading A[0][3] (Bank 0, Addr 3) with 206a
#   Loading A[1][0] (Bank 1, Addr 0) with 52d8
#   Loading A[1][1] (Bank 1, Addr 1) with cb33
#   Loading A[1][2] (Bank 1, Addr 2) with 72c1
#   Loading A[1][3] (Bank 1, Addr 3) with 7480
#   Loading A[2][0] (Bank 2, Addr 0) with 2548
#   Loading A[2][1] (Bank 2, Addr 1) with 866a
#   Loading A[2][2] (Bank 2, Addr 2) with bd7b
#   Loading A[2][3] (Bank 2, Addr 3) with dfd9
#   Loading A[3][0] (Bank 3, Addr 0) with d73d
#   Loading A[3][1] (Bank 3, Addr 1) with 78be
#   Loading A[3][2] (Bank 3, Addr 2) with 02a2
#   Loading A[3][3] (Bank 3, Addr 3) with 7ca4
#   Loading B[0][0] (Bank 0, Addr 0) with f535
#   Loading B[1][0] (Bank 0, Addr 1) with 9650
#   Loading B[2][0] (Bank 0, Addr 2) with 5b34
#   Loading B[3][0] (Bank 0, Addr 3) with 86e4
#   Loading B[0][1] (Bank 1, Addr 0) with 6aeb
#   Loading B[1][1] (Bank 1, Addr 1) with 47ba
#   Loading B[2][1] (Bank 1, Addr 2) with 840d
#   Loading B[3][1] (Bank 1, Addr 3) with cd63
#   Loading B[0][2] (Bank 2, Addr 0) with 7173
#   Loading B[1][2] (Bank 2, Addr 1) with 01e1
#   Loading B[2][2] (Bank 2, Addr 2) with d564
#   Loading B[3][2] (Bank 2, Addr 3) with 3f7c
#   Loading B[0][3] (Bank 3, Addr 0) with 971c
#   Loading B[1][3] (Bank 3, Addr 1) with 69ab
#   Loading B[2][3] (Bank 3, Addr 2) with 6c05
#   Loading B[3][3] (Bank 3, Addr 3) with 5c73
# Matrix loading complete.
# @8095000 Simulating controller signals to execute multiplication...
# @8115000: Starting input feeding sequence...
# @8156000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @8166000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
restart -f
# ** Note: (vsim-12125) Error and warning message counts have been reset to '0' because of 'restart'.
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/pe_row_gen[3]/pe_col_gen[3]/pe_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 1, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 1, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 1, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 0, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 0, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 0, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 0, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 0, Addr 1) with 5d17
#   Loading A[0][2] (Bank 0, Addr 2) with 546c
#   Loading A[0][3] (Bank 0, Addr 3) with 9b65
#   Loading A[1][0] (Bank 1, Addr 0) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 1, Addr 2) with ab63
#   Loading A[1][3] (Bank 1, Addr 3) with 151f
#   Loading A[2][0] (Bank 2, Addr 0) with d2a1
#   Loading A[2][1] (Bank 2, Addr 1) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 2, Addr 3) with 2d93
#   Loading A[3][0] (Bank 3, Addr 0) with 5dc4
#   Loading A[3][1] (Bank 3, Addr 1) with 7b97
#   Loading A[3][2] (Bank 3, Addr 2) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[1][0] (Bank 0, Addr 1) with bfbe
#   Loading B[2][0] (Bank 0, Addr 2) with 588e
#   Loading B[3][0] (Bank 0, Addr 3) with d7f2
#   Loading B[0][1] (Bank 1, Addr 0) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[2][1] (Bank 1, Addr 2) with 7d34
#   Loading B[3][1] (Bank 1, Addr 3) with 450d
#   Loading B[0][2] (Bank 2, Addr 0) with bb59
#   Loading B[1][2] (Bank 2, Addr 1) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[3][2] (Bank 2, Addr 3) with 7124
#   Loading B[0][3] (Bank 3, Addr 0) with 45ee
#   Loading B[1][3] (Bank 3, Addr 1) with f9ff
#   Loading B[2][3] (Bank 3, Addr 2) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
quit -sim
# End time: 15:12:21 on May 16,2025, Elapsed time: 0:18:00
# Errors: 0, Warnings: 23
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 15:12:26 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint sim:/datapath_tb/uut/c_bram_inst/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 1, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 1, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 1, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
restart -f
# ** Note: (vsim-12125) Error and warning message counts have been reset to '0' because of 'restart'.
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint {sim:/datapath_tb/uut/pe_row_gen[3]/pe_col_gen[3]/pe_inst/*}
add wave -position insertpoint sim:/datapath_tb/uut/c_bram_inst/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 1, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 1, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 1, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
quit -sim
# End time: 15:27:25 on May 16,2025, Elapsed time: 0:14:59
# Errors: 0, Warnings: 23
# Compile of datapath_tb.v was successful.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 15:27:36 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
# WARNING: No extended dataflow license exists
add wave -position insertpoint sim:/datapath_tb/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 1, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 1, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 1, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 0, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 0, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 0, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 0, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 0, Addr 1) with 5d17
#   Loading A[0][2] (Bank 0, Addr 2) with 546c
#   Loading A[0][3] (Bank 0, Addr 3) with 9b65
#   Loading A[1][0] (Bank 1, Addr 0) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 1, Addr 2) with ab63
#   Loading A[1][3] (Bank 1, Addr 3) with 151f
#   Loading A[2][0] (Bank 2, Addr 0) with d2a1
#   Loading A[2][1] (Bank 2, Addr 1) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 2, Addr 3) with 2d93
#   Loading A[3][0] (Bank 3, Addr 0) with 5dc4
#   Loading A[3][1] (Bank 3, Addr 1) with 7b97
#   Loading A[3][2] (Bank 3, Addr 2) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[1][0] (Bank 0, Addr 1) with bfbe
#   Loading B[2][0] (Bank 0, Addr 2) with 588e
#   Loading B[3][0] (Bank 0, Addr 3) with d7f2
#   Loading B[0][1] (Bank 1, Addr 0) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[2][1] (Bank 1, Addr 2) with 7d34
#   Loading B[3][1] (Bank 1, Addr 3) with 450d
#   Loading B[0][2] (Bank 2, Addr 0) with bb59
#   Loading B[1][2] (Bank 2, Addr 1) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[3][2] (Bank 2, Addr 3) with 7124
#   Loading B[0][3] (Bank 3, Addr 0) with 45ee
#   Loading B[1][3] (Bank 3, Addr 1) with f9ff
#   Loading B[2][3] (Bank 3, Addr 2) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 0, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 0, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 0, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 1, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 0, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 0, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 1, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3456000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3456000 Matrix Partition
# ===================================================
# @3456000 Matrix partition ended! 
# @3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 0, Addr 1) with 140c
#   Loading A[0][2] (Bank 0, Addr 2) with 1bbe
#   Loading A[0][3] (Bank 0, Addr 3) with e39e
#   Loading A[1][0] (Bank 1, Addr 0) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 1, Addr 2) with be4d
#   Loading A[1][3] (Bank 1, Addr 3) with 968b
#   Loading A[2][0] (Bank 2, Addr 0) with 8db5
#   Loading A[2][1] (Bank 2, Addr 1) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 2, Addr 3) with 39b3
#   Loading A[3][0] (Bank 3, Addr 0) with 5ef7
#   Loading A[3][1] (Bank 3, Addr 1) with 47ee
#   Loading A[3][2] (Bank 3, Addr 2) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[1][0] (Bank 0, Addr 1) with 5d49
#   Loading B[2][0] (Bank 0, Addr 2) with 21d2
#   Loading B[3][0] (Bank 0, Addr 3) with be24
#   Loading B[0][1] (Bank 1, Addr 0) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[2][1] (Bank 1, Addr 2) with 61c6
#   Loading B[3][1] (Bank 1, Addr 3) with d9cf
#   Loading B[0][2] (Bank 2, Addr 0) with 521e
#   Loading B[1][2] (Bank 2, Addr 1) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[3][2] (Bank 2, Addr 3) with 1b34
#   Loading B[0][3] (Bank 3, Addr 0) with c582
#   Loading B[1][3] (Bank 3, Addr 1) with d7ad
#   Loading B[2][3] (Bank 3, Addr 2) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual 0, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual 0, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual 0, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual 0, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual 0, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual 0, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual 0, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual 0, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual 0, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual 0, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual 0, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual 0, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 1, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4316000 Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4316000 Matrix Partition
# ===================================================
# @4316000 Matrix partition ended! 
# @4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 0, Addr 1) with 8e22
#   Loading A[0][2] (Bank 0, Addr 2) with ddbd
#   Loading A[0][3] (Bank 0, Addr 3) with 9bcd
#   Loading A[1][0] (Bank 1, Addr 0) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 1, Addr 2) with 8f25
#   Loading A[1][3] (Bank 1, Addr 3) with de61
#   Loading A[2][0] (Bank 2, Addr 0) with 5215
#   Loading A[2][1] (Bank 2, Addr 1) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 2, Addr 3) with 0d28
#   Loading A[3][0] (Bank 3, Addr 0) with 4ad1
#   Loading A[3][1] (Bank 3, Addr 1) with dfc6
#   Loading A[3][2] (Bank 3, Addr 2) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[1][0] (Bank 0, Addr 1) with e02c
#   Loading B[2][0] (Bank 0, Addr 2) with 5ba5
#   Loading B[3][0] (Bank 0, Addr 3) with 8bce
#   Loading B[0][1] (Bank 1, Addr 0) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[2][1] (Bank 1, Addr 2) with 7a69
#   Loading B[3][1] (Bank 1, Addr 3) with c8b3
#   Loading B[0][2] (Bank 2, Addr 0) with fde4
#   Loading B[1][2] (Bank 2, Addr 1) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[3][2] (Bank 2, Addr 3) with cf2b
#   Loading B[0][3] (Bank 3, Addr 0) with e7b5
#   Loading B[1][3] (Bank 3, Addr 1) with c1ce
#   Loading B[2][3] (Bank 3, Addr 2) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @5005000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 5...
# Test Case 5 FAIL: C[0][0] mismatch! Actual 0, Expected 0fcc79d2d
# Test Case 5 FAIL: C[0][1] mismatch! Actual 0, Expected 11c95b54b
# Test Case 5 FAIL: C[0][2] mismatch! Actual 0, Expected 072fbe85d
# Test Case 5 FAIL: C[0][3] mismatch! Actual 0, Expected 0fdd281aa
# Test Case 5 FAIL: C[1][0] mismatch! Actual 0, Expected 1f60fe58a
# Test Case 5 FAIL: C[1][1] mismatch! Actual 0, Expected 1b70c8dae
# Test Case 5 FAIL: C[1][2] mismatch! Actual 0, Expected 0cb03b56a
# Test Case 5 FAIL: C[1][3] mismatch! Actual 0, Expected 200198840
# Test Case 5 FAIL: C[2][0] mismatch! Actual 0, Expected 157f56b36
# Test Case 5 FAIL: C[2][1] mismatch! Actual 0, Expected 171a7aeb7
# Test Case 5 FAIL: C[2][2] mismatch! Actual 0, Expected 0b9c40366
# Test Case 5 FAIL: C[2][3] mismatch! Actual 1, Expected 17f004b01
# Test Case 5 FAIL: C[3][0] mismatch! Actual 0, Expected 11de08b16
# Test Case 5 FAIL: C[3][1] mismatch! Actual 0, Expected 1332fb317
# Test Case 5 FAIL: C[3][2] mismatch! Actual 0, Expected 0d279d782
# Test Case 5 FAIL: C[3][3] mismatch! Actual 1, Expected 171e8a4d9
# Test Case 5 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @5176000 Starting Test Case 6 of 100
# ===================================================
# Reading test case 6:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_6/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @5176000 Matrix Partition
# ===================================================
# @5176000 Matrix partition ended! 
# @5176000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 1d8c
#   Loading A[0][1] (Bank 0, Addr 1) with d921
#   Loading A[0][2] (Bank 0, Addr 2) with 3320
#   Loading A[0][3] (Bank 0, Addr 3) with 57f2
#   Loading A[1][0] (Bank 1, Addr 0) with 66e9
#   Loading A[1][1] (Bank 1, Addr 1) with c7a6
#   Loading A[1][2] (Bank 1, Addr 2) with ed08
#   Loading A[1][3] (Bank 1, Addr 3) with 693c
#   Loading A[2][0] (Bank 2, Addr 0) with 75be
#   Loading A[2][1] (Bank 2, Addr 1) with c3b6
#   Loading A[2][2] (Bank 2, Addr 2) with d226
#   Loading A[2][3] (Bank 2, Addr 3) with dd13
#   Loading A[3][0] (Bank 3, Addr 0) with 09fa
#   Loading A[3][1] (Bank 3, Addr 1) with a3a1
#   Loading A[3][2] (Bank 3, Addr 2) with 199a
#   Loading A[3][3] (Bank 3, Addr 3) with a98a
#   Loading B[0][0] (Bank 0, Addr 0) with 65be
#   Loading B[1][0] (Bank 0, Addr 1) with c25b
#   Loading B[2][0] (Bank 0, Addr 2) with 1e50
#   Loading B[3][0] (Bank 0, Addr 3) with bc35
#   Loading B[0][1] (Bank 1, Addr 0) with d8db
#   Loading B[1][1] (Bank 1, Addr 1) with 0095
#   Loading B[2][1] (Bank 1, Addr 2) with 1d83
#   Loading B[3][1] (Bank 1, Addr 3) with 9534
#   Loading B[0][2] (Bank 2, Addr 0) with be9b
#   Loading B[1][2] (Bank 2, Addr 1) with 90b7
#   Loading B[2][2] (Bank 2, Addr 2) with 208b
#   Loading B[3][2] (Bank 2, Addr 3) with 2c78
#   Loading B[0][3] (Bank 3, Addr 0) with fed7
#   Loading B[1][3] (Bank 3, Addr 1) with 2578
#   Loading B[2][3] (Bank 3, Addr 2) with 1bce
#   Loading B[3][3] (Bank 3, Addr 3) with b954
# Matrix loading complete.
# @5515000 Simulating controller signals to execute multiplication...
# @5535000: Starting input feeding sequence...
# @5576000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @5586000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
restart -f
# ** Note: (vsim-12125) Error and warning message counts have been reset to '0' because of 'restart'.
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/pe_row_gen[1]/pe_col_gen[1]/*}
# ** UI-Msg: (vish-4014) No objects found matching '/datapath_tb/uut/pe_row_gen[1]/pe_col_gen[1]/*'.
add wave -position insertpoint {sim:/datapath_tb/uut/pe_row_gen[1]/pe_col_gen[1]/pe_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 1, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 1, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 1, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 0, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 0, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 0, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 0, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 0, Addr 1) with 5d17
#   Loading A[0][2] (Bank 0, Addr 2) with 546c
#   Loading A[0][3] (Bank 0, Addr 3) with 9b65
#   Loading A[1][0] (Bank 1, Addr 0) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 1, Addr 2) with ab63
#   Loading A[1][3] (Bank 1, Addr 3) with 151f
#   Loading A[2][0] (Bank 2, Addr 0) with d2a1
#   Loading A[2][1] (Bank 2, Addr 1) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 2, Addr 3) with 2d93
#   Loading A[3][0] (Bank 3, Addr 0) with 5dc4
#   Loading A[3][1] (Bank 3, Addr 1) with 7b97
#   Loading A[3][2] (Bank 3, Addr 2) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[1][0] (Bank 0, Addr 1) with bfbe
#   Loading B[2][0] (Bank 0, Addr 2) with 588e
#   Loading B[3][0] (Bank 0, Addr 3) with d7f2
#   Loading B[0][1] (Bank 1, Addr 0) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[2][1] (Bank 1, Addr 2) with 7d34
#   Loading B[3][1] (Bank 1, Addr 3) with 450d
#   Loading B[0][2] (Bank 2, Addr 0) with bb59
#   Loading B[1][2] (Bank 2, Addr 1) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[3][2] (Bank 2, Addr 3) with 7124
#   Loading B[0][3] (Bank 3, Addr 0) with 45ee
#   Loading B[1][3] (Bank 3, Addr 1) with f9ff
#   Loading B[2][3] (Bank 3, Addr 2) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
restart -f
# ** Note: (vsim-12125) Error and warning message counts have been reset to '0' because of 'restart'.
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/a_bram_gen[1]/a_bram_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 1, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 1, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 1, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
quit -sim
# End time: 15:35:54 on May 16,2025, Elapsed time: 0:08:18
# Errors: 0, Warnings: 23
# Compile of datapath_tb.v was successful.
vsim work.datapath_tb
# vsim work.datapath_tb 
# Start time: 15:36:04 on May 16,2025
# Loading work.datapath_tb
# Loading work.datapath
# Loading work.bram
# Loading work.pe_no_fifo
# Loading work.multiplier_carrysave
# Loading work.multiplier_adder
# Loading work.full_adder
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 0, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 0, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 0, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 0, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 0, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 0, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 0, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 0, Addr 1) with 5d17
#   Loading A[0][2] (Bank 0, Addr 2) with 546c
#   Loading A[0][3] (Bank 0, Addr 3) with 9b65
#   Loading A[1][0] (Bank 1, Addr 0) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 1, Addr 2) with ab63
#   Loading A[1][3] (Bank 1, Addr 3) with 151f
#   Loading A[2][0] (Bank 2, Addr 0) with d2a1
#   Loading A[2][1] (Bank 2, Addr 1) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 2, Addr 3) with 2d93
#   Loading A[3][0] (Bank 3, Addr 0) with 5dc4
#   Loading A[3][1] (Bank 3, Addr 1) with 7b97
#   Loading A[3][2] (Bank 3, Addr 2) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[1][0] (Bank 0, Addr 1) with bfbe
#   Loading B[2][0] (Bank 0, Addr 2) with 588e
#   Loading B[3][0] (Bank 0, Addr 3) with d7f2
#   Loading B[0][1] (Bank 1, Addr 0) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[2][1] (Bank 1, Addr 2) with 7d34
#   Loading B[3][1] (Bank 1, Addr 3) with 450d
#   Loading B[0][2] (Bank 2, Addr 0) with bb59
#   Loading B[1][2] (Bank 2, Addr 1) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[3][2] (Bank 2, Addr 3) with 7124
#   Loading B[0][3] (Bank 3, Addr 0) with 45ee
#   Loading B[1][3] (Bank 3, Addr 1) with f9ff
#   Loading B[2][3] (Bank 3, Addr 2) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 0, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 0, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 0, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 0, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 0, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 0, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 0, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3456000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3456000 Matrix Partition
# ===================================================
# @3456000 Matrix partition ended! 
# @3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 0, Addr 1) with 140c
#   Loading A[0][2] (Bank 0, Addr 2) with 1bbe
#   Loading A[0][3] (Bank 0, Addr 3) with e39e
#   Loading A[1][0] (Bank 1, Addr 0) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 1, Addr 2) with be4d
#   Loading A[1][3] (Bank 1, Addr 3) with 968b
#   Loading A[2][0] (Bank 2, Addr 0) with 8db5
#   Loading A[2][1] (Bank 2, Addr 1) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 2, Addr 3) with 39b3
#   Loading A[3][0] (Bank 3, Addr 0) with 5ef7
#   Loading A[3][1] (Bank 3, Addr 1) with 47ee
#   Loading A[3][2] (Bank 3, Addr 2) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[1][0] (Bank 0, Addr 1) with 5d49
#   Loading B[2][0] (Bank 0, Addr 2) with 21d2
#   Loading B[3][0] (Bank 0, Addr 3) with be24
#   Loading B[0][1] (Bank 1, Addr 0) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[2][1] (Bank 1, Addr 2) with 61c6
#   Loading B[3][1] (Bank 1, Addr 3) with d9cf
#   Loading B[0][2] (Bank 2, Addr 0) with 521e
#   Loading B[1][2] (Bank 2, Addr 1) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[3][2] (Bank 2, Addr 3) with 1b34
#   Loading B[0][3] (Bank 3, Addr 0) with c582
#   Loading B[1][3] (Bank 3, Addr 1) with d7ad
#   Loading B[2][3] (Bank 3, Addr 2) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
restart -f
# ** Note: (vsim-12125) Error and warning message counts have been reset to '0' because of 'restart'.
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint {sim:/datapath_tb/uut/b_bram_gen[0]/b_bram_inst/*}
add wave -position insertpoint sim:/datapath_tb/*
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 0, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 0, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 0, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @2425000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 2...
# Test Case 2 FAIL: C[0][0] mismatch! Actual 0, Expected 1256afb44
# Test Case 2 FAIL: C[0][1] mismatch! Actual 0, Expected 0a802b700
# Test Case 2 FAIL: C[0][2] mismatch! Actual 0, Expected 14ab18452
# Test Case 2 FAIL: C[0][3] mismatch! Actual 0, Expected 10b0f6da2
# Test Case 2 FAIL: C[1][0] mismatch! Actual 0, Expected 0dc005231
# Test Case 2 FAIL: C[1][1] mismatch! Actual 0, Expected 1246624b9
# Test Case 2 FAIL: C[1][2] mismatch! Actual 0, Expected 0a0f92039
# Test Case 2 FAIL: C[1][3] mismatch! Actual 0, Expected 15ff55788
# Test Case 2 FAIL: C[2][0] mismatch! Actual 0, Expected 127298bf2
# Test Case 2 FAIL: C[2][1] mismatch! Actual 0, Expected 09a39fe82
# Test Case 2 FAIL: C[2][2] mismatch! Actual 0, Expected 11d628ed4
# Test Case 2 FAIL: C[2][3] mismatch! Actual 0, Expected 0ebc29f86
# Test Case 2 FAIL: C[3][0] mismatch! Actual 0, Expected 157fd92a4
# Test Case 2 FAIL: C[3][1] mismatch! Actual 0, Expected 0e166a15e
# Test Case 2 FAIL: C[3][2] mismatch! Actual 0, Expected 14fa163fa
# Test Case 2 FAIL: C[3][3] mismatch! Actual 0, Expected 0fdbfe77c
# Test Case 2 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @2596000 Starting Test Case 3 of 100
# ===================================================
# Reading test case 3:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_3/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @2596000 Matrix Partition
# ===================================================
# @2596000 Matrix partition ended! 
# @2596000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with afa5
#   Loading A[0][1] (Bank 0, Addr 1) with 5d17
#   Loading A[0][2] (Bank 0, Addr 2) with 546c
#   Loading A[0][3] (Bank 0, Addr 3) with 9b65
#   Loading A[1][0] (Bank 1, Addr 0) with 9b77
#   Loading A[1][1] (Bank 1, Addr 1) with 9a1f
#   Loading A[1][2] (Bank 1, Addr 2) with ab63
#   Loading A[1][3] (Bank 1, Addr 3) with 151f
#   Loading A[2][0] (Bank 2, Addr 0) with d2a1
#   Loading A[2][1] (Bank 2, Addr 1) with b7b6
#   Loading A[2][2] (Bank 2, Addr 2) with c544
#   Loading A[2][3] (Bank 2, Addr 3) with 2d93
#   Loading A[3][0] (Bank 3, Addr 0) with 5dc4
#   Loading A[3][1] (Bank 3, Addr 1) with 7b97
#   Loading A[3][2] (Bank 3, Addr 2) with abe3
#   Loading A[3][3] (Bank 3, Addr 3) with 2cee
#   Loading B[0][0] (Bank 0, Addr 0) with 219f
#   Loading B[1][0] (Bank 0, Addr 1) with bfbe
#   Loading B[2][0] (Bank 0, Addr 2) with 588e
#   Loading B[3][0] (Bank 0, Addr 3) with d7f2
#   Loading B[0][1] (Bank 1, Addr 0) with 9ee7
#   Loading B[1][1] (Bank 1, Addr 1) with 8bb8
#   Loading B[2][1] (Bank 1, Addr 2) with 7d34
#   Loading B[3][1] (Bank 1, Addr 3) with 450d
#   Loading B[0][2] (Bank 2, Addr 0) with bb59
#   Loading B[1][2] (Bank 2, Addr 1) with d9bf
#   Loading B[2][2] (Bank 2, Addr 2) with b235
#   Loading B[3][2] (Bank 2, Addr 3) with 7124
#   Loading B[0][3] (Bank 3, Addr 0) with 45ee
#   Loading B[1][3] (Bank 3, Addr 1) with f9ff
#   Loading B[2][3] (Bank 3, Addr 2) with 2b37
#   Loading B[3][3] (Bank 3, Addr 3) with d8cd
# Matrix loading complete.
# @2935000 Simulating controller signals to execute multiplication...
# @2955000: Starting input feeding sequence...
# @2996000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3006000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @3285000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 3...
# Test Case 3 FAIL: C[0][0] mismatch! Actual 0, Expected 12b52ec0d
# Test Case 3 FAIL: C[0][1] mismatch! Actual 0, Expected 1e7207b59
# Test Case 3 FAIL: C[0][2] mismatch! Actual 0, Expected 12b3e7323
# Test Case 3 FAIL: C[0][3] mismatch! Actual 0, Expected 16a97ba9d
# Test Case 3 FAIL: C[1][0] mismatch! Actual 0, Expected 1141865ea
# Test Case 3 FAIL: C[1][1] mismatch! Actual 0, Expected 1aeca2c8d
# Test Case 3 FAIL: C[1][2] mismatch! Actual 0, Expected 100537b2d
# Test Case 3 FAIL: C[1][3] mismatch! Actual 0, Expected 131f40ad4
# Test Case 3 FAIL: C[2][0] mismatch! Actual 0, Expected 134c95817
# Test Case 3 FAIL: C[2][1] mismatch! Actual 0, Expected 1ec6a0029
# Test Case 3 FAIL: C[2][2] mismatch! Actual 0, Expected 1175c48dd
# Test Case 3 FAIL: C[2][3] mismatch! Actual 0, Expected 15e30d376
# Test Case 3 FAIL: C[3][0] mismatch! Actual 0, Expected 04f24de13
# Test Case 3 FAIL: C[3][1] mismatch! Actual 0, Expected 0d28e8dfd
# Test Case 3 FAIL: C[3][2] mismatch! Actual 0, Expected 067649de3
# Test Case 3 FAIL: C[3][3] mismatch! Actual 0, Expected 0c2f83c4f
# Test Case 3 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @3456000 Starting Test Case 4 of 100
# ===================================================
# Reading test case 4:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_4/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @3456000 Matrix Partition
# ===================================================
# @3456000 Matrix partition ended! 
# @3456000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with 354c
#   Loading A[0][1] (Bank 0, Addr 1) with 140c
#   Loading A[0][2] (Bank 0, Addr 2) with 1bbe
#   Loading A[0][3] (Bank 0, Addr 3) with e39e
#   Loading A[1][0] (Bank 1, Addr 0) with b95f
#   Loading A[1][1] (Bank 1, Addr 1) with 5d9c
#   Loading A[1][2] (Bank 1, Addr 2) with be4d
#   Loading A[1][3] (Bank 1, Addr 3) with 968b
#   Loading A[2][0] (Bank 2, Addr 0) with 8db5
#   Loading A[2][1] (Bank 2, Addr 1) with 2c91
#   Loading A[2][2] (Bank 2, Addr 2) with 81ac
#   Loading A[2][3] (Bank 2, Addr 3) with 39b3
#   Loading A[3][0] (Bank 3, Addr 0) with 5ef7
#   Loading A[3][1] (Bank 3, Addr 1) with 47ee
#   Loading A[3][2] (Bank 3, Addr 2) with 0e18
#   Loading A[3][3] (Bank 3, Addr 3) with 3734
#   Loading B[0][0] (Bank 0, Addr 0) with cb4f
#   Loading B[1][0] (Bank 0, Addr 1) with 5d49
#   Loading B[2][0] (Bank 0, Addr 2) with 21d2
#   Loading B[3][0] (Bank 0, Addr 3) with be24
#   Loading B[0][1] (Bank 1, Addr 0) with 874e
#   Loading B[1][1] (Bank 1, Addr 1) with 6a8c
#   Loading B[2][1] (Bank 1, Addr 2) with 61c6
#   Loading B[3][1] (Bank 1, Addr 3) with d9cf
#   Loading B[0][2] (Bank 2, Addr 0) with 521e
#   Loading B[1][2] (Bank 2, Addr 1) with 8d02
#   Loading B[2][2] (Bank 2, Addr 2) with 43ff
#   Loading B[3][2] (Bank 2, Addr 3) with 1b34
#   Loading B[0][3] (Bank 3, Addr 0) with c582
#   Loading B[1][3] (Bank 3, Addr 1) with d7ad
#   Loading B[2][3] (Bank 3, Addr 2) with 6e26
#   Loading B[3][3] (Bank 3, Addr 3) with cb44
# Matrix loading complete.
# @3795000 Simulating controller signals to execute multiplication...
# @3815000: Starting input feeding sequence...
# @3856000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @3866000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @4145000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 4...
# Test Case 4 FAIL: C[0][0] mismatch! Actual 0, Expected 103062c0a
# Test Case 4 FAIL: C[0][1] mismatch! Actual 0, Expected 0fea1eef5
# Test Case 4 FAIL: C[0][2] mismatch! Actual 0, Expected 09c56a3c7
# Test Case 4 FAIL: C[0][3] mismatch! Actual 0, Expected 11fc347e1
# Test Case 4 FAIL: C[1][0] mismatch! Actual 0, Expected 0872fd516
# Test Case 4 FAIL: C[1][1] mismatch! Actual 0, Expected 0836990b4
# Test Case 4 FAIL: C[1][2] mismatch! Actual 0, Expected 0512fc943
# Test Case 4 FAIL: C[1][3] mismatch! Actual 0, Expected 09c61d480
# Test Case 4 FAIL: C[2][0] mismatch! Actual 0, Expected 0af14ba70
# Test Case 4 FAIL: C[2][1] mismatch! Actual 0, Expected 0ac9c50da
# Test Case 4 FAIL: C[2][2] mismatch! Actual 0, Expected 074da324e
# Test Case 4 FAIL: C[2][3] mismatch! Actual 0, Expected 0cf7c514b
# Test Case 4 FAIL: C[3][0] mismatch! Actual 0, Expected 1416ed87e
# Test Case 4 FAIL: C[3][1] mismatch! Actual 0, Expected 0dfe3349c
# Test Case 4 FAIL: C[3][2] mismatch! Actual 0, Expected 07ea50c23
# Test Case 4 FAIL: C[3][3] mismatch! Actual 0, Expected 15b1b52c9
# Test Case 4 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @4316000 Starting Test Case 5 of 100
# ===================================================
# Reading test case 5:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_5/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @4316000 Matrix Partition
# ===================================================
# @4316000 Matrix partition ended! 
# @4316000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c4d6
#   Loading A[0][1] (Bank 0, Addr 1) with 8e22
#   Loading A[0][2] (Bank 0, Addr 2) with ddbd
#   Loading A[0][3] (Bank 0, Addr 3) with 9bcd
#   Loading A[1][0] (Bank 1, Addr 0) with 3054
#   Loading A[1][1] (Bank 1, Addr 1) with b97e
#   Loading A[1][2] (Bank 1, Addr 2) with 8f25
#   Loading A[1][3] (Bank 1, Addr 3) with de61
#   Loading A[2][0] (Bank 2, Addr 0) with 5215
#   Loading A[2][1] (Bank 2, Addr 1) with c9e8
#   Loading A[2][2] (Bank 2, Addr 2) with 5b0c
#   Loading A[2][3] (Bank 2, Addr 3) with 0d28
#   Loading A[3][0] (Bank 3, Addr 0) with 4ad1
#   Loading A[3][1] (Bank 3, Addr 1) with dfc6
#   Loading A[3][2] (Bank 3, Addr 2) with 8758
#   Loading A[3][3] (Bank 3, Addr 3) with b1c8
#   Loading B[0][0] (Bank 0, Addr 0) with 7c9e
#   Loading B[1][0] (Bank 0, Addr 1) with e02c
#   Loading B[2][0] (Bank 0, Addr 2) with 5ba5
#   Loading B[3][0] (Bank 0, Addr 3) with 8bce
#   Loading B[0][1] (Bank 1, Addr 0) with 2988
#   Loading B[1][1] (Bank 1, Addr 1) with 2083
#   Loading B[2][1] (Bank 1, Addr 2) with 7a69
#   Loading B[3][1] (Bank 1, Addr 3) with c8b3
#   Loading B[0][2] (Bank 2, Addr 0) with fde4
#   Loading B[1][2] (Bank 2, Addr 1) with 9a35
#   Loading B[2][2] (Bank 2, Addr 2) with 0388
#   Loading B[3][2] (Bank 2, Addr 3) with cf2b
#   Loading B[0][3] (Bank 3, Addr 0) with e7b5
#   Loading B[1][3] (Bank 3, Addr 1) with c1ce
#   Loading B[2][3] (Bank 3, Addr 2) with 4563
#   Loading B[3][3] (Bank 3, Addr 3) with 8fc3
# Matrix loading complete.
# @4655000 Simulating controller signals to execute multiplication...
# @4675000: Starting input feeding sequence...
# @4716000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @4726000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
restart -f
# ** Note: (vsim-12125) Error and warning message counts have been reset to '0' because of 'restart'.
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(53).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_a_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(55).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'en_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(58).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (1) for port 'we_b_brams_in'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v(60).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut File: /home/lamar/Documents/git/matirx-multiplier-soc/tb/datapath_tb.v Line: 124
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[0]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[1]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[2]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/a_bram_gen[3]/a_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 186
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[0]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[1]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[2]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (4) does not match connection size (32) for port 'addr_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(15).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (16) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/b_bram_gen[3]/b_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 212
# ** Warning: (vsim-3015) [PCDPC] - Port size (34) does not match connection size (32) for port 'din_b'. The port definition is at: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/bram.v(16).
#    Time: 0 ps  Iteration: 0  Instance: /datapath_tb/uut/c_bram_inst File: /home/lamar/Documents/git/matirx-multiplier-soc/rtl/datapath.v Line: 236
# ** Warning: Design size of 8747 instances exceeds ModelSim - Intel FPGA Starter Edition recommended capacity.
# This may because you are loading cell libraries which are not recommended with
# the ModelSim - Intel FPGA Edition. Expect performance to be adversely affected.
add wave -position insertpoint sim:/datapath_tb/*
add wave -position insertpoint {sim:/datapath_tb/uut/pe_row_gen[1]/pe_col_gen[1]/*}
# ** UI-Msg: (vish-4014) No objects found matching '/datapath_tb/uut/pe_row_gen[1]/pe_col_gen[1]/*'.
add wave -position insertpoint {sim:/datapath_tb/uut/pe_row_gen[1]/pe_col_gen[1]/pe_inst/*}
run -all
# --------------------------------------------------
#  Starting Datapath Testbench 
#  Parameters: M=4, K=4, N=4, N_BANKS=4
#  ADDR_WIDTH_A=4, ADDR_WIDTH_B=4, ADDR_WIDTH_C=4, ACC_WIDTH_PE=34
# --------------------------------------------------
# 
# ===================================================
# @20000 Starting Test Case 0 of 100
# ===================================================
# Reading test case 0:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_0/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @20000 Matrix Partition
# ===================================================
# @20000 Matrix partition ended! 
# @20000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with a0b5
#   Loading A[0][1] (Bank 0, Addr 1) with d608
#   Loading A[0][2] (Bank 0, Addr 2) with c866
#   Loading A[0][3] (Bank 0, Addr 3) with 3cda
#   Loading A[1][0] (Bank 1, Addr 0) with af98
#   Loading A[1][1] (Bank 1, Addr 1) with 2dc2
#   Loading A[1][2] (Bank 1, Addr 2) with 23e9
#   Loading A[1][3] (Bank 1, Addr 3) with c10d
#   Loading A[2][0] (Bank 2, Addr 0) with 8053
#   Loading A[2][1] (Bank 2, Addr 1) with acf5
#   Loading A[2][2] (Bank 2, Addr 2) with 2526
#   Loading A[2][3] (Bank 2, Addr 3) with d509
#   Loading A[3][0] (Bank 3, Addr 0) with a306
#   Loading A[3][1] (Bank 3, Addr 1) with 83b8
#   Loading A[3][2] (Bank 3, Addr 2) with 03c5
#   Loading A[3][3] (Bank 3, Addr 3) with d474
#   Loading B[0][0] (Bank 0, Addr 0) with a9ac
#   Loading B[1][0] (Bank 0, Addr 1) with 5df7
#   Loading B[2][0] (Bank 0, Addr 2) with b1e9
#   Loading B[3][0] (Bank 0, Addr 3) with ffdb
#   Loading B[0][1] (Bank 1, Addr 0) with e346
#   Loading B[1][1] (Bank 1, Addr 1) with a889
#   Loading B[2][1] (Bank 1, Addr 2) with f159
#   Loading B[3][1] (Bank 1, Addr 3) with a525
#   Loading B[0][2] (Bank 2, Addr 0) with 8b0f
#   Loading B[1][2] (Bank 2, Addr 1) with f418
#   Loading B[2][2] (Bank 2, Addr 2) with 2d32
#   Loading B[3][2] (Bank 2, Addr 3) with eea9
#   Loading B[0][3] (Bank 3, Addr 0) with df56
#   Loading B[1][3] (Bank 3, Addr 1) with eaca
#   Loading B[2][3] (Bank 3, Addr 2) with 58f3
#   Loading B[3][3] (Bank 3, Addr 3) with 98bb
# Matrix loading complete.
# @355000 Simulating controller signals to execute multiplication...
# @375000: Starting input feeding sequence...
# @416000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @426000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @705000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 0...
# Test Case 0 FAIL: C[0][0] mismatch! Actual 0, Expected 1da54d60d
# Test Case 0 FAIL: C[0][1] mismatch! Actual 0, Expected 1be75ca7f
# Test Case 0 FAIL: C[0][2] mismatch! Actual 0, Expected 16487037d
# Test Case 0 FAIL: C[0][3] mismatch! Actual 0, Expected 1eac8a4fc
# Test Case 0 FAIL: C[1][0] mismatch! Actual 0, Expected 187574f97
# Test Case 0 FAIL: C[1][1] mismatch! Actual 0, Expected 18a6710b2
# Test Case 0 FAIL: C[1][2] mismatch! Actual 0, Expected 10c2f003c
# Test Case 0 FAIL: C[1][3] mismatch! Actual 0, Expected 1e3412307
# Test Case 0 FAIL: C[2][0] mismatch! Actual 0, Expected 0bc2b15a6
# Test Case 0 FAIL: C[2][1] mismatch! Actual 0, Expected 08813471d
# Test Case 0 FAIL: C[2][2] mismatch! Actual 0, Expected 0b4fdfb42
# Test Case 0 FAIL: C[2][3] mismatch! Actual 0, Expected 10454f9ec
# Test Case 0 FAIL: C[3][0] mismatch! Actual 0, Expected 200c8e685
# Test Case 0 FAIL: C[3][1] mismatch! Actual 0, Expected 22367f8ab
# Test Case 0 FAIL: C[3][2] mismatch! Actual 0, Expected 14fb831cd
# Test Case 0 FAIL: C[3][3] mismatch! Actual 0, Expected 1feb58e0c
# Test Case 0 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @876000 Starting Test Case 1 of 100
# ===================================================
# Reading test case 1:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_1/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @876000 Matrix Partition
# ===================================================
# @876000 Matrix partition ended! 
# @876000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with c743
#   Loading A[0][1] (Bank 0, Addr 1) with 5aa8
#   Loading A[0][2] (Bank 0, Addr 2) with 8f3a
#   Loading A[0][3] (Bank 0, Addr 3) with 8985
#   Loading A[1][0] (Bank 1, Addr 0) with afa9
#   Loading A[1][1] (Bank 1, Addr 1) with 9e2e
#   Loading A[1][2] (Bank 1, Addr 2) with 46a4
#   Loading A[1][3] (Bank 1, Addr 3) with 6146
#   Loading A[2][0] (Bank 2, Addr 0) with 1106
#   Loading A[2][1] (Bank 2, Addr 1) with 2d5f
#   Loading A[2][2] (Bank 2, Addr 2) with 77da
#   Loading A[2][3] (Bank 2, Addr 3) with 90e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7557
#   Loading A[3][1] (Bank 3, Addr 1) with 9d29
#   Loading A[3][2] (Bank 3, Addr 2) with 2570
#   Loading A[3][3] (Bank 3, Addr 3) with da2a
#   Loading B[0][0] (Bank 0, Addr 0) with ac9f
#   Loading B[1][0] (Bank 0, Addr 1) with 739f
#   Loading B[2][0] (Bank 0, Addr 2) with f536
#   Loading B[3][0] (Bank 0, Addr 3) with 0439
#   Loading B[0][1] (Bank 1, Addr 0) with be69
#   Loading B[1][1] (Bank 1, Addr 1) with f866
#   Loading B[2][1] (Bank 1, Addr 2) with 73aa
#   Loading B[3][1] (Bank 1, Addr 3) with 0ef6
#   Loading B[0][2] (Bank 2, Addr 0) with dcb6
#   Loading B[1][2] (Bank 2, Addr 1) with 83fa
#   Loading B[2][2] (Bank 2, Addr 2) with ac6c
#   Loading B[3][2] (Bank 2, Addr 3) with e7b6
#   Loading B[0][3] (Bank 3, Addr 0) with 0bc6
#   Loading B[1][3] (Bank 3, Addr 1) with 0b6b
#   Loading B[2][3] (Bank 3, Addr 2) with e080
#   Loading B[3][3] (Bank 3, Addr 3) with c08e
# Matrix loading complete.
# @1215000 Simulating controller signals to execute multiplication...
# @1235000: Starting input feeding sequence...
# @1276000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @1286000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 2: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
#   Waiting for PE outputs to become valid (Latency = 3 cycles)...
#   Capturing PE outputs into buffer...
#   PE output buffer valid.
#   Writing from buffer to C BRAM...
#   Writing buffer element 0 to C BRAM address 0
#   Writing buffer element 1 to C BRAM address 1
#   Writing buffer element 2 to C BRAM address 2
#   Writing buffer element 3 to C BRAM address 3
#   Writing buffer element 4 to C BRAM address 4
#   Writing buffer element 5 to C BRAM address 5
#   Writing buffer element 6 to C BRAM address 6
#   Writing buffer element 7 to C BRAM address 7
#   Writing buffer element 8 to C BRAM address 8
#   Writing buffer element 9 to C BRAM address 9
#   Writing buffer element 10 to C BRAM address 10
#   Writing buffer element 11 to C BRAM address 11
#   Writing buffer element 12 to C BRAM address 12
#   Writing buffer element 13 to C BRAM address 13
#   Writing buffer element 14 to C BRAM address 14
#   Writing buffer element 15 to C BRAM address 15
# Multiplication execution sequence complete.
# @1565000 Reading result from C BRAM via Port B and verifying...
# Verifying results for test case 1...
# Test Case 1 FAIL: C[0][0] mismatch! Actual 0, Expected 11d17017c
# Test Case 1 FAIL: C[0][1] mismatch! Actual 0, Expected 112730b2c
# Test Case 1 FAIL: C[0][2] mismatch! Actual 0, Expected 18098ba64
# Test Case 1 FAIL: C[0][3] mismatch! Actual 1, Expected 075384ed7
# Test Case 1 FAIL: C[1][0] mismatch! Actual 0, Expected 0e1206976
# Test Case 1 FAIL: C[1][1] mismatch! Actual 0, Expected 0e0d3bb95
# Test Case 1 FAIL: C[1][2] mismatch! Actual 0, Expected 146af0890
# Test Case 1 FAIL: C[1][3] mismatch! Actual 0, Expected 0aa043ae4
# Test Case 1 FAIL: C[2][0] mismatch! Actual 0, Expected 0fe2befe6
# Test Case 1 FAIL: C[2][1] mismatch! Actual 0, Expected 0c4b01712
# Test Case 1 FAIL: C[2][2] mismatch! Actual 0, Expected 11aa90d1c
# Test Case 1 FAIL: C[2][3] mismatch! Actual 0, Expected 08f21549e
# Test Case 1 FAIL: C[3][0] mismatch! Actual 0, Expected 12c066279
# Test Case 1 FAIL: C[3][1] mismatch! Actual 0, Expected 0f0eadac1
# Test Case 1 FAIL: C[3][2] mismatch! Actual 0, Expected 1d09321e2
# Test Case 1 FAIL: C[3][3] mismatch! Actual 0, Expected 12f2f71d9
# Test Case 1 FAILED - 16 errors (100.00%).
# --------------------------------------
# Result verification complete.
# 
# ===================================================
# @1736000 Starting Test Case 2 of 100
# ===================================================
# Reading test case 2:                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_A.txt,                                                                              /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/matrix_B.txt, and                                                                            /home/lamar/Documents/git/matrix-multiplier/testcases/test_2/expected_C.txt
# Matrices and expected C read successfully.
# 
# ===================================================
# @1736000 Matrix Partition
# ===================================================
# @1736000 Matrix partition ended! 
# @1736000 Loading matrices A and B into BRAMs via Port A...
#   Loading A[0][0] (Bank 0, Addr 0) with f288
#   Loading A[0][1] (Bank 0, Addr 1) with 62dc
#   Loading A[0][2] (Bank 0, Addr 2) with 3050
#   Loading A[0][3] (Bank 0, Addr 3) with 630d
#   Loading A[1][0] (Bank 1, Addr 0) with 5a10
#   Loading A[1][1] (Bank 1, Addr 1) with 6489
#   Loading A[1][2] (Bank 1, Addr 2) with 1c72
#   Loading A[1][3] (Bank 1, Addr 3) with 8cfe
#   Loading A[2][0] (Bank 2, Addr 0) with 152a
#   Loading A[2][1] (Bank 2, Addr 1) with fb2b
#   Loading A[2][2] (Bank 2, Addr 2) with 9f04
#   Loading A[2][3] (Bank 2, Addr 3) with 66e2
#   Loading A[3][0] (Bank 3, Addr 0) with 7c5c
#   Loading A[3][1] (Bank 3, Addr 1) with 2e47
#   Loading A[3][2] (Bank 3, Addr 2) with e566
#   Loading A[3][3] (Bank 3, Addr 3) with e4d9
#   Loading B[0][0] (Bank 0, Addr 0) with 9a6b
#   Loading B[1][0] (Bank 0, Addr 1) with 4f78
#   Loading B[2][0] (Bank 0, Addr 2) with cae3
#   Loading B[3][0] (Bank 0, Addr 3) with d6f0
#   Loading B[0][1] (Bank 1, Addr 0) with 5626
#   Loading B[1][1] (Bank 1, Addr 1) with d7b1
#   Loading B[2][1] (Bank 1, Addr 2) with 2383
#   Loading B[3][1] (Bank 1, Addr 3) with 402d
#   Loading B[0][2] (Bank 2, Addr 0) with 5768
#   Loading B[1][2] (Bank 2, Addr 1) with b3a8
#   Loading B[2][2] (Bank 2, Addr 2) with 16ef
#   Loading B[3][2] (Bank 2, Addr 3) with f07d
#   Loading B[0][3] (Bank 3, Addr 0) with e199
#   Loading B[1][3] (Bank 3, Addr 1) with 0418
#   Loading B[2][3] (Bank 3, Addr 2) with ff73
#   Loading B[3][3] (Bank 3, Addr 3) with 2b2c
# Matrix loading complete.
# @2075000 Simulating controller signals to execute multiplication...
# @2095000: Starting input feeding sequence...
# @2136000: Pre-fetching BRAM data for k_step = 0. Addresses set.
# @2146000: BRAM read for k_step = 0 initiated. Data will be ready next cycle.
#   Accumulation step 0: pe_start_in=1, pe_valid_in_in=1, pe_last_in=0
#   Accumulation step 1: pe_start_in=0, pe_valid_in_in=1, pe_last_in=0
# End time: 16:09:41 on May 16,2025, Elapsed time: 0:33:37
# Errors: 0, Warnings: 23
